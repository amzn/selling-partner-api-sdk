/**
 * Selling Partner API for Direct Fulfillment Transaction Status
 * The Selling Partner API for Direct Fulfillment Transaction Status provides programmatic access to a direct fulfillment vendor's transaction status.
 *
 * The version of the OpenAPI document: 2021-12-28
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {Error} from '../model/Error.js';
import {ErrorList} from '../model/ErrorList.js';
import {TransactionStatus} from '../model/TransactionStatus.js';

/**
* VendorTransaction service.
* @module vendordftransactions_v2021_12_28/api/VendorTransactionApi
* @version 2021-12-28
*/
export class VendorTransactionApi {

    /**
    * Constructs a new VendorTransactionApi. 
    * @alias module:vendordftransactions_v2021_12_28/api/VendorTransactionApi
    * @class
    * @param {module:vendordftransactions_v2021_12_28/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:vendordftransactions_v2021_12_28/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the status of the transaction indicated by the specified transactionId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} transactionId Previously returned in the response to the POST request of a specific transaction.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:vendordftransactions_v2021_12_28/model/TransactionStatus} and HTTP response
     */
    getTransactionStatusWithHttpInfo(transactionId) {
      let postBody = null;

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransactionStatus");
      }


      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionStatus;

      return this.apiClient.callApi(
        '/vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the status of the transaction indicated by the specified transactionId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} transactionId Previously returned in the response to the POST request of a specific transaction.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:vendordftransactions_v2021_12_28/model/TransactionStatus}
     */
    getTransactionStatus(transactionId) {
      return this.getTransactionStatusWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
