/**
 * The Selling Partner API for Amazon Warehousing and Distribution
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { DistributionPackageContents } from './DistributionPackageContents.js'
import { DistributionPackageType } from './DistributionPackageType.js'
import { MeasurementData } from './MeasurementData.js'

/**
 * The DistributionPackage model module.
 * @module awd_v2024_05_09/model/DistributionPackage
 * @version 2024-05-09
 */
export class DistributionPackage {
  /**
   * Constructs a new <code>DistributionPackage</code>.
   * Represents an AWD distribution package.
   * @alias module:awd_v2024_05_09/model/DistributionPackage
   * @class
   * @param contents {DistributionPackageContents}
   * @param measurements {MeasurementData}
   * @param type {DistributionPackageType}
   */
  constructor (contents, measurements, type) {
    this.contents = contents
    this.measurements = measurements
    this.type = type
  }

  /**
   * Constructs a <code>DistributionPackage</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {DistributionPackage} obj Optional instance to populate.
   * @return {DistributionPackage} The populated <code>DistributionPackage</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new DistributionPackage()
      if (data.hasOwnProperty('contents')) { obj.contents = DistributionPackageContents.constructFromObject(data.contents) }
      if (data.hasOwnProperty('measurements')) { obj.measurements = MeasurementData.constructFromObject(data.measurements) }
      if (data.hasOwnProperty('type')) { obj.type = DistributionPackageType.constructFromObject(data.type) }
    }
    return obj
  }
}

/**
 * @member {DistributionPackageContents} contents
 * @type {DistributionPackageContents}
 */
DistributionPackage.prototype.contents = undefined

/**
 * @member {MeasurementData} measurements
 * @type {MeasurementData}
 */
DistributionPackage.prototype.measurements = undefined

/**
 * @member {DistributionPackageType} type
 * @type {DistributionPackageType}
 */
DistributionPackage.prototype.type = undefined
