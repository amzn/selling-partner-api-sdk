/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { Currency } from './Currency.js'
import { TransactionAccount } from './TransactionAccount.js'
import { TransactionStatus } from './TransactionStatus.js'
import { TransactionType } from './TransactionType.js'
import { TransferRatePreview } from './TransferRatePreview.js'

/**
 * The Transaction model module.
 * @module sellerWallet_2024_03_01/model/Transaction
 * @version 2024-03-01
 */
export class Transaction {
  /**
   * Constructs a new <code>Transaction</code>.
   * The current transaction status and historical details related to it.
   * @alias module:sellerWallet_2024_03_01/model/Transaction
   * @class
   * @param transactionId {String} The unique identifier provided by Amazon to the transaction.
   * @param transactionType {module:sellerWallet_2024_03_01/model/TransactionType}
   * @param transactionStatus {module:sellerWallet_2024_03_01/model/TransactionStatus}
   * @param transactionRequestDate {Date} The date on which the transaction was initiated.
   * @param lastUpdateDate {Date} The date of the most recent account balance update.
   * @param transactionRequesterSource {String} The transaction initiation source. This value could be the Amazon portal or PISP name that the customer used to start the transaction.
   * @param transactionDescription {String} The description provided by the requester in the transaction request at time of transaction initiation.
   * @param transactionSourceAccount {module:sellerWallet_2024_03_01/model/TransactionAccount}
   * @param transactionDestinationAccount {module:sellerWallet_2024_03_01/model/TransactionAccount}
   * @param transactionRequestAmount {module:sellerWallet_2024_03_01/model/Currency}
   * @param transferRateDetails {module:sellerWallet_2024_03_01/model/TransferRatePreview}
   */
  constructor (transactionId, transactionType, transactionStatus, transactionRequestDate, lastUpdateDate, transactionRequesterSource, transactionDescription, transactionSourceAccount, transactionDestinationAccount, transactionRequestAmount, transferRateDetails) {
    this.transactionId = transactionId
    this.transactionType = transactionType
    this.transactionStatus = transactionStatus
    this.transactionRequestDate = transactionRequestDate
    this.lastUpdateDate = lastUpdateDate
    this.transactionRequesterSource = transactionRequesterSource
    this.transactionDescription = transactionDescription
    this.transactionSourceAccount = transactionSourceAccount
    this.transactionDestinationAccount = transactionDestinationAccount
    this.transactionRequestAmount = transactionRequestAmount
    this.transferRateDetails = transferRateDetails
  }

  /**
   * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024_03_01/model/Transaction} obj Optional instance to populate.
   * @return {module:sellerWallet_2024_03_01/model/Transaction} The populated <code>Transaction</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new Transaction()
      if (data.hasOwnProperty('transactionId')) { obj.transactionId = ApiClient.convertToType(data.transactionId, 'String') }
      if (data.hasOwnProperty('transactionType')) { obj.transactionType = TransactionType.constructFromObject(data.transactionType) }
      if (data.hasOwnProperty('transactionStatus')) { obj.transactionStatus = TransactionStatus.constructFromObject(data.transactionStatus) }
      if (data.hasOwnProperty('transactionRequestDate')) { obj.transactionRequestDate = ApiClient.convertToType(data.transactionRequestDate, 'Date') }
      if (data.hasOwnProperty('expectedCompletionDate')) { obj.expectedCompletionDate = ApiClient.convertToType(data.expectedCompletionDate, 'Date') }
      if (data.hasOwnProperty('transactionActualCompletionDate')) { obj.transactionActualCompletionDate = ApiClient.convertToType(data.transactionActualCompletionDate, 'Date') }
      if (data.hasOwnProperty('lastUpdateDate')) { obj.lastUpdateDate = ApiClient.convertToType(data.lastUpdateDate, 'Date') }
      if (data.hasOwnProperty('requesterName')) { obj.requesterName = ApiClient.convertToType(data.requesterName, 'String') }
      if (data.hasOwnProperty('transactionRequesterSource')) { obj.transactionRequesterSource = ApiClient.convertToType(data.transactionRequesterSource, 'String') }
      if (data.hasOwnProperty('transactionDescription')) { obj.transactionDescription = ApiClient.convertToType(data.transactionDescription, 'String') }
      if (data.hasOwnProperty('transactionSourceAccount')) { obj.transactionSourceAccount = TransactionAccount.constructFromObject(data.transactionSourceAccount) }
      if (data.hasOwnProperty('transactionDestinationAccount')) { obj.transactionDestinationAccount = TransactionAccount.constructFromObject(data.transactionDestinationAccount) }
      if (data.hasOwnProperty('transactionRequestAmount')) { obj.transactionRequestAmount = Currency.constructFromObject(data.transactionRequestAmount) }
      if (data.hasOwnProperty('transferRateDetails')) { obj.transferRateDetails = TransferRatePreview.constructFromObject(data.transferRateDetails) }
      if (data.hasOwnProperty('transactionFinalAmount')) { obj.transactionFinalAmount = Currency.constructFromObject(data.transactionFinalAmount) }
      if (data.hasOwnProperty('transactionFailureReason')) { obj.transactionFailureReason = ApiClient.convertToType(data.transactionFailureReason, 'String') }
    }
    return obj
  }
}

/**
 * The unique identifier provided by Amazon to the transaction.
 * @member {String} transactionId
 */
Transaction.prototype.transactionId = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/TransactionType} transactionType
 */
Transaction.prototype.transactionType = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/TransactionStatus} transactionStatus
 */
Transaction.prototype.transactionStatus = undefined

/**
 * The date on which the transaction was initiated.
 * @member {Date} transactionRequestDate
 */
Transaction.prototype.transactionRequestDate = undefined

/**
 * The expected completion date of the transaction.
 * @member {Date} expectedCompletionDate
 */
Transaction.prototype.expectedCompletionDate = undefined

/**
 * The transaction's completion date.
 * @member {Date} transactionActualCompletionDate
 */
Transaction.prototype.transactionActualCompletionDate = undefined

/**
 * The date of the most recent account balance update.
 * @member {Date} lastUpdateDate
 */
Transaction.prototype.lastUpdateDate = undefined

/**
 * The Amazon Seller Wallet customer who requested the transaction.
 * @member {String} requesterName
 */
Transaction.prototype.requesterName = undefined

/**
 * The transaction initiation source. This value could be the Amazon portal or PISP name that the customer used to start the transaction.
 * @member {String} transactionRequesterSource
 */
Transaction.prototype.transactionRequesterSource = undefined

/**
 * The description provided by the requester in the transaction request at time of transaction initiation.
 * @member {String} transactionDescription
 */
Transaction.prototype.transactionDescription = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/TransactionAccount} transactionSourceAccount
 */
Transaction.prototype.transactionSourceAccount = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/TransactionAccount} transactionDestinationAccount
 */
Transaction.prototype.transactionDestinationAccount = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/Currency} transactionRequestAmount
 */
Transaction.prototype.transactionRequestAmount = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/TransferRatePreview} transferRateDetails
 */
Transaction.prototype.transferRateDetails = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/Currency} transactionFinalAmount
 */
Transaction.prototype.transactionFinalAmount = undefined

/**
 * The reason the transaction failed, if applicable.
 * @member {String} transactionFailureReason
 */
Transaction.prototype.transactionFailureReason = undefined
