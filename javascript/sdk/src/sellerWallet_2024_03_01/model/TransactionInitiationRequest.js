/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { AccountHolderAddress } from './AccountHolderAddress.js'
import { Currency } from './Currency.js'
import { TransactionInstrumentDetails } from './TransactionInstrumentDetails.js'
import { TransferRatePreview } from './TransferRatePreview.js'

/**
 * The TransactionInitiationRequest model module.
 * @module sellerWallet_2024_03_01/model/TransactionInitiationRequest
 * @version 2024-03-01
 */
export class TransactionInitiationRequest {
  /**
   * Constructs a new <code>TransactionInitiationRequest</code>.
   * Request body to initiate a transaction from a Seller Wallet bank account to another customer-defined bank account.
   * @alias module:sellerWallet_2024_03_01/model/TransactionInitiationRequest
   * @class
   * @param sourceAccountId {String} The unique identifier of the source Amazon Seller Wallet bank account from which the money is debited.
   * @param description {String} A description of the transaction.
   * @param destinationTransactionInstrument {module:sellerWallet_2024_03_01/model/TransactionInstrumentDetails}
   * @param sourceAmount {module:sellerWallet_2024_03_01/model/Currency}
   * @param requestTime {Date} The time at which the transaction was initiated in [ISO 8601 date time format](https://developer-docs.amazon.com/sp-api/docs/iso-8601).
   */
  constructor (sourceAccountId, description, destinationTransactionInstrument, sourceAmount, requestTime) {
    this.sourceAccountId = sourceAccountId
    this.description = description
    this.destinationTransactionInstrument = destinationTransactionInstrument
    this.sourceAmount = sourceAmount
    this.requestTime = requestTime
  }

  /**
   * Constructs a <code>TransactionInitiationRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024_03_01/model/TransactionInitiationRequest} obj Optional instance to populate.
   * @return {module:sellerWallet_2024_03_01/model/TransactionInitiationRequest} The populated <code>TransactionInitiationRequest</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new TransactionInitiationRequest()
      if (data.hasOwnProperty('sourceAccountId')) { obj.sourceAccountId = ApiClient.convertToType(data.sourceAccountId, 'String') }
      if (data.hasOwnProperty('destinationAccountId')) { obj.destinationAccountId = ApiClient.convertToType(data.destinationAccountId, 'String') }
      if (data.hasOwnProperty('description')) { obj.description = ApiClient.convertToType(data.description, 'String') }
      if (data.hasOwnProperty('destinationTransactionInstrument')) { obj.destinationTransactionInstrument = TransactionInstrumentDetails.constructFromObject(data.destinationTransactionInstrument) }
      if (data.hasOwnProperty('destinationAccountHolderAddress')) { obj.destinationAccountHolderAddress = AccountHolderAddress.constructFromObject(data.destinationAccountHolderAddress) }
      if (data.hasOwnProperty('sourceAmount')) { obj.sourceAmount = Currency.constructFromObject(data.sourceAmount) }
      if (data.hasOwnProperty('transferRateDetails')) { obj.transferRateDetails = TransferRatePreview.constructFromObject(data.transferRateDetails) }
      if (data.hasOwnProperty('requestTime')) { obj.requestTime = ApiClient.convertToType(data.requestTime, 'Date') }
    }
    return obj
  }
}

/**
 * The unique identifier of the source Amazon Seller Wallet bank account from which the money is debited.
 * @member {String} sourceAccountId
 */
TransactionInitiationRequest.prototype.sourceAccountId = undefined

/**
 * The unique identifier of the destination bank account where the money is deposited.
 * @member {String} destinationAccountId
 */
TransactionInitiationRequest.prototype.destinationAccountId = undefined

/**
 * A description of the transaction.
 * @member {String} description
 */
TransactionInitiationRequest.prototype.description = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/TransactionInstrumentDetails} destinationTransactionInstrument
 */
TransactionInitiationRequest.prototype.destinationTransactionInstrument = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/AccountHolderAddress} destinationAccountHolderAddress
 */
TransactionInitiationRequest.prototype.destinationAccountHolderAddress = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/Currency} sourceAmount
 */
TransactionInitiationRequest.prototype.sourceAmount = undefined

/**
 * @member {module:sellerWallet_2024_03_01/model/TransferRatePreview} transferRateDetails
 */
TransactionInitiationRequest.prototype.transferRateDetails = undefined

/**
 * The time at which the transaction was initiated in [ISO 8601 date time format](https://developer-docs.amazon.com/sp-api/docs/iso-8601).
 * @member {Date} requestTime
 */
TransactionInitiationRequest.prototype.requestTime = undefined
