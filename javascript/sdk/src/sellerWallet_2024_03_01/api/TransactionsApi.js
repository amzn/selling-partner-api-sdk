/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { ErrorList } from '../model/ErrorList.js'
import { Transaction } from '../model/Transaction.js'
import { TransactionInitiationRequest } from '../model/TransactionInitiationRequest.js'
import { TransactionListing } from '../model/TransactionListing.js'
import { SuperagentRateLimiter } from '../../../helper/SuperagentRateLimiter.mjs'
import { DefaultRateLimitFetcher } from '../../../helper/DefaultRateLimitFetcher.mjs'

/**
* Transactions service.
* @module sellerWallet_2024_03_01/api/TransactionsApi
* @version 2024-03-01
*/
export class TransactionsApi {
  // Private memeber stores the default rate limiters
  #defaultRateLimiterMap

  /**
    * Constructs a new TransactionsApi.
    * @alias module:sellerWallet_2024_03_01/api/TransactionsApi
    * @class
    * @param {module:sellerWallet_2024_03_01/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:sellerWallet_2024_03_01/ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
    this.initializeDefaultRateLimiterMap()
  }

  /**
     * Initialize rate limiters for API operations
     */
  initializeDefaultRateLimiterMap () {
    this.#defaultRateLimiterMap = new Map()
    const defaultRateLimitFetcher = new DefaultRateLimitFetcher()
    const operations = [
      'TransactionsApi-createTransaction',
      'TransactionsApi-getTransaction',
      'TransactionsApi-listAccountTransactions'
    ]

    for (const operation of operations) {
      const config = defaultRateLimitFetcher.getLimit(operation)
      this.#defaultRateLimiterMap.set(operation, new SuperagentRateLimiter(config))
    }
  }

  /**
     * Get rate limiter for a specific operation
     * @param {String} operation name
     */
  getRateLimiter (operation) {
    return this.#defaultRateLimiterMap.get(operation)
  }

  /**
     * Create a transaction request from Amazon Seller Wallet account to another customer-provided account
     * Create a transaction request from an Amazon Seller Wallet account to another customer-provided account.
     * @param {String} destAccountDigitalSignature Digital signature for the destination bank account details.
     * @param {String} amountDigitalSignature Digital signature for the source currency transaction amount.
     * @param {module:sellerWallet_2024_03_01/model/TransactionInitiationRequest} body The payload of the request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sellerWallet_2024_03_01/model/Transaction} and HTTP response
     */
  createTransactionWithHttpInfo (destAccountDigitalSignature, amountDigitalSignature, body) {
    const postBody = body

    // verify the required parameter 'destAccountDigitalSignature' is set
    if (destAccountDigitalSignature === undefined || destAccountDigitalSignature === null) {
      throw new Error("Missing the required parameter 'destAccountDigitalSignature' when calling createTransaction")
    }

    // verify the required parameter 'amountDigitalSignature' is set
    if (amountDigitalSignature === undefined || amountDigitalSignature === null) {
      throw new Error("Missing the required parameter 'amountDigitalSignature' when calling createTransaction")
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createTransaction")
    }

    const pathParams = {
    }
    const queryParams = {
    }
    const headerParams = {
      destAccountDigitalSignature,
      amountDigitalSignature
    }
    const formParams = {
    }

    const contentTypes = ['application/json']
    const accepts = ['application/json']
    const returnType = Transaction

    return this.apiClient.callApi('TransactionsApi-createTransaction',
      '/finances/transfers/wallet/2024-03-01/transactions', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('TransactionsApi-createTransaction')
    )
  }

  /**
     * Create a transaction request from Amazon Seller Wallet account to another customer-provided account
     * Create a transaction request from an Amazon Seller Wallet account to another customer-provided account.
     * @param {String} destAccountDigitalSignature Digital signature for the destination bank account details.
     * @param {String} amountDigitalSignature Digital signature for the source currency transaction amount.
     * @param {module:sellerWallet_2024_03_01/model/TransactionInitiationRequest} body The payload of the request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sellerWallet_2024_03_01/model/Transaction}
     */
  createTransaction (destAccountDigitalSignature, amountDigitalSignature, body) {
    return this.createTransactionWithHttpInfo(destAccountDigitalSignature, amountDigitalSignature, body)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier
     * Find a transaction by the Amazon transaction identifier.
     * @param {String} transactionId The ID of the Amazon Seller Wallet transaction.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sellerWallet_2024_03_01/model/Transaction} and HTTP response
     */
  getTransactionWithHttpInfo (transactionId) {
    const postBody = null

    // verify the required parameter 'transactionId' is set
    if (transactionId === undefined || transactionId === null) {
      throw new Error("Missing the required parameter 'transactionId' when calling getTransaction")
    }

    const pathParams = {
      transactionId
    }
    const queryParams = {
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = Transaction

    return this.apiClient.callApi('TransactionsApi-getTransaction',
      '/finances/transfers/wallet/2024-03-01/transactions/{transactionId}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('TransactionsApi-getTransaction')
    )
  }

  /**
     * Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier
     * Find a transaction by the Amazon transaction identifier.
     * @param {String} transactionId The ID of the Amazon Seller Wallet transaction.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sellerWallet_2024_03_01/model/Transaction}
     */
  getTransaction (transactionId) {
    return this.getTransactionWithHttpInfo(transactionId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date
     * Retrieve a list of transactions for a given Amazon Seller Wallet bank account.
     * @param {String} accountId The ID of the Amazon Seller Wallet account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sellerWallet_2024_03_01/model/TransactionListing} and HTTP response
     */
  listAccountTransactionsWithHttpInfo (accountId, opts) {
    opts = opts || {}
    const postBody = null

    // verify the required parameter 'accountId' is set
    if (accountId === undefined || accountId === null) {
      throw new Error("Missing the required parameter 'accountId' when calling listAccountTransactions")
    }

    const pathParams = {
    }
    const queryParams = {
      accountId,
      nextPageToken: opts.nextPageToken
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = TransactionListing

    return this.apiClient.callApi('TransactionsApi-listAccountTransactions',
      '/finances/transfers/wallet/2024-03-01/transactions', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('TransactionsApi-listAccountTransactions')
    )
  }

  /**
     * The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date
     * Retrieve a list of transactions for a given Amazon Seller Wallet bank account.
     * @param {String} accountId The ID of the Amazon Seller Wallet account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sellerWallet_2024_03_01/model/TransactionListing}
     */
  listAccountTransactions (accountId, opts) {
    return this.listAccountTransactionsWithHttpInfo(accountId, opts)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }
}
