/**
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {ItemVariationTheme} from './ItemVariationTheme.js';

/**
 * The ItemRelationship model module.
 * @module listingsitems_v2021_08_01/model/ItemRelationship
 * @version 2021-08-01
 */
export class ItemRelationship {
  /**
   * Constructs a new <code>ItemRelationship</code>.
   * the relationship details for a listing item.
   * @alias module:listingsitems_v2021_08_01/model/ItemRelationship
   * @class
   * @param type {module:listingsitems_v2021_08_01/model/ItemRelationship.TypeEnum} The type of relationship.
   */
  constructor(type) {
    this.type = type;
  }

  /**
   * Constructs a <code>ItemRelationship</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:listingsitems_v2021_08_01/model/ItemRelationship} obj Optional instance to populate.
   * @return {module:listingsitems_v2021_08_01/model/ItemRelationship} The populated <code>ItemRelationship</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new ItemRelationship();
      if (data.hasOwnProperty('childSkus'))
        obj.childSkus = ApiClient.convertToType(data['childSkus'], ['String']);
      if (data.hasOwnProperty('parentSkus'))
        obj.parentSkus = ApiClient.convertToType(data['parentSkus'], ['String']);
      if (data.hasOwnProperty('variationTheme'))
        obj.variationTheme = ItemVariationTheme.constructFromObject(data['variationTheme']);
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
    }
    return obj;
  }
}

/**
 * Identifiers (SKUs) of the related items that are children of this listing item.
 * @member {Array.<String>} childSkus
 */
ItemRelationship.prototype.childSkus = undefined;

/**
 * Identifiers (SKUs) of the related items that are parents of this listing item.
 * @member {Array.<String>} parentSkus
 */
ItemRelationship.prototype.parentSkus = undefined;

/**
 * @member {module:listingsitems_v2021_08_01/model/ItemVariationTheme} variationTheme
 */
ItemRelationship.prototype.variationTheme = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ItemRelationship['TypeEnum'] = {

    /**
     * value: "VARIATION"
     * @const
     */
    "VARIATION": "VARIATION",

    /**
     * value: "PACKAGE_HIERARCHY"
     * @const
     */
    "PACKAGE_HIERARCHY": "PACKAGE_HIERARCHY"
};

/**
 * The type of relationship.
 * @member {module:listingsitems_v2021_08_01/model/ItemRelationship.TypeEnum} type
 */
ItemRelationship.prototype.type = undefined;


