/**
 * The Selling Partner API for third party application integrations.
 * With the AppIntegrations API v2024-04-01, you can send notifications to Amazon Selling Partners and display the notifications in Seller Central.
 *
 * The version of the OpenAPI document: 2024-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The CreateNotificationRequest model module.
 * @module appintegrations_v2024_04_01/model/CreateNotificationRequest
 * @version 2024-04-01
 */
export class CreateNotificationRequest {
  /**
   * Constructs a new <code>CreateNotificationRequest</code>.
   * The request for the &#x60;createNotification&#x60; operation.
   * @alias module:appintegrations_v2024_04_01/model/CreateNotificationRequest
   * @class
   * @param templateId {String} The unique identifier of the notification template you used to onboard your application.
   * @param notificationParameters {Object.<String, Object>} The dynamic parameters required by the notification templated specified by `templateId`.
   */
  constructor(templateId, notificationParameters) {
    this.templateId = templateId;
    this.notificationParameters = notificationParameters;
  }

  /**
   * Constructs a <code>CreateNotificationRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:appintegrations_v2024_04_01/model/CreateNotificationRequest} obj Optional instance to populate.
   * @return {module:appintegrations_v2024_04_01/model/CreateNotificationRequest} The populated <code>CreateNotificationRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new CreateNotificationRequest();
      if (data.hasOwnProperty('templateId'))
        obj.templateId = ApiClient.convertToType(data['templateId'], 'String');
      if (data.hasOwnProperty('notificationParameters'))
        obj.notificationParameters = ApiClient.convertToType(data['notificationParameters'], {'String': Object});
      if (data.hasOwnProperty('marketplaceId'))
        obj.marketplaceId = ApiClient.convertToType(data['marketplaceId'], 'String');
    }
    return obj;
  }
}

/**
 * The unique identifier of the notification template you used to onboard your application.
 * @member {String} templateId
 */
CreateNotificationRequest.prototype.templateId = undefined;

/**
 * The dynamic parameters required by the notification templated specified by `templateId`.
 * @member {Object.<String, Object>} notificationParameters
 */
CreateNotificationRequest.prototype.notificationParameters = undefined;

/**
 * An encrypted marketplace identifier for the posted notification.
 * @member {String} marketplaceId
 */
CreateNotificationRequest.prototype.marketplaceId = undefined;


