/**
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The TotalWeight model module.
 * @module vendorshipments_v1/model/TotalWeight
 * @version v1
 */
export class TotalWeight {
  /**
   * Constructs a new <code>TotalWeight</code>.
   * The total weight of units that are sold by weight in a shipment.
   * @alias module:vendorshipments_v1/model/TotalWeight
   * @class
   * @param unitOfMeasure {module:vendorshipments_v1/model/TotalWeight.UnitOfMeasureEnum} The unit of measure for the weight of items that are ordered by cases and support pricing by weight.
   * @param amount {String} A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
   */
  constructor(unitOfMeasure, amount) {
    this.unitOfMeasure = unitOfMeasure;
    this.amount = amount;
  }

  /**
   * Constructs a <code>TotalWeight</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:vendorshipments_v1/model/TotalWeight} obj Optional instance to populate.
   * @return {module:vendorshipments_v1/model/TotalWeight} The populated <code>TotalWeight</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new TotalWeight();
      if (data.hasOwnProperty('unitOfMeasure'))
        obj.unitOfMeasure = ApiClient.convertToType(data['unitOfMeasure'], 'String');
      if (data.hasOwnProperty('amount'))
        obj.amount = ApiClient.convertToType(data['amount'], 'String');
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>unitOfMeasure</code> property.
 * @enum {String}
 * @readonly
 */
TotalWeight['UnitOfMeasureEnum'] = {

    /**
     * value: "POUNDS"
     * @const
     */
    "POUNDS": "POUNDS",

    /**
     * value: "OUNCES"
     * @const
     */
    "OUNCES": "OUNCES",

    /**
     * value: "GRAMS"
     * @const
     */
    "GRAMS": "GRAMS",

    /**
     * value: "KILOGRAMS"
     * @const
     */
    "KILOGRAMS": "KILOGRAMS"
};

/**
 * The unit of measure for the weight of items that are ordered by cases and support pricing by weight.
 * @member {module:vendorshipments_v1/model/TotalWeight.UnitOfMeasureEnum} unitOfMeasure
 */
TotalWeight.prototype.unitOfMeasure = undefined;

/**
 * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
 * @member {String} amount
 */
TotalWeight.prototype.amount = undefined;


