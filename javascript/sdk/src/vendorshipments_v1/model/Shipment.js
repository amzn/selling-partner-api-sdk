/**
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {CollectFreightPickupDetails} from './CollectFreightPickupDetails.js';
import {Containers} from './Containers.js';
import {ImportDetails} from './ImportDetails.js';
import {PartyIdentification} from './PartyIdentification.js';
import {PurchaseOrders} from './PurchaseOrders.js';
import {ShipmentStatusDetails} from './ShipmentStatusDetails.js';
import {TransportShipmentMeasurements} from './TransportShipmentMeasurements.js';
import {TransportationDetails} from './TransportationDetails.js';

/**
 * The Shipment model module.
 * @module vendorshipments_v1/model/Shipment
 * @version v1
 */
export class Shipment {
  /**
   * Constructs a new <code>Shipment</code>.
   * A list of one or more shipments with respective details.
   * @alias module:vendorshipments_v1/model/Shipment
   * @class
   * @param vendorShipmentIdentifier {String} Unique Transportation ID created by Vendor (Should not be used over the last 365 days).
   * @param transactionType {module:vendorshipments_v1/model/Shipment.TransactionTypeEnum} Indicates the type of  transportation request such as (New,Cancel,Confirm and PackageLabelRequest). Each transactiontype has a unique set of operation and there are corresponding details to be populated for each operation.
   * @param transactionDate {Date} Date on which the transportation request was submitted.
   * @param sellingParty {module:vendorshipments_v1/model/PartyIdentification} 
   * @param shipFromParty {module:vendorshipments_v1/model/PartyIdentification} 
   * @param shipToParty {module:vendorshipments_v1/model/PartyIdentification} 
   */
  constructor(vendorShipmentIdentifier, transactionType, transactionDate, sellingParty, shipFromParty, shipToParty) {
    this.vendorShipmentIdentifier = vendorShipmentIdentifier;
    this.transactionType = transactionType;
    this.transactionDate = transactionDate;
    this.sellingParty = sellingParty;
    this.shipFromParty = shipFromParty;
    this.shipToParty = shipToParty;
  }

  /**
   * Constructs a <code>Shipment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:vendorshipments_v1/model/Shipment} obj Optional instance to populate.
   * @return {module:vendorshipments_v1/model/Shipment} The populated <code>Shipment</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Shipment();
      if (data.hasOwnProperty('vendorShipmentIdentifier'))
        obj.vendorShipmentIdentifier = ApiClient.convertToType(data['vendorShipmentIdentifier'], 'String');
      if (data.hasOwnProperty('transactionType'))
        obj.transactionType = ApiClient.convertToType(data['transactionType'], 'String');
      if (data.hasOwnProperty('buyerReferenceNumber'))
        obj.buyerReferenceNumber = ApiClient.convertToType(data['buyerReferenceNumber'], 'String');
      if (data.hasOwnProperty('transactionDate'))
        obj.transactionDate = ApiClient.convertToType(data['transactionDate'], 'Date');
      if (data.hasOwnProperty('currentShipmentStatus'))
        obj.currentShipmentStatus = ApiClient.convertToType(data['currentShipmentStatus'], 'String');
      if (data.hasOwnProperty('currentshipmentStatusDate'))
        obj.currentshipmentStatusDate = ApiClient.convertToType(data['currentshipmentStatusDate'], 'Date');
      if (data.hasOwnProperty('shipmentStatusDetails'))
        obj.shipmentStatusDetails = ApiClient.convertToType(data['shipmentStatusDetails'], [ShipmentStatusDetails]);
      if (data.hasOwnProperty('shipmentCreateDate'))
        obj.shipmentCreateDate = ApiClient.convertToType(data['shipmentCreateDate'], 'Date');
      if (data.hasOwnProperty('shipmentConfirmDate'))
        obj.shipmentConfirmDate = ApiClient.convertToType(data['shipmentConfirmDate'], 'Date');
      if (data.hasOwnProperty('packageLabelCreateDate'))
        obj.packageLabelCreateDate = ApiClient.convertToType(data['packageLabelCreateDate'], 'Date');
      if (data.hasOwnProperty('shipmentFreightTerm'))
        obj.shipmentFreightTerm = ApiClient.convertToType(data['shipmentFreightTerm'], 'String');
      if (data.hasOwnProperty('sellingParty'))
        obj.sellingParty = PartyIdentification.constructFromObject(data['sellingParty']);
      if (data.hasOwnProperty('shipFromParty'))
        obj.shipFromParty = PartyIdentification.constructFromObject(data['shipFromParty']);
      if (data.hasOwnProperty('shipToParty'))
        obj.shipToParty = PartyIdentification.constructFromObject(data['shipToParty']);
      if (data.hasOwnProperty('shipmentMeasurements'))
        obj.shipmentMeasurements = TransportShipmentMeasurements.constructFromObject(data['shipmentMeasurements']);
      if (data.hasOwnProperty('collectFreightPickupDetails'))
        obj.collectFreightPickupDetails = CollectFreightPickupDetails.constructFromObject(data['collectFreightPickupDetails']);
      if (data.hasOwnProperty('purchaseOrders'))
        obj.purchaseOrders = ApiClient.convertToType(data['purchaseOrders'], [PurchaseOrders]);
      if (data.hasOwnProperty('importDetails'))
        obj.importDetails = ImportDetails.constructFromObject(data['importDetails']);
      if (data.hasOwnProperty('containers'))
        obj.containers = ApiClient.convertToType(data['containers'], [Containers]);
      if (data.hasOwnProperty('transportationDetails'))
        obj.transportationDetails = TransportationDetails.constructFromObject(data['transportationDetails']);
    }
    return obj;
  }
}

/**
 * Unique Transportation ID created by Vendor (Should not be used over the last 365 days).
 * @member {String} vendorShipmentIdentifier
 */
Shipment.prototype.vendorShipmentIdentifier = undefined;

/**
 * Allowed values for the <code>transactionType</code> property.
 * @enum {String}
 * @readonly
 */
Shipment['TransactionTypeEnum'] = {

    /**
     * value: "New"
     * @const
     */
    "New": "New",

    /**
     * value: "Cancel"
     * @const
     */
    "Cancel": "Cancel"
};

/**
 * Indicates the type of  transportation request such as (New,Cancel,Confirm and PackageLabelRequest). Each transactiontype has a unique set of operation and there are corresponding details to be populated for each operation.
 * @member {module:vendorshipments_v1/model/Shipment.TransactionTypeEnum} transactionType
 */
Shipment.prototype.transactionType = undefined;

/**
 * The buyer Reference Number is a unique identifier generated by buyer for all Collect/WePay shipments when you submit a transportation request. This field is mandatory for Collect/WePay shipments.
 * @member {String} buyerReferenceNumber
 */
Shipment.prototype.buyerReferenceNumber = undefined;

/**
 * Date on which the transportation request was submitted.
 * @member {Date} transactionDate
 */
Shipment.prototype.transactionDate = undefined;

/**
 * Allowed values for the <code>currentShipmentStatus</code> property.
 * @enum {String}
 * @readonly
 */
Shipment['CurrentShipmentStatusEnum'] = {

    /**
     * value: "Created"
     * @const
     */
    "Created": "Created",

    /**
     * value: "TransportationRequested"
     * @const
     */
    "TransportationRequested": "TransportationRequested",

    /**
     * value: "CarrierAssigned"
     * @const
     */
    "CarrierAssigned": "CarrierAssigned",

    /**
     * value: "Shipped"
     * @const
     */
    "Shipped": "Shipped"
};

/**
 * Indicates the current shipment status.
 * @member {module:vendorshipments_v1/model/Shipment.CurrentShipmentStatusEnum} currentShipmentStatus
 */
Shipment.prototype.currentShipmentStatus = undefined;

/**
 * Date and time when the last status was updated.
 * @member {Date} currentshipmentStatusDate
 */
Shipment.prototype.currentshipmentStatusDate = undefined;

/**
 * Indicates the list of current shipment status details and when the last update was received from carrier this is available on shipment Details response.
 * @member {Array.<module:vendorshipments_v1/model/ShipmentStatusDetails>} shipmentStatusDetails
 */
Shipment.prototype.shipmentStatusDetails = undefined;

/**
 * The date and time of the shipment request created by vendor.
 * @member {Date} shipmentCreateDate
 */
Shipment.prototype.shipmentCreateDate = undefined;

/**
 * The date and time of the departure of the shipment from the vendor's location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Buyer destination warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future.
 * @member {Date} shipmentConfirmDate
 */
Shipment.prototype.shipmentConfirmDate = undefined;

/**
 * The date and time of the package label created for the shipment by buyer.
 * @member {Date} packageLabelCreateDate
 */
Shipment.prototype.packageLabelCreateDate = undefined;

/**
 * Allowed values for the <code>shipmentFreightTerm</code> property.
 * @enum {String}
 * @readonly
 */
Shipment['ShipmentFreightTermEnum'] = {

    /**
     * value: "Collect"
     * @const
     */
    "Collect": "Collect",

    /**
     * value: "Prepaid"
     * @const
     */
    "Prepaid": "Prepaid"
};

/**
 * Indicates if this transportation request is WePay/Collect or TheyPay/Prepaid. This is a mandatory information.
 * @member {module:vendorshipments_v1/model/Shipment.ShipmentFreightTermEnum} shipmentFreightTerm
 */
Shipment.prototype.shipmentFreightTerm = undefined;

/**
 * @member {module:vendorshipments_v1/model/PartyIdentification} sellingParty
 */
Shipment.prototype.sellingParty = undefined;

/**
 * @member {module:vendorshipments_v1/model/PartyIdentification} shipFromParty
 */
Shipment.prototype.shipFromParty = undefined;

/**
 * @member {module:vendorshipments_v1/model/PartyIdentification} shipToParty
 */
Shipment.prototype.shipToParty = undefined;

/**
 * @member {module:vendorshipments_v1/model/TransportShipmentMeasurements} shipmentMeasurements
 */
Shipment.prototype.shipmentMeasurements = undefined;

/**
 * @member {module:vendorshipments_v1/model/CollectFreightPickupDetails} collectFreightPickupDetails
 */
Shipment.prototype.collectFreightPickupDetails = undefined;

/**
 * Indicates the purchase orders involved for the transportation request. This group is an array create 1 for each PO and list their corresponding items. This information is used for deciding the route,truck allocation and storage efficiently. This is a mandatory information for Buyer performing transportation from vendor warehouse (WePay/Collect)
 * @member {Array.<module:vendorshipments_v1/model/PurchaseOrders>} purchaseOrders
 */
Shipment.prototype.purchaseOrders = undefined;

/**
 * @member {module:vendorshipments_v1/model/ImportDetails} importDetails
 */
Shipment.prototype.importDetails = undefined;

/**
 * A list of the items in this transportation and their associated inner container details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
 * @member {Array.<module:vendorshipments_v1/model/Containers>} containers
 */
Shipment.prototype.containers = undefined;

/**
 * @member {module:vendorshipments_v1/model/TransportationDetails} transportationDetails
 */
Shipment.prototype.transportationDetails = undefined;


