/**
 * The Shipment model module.
 * @module vendorshipments_v1/model/Shipment
 * @version v1
 */
export class Shipment {
    /**
     * Constructs a <code>Shipment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {Shipment} obj Optional instance to populate.
     * @return {Shipment} The populated <code>Shipment</code> instance.
     */
    static constructFromObject(data: any, obj: Shipment): Shipment;
    /**
     * Constructs a new <code>Shipment</code>.
     * A list of one or more shipments with respective details.
     * @alias module:vendorshipments_v1/model/Shipment
     * @class
     * @param vendorShipmentIdentifier {String} Unique Transportation ID created by Vendor (Should not be used over the last 365 days).
     * @param transactionType {String} Indicates the type of transportation request (for example, `New` or `Cancel`). Each `transactionType` has a unique set of operations and there are corresponding details to be populated for each operation.
     * @param transactionDate {Date} Date on which the transportation request was submitted.
     * @param sellingParty {PartyIdentification}
     * @param shipFromParty {PartyIdentification}
     * @param shipToParty {PartyIdentification}
     */
    constructor(vendorShipmentIdentifier: string, transactionType: string, transactionDate: Date, sellingParty: PartyIdentification, shipFromParty: PartyIdentification, shipToParty: PartyIdentification);
    vendorShipmentIdentifier: string;
    transactionType: string;
    transactionDate: Date;
    sellingParty: PartyIdentification;
    shipFromParty: PartyIdentification;
    shipToParty: PartyIdentification;
    /**
     * The buyer Reference Number is a unique identifier generated by buyer for all Collect/WePay shipments when you submit a transportation request. This field is mandatory for Collect/WePay shipments.
     * @member {String} buyerReferenceNumber
     * @type {String}
     */
    buyerReferenceNumber: string;
    /**
     * Indicates the current shipment status.
     * @member {String} currentShipmentStatus
     * @type {String}
     */
    currentShipmentStatus: string;
    /**
     * Date and time when the last status was updated.
     * @member {Date} currentshipmentStatusDate
     * @type {Date}
     */
    currentshipmentStatusDate: Date;
    /**
     * Indicates the list of current shipment status details and when the last update was received from carrier this is available on shipment Details response.
     * @member {[ShipmentStatusDetails]} shipmentStatusDetails
     * @type {[ShipmentStatusDetails]}
     */
    shipmentStatusDetails: [ShipmentStatusDetails];
    /**
     * The date and time of the shipment request created by vendor.
     * @member {Date} shipmentCreateDate
     * @type {Date}
     */
    shipmentCreateDate: Date;
    /**
     * The date and time of the departure of the shipment from the vendor's location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Buyer destination warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future.
     * @member {Date} shipmentConfirmDate
     * @type {Date}
     */
    shipmentConfirmDate: Date;
    /**
     * The date and time of the package label created for the shipment by buyer.
     * @member {Date} packageLabelCreateDate
     * @type {Date}
     */
    packageLabelCreateDate: Date;
    /**
     * Specifies if payment is Collect (WePay) or Prepaid (TheyPay). Required.
     * @member {String} shipmentFreightTerm
     * @type {String}
     */
    shipmentFreightTerm: string;
    /**
     * @member {TransportShipmentMeasurements} shipmentMeasurements
     * @type {TransportShipmentMeasurements}
     */
    shipmentMeasurements: TransportShipmentMeasurements;
    /**
     * @member {CollectFreightPickupDetails} collectFreightPickupDetails
     * @type {CollectFreightPickupDetails}
     */
    collectFreightPickupDetails: CollectFreightPickupDetails;
    /**
     * Indicates the purchase orders involved for the transportation request. This group is an array create 1 for each PO and list their corresponding items. This information is used for deciding the route,truck allocation and storage efficiently. This is a mandatory information for Buyer performing transportation from vendor warehouse (WePay/Collect)
     * @member {[PurchaseOrders]} purchaseOrders
     * @type {[PurchaseOrders]}
     */
    purchaseOrders: [PurchaseOrders];
    /**
     * @member {ImportDetails} importDetails
     * @type {ImportDetails}
     */
    importDetails: ImportDetails;
    /**
     * A list of the items in this transportation and their associated inner container details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
     * @member {[Containers]} containers
     * @type {[Containers]}
     */
    containers: [Containers];
    /**
     * @member {TransportationDetails} transportationDetails
     * @type {TransportationDetails}
     */
    transportationDetails: TransportationDetails;
}
export namespace Shipment {
    namespace TransactionTypeEnum {
        let New: string;
        let Cancel: string;
    }
    /**
     * *
     */
    type TransactionTypeEnum = string;
    namespace CurrentShipmentStatusEnum {
        let Created: string;
        let TransportationRequested: string;
        let CarrierAssigned: string;
        let Shipped: string;
    }
    /**
     * *
     */
    type CurrentShipmentStatusEnum = string;
    namespace ShipmentFreightTermEnum {
        let Collect: string;
        let Prepaid: string;
    }
    /**
     * *
     */
    type ShipmentFreightTermEnum = string;
}
import { PartyIdentification } from './PartyIdentification.js';
import { ShipmentStatusDetails } from './ShipmentStatusDetails.js';
import { TransportShipmentMeasurements } from './TransportShipmentMeasurements.js';
import { CollectFreightPickupDetails } from './CollectFreightPickupDetails.js';
import { PurchaseOrders } from './PurchaseOrders.js';
import { ImportDetails } from './ImportDetails.js';
import { Containers } from './Containers.js';
import { TransportationDetails } from './TransportationDetails.js';
//# sourceMappingURL=Shipment.d.ts.map