/**
 * The Selling Partner API for External Fulfillment Inventory Management
 * You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.
 *
 * The version of the OpenAPI document: 2024-09-11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { ActionableError } from './ActionableError.js'
import { MarketplaceAttributes } from './MarketplaceAttributes.js'

/**
 * The InventoryResponseBody model module.
 * @module externalfulfillmentinventory_v2024_09_11/model/InventoryResponseBody
 * @version 2024-09-11
 */
export class InventoryResponseBody {
  /**
   * Constructs a new <code>InventoryResponseBody</code>.
   * The response to an inventory request.
   * @alias module:externalfulfillmentinventory_v2024_09_11/model/InventoryResponseBody
   * @class
   */
  constructor () {
  }

  /**
   * Constructs a <code>InventoryResponseBody</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {InventoryResponseBody} obj Optional instance to populate.
   * @return {InventoryResponseBody} The populated <code>InventoryResponseBody</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new InventoryResponseBody()
      if (data.hasOwnProperty('clientSequenceNumber')) { obj.clientSequenceNumber = ApiClient.convertToType(data.clientSequenceNumber, 'Number') }
      if (data.hasOwnProperty('locationId')) { obj.locationId = ApiClient.convertToType(data.locationId, 'String') }
      if (data.hasOwnProperty('skuId')) { obj.skuId = ApiClient.convertToType(data.skuId, 'String') }
      if (data.hasOwnProperty('sellableQuantity')) { obj.sellableQuantity = ApiClient.convertToType(data.sellableQuantity, 'Number') }
      if (data.hasOwnProperty('reservedQuantity')) { obj.reservedQuantity = ApiClient.convertToType(data.reservedQuantity, 'Number') }
      if (data.hasOwnProperty('marketplaceAttributes')) { obj.marketplaceAttributes = MarketplaceAttributes.constructFromObject(data.marketplaceAttributes) }
      if (data.hasOwnProperty('actionableErrors')) { obj.actionableErrors = ApiClient.convertToType(data.actionableErrors, [ActionableError]) }
    }
    return obj
  }
}

/**
 * Latest sequence number for an inventory update.
 * @member {Number} clientSequenceNumber
 * @type {Number}
 */
InventoryResponseBody.prototype.clientSequenceNumber = undefined

/**
 * The location where inventory is updated or retrieved.
 * @member {String} locationId
 * @type {String}
 */
InventoryResponseBody.prototype.locationId = undefined

/**
 * The SKU ID for which inventory is updated or retrieved
 * @member {String} skuId
 * @type {String}
 */
InventoryResponseBody.prototype.skuId = undefined

/**
 * The number of items of the specified SKU that are available for purchase.
 * @member {Number} sellableQuantity
 * @type {Number}
 */
InventoryResponseBody.prototype.sellableQuantity = undefined

/**
 * The number of items of the specified SKU created in any marketplace that are reserved for shipment and yet to be fulfilled.
 * @member {Number} reservedQuantity
 * @type {Number}
 */
InventoryResponseBody.prototype.reservedQuantity = undefined

/**
 * @member {MarketplaceAttributes} marketplaceAttributes
 * @type {MarketplaceAttributes}
 */
InventoryResponseBody.prototype.marketplaceAttributes = undefined

/**
 * Inventory operation errors that require seller action before retrying the inventory request.
 * @member {[ActionableError]} actionableErrors
 * @type {[ActionableError]}
 */
InventoryResponseBody.prototype.actionableErrors = undefined
