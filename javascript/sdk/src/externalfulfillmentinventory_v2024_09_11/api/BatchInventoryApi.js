/**
 * The Selling Partner API for External Fulfillment Inventory Management
 * You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.
 *
 * The version of the OpenAPI document: 2024-09-11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { BatchInventoryRequest } from '../model/BatchInventoryRequest.js'
import { BatchInventoryResponse } from '../model/BatchInventoryResponse.js'
import { ErrorList } from '../model/ErrorList.js'
import { SuperagentRateLimiter } from '../../../helper/SuperagentRateLimiter.mjs'
import { DefaultRateLimitFetcher } from '../../../helper/DefaultRateLimitFetcher.mjs'

/**
* BatchInventory service.
* @module externalfulfillmentinventory_v2024_09_11/api/BatchInventoryApi
* @version 2024-09-11
*/
export class BatchInventoryApi {
  // Private member stores the default rate limiters
  #defaultRateLimiterMap

  /**
    * Constructs a new BatchInventoryApi.
    * @alias module:externalfulfillmentinventory_v2024_09_11/api/BatchInventoryApi
    * @class
    * @param {ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
    this.initializeDefaultRateLimiterMap()
  }

  /**
     * Initialize rate limiters for API operations
     */
  initializeDefaultRateLimiterMap () {
    this.#defaultRateLimiterMap = new Map()
    const defaultRateLimitFetcher = new DefaultRateLimitFetcher()
    const operations = [
      'BatchInventoryApi-batchInventory'
    ]

    for (const operation of operations) {
      const config = defaultRateLimitFetcher.getLimit(operation)
      this.#defaultRateLimiterMap.set(operation, new SuperagentRateLimiter(config))
    }
  }

  /**
     * Get rate limiter for a specific operation
     * @param {String} operation name
     */
  getRateLimiter (operation) {
    return this.#defaultRateLimiterMap.get(operation)
  }

  /**
     * Make up to 10 inventory requests. The response includes the set of responses that correspond to requests. The response for each successful request in the set includes the  inventory count for the provided &#x60;sku&#x60; and &#x60;locationId&#x60; pair.
     * @param {BatchInventoryRequest} body A list of inventory requests.
     * @return {Promise<BatchInventoryResponse>}
     */
  batchInventoryWithHttpInfo (body) {
    const postBody = body

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling batchInventory")
    }

    const pathParams = {
    }
    const queryParams = {
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = ['application/json']
    const accepts = ['application/json']
    const returnType = BatchInventoryResponse

    return this.apiClient.callApi('BatchInventoryApi-batchInventory',
      '/externalFulfillment/inventory/2024-09-11/inventories', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('BatchInventoryApi-batchInventory')
    )
  }

  /**
     * Make up to 10 inventory requests. The response includes the set of responses that correspond to requests. The response for each successful request in the set includes the  inventory count for the provided &#x60;sku&#x60; and &#x60;locationId&#x60; pair.
     * @param {BatchInventoryRequest} body A list of inventory requests.
     * @return {Promise<BatchInventoryResponse>}
     */
  batchInventory (body) {
    return this.batchInventoryWithHttpInfo(body)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }
}
