/**
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'

/**
 * The Amount model module.
 * @module externalfulfillmentshipments_v2024_09_11/model/Amount
 * @version 2024-09-11
 */
export class Amount {
  /**
   * Constructs a new <code>Amount</code>.
   * An amount of money, including units in the form of currency.
   * @alias module:externalfulfillmentshipments_v2024_09_11/model/Amount
   * @class
   * @param value {String} A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies.
   * @param currencyCode {String} Three digit currency code in ISO 4217 format.
   */
  constructor (value, currencyCode) {
    this.value = value
    this.currencyCode = currencyCode
  }

  /**
   * Constructs a <code>Amount</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {Amount} obj Optional instance to populate.
   * @return {Amount} The populated <code>Amount</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new Amount()
      if (data.hasOwnProperty('value')) { obj.value = ApiClient.convertToType(data.value, 'String') }
      if (data.hasOwnProperty('currencyCode')) { obj.currencyCode = ApiClient.convertToType(data.currencyCode, 'String') }
    }
    return obj
  }
}

/**
 * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies.
 * @member {String} value
 * @type {String}
 */
Amount.prototype.value = undefined

/**
 * Three digit currency code in ISO 4217 format.
 * @member {String} currencyCode
 * @type {String}
 */
Amount.prototype.currencyCode = undefined
