/**
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'

/**
 * The Address model module.
 * @module externalfulfillmentshipments_v2024_09_11/model/Address
 * @version 2024-09-11
 */
export class Address {
  /**
   * Constructs a new <code>Address</code>.
   * The address.
   * @alias module:externalfulfillmentshipments_v2024_09_11/model/Address
   * @class
   * @param postalCode {String} The postal code of the address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
   */
  constructor (postalCode) {
    this.postalCode = postalCode
  }

  /**
   * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {Address} obj Optional instance to populate.
   * @return {Address} The populated <code>Address</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new Address()
      if (data.hasOwnProperty('name')) { obj.name = ApiClient.convertToType(data.name, 'String') }
      if (data.hasOwnProperty('addressLine1')) { obj.addressLine1 = ApiClient.convertToType(data.addressLine1, 'String') }
      if (data.hasOwnProperty('addressLine2')) { obj.addressLine2 = ApiClient.convertToType(data.addressLine2, 'String') }
      if (data.hasOwnProperty('addressLine3')) { obj.addressLine3 = ApiClient.convertToType(data.addressLine3, 'String') }
      if (data.hasOwnProperty('district')) { obj.district = ApiClient.convertToType(data.district, 'String') }
      if (data.hasOwnProperty('municipality')) { obj.municipality = ApiClient.convertToType(data.municipality, 'String') }
      if (data.hasOwnProperty('state')) { obj.state = ApiClient.convertToType(data.state, 'String') }
      if (data.hasOwnProperty('city')) { obj.city = ApiClient.convertToType(data.city, 'String') }
      if (data.hasOwnProperty('countryCode')) { obj.countryCode = ApiClient.convertToType(data.countryCode, 'String') }
      if (data.hasOwnProperty('postalCode')) { obj.postalCode = ApiClient.convertToType(data.postalCode, 'String') }
      if (data.hasOwnProperty('email')) { obj.email = ApiClient.convertToType(data.email, 'String') }
      if (data.hasOwnProperty('copyEmails')) { obj.copyEmails = ApiClient.convertToType(data.copyEmails, ['String']) }
      if (data.hasOwnProperty('phoneNumber')) { obj.phoneNumber = ApiClient.convertToType(data.phoneNumber, 'String') }
      if (data.hasOwnProperty('addressType')) { obj.addressType = ApiClient.convertToType(data.addressType, 'String') }
    }
    return obj
  }
}

/**
 * The name of the person, business or institution at that address.
 * @member {String} name
 * @type {String}
 */
Address.prototype.name = undefined

/**
 * The first line of the address.
 * @member {String} addressLine1
 * @type {String}
 */
Address.prototype.addressLine1 = undefined

/**
 * Additional address information, if required.
 * @member {String} addressLine2
 * @type {String}
 */
Address.prototype.addressLine2 = undefined

/**
 * Additional address information, if required.
 * @member {String} addressLine3
 * @type {String}
 */
Address.prototype.addressLine3 = undefined

/**
 * The district or state where the person, business, or institution is located.
 * @member {String} district
 * @type {String}
 */
Address.prototype.district = undefined

/**
 * The municiplaity where the person, business, or institution is located.
 * @member {String} municipality
 * @type {String}
 */
Address.prototype.municipality = undefined

/**
 * The state or region where the person, business, or institution is located.
 * @member {String} state
 * @type {String}
 */
Address.prototype.state = undefined

/**
 * The city where the person, business, or institution is located.
 * @member {String} city
 * @type {String}
 */
Address.prototype.city = undefined

/**
 * The two digit country code. In ISO 3166-1 alpha-2 format.
 * @member {String} countryCode
 * @type {String}
 */
Address.prototype.countryCode = undefined

/**
 * The postal code of the address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
 * @member {String} postalCode
 * @type {String}
 */
Address.prototype.postalCode = undefined

/**
 * The email address of the contact associated with the address.
 * @member {String} email
 * @type {String}
 */
Address.prototype.email = undefined

/**
 * The email cc addresses of the contact associated with the address.
 * @member {[String]} copyEmails
 * @type {[String]}
 */
Address.prototype.copyEmails = undefined

/**
 * The phone number of the person, business, or institution located at the address.
 * @member {String} phoneNumber
 * @type {String}
 */
Address.prototype.phoneNumber = undefined

/**
 * The type of address.
 * @member {String} addressType
 * @type {String}
 */
Address.prototype.addressType = undefined
