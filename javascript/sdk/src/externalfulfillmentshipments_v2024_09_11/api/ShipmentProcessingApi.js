/**
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { ErrorList } from '../model/ErrorList.js'
import { InvoiceResponse } from '../model/InvoiceResponse.js'
import { Package } from '../model/Package.js'
import { PackageDeliveryStatus } from '../model/PackageDeliveryStatus.js'
import { Packages } from '../model/Packages.js'
import { ShipLabelsInput } from '../model/ShipLabelsInput.js'
import { ShipLabelsResponse } from '../model/ShipLabelsResponse.js'
import { ShipmentAcknowledgementRequest } from '../model/ShipmentAcknowledgementRequest.js'
import { ShippingOptionsResponse } from '../model/ShippingOptionsResponse.js'
import { SuperagentRateLimiter } from '../../../helper/SuperagentRateLimiter.mjs'
import { DefaultRateLimitFetcher } from '../../../helper/DefaultRateLimitFetcher.mjs'

/**
* ShipmentProcessing service.
* @module externalfulfillmentshipments_v2024_09_11/api/ShipmentProcessingApi
* @version 2024-09-11
*/
export class ShipmentProcessingApi {
  // Private member stores the default rate limiters
  #defaultRateLimiterMap

  /**
    * Constructs a new ShipmentProcessingApi.
    * @alias module:externalfulfillmentshipments_v2024_09_11/api/ShipmentProcessingApi
    * @class
    * @param {ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
    this.initializeDefaultRateLimiterMap()
  }

  /**
     * Initialize rate limiters for API operations
     */
  initializeDefaultRateLimiterMap () {
    this.#defaultRateLimiterMap = new Map()
    const defaultRateLimitFetcher = new DefaultRateLimitFetcher()
    const operations = [
      'ShipmentProcessingApi-createPackages',
      'ShipmentProcessingApi-generateInvoice',
      'ShipmentProcessingApi-generateShipLabels',
      'ShipmentProcessingApi-processShipment',
      'ShipmentProcessingApi-retrieveInvoice',
      'ShipmentProcessingApi-retrieveShippingOptions',
      'ShipmentProcessingApi-updatePackage',
      'ShipmentProcessingApi-updatePackageStatus'
    ]

    for (const operation of operations) {
      const config = defaultRateLimitFetcher.getLimit(operation)
      this.#defaultRateLimiterMap.set(operation, new SuperagentRateLimiter(config))
    }
  }

  /**
     * Get rate limiter for a specific operation
     * @param {String} operation name
     */
  getRateLimiter (operation) {
    return this.#defaultRateLimiterMap.get(operation)
  }

  /**
     * Provide details about the packages in the specified shipment.
     * @param {String} shipmentId The ID of the shipment.
     * @param {Packages} body A list of packages in the shipment.
     * @return {Promise<void>}
     */
  createPackagesWithHttpInfo (shipmentId, body) {
    const postBody = body

    // verify the required parameter 'shipmentId' is set
    if (shipmentId === undefined || shipmentId === null) {
      throw new Error("Missing the required parameter 'shipmentId' when calling createPackages")
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createPackages")
    }

    const pathParams = {
      shipmentId
    }
    const queryParams = {
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = ['application/json']
    const accepts = ['application/json']
    const returnType = null

    return this.apiClient.callApi('ShipmentProcessingApi-createPackages',
      '/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('ShipmentProcessingApi-createPackages')
    )
  }

  /**
     * Provide details about the packages in the specified shipment.
     * @param {String} shipmentId The ID of the shipment.
     * @param {Packages} body A list of packages in the shipment.
     * @return {Promise<void>}
     */
  createPackages (shipmentId, body) {
    return this.createPackagesWithHttpInfo(shipmentId, body)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Get invoices for the shipment you specify.
     * @param {String} shipmentId The ID of the shipment whose invoice you want.
     * @return {Promise<InvoiceResponse>}
     */
  generateInvoiceWithHttpInfo (shipmentId) {
    const postBody = null

    // verify the required parameter 'shipmentId' is set
    if (shipmentId === undefined || shipmentId === null) {
      throw new Error("Missing the required parameter 'shipmentId' when calling generateInvoice")
    }

    const pathParams = {
      shipmentId
    }
    const queryParams = {
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = InvoiceResponse

    return this.apiClient.callApi('ShipmentProcessingApi-generateInvoice',
      '/externalFulfillment/2024-09-11/shipments/{shipmentId}/invoice', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('ShipmentProcessingApi-generateInvoice')
    )
  }

  /**
     * Get invoices for the shipment you specify.
     * @param {String} shipmentId The ID of the shipment whose invoice you want.
     * @return {Promise<InvoiceResponse>}
     */
  generateInvoice (shipmentId) {
    return this.generateInvoiceWithHttpInfo(shipmentId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
     * @param {String} shipmentId The ID of the shipment whose shipping labels you want to generate and retrieve.
     * @param {String} operation Specify whether you want to generate or regenerate a label.
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.shippingOptionId] The ID of the shipping option whose shipping labels you want.
     * @param {ShipLabelsInput} [opts.body] Shipping details for when shipping is not done by the marketplace channel.
     * @return {Promise<ShipLabelsResponse>}
     */
  generateShipLabelsWithHttpInfo (shipmentId, operation, opts) {
    opts = opts || {}
    const postBody = opts.body

    // verify the required parameter 'shipmentId' is set
    if (shipmentId === undefined || shipmentId === null) {
      throw new Error("Missing the required parameter 'shipmentId' when calling generateShipLabels")
    }

    // verify the required parameter 'operation' is set
    if (operation === undefined || operation === null) {
      throw new Error("Missing the required parameter 'operation' when calling generateShipLabels")
    }

    const pathParams = {
      shipmentId
    }
    const queryParams = {
      shippingOptionId: opts.shippingOptionId,
      operation
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = ['application/json']
    const accepts = ['application/json']
    const returnType = ShipLabelsResponse

    return this.apiClient.callApi('ShipmentProcessingApi-generateShipLabels',
      '/externalFulfillment/2024-09-11/shipments/{shipmentId}/shipLabels', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('ShipmentProcessingApi-generateShipLabels')
    )
  }

  /**
     * Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
     * @param {String} shipmentId The ID of the shipment whose shipping labels you want to generate and retrieve.
     * @param {String} operation Specify whether you want to generate or regenerate a label.
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.shippingOptionId] The ID of the shipping option whose shipping labels you want.
     * @param {ShipLabelsInput} [opts.body] Shipping details for when shipping is not done by the marketplace channel.
     * @return {Promise<ShipLabelsResponse>}
     */
  generateShipLabels (shipmentId, operation, opts) {
    return this.generateShipLabelsWithHttpInfo(shipmentId, operation, opts)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Confirm or reject the specified shipment.
     * @param {String} shipmentId The ID of the shipment you want to confirm or reject.
     * @param {String} operation The status of the shipment.
     * @param {Object} [opts] Optional parameters
     * @param {ShipmentAcknowledgementRequest} [opts.body] Information about the shipment and its line items.
     * @return {Promise<void>}
     */
  processShipmentWithHttpInfo (shipmentId, operation, opts) {
    opts = opts || {}
    const postBody = opts.body

    // verify the required parameter 'shipmentId' is set
    if (shipmentId === undefined || shipmentId === null) {
      throw new Error("Missing the required parameter 'shipmentId' when calling processShipment")
    }

    // verify the required parameter 'operation' is set
    if (operation === undefined || operation === null) {
      throw new Error("Missing the required parameter 'operation' when calling processShipment")
    }

    const pathParams = {
      shipmentId
    }
    const queryParams = {
      operation
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = ['application/json']
    const accepts = ['application/json']
    const returnType = null

    return this.apiClient.callApi('ShipmentProcessingApi-processShipment',
      '/externalFulfillment/2024-09-11/shipments/{shipmentId}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('ShipmentProcessingApi-processShipment')
    )
  }

  /**
     * Confirm or reject the specified shipment.
     * @param {String} shipmentId The ID of the shipment you want to confirm or reject.
     * @param {String} operation The status of the shipment.
     * @param {Object} [opts] Optional parameters
     * @param {ShipmentAcknowledgementRequest} [opts.body] Information about the shipment and its line items.
     * @return {Promise<void>}
     */
  processShipment (shipmentId, operation, opts) {
    return this.processShipmentWithHttpInfo(shipmentId, operation, opts)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Retrieve invoices for the shipment you specify.
     * @param {String} shipmentId The ID of the shipment whose invoice you want to retrieve.
     * @return {Promise<InvoiceResponse>}
     */
  retrieveInvoiceWithHttpInfo (shipmentId) {
    const postBody = null

    // verify the required parameter 'shipmentId' is set
    if (shipmentId === undefined || shipmentId === null) {
      throw new Error("Missing the required parameter 'shipmentId' when calling retrieveInvoice")
    }

    const pathParams = {
      shipmentId
    }
    const queryParams = {
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = InvoiceResponse

    return this.apiClient.callApi('ShipmentProcessingApi-retrieveInvoice',
      '/externalFulfillment/2024-09-11/shipments/{shipmentId}/invoice', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('ShipmentProcessingApi-retrieveInvoice')
    )
  }

  /**
     * Retrieve invoices for the shipment you specify.
     * @param {String} shipmentId The ID of the shipment whose invoice you want to retrieve.
     * @return {Promise<InvoiceResponse>}
     */
  retrieveInvoice (shipmentId) {
    return this.retrieveInvoiceWithHttpInfo(shipmentId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Get a list of shipping options for a package in a shipment given the shipment&#39;s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
     * @param {String} shipmentId The ID of the shipment to which the package belongs.
     * @param {String} packageId The ID of the package for which you want to retrieve shipping options.
     * @return {Promise<ShippingOptionsResponse>}
     */
  retrieveShippingOptionsWithHttpInfo (shipmentId, packageId) {
    const postBody = null

    // verify the required parameter 'shipmentId' is set
    if (shipmentId === undefined || shipmentId === null) {
      throw new Error("Missing the required parameter 'shipmentId' when calling retrieveShippingOptions")
    }

    // verify the required parameter 'packageId' is set
    if (packageId === undefined || packageId === null) {
      throw new Error("Missing the required parameter 'packageId' when calling retrieveShippingOptions")
    }

    const pathParams = {
      shipmentId
    }
    const queryParams = {
      packageId
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = ShippingOptionsResponse

    return this.apiClient.callApi('ShipmentProcessingApi-retrieveShippingOptions',
      '/externalFulfillment/2024-09-11/shipments/{shipmentId}/shippingOptions', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('ShipmentProcessingApi-retrieveShippingOptions')
    )
  }

  /**
     * Get a list of shipping options for a package in a shipment given the shipment&#39;s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
     * @param {String} shipmentId The ID of the shipment to which the package belongs.
     * @param {String} packageId The ID of the package for which you want to retrieve shipping options.
     * @return {Promise<ShippingOptionsResponse>}
     */
  retrieveShippingOptions (shipmentId, packageId) {
    return this.retrieveShippingOptionsWithHttpInfo(shipmentId, packageId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Updates the details about the packages that will be used to fulfill the specified shipment.
     * @param {String} shipmentId The ID of the shipment to which the package belongs.
     * @param {String} packageId The ID of the package whose information you want to update.
     * @param {Package} body The body of the request.
     * @return {Promise<void>}
     */
  updatePackageWithHttpInfo (shipmentId, packageId, body) {
    const postBody = body

    // verify the required parameter 'shipmentId' is set
    if (shipmentId === undefined || shipmentId === null) {
      throw new Error("Missing the required parameter 'shipmentId' when calling updatePackage")
    }

    // verify the required parameter 'packageId' is set
    if (packageId === undefined || packageId === null) {
      throw new Error("Missing the required parameter 'packageId' when calling updatePackage")
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updatePackage")
    }

    const pathParams = {
      shipmentId,
      packageId
    }
    const queryParams = {
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = ['application/json']
    const accepts = ['application/json']
    const returnType = null

    return this.apiClient.callApi('ShipmentProcessingApi-updatePackage',
      '/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages/{packageId}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('ShipmentProcessingApi-updatePackage')
    )
  }

  /**
     * Updates the details about the packages that will be used to fulfill the specified shipment.
     * @param {String} shipmentId The ID of the shipment to which the package belongs.
     * @param {String} packageId The ID of the package whose information you want to update.
     * @param {Package} body The body of the request.
     * @return {Promise<void>}
     */
  updatePackage (shipmentId, packageId, body) {
    return this.updatePackageWithHttpInfo(shipmentId, packageId, body)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Updates the status of the packages.
     * @param {String} shipmentId The ID of the shipment to which the package belongs.
     * @param {String} packageId The ID of the package whose status you want to update.
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.status] **DEPRECATED**. Do not use. Package status is defined in the body parameter.
     * @param {PackageDeliveryStatus} [opts.body] The body of the request.
     * @return {Promise<void>}
     */
  updatePackageStatusWithHttpInfo (shipmentId, packageId, opts) {
    opts = opts || {}
    const postBody = opts.body

    // verify the required parameter 'shipmentId' is set
    if (shipmentId === undefined || shipmentId === null) {
      throw new Error("Missing the required parameter 'shipmentId' when calling updatePackageStatus")
    }

    // verify the required parameter 'packageId' is set
    if (packageId === undefined || packageId === null) {
      throw new Error("Missing the required parameter 'packageId' when calling updatePackageStatus")
    }

    const pathParams = {
      shipmentId,
      packageId
    }
    const queryParams = {
      status: opts.status
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = ['application/json']
    const accepts = ['application/json']
    const returnType = null

    return this.apiClient.callApi('ShipmentProcessingApi-updatePackageStatus',
      '/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages/{packageId}', 'PATCH',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('ShipmentProcessingApi-updatePackageStatus')
    )
  }

  /**
     * Updates the status of the packages.
     * @param {String} shipmentId The ID of the shipment to which the package belongs.
     * @param {String} packageId The ID of the package whose status you want to update.
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.status] **DEPRECATED**. Do not use. Package status is defined in the body parameter.
     * @param {PackageDeliveryStatus} [opts.body] The body of the request.
     * @return {Promise<void>}
     */
  updatePackageStatus (shipmentId, packageId, opts) {
    return this.updatePackageStatusWithHttpInfo(shipmentId, packageId, opts)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }
}
