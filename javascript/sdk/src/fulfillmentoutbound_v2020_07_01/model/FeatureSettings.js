/**
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'

/**
 * The FeatureSettings model module.
 * @module fulfillmentoutbound_v2020_07_01/model/FeatureSettings
 * @version 2020-07-01
 */
export class FeatureSettings {
  /**
   * Constructs a new <code>FeatureSettings</code>.
   * Feature settings allows you to apply fulfillment features to an order. To block an order from being shipped using Amazon Logistics (AMZL) and an AMZL tracking number, set &#x60;featureName&#x60; to &#x60;BLOCK_AMZL&#x60; and &#x60;featureFulfillmentPolicy&#x60; to &#x60;Required&#x60;. Blocking AMZL will incur an additional fee surcharge on your MCF orders and increase the risk of some of your orders being unfulfilled or delivered late if there are no alternative carriers available. Using &#x60;BLOCK_AMZL&#x60; in an order request will take precedence over your Seller Central account setting. To ship in non-Amazon branded packaging (blank boxes), set &#x60;featureName&#x60; to &#x60;BLANK_BOX&#x60;. To require a signature from the recipient upon delivery, set &#x60;featureName&#x60; to &#x60;SIGNATURE_CONFIRMATION&#x60;. Note that using signature confirmation features will incur additional fees on MCF orders and are currently supported only in the US marketplace. To ensure all items in an order are delivered together, set &#x60;featureName&#x60; to &#x60;DELIVER_TOGETHER&#x60;.
   * @alias module:fulfillmentoutbound_v2020_07_01/model/FeatureSettings
   * @class
   */
  constructor () {
  }

  /**
   * Constructs a <code>FeatureSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {FeatureSettings} obj Optional instance to populate.
   * @return {FeatureSettings} The populated <code>FeatureSettings</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new FeatureSettings()
      if (data.hasOwnProperty('featureName')) { obj.featureName = ApiClient.convertToType(data.featureName, 'String') }
      if (data.hasOwnProperty('featureFulfillmentPolicy')) { obj.featureFulfillmentPolicy = ApiClient.convertToType(data.featureFulfillmentPolicy, 'String') }
    }
    return obj
  }
}

/**
 * The name of the feature. Valid feature names are:  - `BLOCK_AMZL`: Blocks orders from being shipped using Amazon Logistics (AMZL).   - Note: Using this feature will incur additional fee surcharges on MCF orders and may increase the risk of unfulfilled or delayed deliveries if alternative carriers are unavailable. Using `BLOCK_AMZL` in an order request will take precedence over your Seller Central account setting. - `BLANK_BOX`: Ships orders in non-Amazon branded packaging (blank boxes). - `SIGNATURE_CONFIRMATION`: Requires a signature from the recipient upon delivery.    - Note: Using signature confirmation features will incur additional fees on MCF orders and are currently supported only in the US marketplace.
 * @member {String} featureName
 * @type {String}
 */
FeatureSettings.prototype.featureName = undefined

/**
 * Allowed values for the <code>featureFulfillmentPolicy</code> property.
 * @enum {String}
 * @readonly
 */
FeatureSettings.FeatureFulfillmentPolicyEnum = {

  /**
     * value: "Required"
     * @const
     */
  Required: 'Required',

  /**
     * value: "NotRequired"
     * @const
     */
  NotRequired: 'NotRequired'
}
/**
 * Specifies the policy to use when fulfilling an order.
 * @member {String} featureFulfillmentPolicy
 * @type {String}
 */
FeatureSettings.prototype.featureFulfillmentPolicy = undefined
