/**
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'

/**
 * The DeliveryQuantity model module.
 * @module fulfillmentoutbound_v2020_07_01/model/DeliveryQuantity
 * @version 2020-07-01
 */
export class DeliveryQuantity {
  /**
   * Constructs a new <code>DeliveryQuantity</code>.
   * A quantity based on unit of measure.
   * @alias module:fulfillmentoutbound_v2020_07_01/model/DeliveryQuantity
   * @class
   * @param unitOfMeasure {String} The unit of measure for the amount.
   * @param amount {String} A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.
   */
  constructor (unitOfMeasure, amount) {
    this.unitOfMeasure = unitOfMeasure
    this.amount = amount
  }

  /**
   * Constructs a <code>DeliveryQuantity</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {DeliveryQuantity} obj Optional instance to populate.
   * @return {DeliveryQuantity} The populated <code>DeliveryQuantity</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new DeliveryQuantity()
      if (data.hasOwnProperty('unitOfMeasure')) { obj.unitOfMeasure = ApiClient.convertToType(data.unitOfMeasure, 'String') }
      if (data.hasOwnProperty('amount')) { obj.amount = ApiClient.convertToType(data.amount, 'String') }
    }
    return obj
  }
}

/**
 * Allowed values for the <code>unitOfMeasure</code> property.
 * @enum {String}
 * @readonly
 */
DeliveryQuantity.UnitOfMeasureEnum = {

  /**
     * value: "Each"
     * @const
     */
  Each: 'Each'
}

/**
 * The unit of measure for the amount.
 * @member {String} unitOfMeasure
 * @type {String}
 */
DeliveryQuantity.prototype.unitOfMeasure = undefined

/**
 * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.
 * @member {String} amount
 * @type {String}
 */
DeliveryQuantity.prototype.amount = undefined
