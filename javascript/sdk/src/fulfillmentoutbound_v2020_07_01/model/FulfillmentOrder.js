/**
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Address} from './Address.js';
import {CODSettings} from './CODSettings.js';
import {DeliveryWindow} from './DeliveryWindow.js';
import {FeatureSettings} from './FeatureSettings.js';
import {FulfillmentAction} from './FulfillmentAction.js';
import {FulfillmentOrderStatus} from './FulfillmentOrderStatus.js';
import {FulfillmentPolicy} from './FulfillmentPolicy.js';
import {ShippingSpeedCategory} from './ShippingSpeedCategory.js';

/**
 * The FulfillmentOrder model module.
 * @module fulfillmentoutbound_v2020_07_01/model/FulfillmentOrder
 * @version 2020-07-01
 */
export class FulfillmentOrder {
  /**
   * Constructs a new <code>FulfillmentOrder</code>.
   * General information about a fulfillment order, including its status.
   * @alias module:fulfillmentoutbound_v2020_07_01/model/FulfillmentOrder
   * @class
   * @param sellerFulfillmentOrderId {String} The fulfillment order identifier submitted with the `createFulfillmentOrder` operation.
   * @param marketplaceId {String} The identifier for the marketplace the fulfillment order is placed against.
   * @param displayableOrderId {String} A fulfillment order identifier submitted with the `createFulfillmentOrder` operation. Displays as the order identifier in recipient-facing materials such as the packing slip.
   * @param displayableOrderDate {Date} Date timestamp
   * @param displayableOrderComment {String} A text block submitted with the `createFulfillmentOrder` operation. Displays in recipient-facing materials such as the packing slip.
   * @param shippingSpeedCategory {module:fulfillmentoutbound_v2020_07_01/model/ShippingSpeedCategory} 
   * @param destinationAddress {module:fulfillmentoutbound_v2020_07_01/model/Address} 
   * @param receivedDate {Date} Date timestamp
   * @param fulfillmentOrderStatus {module:fulfillmentoutbound_v2020_07_01/model/FulfillmentOrderStatus} 
   * @param statusUpdatedDate {Date} Date timestamp
   */
  constructor(sellerFulfillmentOrderId, marketplaceId, displayableOrderId, displayableOrderDate, displayableOrderComment, shippingSpeedCategory, destinationAddress, receivedDate, fulfillmentOrderStatus, statusUpdatedDate) {
    this.sellerFulfillmentOrderId = sellerFulfillmentOrderId;
    this.marketplaceId = marketplaceId;
    this.displayableOrderId = displayableOrderId;
    this.displayableOrderDate = displayableOrderDate;
    this.displayableOrderComment = displayableOrderComment;
    this.shippingSpeedCategory = shippingSpeedCategory;
    this.destinationAddress = destinationAddress;
    this.receivedDate = receivedDate;
    this.fulfillmentOrderStatus = fulfillmentOrderStatus;
    this.statusUpdatedDate = statusUpdatedDate;
  }

  /**
   * Constructs a <code>FulfillmentOrder</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:fulfillmentoutbound_v2020_07_01/model/FulfillmentOrder} obj Optional instance to populate.
   * @return {module:fulfillmentoutbound_v2020_07_01/model/FulfillmentOrder} The populated <code>FulfillmentOrder</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new FulfillmentOrder();
      if (data.hasOwnProperty('sellerFulfillmentOrderId'))
        obj.sellerFulfillmentOrderId = ApiClient.convertToType(data['sellerFulfillmentOrderId'], 'String');
      if (data.hasOwnProperty('marketplaceId'))
        obj.marketplaceId = ApiClient.convertToType(data['marketplaceId'], 'String');
      if (data.hasOwnProperty('displayableOrderId'))
        obj.displayableOrderId = ApiClient.convertToType(data['displayableOrderId'], 'String');
      if (data.hasOwnProperty('displayableOrderDate'))
        obj.displayableOrderDate = ApiClient.convertToType(data['displayableOrderDate'], 'Date');
      if (data.hasOwnProperty('displayableOrderComment'))
        obj.displayableOrderComment = ApiClient.convertToType(data['displayableOrderComment'], 'String');
      if (data.hasOwnProperty('shippingSpeedCategory'))
        obj.shippingSpeedCategory = ShippingSpeedCategory.constructFromObject(data['shippingSpeedCategory']);
      if (data.hasOwnProperty('deliveryWindow'))
        obj.deliveryWindow = DeliveryWindow.constructFromObject(data['deliveryWindow']);
      if (data.hasOwnProperty('destinationAddress'))
        obj.destinationAddress = Address.constructFromObject(data['destinationAddress']);
      if (data.hasOwnProperty('fulfillmentAction'))
        obj.fulfillmentAction = FulfillmentAction.constructFromObject(data['fulfillmentAction']);
      if (data.hasOwnProperty('fulfillmentPolicy'))
        obj.fulfillmentPolicy = FulfillmentPolicy.constructFromObject(data['fulfillmentPolicy']);
      if (data.hasOwnProperty('codSettings'))
        obj.codSettings = CODSettings.constructFromObject(data['codSettings']);
      if (data.hasOwnProperty('receivedDate'))
        obj.receivedDate = ApiClient.convertToType(data['receivedDate'], 'Date');
      if (data.hasOwnProperty('fulfillmentOrderStatus'))
        obj.fulfillmentOrderStatus = FulfillmentOrderStatus.constructFromObject(data['fulfillmentOrderStatus']);
      if (data.hasOwnProperty('statusUpdatedDate'))
        obj.statusUpdatedDate = ApiClient.convertToType(data['statusUpdatedDate'], 'Date');
      if (data.hasOwnProperty('notificationEmails'))
        obj.notificationEmails = ApiClient.convertToType(data['notificationEmails'], ['String']);
      if (data.hasOwnProperty('featureConstraints'))
        obj.featureConstraints = ApiClient.convertToType(data['featureConstraints'], [FeatureSettings]);
    }
    return obj;
  }
}

/**
 * The fulfillment order identifier submitted with the `createFulfillmentOrder` operation.
 * @member {String} sellerFulfillmentOrderId
 */
FulfillmentOrder.prototype.sellerFulfillmentOrderId = undefined;

/**
 * The identifier for the marketplace the fulfillment order is placed against.
 * @member {String} marketplaceId
 */
FulfillmentOrder.prototype.marketplaceId = undefined;

/**
 * A fulfillment order identifier submitted with the `createFulfillmentOrder` operation. Displays as the order identifier in recipient-facing materials such as the packing slip.
 * @member {String} displayableOrderId
 */
FulfillmentOrder.prototype.displayableOrderId = undefined;

/**
 * Date timestamp
 * @member {Date} displayableOrderDate
 */
FulfillmentOrder.prototype.displayableOrderDate = undefined;

/**
 * A text block submitted with the `createFulfillmentOrder` operation. Displays in recipient-facing materials such as the packing slip.
 * @member {String} displayableOrderComment
 */
FulfillmentOrder.prototype.displayableOrderComment = undefined;

/**
 * @member {module:fulfillmentoutbound_v2020_07_01/model/ShippingSpeedCategory} shippingSpeedCategory
 */
FulfillmentOrder.prototype.shippingSpeedCategory = undefined;

/**
 * @member {module:fulfillmentoutbound_v2020_07_01/model/DeliveryWindow} deliveryWindow
 */
FulfillmentOrder.prototype.deliveryWindow = undefined;

/**
 * @member {module:fulfillmentoutbound_v2020_07_01/model/Address} destinationAddress
 */
FulfillmentOrder.prototype.destinationAddress = undefined;

/**
 * @member {module:fulfillmentoutbound_v2020_07_01/model/FulfillmentAction} fulfillmentAction
 */
FulfillmentOrder.prototype.fulfillmentAction = undefined;

/**
 * @member {module:fulfillmentoutbound_v2020_07_01/model/FulfillmentPolicy} fulfillmentPolicy
 */
FulfillmentOrder.prototype.fulfillmentPolicy = undefined;

/**
 * @member {module:fulfillmentoutbound_v2020_07_01/model/CODSettings} codSettings
 */
FulfillmentOrder.prototype.codSettings = undefined;

/**
 * Date timestamp
 * @member {Date} receivedDate
 */
FulfillmentOrder.prototype.receivedDate = undefined;

/**
 * @member {module:fulfillmentoutbound_v2020_07_01/model/FulfillmentOrderStatus} fulfillmentOrderStatus
 */
FulfillmentOrder.prototype.fulfillmentOrderStatus = undefined;

/**
 * Date timestamp
 * @member {Date} statusUpdatedDate
 */
FulfillmentOrder.prototype.statusUpdatedDate = undefined;

/**
 * A list of email addresses that the seller provides that are used by Amazon to send ship-complete notifications to recipients on behalf of the seller.
 * @member {Array.<String>} notificationEmails
 */
FulfillmentOrder.prototype.notificationEmails = undefined;

/**
 * A list of features and their fulfillment policies to apply to the order.
 * @member {Array.<module:fulfillmentoutbound_v2020_07_01/model/FeatureSettings>} featureConstraints
 */
FulfillmentOrder.prototype.featureConstraints = undefined;


