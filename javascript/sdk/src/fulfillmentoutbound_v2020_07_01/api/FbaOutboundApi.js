/**
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {CancelFulfillmentOrderResponse} from '../model/CancelFulfillmentOrderResponse.js';
import {CreateFulfillmentOrderRequest} from '../model/CreateFulfillmentOrderRequest.js';
import {CreateFulfillmentOrderResponse} from '../model/CreateFulfillmentOrderResponse.js';
import {CreateFulfillmentReturnRequest} from '../model/CreateFulfillmentReturnRequest.js';
import {CreateFulfillmentReturnResponse} from '../model/CreateFulfillmentReturnResponse.js';
import {GetDeliveryOffersRequest} from '../model/GetDeliveryOffersRequest.js';
import {GetDeliveryOffersResponse} from '../model/GetDeliveryOffersResponse.js';
import {GetFeatureInventoryResponse} from '../model/GetFeatureInventoryResponse.js';
import {GetFeatureSkuResponse} from '../model/GetFeatureSkuResponse.js';
import {GetFeaturesResponse} from '../model/GetFeaturesResponse.js';
import {GetFulfillmentOrderResponse} from '../model/GetFulfillmentOrderResponse.js';
import {GetFulfillmentPreviewRequest} from '../model/GetFulfillmentPreviewRequest.js';
import {GetFulfillmentPreviewResponse} from '../model/GetFulfillmentPreviewResponse.js';
import {GetPackageTrackingDetailsResponse} from '../model/GetPackageTrackingDetailsResponse.js';
import {ListAllFulfillmentOrdersResponse} from '../model/ListAllFulfillmentOrdersResponse.js';
import {ListReturnReasonCodesResponse} from '../model/ListReturnReasonCodesResponse.js';
import {SubmitFulfillmentOrderStatusUpdateRequest} from '../model/SubmitFulfillmentOrderStatusUpdateRequest.js';
import {SubmitFulfillmentOrderStatusUpdateResponse} from '../model/SubmitFulfillmentOrderStatusUpdateResponse.js';
import {UpdateFulfillmentOrderRequest} from '../model/UpdateFulfillmentOrderRequest.js';
import {UpdateFulfillmentOrderResponse} from '../model/UpdateFulfillmentOrderResponse.js';

/**
* FbaOutbound service.
* @module fulfillmentoutbound_v2020_07_01/api/FbaOutboundApi
* @version 2020-07-01
*/
export class FbaOutboundApi {

    /**
    * Constructs a new FbaOutboundApi. 
    * @alias module:fulfillmentoutbound_v2020_07_01/api/FbaOutboundApi
    * @class
    * @param {module:fulfillmentoutbound_v2020_07_01/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:fulfillmentoutbound_v2020_07_01/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/CancelFulfillmentOrderResponse} and HTTP response
     */
    cancelFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId) {
      let postBody = null;

      // verify the required parameter 'sellerFulfillmentOrderId' is set
      if (sellerFulfillmentOrderId === undefined || sellerFulfillmentOrderId === null) {
        throw new Error("Missing the required parameter 'sellerFulfillmentOrderId' when calling cancelFulfillmentOrder");
      }


      let pathParams = {
        'sellerFulfillmentOrderId': sellerFulfillmentOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancelFulfillmentOrderResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/CancelFulfillmentOrderResponse}
     */
    cancelFulfillmentOrder(sellerFulfillmentOrderId) {
      return this.cancelFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Requests that Amazon ship items from the seller&#39;s inventory in Amazon&#39;s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     * @param {module:fulfillmentoutbound_v2020_07_01/model/CreateFulfillmentOrderRequest} body CreateFulfillmentOrderRequest parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/CreateFulfillmentOrderResponse} and HTTP response
     */
    createFulfillmentOrderWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createFulfillmentOrder");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFulfillmentOrderResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/fulfillmentOrders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Requests that Amazon ship items from the seller&#39;s inventory in Amazon&#39;s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     * @param {module:fulfillmentoutbound_v2020_07_01/model/CreateFulfillmentOrderRequest} body CreateFulfillmentOrderRequest parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/CreateFulfillmentOrderResponse}
     */
    createFulfillmentOrder(body) {
      return this.createFulfillmentOrderWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a fulfillment return.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value based on the buyer&#39;s request to return items.
     * @param {module:fulfillmentoutbound_v2020_07_01/model/CreateFulfillmentReturnRequest} body CreateFulfillmentReturnRequest parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/CreateFulfillmentReturnResponse} and HTTP response
     */
    createFulfillmentReturnWithHttpInfo(sellerFulfillmentOrderId, body) {
      let postBody = body;

      // verify the required parameter 'sellerFulfillmentOrderId' is set
      if (sellerFulfillmentOrderId === undefined || sellerFulfillmentOrderId === null) {
        throw new Error("Missing the required parameter 'sellerFulfillmentOrderId' when calling createFulfillmentReturn");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createFulfillmentReturn");
      }


      let pathParams = {
        'sellerFulfillmentOrderId': sellerFulfillmentOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'payload'];
      let returnType = CreateFulfillmentReturnResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/return', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a fulfillment return.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value based on the buyer&#39;s request to return items.
     * @param {module:fulfillmentoutbound_v2020_07_01/model/CreateFulfillmentReturnRequest} body CreateFulfillmentReturnRequest parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/CreateFulfillmentReturnResponse}
     */
    createFulfillmentReturn(sellerFulfillmentOrderId, body) {
      return this.createFulfillmentReturnWithHttpInfo(sellerFulfillmentOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns delivery options that include an estimated delivery date and offer expiration, based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentoutbound_v2020_07_01/model/GetDeliveryOffersRequest} body GetDeliveryOffersRequest parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetDeliveryOffersResponse} and HTTP response
     */
    deliveryOffersWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deliveryOffers");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'payload'];
      let returnType = GetDeliveryOffersResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/deliveryOffers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns delivery options that include an estimated delivery date and offer expiration, based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentoutbound_v2020_07_01/model/GetDeliveryOffersRequest} body GetDeliveryOffersRequest parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetDeliveryOffersResponse}
     */
    deliveryOffers(body) {
      return this.deliveryOffersWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of inventory items that are eligible for the fulfillment feature you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
     * @param {String} marketplaceId The marketplace for which to return a list of the inventory that is eligible for the specified feature.
     * @param {String} featureName The name of the feature for which to return a list of eligible inventory.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextToken A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.
     * @param {Date} opts.queryStartDate A date that you can use to select inventory that has been updated since a specified date. An update is defined as any change in feature-enabled inventory availability. The date must be in the format yyyy-MM-ddTHH:mm:ss.sssZ
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetFeatureInventoryResponse} and HTTP response
     */
    getFeatureInventoryWithHttpInfo(marketplaceId, featureName, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getFeatureInventory");
      }

      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling getFeatureInventory");
      }


      let pathParams = {
        'featureName': featureName
      };
      let queryParams = {
        'marketplaceId': marketplaceId,
        'nextToken': opts['nextToken'],
        'queryStartDate': opts['queryStartDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json', 'payload'];
      let returnType = GetFeatureInventoryResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/features/inventory/{featureName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of inventory items that are eligible for the fulfillment feature you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
     * @param {String} marketplaceId The marketplace for which to return a list of the inventory that is eligible for the specified feature.
     * @param {String} featureName The name of the feature for which to return a list of eligible inventory.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextToken A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.
     * @param {Date} opts.queryStartDate A date that you can use to select inventory that has been updated since a specified date. An update is defined as any change in feature-enabled inventory availability. The date must be in the format yyyy-MM-ddTHH:mm:ss.sssZ
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetFeatureInventoryResponse}
     */
    getFeatureInventory(marketplaceId, featureName, opts) {
      return this.getFeatureInventoryWithHttpInfo(marketplaceId, featureName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified feature. Note that if the sellerSKU isn&#39;t eligible, the response will contain an empty skuInfo object. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId The marketplace for which to return the count.
     * @param {String} featureName The name of the feature.
     * @param {String} sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the seller&#39;s &#x60;SellerId&#x60;, which is included with every operation that you submit.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetFeatureSkuResponse} and HTTP response
     */
    getFeatureSKUWithHttpInfo(marketplaceId, featureName, sellerSku) {
      let postBody = null;

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getFeatureSKU");
      }

      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling getFeatureSKU");
      }

      // verify the required parameter 'sellerSku' is set
      if (sellerSku === undefined || sellerSku === null) {
        throw new Error("Missing the required parameter 'sellerSku' when calling getFeatureSKU");
      }


      let pathParams = {
        'featureName': featureName,
        'sellerSku': sellerSku
      };
      let queryParams = {
        'marketplaceId': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json', 'payload'];
      let returnType = GetFeatureSkuResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified feature. Note that if the sellerSKU isn&#39;t eligible, the response will contain an empty skuInfo object. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId The marketplace for which to return the count.
     * @param {String} featureName The name of the feature.
     * @param {String} sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the seller&#39;s &#x60;SellerId&#x60;, which is included with every operation that you submit.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetFeatureSkuResponse}
     */
    getFeatureSKU(marketplaceId, featureName, sellerSku) {
      return this.getFeatureSKUWithHttpInfo(marketplaceId, featureName, sellerSku)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and whether the seller for which you made the call is enrolled for each feature.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId The marketplace for which to return the list of features.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetFeaturesResponse} and HTTP response
     */
    getFeaturesWithHttpInfo(marketplaceId) {
      let postBody = null;

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getFeatures");
      }


      let pathParams = {
      };
      let queryParams = {
        'marketplaceId': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json', 'payload'];
      let returnType = GetFeaturesResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and whether the seller for which you made the call is enrolled for each feature.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId The marketplace for which to return the list of features.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetFeaturesResponse}
     */
    getFeatures(marketplaceId) {
      return this.getFeaturesWithHttpInfo(marketplaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetFulfillmentOrderResponse} and HTTP response
     */
    getFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId) {
      let postBody = null;

      // verify the required parameter 'sellerFulfillmentOrderId' is set
      if (sellerFulfillmentOrderId === undefined || sellerFulfillmentOrderId === null) {
        throw new Error("Missing the required parameter 'sellerFulfillmentOrderId' when calling getFulfillmentOrder");
      }


      let pathParams = {
        'sellerFulfillmentOrderId': sellerFulfillmentOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json', 'payload'];
      let returnType = GetFulfillmentOrderResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetFulfillmentOrderResponse}
     */
    getFulfillmentOrder(sellerFulfillmentOrderId) {
      return this.getFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentoutbound_v2020_07_01/model/GetFulfillmentPreviewRequest} body GetFulfillmentPreviewRequest parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetFulfillmentPreviewResponse} and HTTP response
     */
    getFulfillmentPreviewWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getFulfillmentPreview");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'payload'];
      let returnType = GetFulfillmentPreviewResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/fulfillmentOrders/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:fulfillmentoutbound_v2020_07_01/model/GetFulfillmentPreviewRequest} body GetFulfillmentPreviewRequest parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetFulfillmentPreviewResponse}
     */
    getFulfillmentPreview(body) {
      return this.getFulfillmentPreviewWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Number} packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60; operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetPackageTrackingDetailsResponse} and HTTP response
     */
    getPackageTrackingDetailsWithHttpInfo(packageNumber) {
      let postBody = null;

      // verify the required parameter 'packageNumber' is set
      if (packageNumber === undefined || packageNumber === null) {
        throw new Error("Missing the required parameter 'packageNumber' when calling getPackageTrackingDetails");
      }


      let pathParams = {
      };
      let queryParams = {
        'packageNumber': packageNumber
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json', 'payload'];
      let returnType = GetPackageTrackingDetailsResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/tracking', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Number} packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60; operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/GetPackageTrackingDetailsResponse}
     */
    getPackageTrackingDetails(packageNumber) {
      return this.getPackageTrackingDetailsWithHttpInfo(packageNumber)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.queryStartDate A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.
     * @param {String} opts.nextToken A string token returned in the response to your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/ListAllFulfillmentOrdersResponse} and HTTP response
     */
    listAllFulfillmentOrdersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'queryStartDate': opts['queryStartDate'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json', 'payload'];
      let returnType = ListAllFulfillmentOrdersResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/fulfillmentOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.queryStartDate A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.
     * @param {String} opts.nextToken A string token returned in the response to your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/ListAllFulfillmentOrdersResponse}
     */
    listAllFulfillmentOrders(opts) {
      return this.listAllFulfillmentOrdersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} sellerSku The seller SKU for which return reason codes are required.
     * @param {Object} opts Optional parameters
     * @param {String} opts.marketplaceId The marketplace for which the seller wants return reason codes.
     * @param {String} opts.sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.
     * @param {String} opts.language The language that the &#x60;TranslatedDescription&#x60; property of the &#x60;ReasonCodeDetails&#x60; response object should be translated into.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/ListReturnReasonCodesResponse} and HTTP response
     */
    listReturnReasonCodesWithHttpInfo(sellerSku, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'sellerSku' is set
      if (sellerSku === undefined || sellerSku === null) {
        throw new Error("Missing the required parameter 'sellerSku' when calling listReturnReasonCodes");
      }


      let pathParams = {
      };
      let queryParams = {
        'sellerSku': sellerSku,
        'marketplaceId': opts['marketplaceId'],
        'sellerFulfillmentOrderId': opts['sellerFulfillmentOrderId'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json', 'payload'];
      let returnType = ListReturnReasonCodesResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/returnReasonCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} sellerSku The seller SKU for which return reason codes are required.
     * @param {Object} opts Optional parameters
     * @param {String} opts.marketplaceId The marketplace for which the seller wants return reason codes.
     * @param {String} opts.sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.
     * @param {String} opts.language The language that the &#x60;TranslatedDescription&#x60; property of the &#x60;ReasonCodeDetails&#x60; response object should be translated into.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/ListReturnReasonCodesResponse}
     */
    listReturnReasonCodes(sellerSku, opts) {
      return this.listReturnReasonCodesWithHttpInfo(sellerSku, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Requests that Amazon update the status of an order in the sandbox testing environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
     * @param {String} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
     * @param {module:fulfillmentoutbound_v2020_07_01/model/SubmitFulfillmentOrderStatusUpdateRequest} body The identifier assigned to the item by the seller when the fulfillment order was created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/SubmitFulfillmentOrderStatusUpdateResponse} and HTTP response
     */
    submitFulfillmentOrderStatusUpdateWithHttpInfo(sellerFulfillmentOrderId, body) {
      let postBody = body;

      // verify the required parameter 'sellerFulfillmentOrderId' is set
      if (sellerFulfillmentOrderId === undefined || sellerFulfillmentOrderId === null) {
        throw new Error("Missing the required parameter 'sellerFulfillmentOrderId' when calling submitFulfillmentOrderStatusUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling submitFulfillmentOrderStatusUpdate");
      }


      let pathParams = {
        'sellerFulfillmentOrderId': sellerFulfillmentOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitFulfillmentOrderStatusUpdateResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Requests that Amazon update the status of an order in the sandbox testing environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
     * @param {String} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
     * @param {module:fulfillmentoutbound_v2020_07_01/model/SubmitFulfillmentOrderStatusUpdateRequest} body The identifier assigned to the item by the seller when the fulfillment order was created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/SubmitFulfillmentOrderStatusUpdateResponse}
     */
    submitFulfillmentOrderStatusUpdate(sellerFulfillmentOrderId, body) {
      return this.submitFulfillmentOrderStatusUpdateWithHttpInfo(sellerFulfillmentOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
     * @param {module:fulfillmentoutbound_v2020_07_01/model/UpdateFulfillmentOrderRequest} body UpdateFulfillmentOrderRequest parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:fulfillmentoutbound_v2020_07_01/model/UpdateFulfillmentOrderResponse} and HTTP response
     */
    updateFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId, body) {
      let postBody = body;

      // verify the required parameter 'sellerFulfillmentOrderId' is set
      if (sellerFulfillmentOrderId === undefined || sellerFulfillmentOrderId === null) {
        throw new Error("Missing the required parameter 'sellerFulfillmentOrderId' when calling updateFulfillmentOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFulfillmentOrder");
      }


      let pathParams = {
        'sellerFulfillmentOrderId': sellerFulfillmentOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFulfillmentOrderResponse;

      return this.apiClient.callApi(
        '/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
     * @param {module:fulfillmentoutbound_v2020_07_01/model/UpdateFulfillmentOrderRequest} body UpdateFulfillmentOrderRequest parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:fulfillmentoutbound_v2020_07_01/model/UpdateFulfillmentOrderResponse}
     */
    updateFulfillmentOrder(sellerFulfillmentOrderId, body) {
      return this.updateFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
