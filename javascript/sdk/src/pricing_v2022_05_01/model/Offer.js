/**
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-05-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { Condition } from './Condition.js'
import { FulfillmentType } from './FulfillmentType.js'
import { MoneyType } from './MoneyType.js'
import { Points } from './Points.js'
import { PrimeDetails } from './PrimeDetails.js'
import { ShippingOption } from './ShippingOption.js'

/**
 * The Offer model module.
 * @module pricing_v2022_05_01/model/Offer
 * @version 2022-05-01
 */
export class Offer {
  /**
   * Constructs a new <code>Offer</code>.
   * The offer data of a product.
   * @alias module:pricing_v2022_05_01/model/Offer
   * @class
   * @param sellerId {String} The seller identifier for the offer.
   * @param condition {Condition}
   * @param fulfillmentType {FulfillmentType}
   * @param listingPrice {MoneyType}
   */
  constructor (sellerId, condition, fulfillmentType, listingPrice) {
    this.sellerId = sellerId
    this.condition = condition
    this.fulfillmentType = fulfillmentType
    this.listingPrice = listingPrice
  }

  /**
   * Constructs a <code>Offer</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {Offer} obj Optional instance to populate.
   * @return {Offer} The populated <code>Offer</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new Offer()
      if (data.hasOwnProperty('sellerId')) { obj.sellerId = ApiClient.convertToType(data.sellerId, 'String') }
      if (data.hasOwnProperty('condition')) { obj.condition = Condition.constructFromObject(data.condition) }
      if (data.hasOwnProperty('subCondition')) { obj.subCondition = ApiClient.convertToType(data.subCondition, 'String') }
      if (data.hasOwnProperty('fulfillmentType')) { obj.fulfillmentType = FulfillmentType.constructFromObject(data.fulfillmentType) }
      if (data.hasOwnProperty('listingPrice')) { obj.listingPrice = MoneyType.constructFromObject(data.listingPrice) }
      if (data.hasOwnProperty('shippingOptions')) { obj.shippingOptions = ApiClient.convertToType(data.shippingOptions, [ShippingOption]) }
      if (data.hasOwnProperty('points')) { obj.points = Points.constructFromObject(data.points) }
      if (data.hasOwnProperty('primeDetails')) { obj.primeDetails = PrimeDetails.constructFromObject(data.primeDetails) }
    }
    return obj
  }
}

/**
 * The seller identifier for the offer.
 * @member {String} sellerId
 * @type {String}
 */
Offer.prototype.sellerId = undefined

/**
 * @member {Condition} condition
 * @type {Condition}
 */
Offer.prototype.condition = undefined

/**
 * Allowed values for the <code>subCondition</code> property.
 * @enum {String}
 * @readonly
 */
Offer.SubConditionEnum = {

  /**
     * value: "New"
     * @const
     */
  New: 'New',

  /**
     * value: "Mint"
     * @const
     */
  Mint: 'Mint',

  /**
     * value: "VeryGood"
     * @const
     */
  VeryGood: 'VeryGood',

  /**
     * value: "Good"
     * @const
     */
  Good: 'Good',

  /**
     * value: "Acceptable"
     * @const
     */
  Acceptable: 'Acceptable',

  /**
     * value: "Poor"
     * @const
     */
  Poor: 'Poor',

  /**
     * value: "Club"
     * @const
     */
  Club: 'Club',

  /**
     * value: "OEM"
     * @const
     */
  OEM: 'OEM',

  /**
     * value: "Warranty"
     * @const
     */
  Warranty: 'Warranty',

  /**
     * value: "RefurbishedWarranty"
     * @const
     */
  RefurbishedWarranty: 'RefurbishedWarranty',

  /**
     * value: "Refurbished"
     * @const
     */
  Refurbished: 'Refurbished',

  /**
     * value: "OpenBox"
     * @const
     */
  OpenBox: 'OpenBox',

  /**
     * value: "Other"
     * @const
     */
  Other: 'Other'
}

/**
 * The item subcondition of the offer.
 * @member {String} subCondition
 * @type {String}
 */
Offer.prototype.subCondition = undefined

/**
 * @member {FulfillmentType} fulfillmentType
 * @type {FulfillmentType}
 */
Offer.prototype.fulfillmentType = undefined

/**
 * @member {MoneyType} listingPrice
 * @type {MoneyType}
 */
Offer.prototype.listingPrice = undefined

/**
 * A list of shipping options associated with this offer
 * @member {[ShippingOption]} shippingOptions
 * @type {[ShippingOption]}
 */
Offer.prototype.shippingOptions = undefined

/**
 * @member {Points} points
 * @type {Points}
 */
Offer.prototype.points = undefined

/**
 * @member {PrimeDetails} primeDetails
 * @type {PrimeDetails}
 */
Offer.prototype.primeDetails = undefined
