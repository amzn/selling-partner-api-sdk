/**
 * Selling Partner API for Messaging
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {CreateAmazonMotorsRequest} from '../model/CreateAmazonMotorsRequest.js';
import {CreateAmazonMotorsResponse} from '../model/CreateAmazonMotorsResponse.js';
import {CreateConfirmCustomizationDetailsRequest} from '../model/CreateConfirmCustomizationDetailsRequest.js';
import {CreateConfirmCustomizationDetailsResponse} from '../model/CreateConfirmCustomizationDetailsResponse.js';
import {CreateConfirmDeliveryDetailsRequest} from '../model/CreateConfirmDeliveryDetailsRequest.js';
import {CreateConfirmDeliveryDetailsResponse} from '../model/CreateConfirmDeliveryDetailsResponse.js';
import {CreateConfirmOrderDetailsRequest} from '../model/CreateConfirmOrderDetailsRequest.js';
import {CreateConfirmOrderDetailsResponse} from '../model/CreateConfirmOrderDetailsResponse.js';
import {CreateConfirmServiceDetailsRequest} from '../model/CreateConfirmServiceDetailsRequest.js';
import {CreateConfirmServiceDetailsResponse} from '../model/CreateConfirmServiceDetailsResponse.js';
import {CreateDigitalAccessKeyRequest} from '../model/CreateDigitalAccessKeyRequest.js';
import {CreateDigitalAccessKeyResponse} from '../model/CreateDigitalAccessKeyResponse.js';
import {CreateLegalDisclosureRequest} from '../model/CreateLegalDisclosureRequest.js';
import {CreateLegalDisclosureResponse} from '../model/CreateLegalDisclosureResponse.js';
import {CreateNegativeFeedbackRemovalResponse} from '../model/CreateNegativeFeedbackRemovalResponse.js';
import {CreateUnexpectedProblemRequest} from '../model/CreateUnexpectedProblemRequest.js';
import {CreateUnexpectedProblemResponse} from '../model/CreateUnexpectedProblemResponse.js';
import {CreateWarrantyRequest} from '../model/CreateWarrantyRequest.js';
import {CreateWarrantyResponse} from '../model/CreateWarrantyResponse.js';
import {GetAttributesResponse} from '../model/GetAttributesResponse.js';
import {GetMessagingActionsForOrderResponse} from '../model/GetMessagingActionsForOrderResponse.js';
import {InvoiceRequest} from '../model/InvoiceRequest.js';
import {InvoiceResponse} from '../model/InvoiceResponse.js';

/**
* Messaging service.
* @module messaging_v1/api/MessagingApi
* @version v1
*/
export class MessagingApi {

    /**
    * Constructs a new MessagingApi. 
    * @alias module:messaging_v1/api/MessagingApi
    * @class
    * @param {module:messaging_v1/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:messaging_v1/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateConfirmCustomizationDetailsRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/CreateConfirmCustomizationDetailsResponse} and HTTP response
     */
    confirmCustomizationDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling confirmCustomizationDetails");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling confirmCustomizationDetails");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling confirmCustomizationDetails");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = CreateConfirmCustomizationDetailsResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/confirmCustomizationDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateConfirmCustomizationDetailsRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/CreateConfirmCustomizationDetailsResponse}
     */
    confirmCustomizationDetails(amazonOrderId, marketplaceIds, body) {
      return this.confirmCustomizationDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateAmazonMotorsRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/CreateAmazonMotorsResponse} and HTTP response
     */
    createAmazonMotorsWithHttpInfo(amazonOrderId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling createAmazonMotors");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling createAmazonMotors");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAmazonMotors");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = CreateAmazonMotorsResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/amazonMotors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateAmazonMotorsRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/CreateAmazonMotorsResponse}
     */
    createAmazonMotors(amazonOrderId, marketplaceIds, body) {
      return this.createAmazonMotorsWithHttpInfo(amazonOrderId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateConfirmDeliveryDetailsRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/CreateConfirmDeliveryDetailsResponse} and HTTP response
     */
    createConfirmDeliveryDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling createConfirmDeliveryDetails");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling createConfirmDeliveryDetails");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createConfirmDeliveryDetails");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = CreateConfirmDeliveryDetailsResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/confirmDeliveryDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateConfirmDeliveryDetailsRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/CreateConfirmDeliveryDetailsResponse}
     */
    createConfirmDeliveryDetails(amazonOrderId, marketplaceIds, body) {
      return this.createConfirmDeliveryDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateConfirmOrderDetailsRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/CreateConfirmOrderDetailsResponse} and HTTP response
     */
    createConfirmOrderDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling createConfirmOrderDetails");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling createConfirmOrderDetails");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createConfirmOrderDetails");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = CreateConfirmOrderDetailsResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/confirmOrderDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateConfirmOrderDetailsRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/CreateConfirmOrderDetailsResponse}
     */
    createConfirmOrderDetails(amazonOrderId, marketplaceIds, body) {
      return this.createConfirmOrderDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateConfirmServiceDetailsRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/CreateConfirmServiceDetailsResponse} and HTTP response
     */
    createConfirmServiceDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling createConfirmServiceDetails");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling createConfirmServiceDetails");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createConfirmServiceDetails");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = CreateConfirmServiceDetailsResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateConfirmServiceDetailsRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/CreateConfirmServiceDetailsResponse}
     */
    createConfirmServiceDetails(amazonOrderId, marketplaceIds, body) {
      return this.createConfirmServiceDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a buyer a message to share a digital access key that is required to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateDigitalAccessKeyRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/CreateDigitalAccessKeyResponse} and HTTP response
     */
    createDigitalAccessKeyWithHttpInfo(amazonOrderId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling createDigitalAccessKey");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling createDigitalAccessKey");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDigitalAccessKey");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = CreateDigitalAccessKeyResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/digitalAccessKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a buyer a message to share a digital access key that is required to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateDigitalAccessKeyRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/CreateDigitalAccessKeyResponse}
     */
    createDigitalAccessKey(amazonOrderId, marketplaceIds, body) {
      return this.createDigitalAccessKeyWithHttpInfo(amazonOrderId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateLegalDisclosureRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/CreateLegalDisclosureResponse} and HTTP response
     */
    createLegalDisclosureWithHttpInfo(amazonOrderId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling createLegalDisclosure");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling createLegalDisclosure");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createLegalDisclosure");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = CreateLegalDisclosureResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateLegalDisclosureRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/CreateLegalDisclosureResponse}
     */
    createLegalDisclosure(amazonOrderId, marketplaceIds, body) {
      return this.createLegalDisclosureWithHttpInfo(amazonOrderId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer&#39;s problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/CreateNegativeFeedbackRemovalResponse} and HTTP response
     */
    createNegativeFeedbackRemovalWithHttpInfo(amazonOrderId, marketplaceIds) {
      let postBody = null;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling createNegativeFeedbackRemoval");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling createNegativeFeedbackRemoval");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/hal+json'];
      let returnType = CreateNegativeFeedbackRemovalResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/negativeFeedbackRemoval', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer&#39;s problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/CreateNegativeFeedbackRemovalResponse}
     */
    createNegativeFeedbackRemoval(amazonOrderId, marketplaceIds) {
      return this.createNegativeFeedbackRemovalWithHttpInfo(amazonOrderId, marketplaceIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateUnexpectedProblemRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/CreateUnexpectedProblemResponse} and HTTP response
     */
    createUnexpectedProblemWithHttpInfo(amazonOrderId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling createUnexpectedProblem");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling createUnexpectedProblem");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUnexpectedProblem");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = CreateUnexpectedProblemResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/unexpectedProblem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateUnexpectedProblemRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/CreateUnexpectedProblemResponse}
     */
    createUnexpectedProblem(amazonOrderId, marketplaceIds, body) {
      return this.createUnexpectedProblemWithHttpInfo(amazonOrderId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateWarrantyRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/CreateWarrantyResponse} and HTTP response
     */
    createWarrantyWithHttpInfo(amazonOrderId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling createWarranty");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling createWarranty");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWarranty");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = CreateWarrantyResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/warranty', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/CreateWarrantyRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/CreateWarrantyResponse}
     */
    createWarranty(amazonOrderId, marketplaceIds, body) {
      return this.createWarrantyWithHttpInfo(amazonOrderId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/GetAttributesResponse} and HTTP response
     */
    getAttributesWithHttpInfo(amazonOrderId, marketplaceIds) {
      let postBody = null;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling getAttributes");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling getAttributes");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/hal+json'];
      let returnType = GetAttributesResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/GetAttributesResponse}
     */
    getAttributes(amazonOrderId, marketplaceIds) {
      return this.getAttributesWithHttpInfo(amazonOrderId, marketplaceIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This specifies the order for which you want a list of available message types.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/GetMessagingActionsForOrderResponse} and HTTP response
     */
    getMessagingActionsForOrderWithHttpInfo(amazonOrderId, marketplaceIds) {
      let postBody = null;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling getMessagingActionsForOrder");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling getMessagingActionsForOrder");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/hal+json'];
      let returnType = GetMessagingActionsForOrderResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} amazonOrderId An Amazon order identifier. This specifies the order for which you want a list of available message types.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/GetMessagingActionsForOrderResponse}
     */
    getMessagingActionsForOrder(amazonOrderId, marketplaceIds) {
      return this.getMessagingActionsForOrderWithHttpInfo(amazonOrderId, marketplaceIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a message providing the buyer an invoice
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/InvoiceRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:messaging_v1/model/InvoiceResponse} and HTTP response
     */
    sendInvoiceWithHttpInfo(amazonOrderId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'amazonOrderId' is set
      if (amazonOrderId === undefined || amazonOrderId === null) {
        throw new Error("Missing the required parameter 'amazonOrderId' when calling sendInvoice");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling sendInvoice");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendInvoice");
      }


      let pathParams = {
        'amazonOrderId': amazonOrderId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = InvoiceResponse;

      return this.apiClient.callApi(
        '/messaging/v1/orders/{amazonOrderId}/messages/invoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Sends a message providing the buyer an invoice
     * @param {String} amazonOrderId An Amazon order identifier. This identifies the order for which a message is sent.
     * @param {Array.<String>} marketplaceIds A marketplace identifier. This identifies the marketplace in which the order was placed. You can only specify one marketplace.
     * @param {module:messaging_v1/model/InvoiceRequest} body This contains the message body for a message.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:messaging_v1/model/InvoiceResponse}
     */
    sendInvoice(amazonOrderId, marketplaceIds, body) {
      return this.sendInvoiceWithHttpInfo(amazonOrderId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
