/**
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { Address } from './Address.js'
import { CurrencyAmount } from './CurrencyAmount.js'
import { Item } from './Item.js'
import { Label } from './Label.js'
import { PackageDimensions } from './PackageDimensions.js'
import { ShipmentStatus } from './ShipmentStatus.js'
import { ShippingService } from './ShippingService.js'
import { Weight } from './Weight.js'

/**
 * The Shipment model module.
 * @module merchantfulfillment_v0/model/Shipment
 * @version v0
 */
export class Shipment {
  /**
   * Constructs a new <code>Shipment</code>.
   * The details of a shipment. Includes the shipment status.
   * @alias module:merchantfulfillment_v0/model/Shipment
   * @class
   * @param shipmentId {String} An Amazon-defined shipment identifier.
   * @param amazonOrderId {String} An Amazon-defined order identifier, in 3-7-7 format.
   * @param itemList {[Item]} The list of items you want to include in a shipment.
   * @param shipFromAddress {Address}
   * @param shipToAddress {Address}
   * @param packageDimensions {PackageDimensions}
   * @param weight {Weight}
   * @param insurance {CurrencyAmount}
   * @param shippingService {ShippingService}
   * @param label {Label}
   * @param status {ShipmentStatus}
   * @param createdDate {Date} Date-time formatted timestamp.
   */
  constructor (shipmentId, amazonOrderId, itemList, shipFromAddress, shipToAddress, packageDimensions, weight, insurance, shippingService, label, status, createdDate) {
    this.shipmentId = shipmentId
    this.amazonOrderId = amazonOrderId
    this.itemList = itemList
    this.shipFromAddress = shipFromAddress
    this.shipToAddress = shipToAddress
    this.packageDimensions = packageDimensions
    this.weight = weight
    this.insurance = insurance
    this.shippingService = shippingService
    this.label = label
    this.status = status
    this.createdDate = createdDate
  }

  /**
   * Constructs a <code>Shipment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {Shipment} obj Optional instance to populate.
   * @return {Shipment} The populated <code>Shipment</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new Shipment()
      if (data.hasOwnProperty('ShipmentId')) { obj.shipmentId = ApiClient.convertToType(data.ShipmentId, 'String') }
      if (data.hasOwnProperty('AmazonOrderId')) { obj.amazonOrderId = ApiClient.convertToType(data.AmazonOrderId, 'String') }
      if (data.hasOwnProperty('SellerOrderId')) { obj.sellerOrderId = ApiClient.convertToType(data.SellerOrderId, 'String') }
      if (data.hasOwnProperty('ItemList')) { obj.itemList = ApiClient.convertToType(data.ItemList, [Item]) }
      if (data.hasOwnProperty('ShipFromAddress')) { obj.shipFromAddress = Address.constructFromObject(data.ShipFromAddress) }
      if (data.hasOwnProperty('ShipToAddress')) { obj.shipToAddress = Address.constructFromObject(data.ShipToAddress) }
      if (data.hasOwnProperty('PackageDimensions')) { obj.packageDimensions = PackageDimensions.constructFromObject(data.PackageDimensions) }
      if (data.hasOwnProperty('Weight')) { obj.weight = Weight.constructFromObject(data.Weight) }
      if (data.hasOwnProperty('Insurance')) { obj.insurance = CurrencyAmount.constructFromObject(data.Insurance) }
      if (data.hasOwnProperty('ShippingService')) { obj.shippingService = ShippingService.constructFromObject(data.ShippingService) }
      if (data.hasOwnProperty('Label')) { obj.label = Label.constructFromObject(data.Label) }
      if (data.hasOwnProperty('Status')) { obj.status = ShipmentStatus.constructFromObject(data.Status) }
      if (data.hasOwnProperty('TrackingId')) { obj.trackingId = ApiClient.convertToType(data.TrackingId, 'String') }
      if (data.hasOwnProperty('CreatedDate')) { obj.createdDate = ApiClient.convertToType(data.CreatedDate, 'Date') }
      if (data.hasOwnProperty('LastUpdatedDate')) { obj.lastUpdatedDate = ApiClient.convertToType(data.LastUpdatedDate, 'Date') }
    }
    return obj
  }
}

/**
 * An Amazon-defined shipment identifier.
 * @member {String} shipmentId
 * @type {String}
 */
Shipment.prototype.shipmentId = undefined

/**
 * An Amazon-defined order identifier, in 3-7-7 format.
 * @member {String} amazonOrderId
 * @type {String}
 */
Shipment.prototype.amazonOrderId = undefined

/**
 * A seller-defined order identifier.
 * @member {String} sellerOrderId
 * @type {String}
 */
Shipment.prototype.sellerOrderId = undefined

/**
 * The list of items you want to include in a shipment.
 * @member {[Item]} itemList
 * @type {[Item]}
 */
Shipment.prototype.itemList = undefined

/**
 * @member {Address} shipFromAddress
 * @type {Address}
 */
Shipment.prototype.shipFromAddress = undefined

/**
 * @member {Address} shipToAddress
 * @type {Address}
 */
Shipment.prototype.shipToAddress = undefined

/**
 * @member {PackageDimensions} packageDimensions
 * @type {PackageDimensions}
 */
Shipment.prototype.packageDimensions = undefined

/**
 * @member {Weight} weight
 * @type {Weight}
 */
Shipment.prototype.weight = undefined

/**
 * @member {CurrencyAmount} insurance
 * @type {CurrencyAmount}
 */
Shipment.prototype.insurance = undefined

/**
 * @member {ShippingService} shippingService
 * @type {ShippingService}
 */
Shipment.prototype.shippingService = undefined

/**
 * @member {Label} label
 * @type {Label}
 */
Shipment.prototype.label = undefined

/**
 * @member {ShipmentStatus} status
 * @type {ShipmentStatus}
 */
Shipment.prototype.status = undefined

/**
 * The shipment tracking identifier provided by the carrier.
 * @member {String} trackingId
 * @type {String}
 */
Shipment.prototype.trackingId = undefined

/**
 * Date-time formatted timestamp.
 * @member {Date} createdDate
 * @type {Date}
 */
Shipment.prototype.createdDate = undefined

/**
 * Date-time formatted timestamp.
 * @member {Date} lastUpdatedDate
 * @type {Date}
 */
Shipment.prototype.lastUpdatedDate = undefined
