/**
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Address} from './Address.js';
import {CurrencyAmount} from './CurrencyAmount.js';
import {Item} from './Item.js';
import {Label} from './Label.js';
import {PackageDimensions} from './PackageDimensions.js';
import {ShipmentStatus} from './ShipmentStatus.js';
import {ShippingService} from './ShippingService.js';
import {Weight} from './Weight.js';

/**
 * The Shipment model module.
 * @module merchantfulfillment_v0/model/Shipment
 * @version v0
 */
export class Shipment {
  /**
   * Constructs a new <code>Shipment</code>.
   * The details of a shipment. Includes the shipment status.
   * @alias module:merchantfulfillment_v0/model/Shipment
   * @class
   * @param shipmentId {String} An Amazon-defined shipment identifier.
   * @param amazonOrderId {String} An Amazon-defined order identifier, in 3-7-7 format.
   * @param itemList {Array.<module:merchantfulfillment_v0/model/Item>} The list of items you want to include in a shipment.
   * @param shipFromAddress {module:merchantfulfillment_v0/model/Address} 
   * @param shipToAddress {module:merchantfulfillment_v0/model/Address} 
   * @param packageDimensions {module:merchantfulfillment_v0/model/PackageDimensions} 
   * @param weight {module:merchantfulfillment_v0/model/Weight} 
   * @param insurance {module:merchantfulfillment_v0/model/CurrencyAmount} 
   * @param shippingService {module:merchantfulfillment_v0/model/ShippingService} 
   * @param label {module:merchantfulfillment_v0/model/Label} 
   * @param status {module:merchantfulfillment_v0/model/ShipmentStatus} 
   * @param createdDate {Date} Date-time formatted timestamp.
   */
  constructor(shipmentId, amazonOrderId, itemList, shipFromAddress, shipToAddress, packageDimensions, weight, insurance, shippingService, label, status, createdDate) {
    this.shipmentId = shipmentId;
    this.amazonOrderId = amazonOrderId;
    this.itemList = itemList;
    this.shipFromAddress = shipFromAddress;
    this.shipToAddress = shipToAddress;
    this.packageDimensions = packageDimensions;
    this.weight = weight;
    this.insurance = insurance;
    this.shippingService = shippingService;
    this.label = label;
    this.status = status;
    this.createdDate = createdDate;
  }

  /**
   * Constructs a <code>Shipment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:merchantfulfillment_v0/model/Shipment} obj Optional instance to populate.
   * @return {module:merchantfulfillment_v0/model/Shipment} The populated <code>Shipment</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Shipment();
      if (data.hasOwnProperty('ShipmentId'))
        obj.shipmentId = ApiClient.convertToType(data['ShipmentId'], 'String');
      if (data.hasOwnProperty('AmazonOrderId'))
        obj.amazonOrderId = ApiClient.convertToType(data['AmazonOrderId'], 'String');
      if (data.hasOwnProperty('SellerOrderId'))
        obj.sellerOrderId = ApiClient.convertToType(data['SellerOrderId'], 'String');
      if (data.hasOwnProperty('ItemList'))
        obj.itemList = ApiClient.convertToType(data['ItemList'], [Item]);
      if (data.hasOwnProperty('ShipFromAddress'))
        obj.shipFromAddress = Address.constructFromObject(data['ShipFromAddress']);
      if (data.hasOwnProperty('ShipToAddress'))
        obj.shipToAddress = Address.constructFromObject(data['ShipToAddress']);
      if (data.hasOwnProperty('PackageDimensions'))
        obj.packageDimensions = PackageDimensions.constructFromObject(data['PackageDimensions']);
      if (data.hasOwnProperty('Weight'))
        obj.weight = Weight.constructFromObject(data['Weight']);
      if (data.hasOwnProperty('Insurance'))
        obj.insurance = CurrencyAmount.constructFromObject(data['Insurance']);
      if (data.hasOwnProperty('ShippingService'))
        obj.shippingService = ShippingService.constructFromObject(data['ShippingService']);
      if (data.hasOwnProperty('Label'))
        obj.label = Label.constructFromObject(data['Label']);
      if (data.hasOwnProperty('Status'))
        obj.status = ShipmentStatus.constructFromObject(data['Status']);
      if (data.hasOwnProperty('TrackingId'))
        obj.trackingId = ApiClient.convertToType(data['TrackingId'], 'String');
      if (data.hasOwnProperty('CreatedDate'))
        obj.createdDate = ApiClient.convertToType(data['CreatedDate'], 'Date');
      if (data.hasOwnProperty('LastUpdatedDate'))
        obj.lastUpdatedDate = ApiClient.convertToType(data['LastUpdatedDate'], 'Date');
    }
    return obj;
  }
}

/**
 * An Amazon-defined shipment identifier.
 * @member {String} shipmentId
 */
Shipment.prototype.shipmentId = undefined;

/**
 * An Amazon-defined order identifier, in 3-7-7 format.
 * @member {String} amazonOrderId
 */
Shipment.prototype.amazonOrderId = undefined;

/**
 * A seller-defined order identifier.
 * @member {String} sellerOrderId
 */
Shipment.prototype.sellerOrderId = undefined;

/**
 * The list of items you want to include in a shipment.
 * @member {Array.<module:merchantfulfillment_v0/model/Item>} itemList
 */
Shipment.prototype.itemList = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/Address} shipFromAddress
 */
Shipment.prototype.shipFromAddress = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/Address} shipToAddress
 */
Shipment.prototype.shipToAddress = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/PackageDimensions} packageDimensions
 */
Shipment.prototype.packageDimensions = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/Weight} weight
 */
Shipment.prototype.weight = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/CurrencyAmount} insurance
 */
Shipment.prototype.insurance = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/ShippingService} shippingService
 */
Shipment.prototype.shippingService = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/Label} label
 */
Shipment.prototype.label = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/ShipmentStatus} status
 */
Shipment.prototype.status = undefined;

/**
 * The shipment tracking identifier provided by the carrier.
 * @member {String} trackingId
 */
Shipment.prototype.trackingId = undefined;

/**
 * Date-time formatted timestamp.
 * @member {Date} createdDate
 */
Shipment.prototype.createdDate = undefined;

/**
 * Date-time formatted timestamp.
 * @member {Date} lastUpdatedDate
 */
Shipment.prototype.lastUpdatedDate = undefined;


