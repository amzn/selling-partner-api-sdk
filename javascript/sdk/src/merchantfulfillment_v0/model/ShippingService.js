/**
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {AvailableShippingServiceOptions} from './AvailableShippingServiceOptions.js';
import {Benefits} from './Benefits.js';
import {CurrencyAmount} from './CurrencyAmount.js';
import {LabelFormat} from './LabelFormat.js';
import {LabelFormatOption} from './LabelFormatOption.js';
import {ShippingServiceOptions} from './ShippingServiceOptions.js';

/**
 * The ShippingService model module.
 * @module merchantfulfillment_v0/model/ShippingService
 * @version v0
 */
export class ShippingService {
  /**
   * Constructs a new <code>ShippingService</code>.
   * A shipping service offer made by a carrier.
   * @alias module:merchantfulfillment_v0/model/ShippingService
   * @class
   * @param shippingServiceName {String} A plain text representation of a carrier's shipping service. For example, \"UPS Ground\" or \"FedEx Standard Overnight\". 
   * @param carrierName {String} The name of the carrier.
   * @param shippingServiceId {String} An Amazon-defined shipping service identifier.
   * @param shippingServiceOfferId {String} An Amazon-defined shipping service offer identifier.
   * @param shipDate {Date} Date-time formatted timestamp.
   * @param rate {module:merchantfulfillment_v0/model/CurrencyAmount} 
   * @param shippingServiceOptions {module:merchantfulfillment_v0/model/ShippingServiceOptions} 
   * @param requiresAdditionalSellerInputs {Boolean} When true, additional seller inputs are required.
   */
  constructor(shippingServiceName, carrierName, shippingServiceId, shippingServiceOfferId, shipDate, rate, shippingServiceOptions, requiresAdditionalSellerInputs) {
    this.shippingServiceName = shippingServiceName;
    this.carrierName = carrierName;
    this.shippingServiceId = shippingServiceId;
    this.shippingServiceOfferId = shippingServiceOfferId;
    this.shipDate = shipDate;
    this.rate = rate;
    this.shippingServiceOptions = shippingServiceOptions;
    this.requiresAdditionalSellerInputs = requiresAdditionalSellerInputs;
  }

  /**
   * Constructs a <code>ShippingService</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:merchantfulfillment_v0/model/ShippingService} obj Optional instance to populate.
   * @return {module:merchantfulfillment_v0/model/ShippingService} The populated <code>ShippingService</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new ShippingService();
      if (data.hasOwnProperty('ShippingServiceName'))
        obj.shippingServiceName = ApiClient.convertToType(data['ShippingServiceName'], 'String');
      if (data.hasOwnProperty('CarrierName'))
        obj.carrierName = ApiClient.convertToType(data['CarrierName'], 'String');
      if (data.hasOwnProperty('ShippingServiceId'))
        obj.shippingServiceId = ApiClient.convertToType(data['ShippingServiceId'], 'String');
      if (data.hasOwnProperty('ShippingServiceOfferId'))
        obj.shippingServiceOfferId = ApiClient.convertToType(data['ShippingServiceOfferId'], 'String');
      if (data.hasOwnProperty('ShipDate'))
        obj.shipDate = ApiClient.convertToType(data['ShipDate'], 'Date');
      if (data.hasOwnProperty('EarliestEstimatedDeliveryDate'))
        obj.earliestEstimatedDeliveryDate = ApiClient.convertToType(data['EarliestEstimatedDeliveryDate'], 'Date');
      if (data.hasOwnProperty('LatestEstimatedDeliveryDate'))
        obj.latestEstimatedDeliveryDate = ApiClient.convertToType(data['LatestEstimatedDeliveryDate'], 'Date');
      if (data.hasOwnProperty('Rate'))
        obj.rate = CurrencyAmount.constructFromObject(data['Rate']);
      if (data.hasOwnProperty('ShippingServiceOptions'))
        obj.shippingServiceOptions = ShippingServiceOptions.constructFromObject(data['ShippingServiceOptions']);
      if (data.hasOwnProperty('AvailableShippingServiceOptions'))
        obj.availableShippingServiceOptions = AvailableShippingServiceOptions.constructFromObject(data['AvailableShippingServiceOptions']);
      if (data.hasOwnProperty('AvailableLabelFormats'))
        obj.availableLabelFormats = ApiClient.convertToType(data['AvailableLabelFormats'], [LabelFormat]);
      if (data.hasOwnProperty('AvailableFormatOptionsForLabel'))
        obj.availableFormatOptionsForLabel = ApiClient.convertToType(data['AvailableFormatOptionsForLabel'], [LabelFormatOption]);
      if (data.hasOwnProperty('RequiresAdditionalSellerInputs'))
        obj.requiresAdditionalSellerInputs = ApiClient.convertToType(data['RequiresAdditionalSellerInputs'], 'Boolean');
      if (data.hasOwnProperty('Benefits'))
        obj.benefits = Benefits.constructFromObject(data['Benefits']);
    }
    return obj;
  }
}

/**
 * A plain text representation of a carrier's shipping service. For example, \"UPS Ground\" or \"FedEx Standard Overnight\". 
 * @member {String} shippingServiceName
 */
ShippingService.prototype.shippingServiceName = undefined;

/**
 * The name of the carrier.
 * @member {String} carrierName
 */
ShippingService.prototype.carrierName = undefined;

/**
 * An Amazon-defined shipping service identifier.
 * @member {String} shippingServiceId
 */
ShippingService.prototype.shippingServiceId = undefined;

/**
 * An Amazon-defined shipping service offer identifier.
 * @member {String} shippingServiceOfferId
 */
ShippingService.prototype.shippingServiceOfferId = undefined;

/**
 * Date-time formatted timestamp.
 * @member {Date} shipDate
 */
ShippingService.prototype.shipDate = undefined;

/**
 * Date-time formatted timestamp.
 * @member {Date} earliestEstimatedDeliveryDate
 */
ShippingService.prototype.earliestEstimatedDeliveryDate = undefined;

/**
 * Date-time formatted timestamp.
 * @member {Date} latestEstimatedDeliveryDate
 */
ShippingService.prototype.latestEstimatedDeliveryDate = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/CurrencyAmount} rate
 */
ShippingService.prototype.rate = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/ShippingServiceOptions} shippingServiceOptions
 */
ShippingService.prototype.shippingServiceOptions = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/AvailableShippingServiceOptions} availableShippingServiceOptions
 */
ShippingService.prototype.availableShippingServiceOptions = undefined;

/**
 * List of label formats.
 * @member {Array.<module:merchantfulfillment_v0/model/LabelFormat>} availableLabelFormats
 */
ShippingService.prototype.availableLabelFormats = undefined;

/**
 * The available label formats.
 * @member {Array.<module:merchantfulfillment_v0/model/LabelFormatOption>} availableFormatOptionsForLabel
 */
ShippingService.prototype.availableFormatOptionsForLabel = undefined;

/**
 * When true, additional seller inputs are required.
 * @member {Boolean} requiresAdditionalSellerInputs
 */
ShippingService.prototype.requiresAdditionalSellerInputs = undefined;

/**
 * @member {module:merchantfulfillment_v0/model/Benefits} benefits
 */
ShippingService.prototype.benefits = undefined;


