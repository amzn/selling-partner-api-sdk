/**
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { CurrencyAmount } from './CurrencyAmount.js'
import { DeliveryExperienceOption } from './DeliveryExperienceOption.js'

/**
 * The AvailableDeliveryExperienceOption model module.
 * @module merchantfulfillment_v0/model/AvailableDeliveryExperienceOption
 * @version v0
 */
export class AvailableDeliveryExperienceOption {
  /**
   * Constructs a new <code>AvailableDeliveryExperienceOption</code>.
   * The available delivery confirmation options, and the fee charged, if any.
   * @alias module:merchantfulfillment_v0/model/AvailableDeliveryExperienceOption
   * @class
   * @param deliveryExperienceOption {DeliveryExperienceOption}
   * @param charge {CurrencyAmount}
   */
  constructor (deliveryExperienceOption, charge) {
    this.deliveryExperienceOption = deliveryExperienceOption
    this.charge = charge
  }

  /**
   * Constructs a <code>AvailableDeliveryExperienceOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {AvailableDeliveryExperienceOption} obj Optional instance to populate.
   * @return {AvailableDeliveryExperienceOption} The populated <code>AvailableDeliveryExperienceOption</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new AvailableDeliveryExperienceOption()
      if (data.hasOwnProperty('DeliveryExperienceOption')) { obj.deliveryExperienceOption = DeliveryExperienceOption.constructFromObject(data.DeliveryExperienceOption) }
      if (data.hasOwnProperty('Charge')) { obj.charge = CurrencyAmount.constructFromObject(data.Charge) }
    }
    return obj
  }
}

/**
 * @member {DeliveryExperienceOption} deliveryExperienceOption
 * @type {DeliveryExperienceOption}
 */
AvailableDeliveryExperienceOption.prototype.deliveryExperienceOption = undefined

/**
 * @member {CurrencyAmount} charge
 * @type {CurrencyAmount}
 */
AvailableDeliveryExperienceOption.prototype.charge = undefined
