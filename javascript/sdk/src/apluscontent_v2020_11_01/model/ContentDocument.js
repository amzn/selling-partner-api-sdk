/**
 * Selling Partner API for A+ Content Management
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {ContentModule} from './ContentModule.js';
import {ContentType} from './ContentType.js';

/**
 * The ContentDocument model module.
 * @module apluscontent_v2020_11_01/model/ContentDocument
 * @version 2020-11-01
 */
export class ContentDocument {
  /**
   * Constructs a new <code>ContentDocument</code>.
   * The A+ Content document. This is the enhanced content that is published to product detail pages.
   * @alias module:apluscontent_v2020_11_01/model/ContentDocument
   * @class
   * @param name {String} The A+ Content document name.
   * @param contentType {module:apluscontent_v2020_11_01/model/ContentType} 
   * @param locale {String} The IETF language tag, which supports the primary language subtag and one secondary language subtag. The secondary language subtag is usually a regional designation. This doesn't support subtags other than the primary and secondary subtags. **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
   * @param contentModuleList {Array.<module:apluscontent_v2020_11_01/model/ContentModule>} A list of A+ Content modules.
   */
  constructor(name, contentType, locale, contentModuleList) {
    this.name = name;
    this.contentType = contentType;
    this.locale = locale;
    this.contentModuleList = contentModuleList;
  }

  /**
   * Constructs a <code>ContentDocument</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:apluscontent_v2020_11_01/model/ContentDocument} obj Optional instance to populate.
   * @return {module:apluscontent_v2020_11_01/model/ContentDocument} The populated <code>ContentDocument</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new ContentDocument();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('contentType'))
        obj.contentType = ContentType.constructFromObject(data['contentType']);
      if (data.hasOwnProperty('contentSubType'))
        obj.contentSubType = ApiClient.convertToType(data['contentSubType'], 'String');
      if (data.hasOwnProperty('locale'))
        obj.locale = ApiClient.convertToType(data['locale'], 'String');
      if (data.hasOwnProperty('contentModuleList'))
        obj.contentModuleList = ApiClient.convertToType(data['contentModuleList'], [ContentModule]);
    }
    return obj;
  }
}

/**
 * The A+ Content document name.
 * @member {String} name
 */
ContentDocument.prototype.name = undefined;

/**
 * @member {module:apluscontent_v2020_11_01/model/ContentType} contentType
 */
ContentDocument.prototype.contentType = undefined;

/**
 * The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type has a subtype, and subtypes can change at any time.
 * @member {String} contentSubType
 */
ContentDocument.prototype.contentSubType = undefined;

/**
 * The IETF language tag, which supports the primary language subtag and one secondary language subtag. The secondary language subtag is usually a regional designation. This doesn't support subtags other than the primary and secondary subtags. **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
 * @member {String} locale
 */
ContentDocument.prototype.locale = undefined;

/**
 * A list of A+ Content modules.
 * @member {Array.<module:apluscontent_v2020_11_01/model/ContentModule>} contentModuleList
 */
ContentDocument.prototype.contentModuleList = undefined;


