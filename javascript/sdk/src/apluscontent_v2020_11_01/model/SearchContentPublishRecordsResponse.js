/**
 * Selling Partner API for A+ Content Management
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {AplusPaginatedResponse} from './AplusPaginatedResponse.js';
import {Error} from './Error.js';
import {PublishRecord} from './PublishRecord.js';

/**
 * The SearchContentPublishRecordsResponse model module.
 * @module apluscontent_v2020_11_01/model/SearchContentPublishRecordsResponse
 * @version 2020-11-01
 */
export class SearchContentPublishRecordsResponse {
  /**
   * Constructs a new <code>SearchContentPublishRecordsResponse</code>.
   * @alias module:apluscontent_v2020_11_01/model/SearchContentPublishRecordsResponse
   * @class
   * @implements module:apluscontent_v2020_11_01/model/AplusPaginatedResponse
   * @param publishRecordList {Array.<module:apluscontent_v2020_11_01/model/PublishRecord>} A list of A+ Content publishing records.
   */
  constructor(publishRecordList) {
    AplusPaginatedResponse.call(this);
    this.publishRecordList = publishRecordList;
  }

  /**
   * Constructs a <code>SearchContentPublishRecordsResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:apluscontent_v2020_11_01/model/SearchContentPublishRecordsResponse} obj Optional instance to populate.
   * @return {module:apluscontent_v2020_11_01/model/SearchContentPublishRecordsResponse} The populated <code>SearchContentPublishRecordsResponse</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new SearchContentPublishRecordsResponse();
      AplusPaginatedResponse.constructFromObject(data, obj);
      if (data.hasOwnProperty('warnings'))
        obj.warnings = ApiClient.convertToType(data['warnings'], [Error]);
      if (data.hasOwnProperty('nextPageToken'))
        obj.nextPageToken = ApiClient.convertToType(data['nextPageToken'], 'String');
      if (data.hasOwnProperty('publishRecordList'))
        obj.publishRecordList = ApiClient.convertToType(data['publishRecordList'], [PublishRecord]);
    }
    return obj;
  }
}

/**
 * A set of messages to the user, such as warnings or comments.
 * @member {Array.<module:apluscontent_v2020_11_01/model/Error>} warnings
 */
SearchContentPublishRecordsResponse.prototype.warnings = undefined;

/**
 * A token that you use to fetch a specific page when there are multiple pages of results.
 * @member {String} nextPageToken
 */
SearchContentPublishRecordsResponse.prototype.nextPageToken = undefined;

/**
 * A list of A+ Content publishing records.
 * @member {Array.<module:apluscontent_v2020_11_01/model/PublishRecord>} publishRecordList
 */
SearchContentPublishRecordsResponse.prototype.publishRecordList = undefined;

// Implement AplusPaginatedResponse interface:
/**
 * A set of messages to the user, such as warnings or comments.
 * @member {Array.<module:apluscontent_v2020_11_01/model/Error>} warnings
 */
AplusPaginatedResponse.prototype.warnings = undefined;

/**
 * A token that you use to fetch a specific page when there are multiple pages of results.
 * @member {String} nextPageToken
 */
AplusPaginatedResponse.prototype.nextPageToken = undefined;


