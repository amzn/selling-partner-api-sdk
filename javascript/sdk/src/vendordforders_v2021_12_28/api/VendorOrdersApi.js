/**
 * Selling Partner API for Direct Fulfillment Orders
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {ErrorList} from '../model/ErrorList.js';
import {Order} from '../model/Order.js';
import {OrderList} from '../model/OrderList.js';
import {SubmitAcknowledgementRequest} from '../model/SubmitAcknowledgementRequest.js';
import {TransactionId} from '../model/TransactionId.js';

/**
* VendorOrders service.
* @module vendordforders_v2021_12_28/api/VendorOrdersApi
* @version 2021-12-28
*/
export class VendorOrdersApi {

    /**
    * Constructs a new VendorOrdersApi. 
    * @alias module:vendordforders_v2021_12_28/api/VendorOrdersApi
    * @class
    * @param {module:vendordforders_v2021_12_28/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:vendordforders_v2021_12_28/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} purchaseOrderNumber The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:vendordforders_v2021_12_28/model/Order} and HTTP response
     */
    getOrderWithHttpInfo(purchaseOrderNumber) {
      let postBody = null;

      // verify the required parameter 'purchaseOrderNumber' is set
      if (purchaseOrderNumber === undefined || purchaseOrderNumber === null) {
        throw new Error("Missing the required parameter 'purchaseOrderNumber' when calling getOrder");
      }


      let pathParams = {
        'purchaseOrderNumber': purchaseOrderNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/vendor/directFulfillment/orders/2021-12-28/purchaseOrders/{purchaseOrderNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} purchaseOrderNumber The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:vendordforders_v2021_12_28/model/Order}
     */
    getOrder(purchaseOrderNumber) {
      return this.getOrderWithHttpInfo(purchaseOrderNumber)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Date} createdAfter Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @param {Date} createdBefore Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @param {Object} opts Optional parameters
     * @param {String} opts.shipFromPartyId The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses.
     * @param {module:vendordforders_v2021_12_28/model/String} opts.status Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status.
     * @param {Number} opts.limit The limit to the number of purchase orders returned.
     * @param {module:vendordforders_v2021_12_28/model/String} opts.sortOrder Sort the list in ascending or descending order by order creation date.
     * @param {String} opts.nextToken Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
     * @param {Boolean} opts.includeDetails When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (default to &#39;true&#39;)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:vendordforders_v2021_12_28/model/OrderList} and HTTP response
     */
    getOrdersWithHttpInfo(createdAfter, createdBefore, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'createdAfter' is set
      if (createdAfter === undefined || createdAfter === null) {
        throw new Error("Missing the required parameter 'createdAfter' when calling getOrders");
      }

      // verify the required parameter 'createdBefore' is set
      if (createdBefore === undefined || createdBefore === null) {
        throw new Error("Missing the required parameter 'createdBefore' when calling getOrders");
      }


      let pathParams = {
      };
      let queryParams = {
        'shipFromPartyId': opts['shipFromPartyId'],
        'status': opts['status'],
        'limit': opts['limit'],
        'createdAfter': createdAfter,
        'createdBefore': createdBefore,
        'sortOrder': opts['sortOrder'],
        'nextToken': opts['nextToken'],
        'includeDetails': opts['includeDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json', 'pagination', 'orders'];
      let returnType = OrderList;

      return this.apiClient.callApi(
        '/vendor/directFulfillment/orders/2021-12-28/purchaseOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Date} createdAfter Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @param {Date} createdBefore Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @param {Object} opts Optional parameters
     * @param {String} opts.shipFromPartyId The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses.
     * @param {module:vendordforders_v2021_12_28/model/String} opts.status Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status.
     * @param {Number} opts.limit The limit to the number of purchase orders returned.
     * @param {module:vendordforders_v2021_12_28/model/String} opts.sortOrder Sort the list in ascending or descending order by order creation date.
     * @param {String} opts.nextToken Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
     * @param {Boolean} opts.includeDetails When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (default to &#39;true&#39;)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:vendordforders_v2021_12_28/model/OrderList}
     */
    getOrders(createdAfter, createdBefore, opts) {
      return this.getOrdersWithHttpInfo(createdAfter, createdBefore, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:vendordforders_v2021_12_28/model/SubmitAcknowledgementRequest} body The request body containing the acknowledgement to an order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:vendordforders_v2021_12_28/model/TransactionId} and HTTP response
     */
    submitAcknowledgementWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling submitAcknowledgement");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionId;

      return this.apiClient.callApi(
        '/vendor/directFulfillment/orders/2021-12-28/acknowledgements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:vendordforders_v2021_12_28/model/SubmitAcknowledgementRequest} body The request body containing the acknowledgement to an order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:vendordforders_v2021_12_28/model/TransactionId}
     */
    submitAcknowledgement(body) {
      return this.submitAcknowledgementWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
