/**
 * Selling Partner API for Direct Fulfillment Orders
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * The version of the OpenAPI document: 2021-12-28
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { Address } from './Address.js'
import { OrderItem } from './OrderItem.js'
import { PartyIdentification } from './PartyIdentification.js'
import { ShipmentDetails } from './ShipmentDetails.js'
import { TaxItemDetails } from './TaxItemDetails.js'

/**
 * The OrderDetails model module.
 * @module vendordforders_v2021_12_28/model/OrderDetails
 * @version 2021-12-28
 */
export class OrderDetails {
  /**
   * Constructs a new <code>OrderDetails</code>.
   * Details of an order.
   * @alias module:vendordforders_v2021_12_28/model/OrderDetails
   * @class
   * @param customerOrderNumber {String} The customer order number.
   * @param orderDate {Date} The date the order was placed. This  field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed.
   * @param shipmentDetails {ShipmentDetails}
   * @param sellingParty {PartyIdentification}
   * @param shipFromParty {PartyIdentification}
   * @param shipToParty {Address}
   * @param billToParty {PartyIdentification}
   * @param items {[OrderItem]} A list of items in this purchase order.
   */
  constructor (customerOrderNumber, orderDate, shipmentDetails, sellingParty, shipFromParty, shipToParty, billToParty, items) {
    this.customerOrderNumber = customerOrderNumber
    this.orderDate = orderDate
    this.shipmentDetails = shipmentDetails
    this.sellingParty = sellingParty
    this.shipFromParty = shipFromParty
    this.shipToParty = shipToParty
    this.billToParty = billToParty
    this.items = items
  }

  /**
   * Constructs a <code>OrderDetails</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {OrderDetails} obj Optional instance to populate.
   * @return {OrderDetails} The populated <code>OrderDetails</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new OrderDetails()
      if (data.hasOwnProperty('customerOrderNumber')) { obj.customerOrderNumber = ApiClient.convertToType(data.customerOrderNumber, 'String') }
      if (data.hasOwnProperty('orderDate')) { obj.orderDate = ApiClient.convertToType(data.orderDate, 'Date') }
      if (data.hasOwnProperty('orderStatus')) { obj.orderStatus = ApiClient.convertToType(data.orderStatus, 'String') }
      if (data.hasOwnProperty('shipmentDetails')) { obj.shipmentDetails = ShipmentDetails.constructFromObject(data.shipmentDetails) }
      if (data.hasOwnProperty('taxTotal')) { obj.taxTotal = TaxItemDetails.constructFromObject(data.taxTotal) }
      if (data.hasOwnProperty('sellingParty')) { obj.sellingParty = PartyIdentification.constructFromObject(data.sellingParty) }
      if (data.hasOwnProperty('shipFromParty')) { obj.shipFromParty = PartyIdentification.constructFromObject(data.shipFromParty) }
      if (data.hasOwnProperty('shipToParty')) { obj.shipToParty = Address.constructFromObject(data.shipToParty) }
      if (data.hasOwnProperty('billToParty')) { obj.billToParty = PartyIdentification.constructFromObject(data.billToParty) }
      if (data.hasOwnProperty('items')) { obj.items = ApiClient.convertToType(data.items, [OrderItem]) }
    }
    return obj
  }
}

/**
 * The customer order number.
 * @member {String} customerOrderNumber
 * @type {String}
 */
OrderDetails.prototype.customerOrderNumber = undefined

/**
 * The date the order was placed. This  field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed.
 * @member {Date} orderDate
 * @type {Date}
 */
OrderDetails.prototype.orderDate = undefined

/**
 * Allowed values for the <code>orderStatus</code> property.
 * @enum {String}
 * @readonly
 */
OrderDetails.OrderStatusEnum = {

  /**
     * value: "NEW"
     * @const
     */
  NEW: 'NEW',

  /**
     * value: "SHIPPED"
     * @const
     */
  SHIPPED: 'SHIPPED',

  /**
     * value: "ACCEPTED"
     * @const
     */
  ACCEPTED: 'ACCEPTED',

  /**
     * value: "CANCELLED"
     * @const
     */
  CANCELLED: 'CANCELLED'
}
/**
 * Current status of the order.
 * @member {String} orderStatus
 * @type {String}
 */
OrderDetails.prototype.orderStatus = undefined

/**
 * @member {ShipmentDetails} shipmentDetails
 * @type {ShipmentDetails}
 */
OrderDetails.prototype.shipmentDetails = undefined

/**
 * @member {TaxItemDetails} taxTotal
 * @type {TaxItemDetails}
 */
OrderDetails.prototype.taxTotal = undefined

/**
 * @member {PartyIdentification} sellingParty
 * @type {PartyIdentification}
 */
OrderDetails.prototype.sellingParty = undefined

/**
 * @member {PartyIdentification} shipFromParty
 * @type {PartyIdentification}
 */
OrderDetails.prototype.shipFromParty = undefined

/**
 * @member {Address} shipToParty
 * @type {Address}
 */
OrderDetails.prototype.shipToParty = undefined

/**
 * @member {PartyIdentification} billToParty
 * @type {PartyIdentification}
 */
OrderDetails.prototype.billToParty = undefined

/**
 * A list of items in this purchase order.
 * @member {[OrderItem]} items
 * @type {[OrderItem]}
 */
OrderDetails.prototype.items = undefined
