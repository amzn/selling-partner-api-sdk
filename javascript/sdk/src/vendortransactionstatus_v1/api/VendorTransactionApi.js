/**
 * Selling Partner API for Retail Procurement Transaction Status
 * The Selling Partner API for Retail Procurement Transaction Status provides programmatic access to status information on specific asynchronous POST transactions for vendors.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {GetTransactionResponse} from '../model/GetTransactionResponse.js';
import {SuperagentRateLimiter} from '../../../helper/SuperagentRateLimiter.mjs';
import {DefaultRateLimitFetcher} from '../../../helper/DefaultRateLimitFetcher.mjs';

/**
* VendorTransaction service.
* @module vendortransactionstatus_v1/api/VendorTransactionApi
* @version v1
*/
export class VendorTransactionApi {

    // Private memeber stores the default rate limiters
    #defaultRateLimiterMap;

    /**
    * Constructs a new VendorTransactionApi. 
    * @alias module:vendortransactionstatus_v1/api/VendorTransactionApi
    * @class
    * @param {module:vendortransactionstatus_v1/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:vendortransactionstatus_v1/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.initializeDefaultRateLimiterMap();
    }

    /**
     * Initialize rate limiters for API operations
     */
    initializeDefaultRateLimiterMap() {
        this.#defaultRateLimiterMap = new Map()
        const defaultRateLimitFetcher = new DefaultRateLimitFetcher();
        const operations = [
            'VendorTransactionApi-getTransaction',
        ];

        for (const operation of operations) {
            const config = defaultRateLimitFetcher.getLimit(operation);
            this.#defaultRateLimiterMap.set(operation, new SuperagentRateLimiter(config));
        }
    }

    /**
     * Get rate limiter for a specific operation
     * @param {String} operation name
     */
    getRateLimiter(operation) {
        return this.#defaultRateLimiterMap.get(operation);
    }



    /**
     * Returns the status of the transaction that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} transactionId The GUID provided by Amazon in the &#39;transactionId&#39; field in response to the post request of a specific transaction.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:vendortransactionstatus_v1/model/GetTransactionResponse} and HTTP response
     */
    getTransactionWithHttpInfo(transactionId) {
      let postBody = null;

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransaction");
      }


      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTransactionResponse;

      return this.apiClient.callApi( 'VendorTransactionApi-getTransaction',
        '/vendor/transactions/v1/transactions/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, this.getRateLimiter('VendorTransactionApi-getTransaction')
      );
    }

    /**
     * Returns the status of the transaction that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} transactionId The GUID provided by Amazon in the &#39;transactionId&#39; field in response to the post request of a specific transaction.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:vendortransactionstatus_v1/model/GetTransactionResponse}
     */
    getTransaction(transactionId) {
      return this.getTransactionWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
