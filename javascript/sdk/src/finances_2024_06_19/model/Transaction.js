/**
 * The Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { Breakdown } from './Breakdown.js'
import { Context } from './Context.js'
import { Currency } from './Currency.js'
import { Item } from './Item.js'
import { MarketplaceDetails } from './MarketplaceDetails.js'
import { RelatedIdentifier } from './RelatedIdentifier.js'
import { SellingPartnerMetadata } from './SellingPartnerMetadata.js'

/**
 * The Transaction model module.
 * @module finances_2024_06_19/model/Transaction
 * @version 2024-06-19
 */
export class Transaction {
  /**
   * Constructs a new <code>Transaction</code>.
   * Contains all information related to the transaction.
   * @alias module:finances_2024_06_19/model/Transaction
   * @class
   */
  constructor () {
  }

  /**
   * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {Transaction} obj Optional instance to populate.
   * @return {Transaction} The populated <code>Transaction</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new Transaction()
      if (data.hasOwnProperty('sellingPartnerMetadata')) { obj.sellingPartnerMetadata = SellingPartnerMetadata.constructFromObject(data.sellingPartnerMetadata) }
      if (data.hasOwnProperty('relatedIdentifiers')) { obj.relatedIdentifiers = ApiClient.convertToType(data.relatedIdentifiers, [RelatedIdentifier]) }
      if (data.hasOwnProperty('transactionType')) { obj.transactionType = ApiClient.convertToType(data.transactionType, 'String') }
      if (data.hasOwnProperty('transactionId')) { obj.transactionId = ApiClient.convertToType(data.transactionId, 'String') }
      if (data.hasOwnProperty('transactionStatus')) { obj.transactionStatus = ApiClient.convertToType(data.transactionStatus, 'String') }
      if (data.hasOwnProperty('description')) { obj.description = ApiClient.convertToType(data.description, 'String') }
      if (data.hasOwnProperty('postedDate')) { obj.postedDate = ApiClient.convertToType(data.postedDate, 'Date') }
      if (data.hasOwnProperty('totalAmount')) { obj.totalAmount = Currency.constructFromObject(data.totalAmount) }
      if (data.hasOwnProperty('marketplaceDetails')) { obj.marketplaceDetails = MarketplaceDetails.constructFromObject(data.marketplaceDetails) }
      if (data.hasOwnProperty('items')) { obj.items = ApiClient.convertToType(data.items, [Item]) }
      if (data.hasOwnProperty('contexts')) { obj.contexts = ApiClient.convertToType(data.contexts, [Context]) }
      if (data.hasOwnProperty('breakdowns')) { obj.breakdowns = ApiClient.convertToType(data.breakdowns, [Breakdown]) }
    }
    return obj
  }
}

/**
 * @member {SellingPartnerMetadata} sellingPartnerMetadata
 * @type {SellingPartnerMetadata}
 */
Transaction.prototype.sellingPartnerMetadata = undefined

/**
 * Related business identifiers of the transaction.
 * @member {[RelatedIdentifier]} relatedIdentifiers
 * @type {[RelatedIdentifier]}
 */
Transaction.prototype.relatedIdentifiers = undefined

/**
 * The type of transaction.  Possible values:  * Shipment
 * @member {String} transactionType
 * @type {String}
 */
Transaction.prototype.transactionType = undefined

/**
 * The unique identifier for the transaction.
 * @member {String} transactionId
 * @type {String}
 */
Transaction.prototype.transactionId = undefined

/**
 * The status of the transaction.  **Possible values:**  * `DEFERRED`: the transaction is currently deferred. * `RELEASED`: the transaction is currently released. * `DEFERRED_RELEASED`: the transaction was deferred in the past, but is now released. The status of a deferred transaction is updated to `DEFERRED_RELEASED` when the transaction is released.
 * @member {String} transactionStatus
 * @type {String}
 */
Transaction.prototype.transactionStatus = undefined

/**
 * Describes the reasons for the transaction.  Example: 'Order Payment','Refund Order'
 * @member {String} description
 * @type {String}
 */
Transaction.prototype.description = undefined

/**
 * Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
 * @member {Date} postedDate
 * @type {Date}
 */
Transaction.prototype.postedDate = undefined

/**
 * @member {Currency} totalAmount
 * @type {Currency}
 */
Transaction.prototype.totalAmount = undefined

/**
 * @member {MarketplaceDetails} marketplaceDetails
 * @type {MarketplaceDetails}
 */
Transaction.prototype.marketplaceDetails = undefined

/**
 * List of items in the transaction
 * @member {[Item]} items
 * @type {[Item]}
 */
Transaction.prototype.items = undefined

/**
 * List of additional Information about the item.
 * @member {[Context]} contexts
 * @type {[Context]}
 */
Transaction.prototype.contexts = undefined

/**
 * A list of breakdowns that detail how the total amount is calculated for the transaction.
 * @member {[Breakdown]} breakdowns
 * @type {[Breakdown]}
 */
Transaction.prototype.breakdowns = undefined
