/**
 * The Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {ErrorList} from '../model/ErrorList.js';
import {ListTransactionsResponse} from '../model/ListTransactionsResponse.js';
import {SuperagentRateLimiter} from '../../../helper/SuperagentRateLimiter.mjs';
import {DefaultRateLimitFetcher} from '../../../helper/DefaultRateLimitFetcher.mjs';

/**
* Default service.
* @module finances_2024_06_19/api/DefaultApi
* @version 2024-06-19
*/
export class DefaultApi {

    // Private memeber stores the default rate limiters
    #defaultRateLimiterMap;

    /**
    * Constructs a new DefaultApi. 
    * @alias module:finances_2024_06_19/api/DefaultApi
    * @class
    * @param {module:finances_2024_06_19/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:finances_2024_06_19/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.initializeDefaultRateLimiterMap();
    }

    /**
     * Initialize rate limiters for API operations
     */
    initializeDefaultRateLimiterMap() {
        this.#defaultRateLimiterMap = new Map()
        const defaultRateLimitFetcher = new DefaultRateLimitFetcher();
        const operations = [
            'DefaultApi-listTransactions',
        ];

        for (const operation of operations) {
            const config = defaultRateLimitFetcher.getLimit(operation);
            this.#defaultRateLimiterMap.set(operation, new SuperagentRateLimiter(config));
        }
    }

    /**
     * Get rate limiter for a specific operation
     * @param {String} operation name
     */
    getRateLimiter(operation) {
        return this.#defaultRateLimiterMap.get(operation);
    }



    /**
     * Returns transactions for the given parameters. It may take up to 48 hours for transactions to appear in your transaction events.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Date} postedAfter A date used for selecting transactions posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.postedBefore A date used for selecting transactions posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no transactions are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.
     * @param {String} opts.marketplaceId A string token used to select Marketplace ID.
     * @param {String} opts.nextToken A string token returned in the response of your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:finances_2024_06_19/model/ListTransactionsResponse} and HTTP response
     */
    listTransactionsWithHttpInfo(postedAfter, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'postedAfter' is set
      if (postedAfter === undefined || postedAfter === null) {
        throw new Error("Missing the required parameter 'postedAfter' when calling listTransactions");
      }


      let pathParams = {
      };
      let queryParams = {
        'postedAfter': postedAfter,
        'postedBefore': opts['postedBefore'],
        'marketplaceId': opts['marketplaceId'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTransactionsResponse;

      return this.apiClient.callApi( 'DefaultApi-listTransactions',
        '/finances/2024-06-19/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, this.getRateLimiter('DefaultApi-listTransactions')
      );
    }

    /**
     * Returns transactions for the given parameters. It may take up to 48 hours for transactions to appear in your transaction events.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Date} postedAfter A date used for selecting transactions posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.postedBefore A date used for selecting transactions posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no transactions are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.
     * @param {String} opts.marketplaceId A string token used to select Marketplace ID.
     * @param {String} opts.nextToken A string token returned in the response of your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:finances_2024_06_19/model/ListTransactionsResponse}
     */
    listTransactions(postedAfter, opts) {
      return this.listTransactionsWithHttpInfo(postedAfter, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
