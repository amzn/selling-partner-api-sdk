/**
 * Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { Currency } from './Currency.js'

/**
 * The AffordabilityExpenseEvent model module.
 * @module finances_v0/model/AffordabilityExpenseEvent
 * @version v0
 */
export class AffordabilityExpenseEvent {
  /**
   * Constructs a new <code>AffordabilityExpenseEvent</code>.
   * An expense related to an affordability promotion.
   * @alias module:finances_v0/model/AffordabilityExpenseEvent
   * @class
   * @param taxTypeCGST {Currency}
   * @param taxTypeSGST {Currency}
   * @param taxTypeIGST {Currency}
   */
  constructor (taxTypeCGST, taxTypeSGST, taxTypeIGST) {
    this.taxTypeCGST = taxTypeCGST
    this.taxTypeSGST = taxTypeSGST
    this.taxTypeIGST = taxTypeIGST
  }

  /**
   * Constructs a <code>AffordabilityExpenseEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {AffordabilityExpenseEvent} obj Optional instance to populate.
   * @return {AffordabilityExpenseEvent} The populated <code>AffordabilityExpenseEvent</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new AffordabilityExpenseEvent()
      if (data.hasOwnProperty('AmazonOrderId')) { obj.amazonOrderId = ApiClient.convertToType(data.AmazonOrderId, 'String') }
      if (data.hasOwnProperty('PostedDate')) { obj.postedDate = ApiClient.convertToType(data.PostedDate, 'Date') }
      if (data.hasOwnProperty('MarketplaceId')) { obj.marketplaceId = ApiClient.convertToType(data.MarketplaceId, 'String') }
      if (data.hasOwnProperty('TransactionType')) { obj.transactionType = ApiClient.convertToType(data.TransactionType, 'String') }
      if (data.hasOwnProperty('BaseExpense')) { obj.baseExpense = Currency.constructFromObject(data.BaseExpense) }
      if (data.hasOwnProperty('TaxTypeCGST')) { obj.taxTypeCGST = Currency.constructFromObject(data.TaxTypeCGST) }
      if (data.hasOwnProperty('TaxTypeSGST')) { obj.taxTypeSGST = Currency.constructFromObject(data.TaxTypeSGST) }
      if (data.hasOwnProperty('TaxTypeIGST')) { obj.taxTypeIGST = Currency.constructFromObject(data.TaxTypeIGST) }
      if (data.hasOwnProperty('TotalExpense')) { obj.totalExpense = Currency.constructFromObject(data.TotalExpense) }
    }
    return obj
  }
}

/**
 * An Amazon-defined identifier for an order.
 * @member {String} amazonOrderId
 * @type {String}
 */
AffordabilityExpenseEvent.prototype.amazonOrderId = undefined

/**
 * Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
 * @member {Date} postedDate
 * @type {Date}
 */
AffordabilityExpenseEvent.prototype.postedDate = undefined

/**
 * An encrypted, Amazon-defined marketplace identifier.
 * @member {String} marketplaceId
 * @type {String}
 */
AffordabilityExpenseEvent.prototype.marketplaceId = undefined

/**
 * Indicates the type of transaction.   Possible values:  * Charge - For an affordability promotion expense.  * Refund - For an affordability promotion expense reversal.
 * @member {String} transactionType
 * @type {String}
 */
AffordabilityExpenseEvent.prototype.transactionType = undefined

/**
 * @member {Currency} baseExpense
 * @type {Currency}
 */
AffordabilityExpenseEvent.prototype.baseExpense = undefined

/**
 * @member {Currency} taxTypeCGST
 * @type {Currency}
 */
AffordabilityExpenseEvent.prototype.taxTypeCGST = undefined

/**
 * @member {Currency} taxTypeSGST
 * @type {Currency}
 */
AffordabilityExpenseEvent.prototype.taxTypeSGST = undefined

/**
 * @member {Currency} taxTypeIGST
 * @type {Currency}
 */
AffordabilityExpenseEvent.prototype.taxTypeIGST = undefined

/**
 * @member {Currency} totalExpense
 * @type {Currency}
 */
AffordabilityExpenseEvent.prototype.totalExpense = undefined
