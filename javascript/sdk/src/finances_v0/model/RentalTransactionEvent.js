/**
 * Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {ChargeComponent} from './ChargeComponent.js';
import {Currency} from './Currency.js';
import {FeeComponent} from './FeeComponent.js';
import {TaxWithheldComponent} from './TaxWithheldComponent.js';

/**
 * The RentalTransactionEvent model module.
 * @module finances_v0/model/RentalTransactionEvent
 * @version v0
 */
export class RentalTransactionEvent {
  /**
   * Constructs a new <code>RentalTransactionEvent</code>.
   * An event related to a rental transaction.
   * @alias module:finances_v0/model/RentalTransactionEvent
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>RentalTransactionEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:finances_v0/model/RentalTransactionEvent} obj Optional instance to populate.
   * @return {module:finances_v0/model/RentalTransactionEvent} The populated <code>RentalTransactionEvent</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new RentalTransactionEvent();
      if (data.hasOwnProperty('AmazonOrderId'))
        obj.amazonOrderId = ApiClient.convertToType(data['AmazonOrderId'], 'String');
      if (data.hasOwnProperty('RentalEventType'))
        obj.rentalEventType = ApiClient.convertToType(data['RentalEventType'], 'String');
      if (data.hasOwnProperty('ExtensionLength'))
        obj.extensionLength = ApiClient.convertToType(data['ExtensionLength'], 'Number');
      if (data.hasOwnProperty('PostedDate'))
        obj.postedDate = ApiClient.convertToType(data['PostedDate'], 'Date');
      if (data.hasOwnProperty('RentalChargeList'))
        obj.rentalChargeList = ApiClient.convertToType(data['RentalChargeList'], [ChargeComponent]);
      if (data.hasOwnProperty('RentalFeeList'))
        obj.rentalFeeList = ApiClient.convertToType(data['RentalFeeList'], [FeeComponent]);
      if (data.hasOwnProperty('MarketplaceName'))
        obj.marketplaceName = ApiClient.convertToType(data['MarketplaceName'], 'String');
      if (data.hasOwnProperty('RentalInitialValue'))
        obj.rentalInitialValue = Currency.constructFromObject(data['RentalInitialValue']);
      if (data.hasOwnProperty('RentalReimbursement'))
        obj.rentalReimbursement = Currency.constructFromObject(data['RentalReimbursement']);
      if (data.hasOwnProperty('RentalTaxWithheldList'))
        obj.rentalTaxWithheldList = ApiClient.convertToType(data['RentalTaxWithheldList'], [TaxWithheldComponent]);
    }
    return obj;
  }
}

/**
 * An Amazon-defined identifier for an order.
 * @member {String} amazonOrderId
 */
RentalTransactionEvent.prototype.amazonOrderId = undefined;

/**
 * The type of rental event.  Possible values:  * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.  * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.  * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.  * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.  * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.  * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.  * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item.
 * @member {String} rentalEventType
 */
RentalTransactionEvent.prototype.rentalEventType = undefined;

/**
 * The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.
 * @member {Number} extensionLength
 */
RentalTransactionEvent.prototype.extensionLength = undefined;

/**
 * Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
 * @member {Date} postedDate
 */
RentalTransactionEvent.prototype.postedDate = undefined;

/**
 * A list of charge information on the seller's account.
 * @member {Array.<module:finances_v0/model/ChargeComponent>} rentalChargeList
 */
RentalTransactionEvent.prototype.rentalChargeList = undefined;

/**
 * A list of fee component information.
 * @member {Array.<module:finances_v0/model/FeeComponent>} rentalFeeList
 */
RentalTransactionEvent.prototype.rentalFeeList = undefined;

/**
 * The name of the marketplace.
 * @member {String} marketplaceName
 */
RentalTransactionEvent.prototype.marketplaceName = undefined;

/**
 * @member {module:finances_v0/model/Currency} rentalInitialValue
 */
RentalTransactionEvent.prototype.rentalInitialValue = undefined;

/**
 * @member {module:finances_v0/model/Currency} rentalReimbursement
 */
RentalTransactionEvent.prototype.rentalReimbursement = undefined;

/**
 * A list of information about taxes withheld.
 * @member {Array.<module:finances_v0/model/TaxWithheldComponent>} rentalTaxWithheldList
 */
RentalTransactionEvent.prototype.rentalTaxWithheldList = undefined;


