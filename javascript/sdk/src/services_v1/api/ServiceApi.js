/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {AddAppointmentRequest} from '../model/AddAppointmentRequest.js';
import {AssignAppointmentResourcesRequest} from '../model/AssignAppointmentResourcesRequest.js';
import {AssignAppointmentResourcesResponse} from '../model/AssignAppointmentResourcesResponse.js';
import {CancelReservationResponse} from '../model/CancelReservationResponse.js';
import {CancelServiceJobByServiceJobIdResponse} from '../model/CancelServiceJobByServiceJobIdResponse.js';
import {CompleteServiceJobByServiceJobIdResponse} from '../model/CompleteServiceJobByServiceJobIdResponse.js';
import {CreateReservationRequest} from '../model/CreateReservationRequest.js';
import {CreateReservationResponse} from '../model/CreateReservationResponse.js';
import {CreateServiceDocumentUploadDestination} from '../model/CreateServiceDocumentUploadDestination.js';
import {Error} from '../model/Error.js';
import {FixedSlotCapacity} from '../model/FixedSlotCapacity.js';
import {FixedSlotCapacityErrors} from '../model/FixedSlotCapacityErrors.js';
import {FixedSlotCapacityQuery} from '../model/FixedSlotCapacityQuery.js';
import {GetAppointmentSlotsResponse} from '../model/GetAppointmentSlotsResponse.js';
import {GetServiceJobByServiceJobIdResponse} from '../model/GetServiceJobByServiceJobIdResponse.js';
import {GetServiceJobsResponse} from '../model/GetServiceJobsResponse.js';
import {RangeSlotCapacity} from '../model/RangeSlotCapacity.js';
import {RangeSlotCapacityErrors} from '../model/RangeSlotCapacityErrors.js';
import {RangeSlotCapacityQuery} from '../model/RangeSlotCapacityQuery.js';
import {RescheduleAppointmentRequest} from '../model/RescheduleAppointmentRequest.js';
import {ServiceUploadDocument} from '../model/ServiceUploadDocument.js';
import {SetAppointmentFulfillmentDataRequest} from '../model/SetAppointmentFulfillmentDataRequest.js';
import {SetAppointmentResponse} from '../model/SetAppointmentResponse.js';
import {UpdateReservationRequest} from '../model/UpdateReservationRequest.js';
import {UpdateReservationResponse} from '../model/UpdateReservationResponse.js';
import {UpdateScheduleRequest} from '../model/UpdateScheduleRequest.js';
import {UpdateScheduleResponse} from '../model/UpdateScheduleResponse.js';

/**
* Service service.
* @module services_v1/api/ServiceApi
* @version v1
*/
export class ServiceApi {

    /**
    * Constructs a new ServiceApi. 
    * @alias module:services_v1/api/ServiceApi
    * @class
    * @param {module:services_v1/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:services_v1/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon defined service job identifier.
     * @param {module:services_v1/model/AddAppointmentRequest} body Add appointment operation input details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/SetAppointmentResponse} and HTTP response
     */
    addAppointmentForServiceJobByServiceJobIdWithHttpInfo(serviceJobId, body) {
      let postBody = body;

      // verify the required parameter 'serviceJobId' is set
      if (serviceJobId === undefined || serviceJobId === null) {
        throw new Error("Missing the required parameter 'serviceJobId' when calling addAppointmentForServiceJobByServiceJobId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addAppointmentForServiceJobByServiceJobId");
      }


      let pathParams = {
        'serviceJobId': serviceJobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetAppointmentResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/appointments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon defined service job identifier.
     * @param {module:services_v1/model/AddAppointmentRequest} body Add appointment operation input details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/SetAppointmentResponse}
     */
    addAppointmentForServiceJobByServiceJobId(serviceJobId, body) {
      return this.addAppointmentForServiceJobByServiceJobIdWithHttpInfo(serviceJobId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
     * @param {String} appointmentId An Amazon-defined identifier of active service job appointment.
     * @param {module:services_v1/model/AssignAppointmentResourcesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/AssignAppointmentResourcesResponse} and HTTP response
     */
    assignAppointmentResourcesWithHttpInfo(serviceJobId, appointmentId, body) {
      let postBody = body;

      // verify the required parameter 'serviceJobId' is set
      if (serviceJobId === undefined || serviceJobId === null) {
        throw new Error("Missing the required parameter 'serviceJobId' when calling assignAppointmentResources");
      }

      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling assignAppointmentResources");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assignAppointmentResources");
      }


      let pathParams = {
        'serviceJobId': serviceJobId,
        'appointmentId': appointmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignAppointmentResourcesResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
     * @param {String} appointmentId An Amazon-defined identifier of active service job appointment.
     * @param {module:services_v1/model/AssignAppointmentResourcesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/AssignAppointmentResourcesResponse}
     */
    assignAppointmentResources(serviceJobId, appointmentId, body) {
      return this.assignAppointmentResourcesWithHttpInfo(serviceJobId, appointmentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} reservationId Reservation Identifier
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/CancelReservationResponse} and HTTP response
     */
    cancelReservationWithHttpInfo(reservationId, marketplaceIds) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling cancelReservation");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling cancelReservation");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancelReservationResponse;

      return this.apiClient.callApi(
        '/service/v1/reservation/{reservationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} reservationId Reservation Identifier
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/CancelReservationResponse}
     */
    cancelReservation(reservationId, marketplaceIds) {
      return this.cancelReservationWithHttpInfo(reservationId, marketplaceIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon defined service job identifier.
     * @param {String} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/CancelServiceJobByServiceJobIdResponse} and HTTP response
     */
    cancelServiceJobByServiceJobIdWithHttpInfo(serviceJobId, cancellationReasonCode) {
      let postBody = null;

      // verify the required parameter 'serviceJobId' is set
      if (serviceJobId === undefined || serviceJobId === null) {
        throw new Error("Missing the required parameter 'serviceJobId' when calling cancelServiceJobByServiceJobId");
      }

      // verify the required parameter 'cancellationReasonCode' is set
      if (cancellationReasonCode === undefined || cancellationReasonCode === null) {
        throw new Error("Missing the required parameter 'cancellationReasonCode' when calling cancelServiceJobByServiceJobId");
      }


      let pathParams = {
        'serviceJobId': serviceJobId
      };
      let queryParams = {
        'cancellationReasonCode': cancellationReasonCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancelServiceJobByServiceJobIdResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/cancellations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon defined service job identifier.
     * @param {String} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/CancelServiceJobByServiceJobIdResponse}
     */
    cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode) {
      return this.cancelServiceJobByServiceJobIdWithHttpInfo(serviceJobId, cancellationReasonCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon defined service job identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/CompleteServiceJobByServiceJobIdResponse} and HTTP response
     */
    completeServiceJobByServiceJobIdWithHttpInfo(serviceJobId) {
      let postBody = null;

      // verify the required parameter 'serviceJobId' is set
      if (serviceJobId === undefined || serviceJobId === null) {
        throw new Error("Missing the required parameter 'serviceJobId' when calling completeServiceJobByServiceJobId");
      }


      let pathParams = {
        'serviceJobId': serviceJobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompleteServiceJobByServiceJobIdResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/completions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon defined service job identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/CompleteServiceJobByServiceJobIdResponse}
     */
    completeServiceJobByServiceJobId(serviceJobId) {
      return this.completeServiceJobByServiceJobIdWithHttpInfo(serviceJobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {module:services_v1/model/CreateReservationRequest} body Reservation details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/CreateReservationResponse} and HTTP response
     */
    createReservationWithHttpInfo(marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling createReservation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createReservation");
      }


      let pathParams = {
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateReservationResponse;

      return this.apiClient.callApi(
        '/service/v1/reservation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {module:services_v1/model/CreateReservationRequest} body Reservation details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/CreateReservationResponse}
     */
    createReservation(marketplaceIds, body) {
      return this.createReservationWithHttpInfo(marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:services_v1/model/ServiceUploadDocument} body Upload document operation input details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/CreateServiceDocumentUploadDestination} and HTTP response
     */
    createServiceDocumentUploadDestinationWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createServiceDocumentUploadDestination");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateServiceDocumentUploadDestination;

      return this.apiClient.callApi(
        '/service/v1/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:services_v1/model/ServiceUploadDocument} body Upload document operation input details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/CreateServiceDocumentUploadDestination}
     */
    createServiceDocumentUploadDestination(body) {
      return this.createServiceDocumentUploadDestinationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} asin ASIN associated with the service.
     * @param {String} storeId Store identifier defining the region scope to retrive appointment slots.
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace for which appointment slots are queried
     * @param {Object} opts Optional parameters
     * @param {String} opts.startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
     * @param {String} opts.endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/GetAppointmentSlotsResponse} and HTTP response
     */
    getAppointmentSlotsWithHttpInfo(asin, storeId, marketplaceIds, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'asin' is set
      if (asin === undefined || asin === null) {
        throw new Error("Missing the required parameter 'asin' when calling getAppointmentSlots");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getAppointmentSlots");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling getAppointmentSlots");
      }


      let pathParams = {
      };
      let queryParams = {
        'asin': asin,
        'storeId': storeId,
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv'),
        'startTime': opts['startTime'],
        'endTime': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAppointmentSlotsResponse;

      return this.apiClient.callApi(
        '/service/v1/appointmentSlots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} asin ASIN associated with the service.
     * @param {String} storeId Store identifier defining the region scope to retrive appointment slots.
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace for which appointment slots are queried
     * @param {Object} opts Optional parameters
     * @param {String} opts.startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
     * @param {String} opts.endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/GetAppointmentSlotsResponse}
     */
    getAppointmentSlots(asin, storeId, marketplaceIds, opts) {
      return this.getAppointmentSlotsWithHttpInfo(asin, storeId, marketplaceIds, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId A service job identifier to retrive appointment slots for associated service.
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {Object} opts Optional parameters
     * @param {String} opts.startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
     * @param {String} opts.endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/GetAppointmentSlotsResponse} and HTTP response
     */
    getAppointmmentSlotsByJobIdWithHttpInfo(serviceJobId, marketplaceIds, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'serviceJobId' is set
      if (serviceJobId === undefined || serviceJobId === null) {
        throw new Error("Missing the required parameter 'serviceJobId' when calling getAppointmmentSlotsByJobId");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling getAppointmmentSlotsByJobId");
      }


      let pathParams = {
        'serviceJobId': serviceJobId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv'),
        'startTime': opts['startTime'],
        'endTime': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAppointmentSlotsResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/appointmentSlots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId A service job identifier to retrive appointment slots for associated service.
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {Object} opts Optional parameters
     * @param {String} opts.startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
     * @param {String} opts.endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/GetAppointmentSlotsResponse}
     */
    getAppointmmentSlotsByJobId(serviceJobId, marketplaceIds, opts) {
      return this.getAppointmmentSlotsByJobIdWithHttpInfo(serviceJobId, marketplaceIds, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} resourceId Resource Identifier.
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {module:services_v1/model/FixedSlotCapacityQuery} body Request body.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken Next page token returned in the response of your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/FixedSlotCapacity} and HTTP response
     */
    getFixedSlotCapacityWithHttpInfo(resourceId, marketplaceIds, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getFixedSlotCapacity");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling getFixedSlotCapacity");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getFixedSlotCapacity");
      }


      let pathParams = {
        'resourceId': resourceId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv'),
        'nextPageToken': opts['nextPageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FixedSlotCapacity;

      return this.apiClient.callApi(
        '/service/v1/serviceResources/{resourceId}/capacity/fixed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} resourceId Resource Identifier.
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {module:services_v1/model/FixedSlotCapacityQuery} body Request body.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken Next page token returned in the response of your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/FixedSlotCapacity}
     */
    getFixedSlotCapacity(resourceId, marketplaceIds, body, opts) {
      return this.getFixedSlotCapacityWithHttpInfo(resourceId, marketplaceIds, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} resourceId Resource Identifier.
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {module:services_v1/model/RangeSlotCapacityQuery} body Request body.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken Next page token returned in the response of your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/RangeSlotCapacity} and HTTP response
     */
    getRangeSlotCapacityWithHttpInfo(resourceId, marketplaceIds, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getRangeSlotCapacity");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling getRangeSlotCapacity");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRangeSlotCapacity");
      }


      let pathParams = {
        'resourceId': resourceId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv'),
        'nextPageToken': opts['nextPageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RangeSlotCapacity;

      return this.apiClient.callApi(
        '/service/v1/serviceResources/{resourceId}/capacity/range', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} resourceId Resource Identifier.
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {module:services_v1/model/RangeSlotCapacityQuery} body Request body.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken Next page token returned in the response of your previous request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/RangeSlotCapacity}
     */
    getRangeSlotCapacity(resourceId, marketplaceIds, body, opts) {
      return this.getRangeSlotCapacityWithHttpInfo(resourceId, marketplaceIds, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId A service job identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/GetServiceJobByServiceJobIdResponse} and HTTP response
     */
    getServiceJobByServiceJobIdWithHttpInfo(serviceJobId) {
      let postBody = null;

      // verify the required parameter 'serviceJobId' is set
      if (serviceJobId === undefined || serviceJobId === null) {
        throw new Error("Missing the required parameter 'serviceJobId' when calling getServiceJobByServiceJobId");
      }


      let pathParams = {
        'serviceJobId': serviceJobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceJobByServiceJobIdResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId A service job identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/GetServiceJobByServiceJobIdResponse}
     */
    getServiceJobByServiceJobId(serviceJobId) {
      return this.getServiceJobByServiceJobIdWithHttpInfo(serviceJobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array.<String>} marketplaceIds Used to select jobs that were placed in the specified marketplaces.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.serviceOrderIds List of service order ids for the query you want to perform.Max values supported 20.
     * @param {Array.<module:services_v1/model/String>} opts.serviceJobStatus A list of one or more job status by which to filter the list of jobs.
     * @param {String} opts.pageToken String returned in the response of your previous request.
     * @param {Number} opts.pageSize A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (default to 20)
     * @param {module:services_v1/model/String} opts.sortField Sort fields on which you want to sort the output.
     * @param {module:services_v1/model/String} opts.sortOrder Sort order for the query you want to perform.
     * @param {String} opts.createdAfter A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
     * @param {String} opts.createdBefore A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
     * @param {String} opts.lastUpdatedAfter A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
     * @param {String} opts.lastUpdatedBefore A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
     * @param {String} opts.scheduleStartDate A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
     * @param {String} opts.scheduleEndDate A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
     * @param {Array.<String>} opts.asins List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
     * @param {Array.<String>} opts.requiredSkills A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
     * @param {Array.<String>} opts.storeIds List of Amazon-defined identifiers for the region scope. Max values supported is 50.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/GetServiceJobsResponse} and HTTP response
     */
    getServiceJobsWithHttpInfo(marketplaceIds, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling getServiceJobs");
      }


      let pathParams = {
      };
      let queryParams = {
        'serviceOrderIds': this.apiClient.buildCollectionParam(opts['serviceOrderIds'], 'csv'),
        'serviceJobStatus': this.apiClient.buildCollectionParam(opts['serviceJobStatus'], 'csv'),
        'pageToken': opts['pageToken'],
        'pageSize': opts['pageSize'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'lastUpdatedAfter': opts['lastUpdatedAfter'],
        'lastUpdatedBefore': opts['lastUpdatedBefore'],
        'scheduleStartDate': opts['scheduleStartDate'],
        'scheduleEndDate': opts['scheduleEndDate'],
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv'),
        'asins': this.apiClient.buildCollectionParam(opts['asins'], 'csv'),
        'requiredSkills': this.apiClient.buildCollectionParam(opts['requiredSkills'], 'csv'),
        'storeIds': this.apiClient.buildCollectionParam(opts['storeIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceJobsResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {Array.<String>} marketplaceIds Used to select jobs that were placed in the specified marketplaces.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.serviceOrderIds List of service order ids for the query you want to perform.Max values supported 20.
     * @param {Array.<module:services_v1/model/String>} opts.serviceJobStatus A list of one or more job status by which to filter the list of jobs.
     * @param {String} opts.pageToken String returned in the response of your previous request.
     * @param {Number} opts.pageSize A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (default to 20)
     * @param {module:services_v1/model/String} opts.sortField Sort fields on which you want to sort the output.
     * @param {module:services_v1/model/String} opts.sortOrder Sort order for the query you want to perform.
     * @param {String} opts.createdAfter A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
     * @param {String} opts.createdBefore A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
     * @param {String} opts.lastUpdatedAfter A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
     * @param {String} opts.lastUpdatedBefore A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
     * @param {String} opts.scheduleStartDate A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
     * @param {String} opts.scheduleEndDate A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
     * @param {Array.<String>} opts.asins List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
     * @param {Array.<String>} opts.requiredSkills A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
     * @param {Array.<String>} opts.storeIds List of Amazon-defined identifiers for the region scope. Max values supported is 50.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/GetServiceJobsResponse}
     */
    getServiceJobs(marketplaceIds, opts) {
      return this.getServiceJobsWithHttpInfo(marketplaceIds, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon defined service job identifier.
     * @param {String} appointmentId An existing appointment identifier for the Service Job.
     * @param {module:services_v1/model/RescheduleAppointmentRequest} body Reschedule appointment operation input details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/SetAppointmentResponse} and HTTP response
     */
    rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(serviceJobId, appointmentId, body) {
      let postBody = body;

      // verify the required parameter 'serviceJobId' is set
      if (serviceJobId === undefined || serviceJobId === null) {
        throw new Error("Missing the required parameter 'serviceJobId' when calling rescheduleAppointmentForServiceJobByServiceJobId");
      }

      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling rescheduleAppointmentForServiceJobByServiceJobId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rescheduleAppointmentForServiceJobByServiceJobId");
      }


      let pathParams = {
        'serviceJobId': serviceJobId,
        'appointmentId': appointmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetAppointmentResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon defined service job identifier.
     * @param {String} appointmentId An existing appointment identifier for the Service Job.
     * @param {module:services_v1/model/RescheduleAppointmentRequest} body Reschedule appointment operation input details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/SetAppointmentResponse}
     */
    rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body) {
      return this.rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(serviceJobId, appointmentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
     * @param {String} appointmentId An Amazon-defined identifier of active service job appointment.
     * @param {module:services_v1/model/SetAppointmentFulfillmentDataRequest} body Appointment fulfillment data collection details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    setAppointmentFulfillmentDataWithHttpInfo(serviceJobId, appointmentId, body) {
      let postBody = body;

      // verify the required parameter 'serviceJobId' is set
      if (serviceJobId === undefined || serviceJobId === null) {
        throw new Error("Missing the required parameter 'serviceJobId' when calling setAppointmentFulfillmentData");
      }

      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling setAppointmentFulfillmentData");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setAppointmentFulfillmentData");
      }


      let pathParams = {
        'serviceJobId': serviceJobId,
        'appointmentId': appointmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = String;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
     * @param {String} appointmentId An Amazon-defined identifier of active service job appointment.
     * @param {module:services_v1/model/SetAppointmentFulfillmentDataRequest} body Appointment fulfillment data collection details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    setAppointmentFulfillmentData(serviceJobId, appointmentId, body) {
      return this.setAppointmentFulfillmentDataWithHttpInfo(serviceJobId, appointmentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} reservationId Reservation Identifier
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {module:services_v1/model/UpdateReservationRequest} body Reservation details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/UpdateReservationResponse} and HTTP response
     */
    updateReservationWithHttpInfo(reservationId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling updateReservation");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling updateReservation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateReservation");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateReservationResponse;

      return this.apiClient.callApi(
        '/service/v1/reservation/{reservationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} reservationId Reservation Identifier
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {module:services_v1/model/UpdateReservationRequest} body Reservation details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/UpdateReservationResponse}
     */
    updateReservation(reservationId, marketplaceIds, body) {
      return this.updateReservationWithHttpInfo(reservationId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} resourceId Resource (store) Identifier
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {module:services_v1/model/UpdateScheduleRequest} body Schedule details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:services_v1/model/UpdateScheduleResponse} and HTTP response
     */
    updateScheduleWithHttpInfo(resourceId, marketplaceIds, body) {
      let postBody = body;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling updateSchedule");
      }

      // verify the required parameter 'marketplaceIds' is set
      if (marketplaceIds === undefined || marketplaceIds === null) {
        throw new Error("Missing the required parameter 'marketplaceIds' when calling updateSchedule");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSchedule");
      }


      let pathParams = {
        'resourceId': resourceId
      };
      let queryParams = {
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateScheduleResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceResources/{resourceId}/schedules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} resourceId Resource (store) Identifier
     * @param {Array.<String>} marketplaceIds An identifier for the marketplace in which the resource operates.
     * @param {module:services_v1/model/UpdateScheduleRequest} body Schedule details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:services_v1/model/UpdateScheduleResponse}
     */
    updateSchedule(resourceId, marketplaceIds, body) {
      return this.updateScheduleWithHttpInfo(resourceId, marketplaceIds, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
