/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {AppointmentTime} from './AppointmentTime.js';
import {Poa} from './Poa.js';
import {Technician} from './Technician.js';

/**
 * The Appointment model module.
 * @module services_v1/model/Appointment
 * @version v1
 */
export class Appointment {
  /**
   * Constructs a new <code>Appointment</code>.
   * The details of an appointment.
   * @alias module:services_v1/model/Appointment
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Appointment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:services_v1/model/Appointment} obj Optional instance to populate.
   * @return {module:services_v1/model/Appointment} The populated <code>Appointment</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Appointment();
      if (data.hasOwnProperty('appointmentId'))
        obj.appointmentId = ApiClient.convertToType(data['appointmentId'], 'String');
      if (data.hasOwnProperty('appointmentStatus'))
        obj.appointmentStatus = ApiClient.convertToType(data['appointmentStatus'], 'String');
      if (data.hasOwnProperty('appointmentTime'))
        obj.appointmentTime = AppointmentTime.constructFromObject(data['appointmentTime']);
      if (data.hasOwnProperty('assignedTechnicians'))
        obj.assignedTechnicians = ApiClient.convertToType(data['assignedTechnicians'], [Technician]);
      if (data.hasOwnProperty('rescheduledAppointmentId'))
        obj.rescheduledAppointmentId = ApiClient.convertToType(data['rescheduledAppointmentId'], 'String');
      if (data.hasOwnProperty('poa'))
        obj.poa = Poa.constructFromObject(data['poa']);
    }
    return obj;
  }
}

/**
 * The appointment identifier.
 * @member {String} appointmentId
 */
Appointment.prototype.appointmentId = undefined;

/**
 * Allowed values for the <code>appointmentStatus</code> property.
 * @enum {String}
 * @readonly
 */
Appointment['AppointmentStatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED"
};

/**
 * The status of the appointment.
 * @member {module:services_v1/model/Appointment.AppointmentStatusEnum} appointmentStatus
 */
Appointment.prototype.appointmentStatus = undefined;

/**
 * @member {module:services_v1/model/AppointmentTime} appointmentTime
 */
Appointment.prototype.appointmentTime = undefined;

/**
 * A list of technicians assigned to the service job.
 * @member {Array.<module:services_v1/model/Technician>} assignedTechnicians
 */
Appointment.prototype.assignedTechnicians = undefined;

/**
 * The appointment identifier.
 * @member {String} rescheduledAppointmentId
 */
Appointment.prototype.rescheduledAppointmentId = undefined;

/**
 * @member {module:services_v1/model/Poa} poa
 */
Appointment.prototype.poa = undefined;


