/**
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'fulfillmentinbound_v0', 'index.js');
const SellingPartnerApiForFulfillmentInbound = await import(modulePath);

let instance;

beforeEach(() => {
  try {
    instance = new SellingPartnerApiForFulfillmentInbound.InboundShipmentInfo();
  } catch (e) {
    //Handle the cases when this model extends another model by using Model.call(this);
    instance = Object.create(SellingPartnerApiForFulfillmentInbound.InboundShipmentInfo.prototype);
  }
});

afterEach(() => {
  instance = null;
});

describe('InboundShipmentInfo', () => {
  it('should create an instance of InboundShipmentInfo', () => {
    expect(instance).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentInfo);
  });

  it('should have the property shipmentId', () => {
    // verify property exists
    expect(instance).to.have.property('shipmentId');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.shipmentId = expectedValue;
    expect(instance.shipmentId).to.equal(expectedValue);
  });

  it('should have the property shipmentName', () => {
    // verify property exists
    expect(instance).to.have.property('shipmentName');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.shipmentName = expectedValue;
    expect(instance.shipmentName).to.equal(expectedValue);
  });

  it('should have the property shipFromAddress', () => {
    // verify property exists
    expect(instance).to.have.property('shipFromAddress');

    // set and verify value
    const expectedValue = generateMockData('Address');
    instance.shipFromAddress = expectedValue;
    expect(instance.shipFromAddress).to.equal(expectedValue);
  });

  it('should have the property destinationFulfillmentCenterId', () => {
    // verify property exists
    expect(instance).to.have.property('destinationFulfillmentCenterId');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.destinationFulfillmentCenterId = expectedValue;
    expect(instance.destinationFulfillmentCenterId).to.equal(expectedValue);
  });

  it('should have the property shipmentStatus', () => {
    // verify property exists
    expect(instance).to.have.property('shipmentStatus');

    // set and verify value
    const expectedValue = generateMockData('ShipmentStatus');
    instance.shipmentStatus = expectedValue;
    expect(instance.shipmentStatus).to.equal(expectedValue);
  });

  it('should have the property labelPrepType', () => {
    // verify property exists
    expect(instance).to.have.property('labelPrepType');

    // set and verify value
    const expectedValue = generateMockData('LabelPrepType');
    instance.labelPrepType = expectedValue;
    expect(instance.labelPrepType).to.equal(expectedValue);
  });

  it('should have the property areCasesRequired', () => {
    // verify property exists
    expect(instance).to.have.property('areCasesRequired');

    // set and verify value
    const expectedValue = generateMockData('Boolean');
    instance.areCasesRequired = expectedValue;
    expect(instance.areCasesRequired).to.equal(expectedValue);
  });

  it('should have the property confirmedNeedByDate', () => {
    // verify property exists
    expect(instance).to.have.property('confirmedNeedByDate');

    // set and verify value
    const expectedValue = generateMockData('Date');
    instance.confirmedNeedByDate = expectedValue;
    expect(instance.confirmedNeedByDate).to.equal(expectedValue);
  });

  it('should have the property boxContentsSource', () => {
    // verify property exists
    expect(instance).to.have.property('boxContentsSource');

    // set and verify value
    const expectedValue = generateMockData('BoxContentsSource');
    instance.boxContentsSource = expectedValue;
    expect(instance.boxContentsSource).to.equal(expectedValue);
  });

  it('should have the property estimatedBoxContentsFee', () => {
    // verify property exists
    expect(instance).to.have.property('estimatedBoxContentsFee');

    // set and verify value
    const expectedValue = generateMockData('BoxContentsFeeDetails');
    instance.estimatedBoxContentsFee = expectedValue;
    expect(instance.estimatedBoxContentsFee).to.equal(expectedValue);
  });

});

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForFulfillmentInbound[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}
