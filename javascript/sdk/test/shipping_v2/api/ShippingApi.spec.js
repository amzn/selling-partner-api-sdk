/**
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'shipping_v2', 'index.js');
const AmazonShippingApi = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = AmazonShippingApi[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockcancelShipmentData = {
  request: {
    'shipmentId': generateMockData('String'),
  },
  response: {
    data: generateMockData('CancelShipmentResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockcreateClaimData = {
  request: {
    'body': generateMockData('CreateClaimRequest'),
  },
  response: {
    data: generateMockData('CreateClaimResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockdirectPurchaseShipmentData = {
  request: {
    'body': generateMockData('DirectPurchaseRequest'),
  },
  response: {
    data: generateMockData('DirectPurchaseResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgenerateCollectionFormData = {
  request: {
    'body': generateMockData('GenerateCollectionFormRequest'),
  },
  response: {
    data: generateMockData('GenerateCollectionFormResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetAccessPointsData = {
  request: {
    'accessPointTypes': generateMockData('String', true),
    'countryCode': generateMockData('String'),
    'postalCode': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetAccessPointsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetAdditionalInputsData = {
  request: {
    'requestToken': generateMockData('String'),
    'rateId': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetAdditionalInputsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetCarrierAccountFormInputsData = {
  request: {
  },
  response: {
    data: generateMockData('GetCarrierAccountFormInputsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetCarrierAccountsData = {
  request: {
    'body': generateMockData('GetCarrierAccountsRequest'),
  },
  response: {
    data: generateMockData('GetCarrierAccountsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetCollectionFormData = {
  request: {
    'collectionFormId': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetCollectionFormResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetCollectionFormHistoryData = {
  request: {
    'body': generateMockData('GetCollectionFormHistoryRequest'),
  },
  response: {
    data: generateMockData('GetCollectionFormHistoryResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetRatesData = {
  request: {
    'body': generateMockData('GetRatesRequest'),
  },
  response: {
    data: generateMockData('GetRatesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetShipmentDocumentsData = {
  request: {
    'shipmentId': generateMockData('String'),
    'packageClientReferenceId': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetShipmentDocumentsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetTrackingData = {
  request: {
    'trackingId': generateMockData('String'),
    'carrierId': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetTrackingResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetUnmanifestedShipmentsData = {
  request: {
    'body': generateMockData('GetUnmanifestedShipmentsRequest'),
  },
  response: {
    data: generateMockData('GetUnmanifestedShipmentsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklinkCarrierAccountData = {
  request: {
    'carrierId': generateMockData('String'),
    'body': generateMockData('LinkCarrierAccountRequest'),
  },
  response: {
    data: generateMockData('LinkCarrierAccountResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklinkCarrierAccount_0Data = {
  request: {
    'carrierId': generateMockData('String'),
    'body': generateMockData('LinkCarrierAccountRequest'),
  },
  response: {
    data: generateMockData('LinkCarrierAccountResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockoneClickShipmentData = {
  request: {
    'body': generateMockData('OneClickShipmentRequest'),
  },
  response: {
    data: generateMockData('OneClickShipmentResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockpurchaseShipmentData = {
  request: {
    'body': generateMockData('PurchaseShipmentRequest'),
  },
  response: {
    data: generateMockData('PurchaseShipmentResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocksubmitNdrFeedbackData = {
  request: {
    'body': generateMockData('SubmitNdrFeedbackRequest'),
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};
const mockunlinkCarrierAccountData = {
  request: {
    'carrierId': generateMockData('String'),
    'body': generateMockData('UnlinkCarrierAccountRequest'),
  },
  response: {
    data: generateMockData('UnlinkCarrierAccountResponse'),
    statusCode: 200,
    headers: {}
  }
};

describe('ShippingApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new AmazonShippingApi.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new AmazonShippingApi.ShippingApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('cancelShipment', () => {
    it('should successfully call cancelShipment', async () => {
      instance.apiClient.callApi.resolves(mockcancelShipmentData.response);

      const params = [
        mockcancelShipmentData.request['shipmentId'],
      ];
      const data = await instance.cancelShipment(...params);

      expect(data instanceof AmazonShippingApi.CancelShipmentResponse).to.be.true;
      expect(data).to.equal(mockcancelShipmentData.response.data);
    });

    it('should successfully call cancelShipmentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcancelShipmentData.response);

      const params = [
        mockcancelShipmentData.request['shipmentId'],
      ];
      const response = await instance.cancelShipmentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcancelShipmentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcancelShipmentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcancelShipmentData.request['shipmentId'],
        ];
        await instance.cancelShipment(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createClaim', () => {
    it('should successfully call createClaim', async () => {
      instance.apiClient.callApi.resolves(mockcreateClaimData.response);

      const params = [
        mockcreateClaimData.request['body'],
      ];
      const data = await instance.createClaim(...params);

      expect(data instanceof AmazonShippingApi.CreateClaimResponse).to.be.true;
      expect(data).to.equal(mockcreateClaimData.response.data);
    });

    it('should successfully call createClaimWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateClaimData.response);

      const params = [
        mockcreateClaimData.request['body'],
      ];
      const response = await instance.createClaimWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateClaimData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateClaimData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateClaimData.request['body'],
        ];
        await instance.createClaim(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('directPurchaseShipment', () => {
    it('should successfully call directPurchaseShipment', async () => {
      instance.apiClient.callApi.resolves(mockdirectPurchaseShipmentData.response);

      const params = [
        mockdirectPurchaseShipmentData.request['body'],
      ];
      const data = await instance.directPurchaseShipment(...params);

      expect(data instanceof AmazonShippingApi.DirectPurchaseResponse).to.be.true;
      expect(data).to.equal(mockdirectPurchaseShipmentData.response.data);
    });

    it('should successfully call directPurchaseShipmentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockdirectPurchaseShipmentData.response);

      const params = [
        mockdirectPurchaseShipmentData.request['body'],
      ];
      const response = await instance.directPurchaseShipmentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockdirectPurchaseShipmentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockdirectPurchaseShipmentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockdirectPurchaseShipmentData.request['body'],
        ];
        await instance.directPurchaseShipment(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('generateCollectionForm', () => {
    it('should successfully call generateCollectionForm', async () => {
      instance.apiClient.callApi.resolves(mockgenerateCollectionFormData.response);

      const params = [
        mockgenerateCollectionFormData.request['body'],
      ];
      const data = await instance.generateCollectionForm(...params);

      expect(data instanceof AmazonShippingApi.GenerateCollectionFormResponse).to.be.true;
      expect(data).to.equal(mockgenerateCollectionFormData.response.data);
    });

    it('should successfully call generateCollectionFormWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgenerateCollectionFormData.response);

      const params = [
        mockgenerateCollectionFormData.request['body'],
      ];
      const response = await instance.generateCollectionFormWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgenerateCollectionFormData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgenerateCollectionFormData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgenerateCollectionFormData.request['body'],
        ];
        await instance.generateCollectionForm(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getAccessPoints', () => {
    it('should successfully call getAccessPoints', async () => {
      instance.apiClient.callApi.resolves(mockgetAccessPointsData.response);

      const params = [
        mockgetAccessPointsData.request['accessPointTypes'],
        mockgetAccessPointsData.request['countryCode'],
        mockgetAccessPointsData.request['postalCode'],
      ];
      const data = await instance.getAccessPoints(...params);

      expect(data instanceof AmazonShippingApi.GetAccessPointsResponse).to.be.true;
      expect(data).to.equal(mockgetAccessPointsData.response.data);
    });

    it('should successfully call getAccessPointsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetAccessPointsData.response);

      const params = [
        mockgetAccessPointsData.request['accessPointTypes'],
        mockgetAccessPointsData.request['countryCode'],
        mockgetAccessPointsData.request['postalCode'],
      ];
      const response = await instance.getAccessPointsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetAccessPointsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetAccessPointsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetAccessPointsData.request['accessPointTypes'],
          mockgetAccessPointsData.request['countryCode'],
          mockgetAccessPointsData.request['postalCode'],
        ];
        await instance.getAccessPoints(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getAdditionalInputs', () => {
    it('should successfully call getAdditionalInputs', async () => {
      instance.apiClient.callApi.resolves(mockgetAdditionalInputsData.response);

      const params = [
        mockgetAdditionalInputsData.request['requestToken'],
        mockgetAdditionalInputsData.request['rateId'],
      ];
      const data = await instance.getAdditionalInputs(...params);

      expect(data instanceof AmazonShippingApi.GetAdditionalInputsResponse).to.be.true;
      expect(data).to.equal(mockgetAdditionalInputsData.response.data);
    });

    it('should successfully call getAdditionalInputsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetAdditionalInputsData.response);

      const params = [
        mockgetAdditionalInputsData.request['requestToken'],
        mockgetAdditionalInputsData.request['rateId'],
      ];
      const response = await instance.getAdditionalInputsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetAdditionalInputsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetAdditionalInputsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetAdditionalInputsData.request['requestToken'],
          mockgetAdditionalInputsData.request['rateId'],
        ];
        await instance.getAdditionalInputs(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getCarrierAccountFormInputs', () => {
    it('should successfully call getCarrierAccountFormInputs', async () => {
      instance.apiClient.callApi.resolves(mockgetCarrierAccountFormInputsData.response);

      const params = [
      ];
      const data = await instance.getCarrierAccountFormInputs(...params);

      expect(data instanceof AmazonShippingApi.GetCarrierAccountFormInputsResponse).to.be.true;
      expect(data).to.equal(mockgetCarrierAccountFormInputsData.response.data);
    });

    it('should successfully call getCarrierAccountFormInputsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetCarrierAccountFormInputsData.response);

      const params = [
      ];
      const response = await instance.getCarrierAccountFormInputsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetCarrierAccountFormInputsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetCarrierAccountFormInputsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
        ];
        await instance.getCarrierAccountFormInputs(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getCarrierAccounts', () => {
    it('should successfully call getCarrierAccounts', async () => {
      instance.apiClient.callApi.resolves(mockgetCarrierAccountsData.response);

      const params = [
        mockgetCarrierAccountsData.request['body'],
      ];
      const data = await instance.getCarrierAccounts(...params);

      expect(data instanceof AmazonShippingApi.GetCarrierAccountsResponse).to.be.true;
      expect(data).to.equal(mockgetCarrierAccountsData.response.data);
    });

    it('should successfully call getCarrierAccountsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetCarrierAccountsData.response);

      const params = [
        mockgetCarrierAccountsData.request['body'],
      ];
      const response = await instance.getCarrierAccountsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetCarrierAccountsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetCarrierAccountsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetCarrierAccountsData.request['body'],
        ];
        await instance.getCarrierAccounts(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getCollectionForm', () => {
    it('should successfully call getCollectionForm', async () => {
      instance.apiClient.callApi.resolves(mockgetCollectionFormData.response);

      const params = [
        mockgetCollectionFormData.request['collectionFormId'],
      ];
      const data = await instance.getCollectionForm(...params);

      expect(data instanceof AmazonShippingApi.GetCollectionFormResponse).to.be.true;
      expect(data).to.equal(mockgetCollectionFormData.response.data);
    });

    it('should successfully call getCollectionFormWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetCollectionFormData.response);

      const params = [
        mockgetCollectionFormData.request['collectionFormId'],
      ];
      const response = await instance.getCollectionFormWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetCollectionFormData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetCollectionFormData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetCollectionFormData.request['collectionFormId'],
        ];
        await instance.getCollectionForm(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getCollectionFormHistory', () => {
    it('should successfully call getCollectionFormHistory', async () => {
      instance.apiClient.callApi.resolves(mockgetCollectionFormHistoryData.response);

      const params = [
        mockgetCollectionFormHistoryData.request['body'],
      ];
      const data = await instance.getCollectionFormHistory(...params);

      expect(data instanceof AmazonShippingApi.GetCollectionFormHistoryResponse).to.be.true;
      expect(data).to.equal(mockgetCollectionFormHistoryData.response.data);
    });

    it('should successfully call getCollectionFormHistoryWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetCollectionFormHistoryData.response);

      const params = [
        mockgetCollectionFormHistoryData.request['body'],
      ];
      const response = await instance.getCollectionFormHistoryWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetCollectionFormHistoryData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetCollectionFormHistoryData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetCollectionFormHistoryData.request['body'],
        ];
        await instance.getCollectionFormHistory(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getRates', () => {
    it('should successfully call getRates', async () => {
      instance.apiClient.callApi.resolves(mockgetRatesData.response);

      const params = [
        mockgetRatesData.request['body'],
      ];
      const data = await instance.getRates(...params);

      expect(data instanceof AmazonShippingApi.GetRatesResponse).to.be.true;
      expect(data).to.equal(mockgetRatesData.response.data);
    });

    it('should successfully call getRatesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetRatesData.response);

      const params = [
        mockgetRatesData.request['body'],
      ];
      const response = await instance.getRatesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetRatesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetRatesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetRatesData.request['body'],
        ];
        await instance.getRates(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getShipmentDocuments', () => {
    it('should successfully call getShipmentDocuments', async () => {
      instance.apiClient.callApi.resolves(mockgetShipmentDocumentsData.response);

      const params = [
        mockgetShipmentDocumentsData.request['shipmentId'],
        mockgetShipmentDocumentsData.request['packageClientReferenceId'],
      ];
      const data = await instance.getShipmentDocuments(...params);

      expect(data instanceof AmazonShippingApi.GetShipmentDocumentsResponse).to.be.true;
      expect(data).to.equal(mockgetShipmentDocumentsData.response.data);
    });

    it('should successfully call getShipmentDocumentsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetShipmentDocumentsData.response);

      const params = [
        mockgetShipmentDocumentsData.request['shipmentId'],
        mockgetShipmentDocumentsData.request['packageClientReferenceId'],
      ];
      const response = await instance.getShipmentDocumentsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetShipmentDocumentsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetShipmentDocumentsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetShipmentDocumentsData.request['shipmentId'],
          mockgetShipmentDocumentsData.request['packageClientReferenceId'],
        ];
        await instance.getShipmentDocuments(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getTracking', () => {
    it('should successfully call getTracking', async () => {
      instance.apiClient.callApi.resolves(mockgetTrackingData.response);

      const params = [
        mockgetTrackingData.request['trackingId'],
        mockgetTrackingData.request['carrierId'],
      ];
      const data = await instance.getTracking(...params);

      expect(data instanceof AmazonShippingApi.GetTrackingResponse).to.be.true;
      expect(data).to.equal(mockgetTrackingData.response.data);
    });

    it('should successfully call getTrackingWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetTrackingData.response);

      const params = [
        mockgetTrackingData.request['trackingId'],
        mockgetTrackingData.request['carrierId'],
      ];
      const response = await instance.getTrackingWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetTrackingData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetTrackingData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetTrackingData.request['trackingId'],
          mockgetTrackingData.request['carrierId'],
        ];
        await instance.getTracking(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getUnmanifestedShipments', () => {
    it('should successfully call getUnmanifestedShipments', async () => {
      instance.apiClient.callApi.resolves(mockgetUnmanifestedShipmentsData.response);

      const params = [
        mockgetUnmanifestedShipmentsData.request['body'],
      ];
      const data = await instance.getUnmanifestedShipments(...params);

      expect(data instanceof AmazonShippingApi.GetUnmanifestedShipmentsResponse).to.be.true;
      expect(data).to.equal(mockgetUnmanifestedShipmentsData.response.data);
    });

    it('should successfully call getUnmanifestedShipmentsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetUnmanifestedShipmentsData.response);

      const params = [
        mockgetUnmanifestedShipmentsData.request['body'],
      ];
      const response = await instance.getUnmanifestedShipmentsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetUnmanifestedShipmentsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetUnmanifestedShipmentsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetUnmanifestedShipmentsData.request['body'],
        ];
        await instance.getUnmanifestedShipments(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('linkCarrierAccount', () => {
    it('should successfully call linkCarrierAccount', async () => {
      instance.apiClient.callApi.resolves(mocklinkCarrierAccountData.response);

      const params = [
        mocklinkCarrierAccountData.request['carrierId'],
        mocklinkCarrierAccountData.request['body'],
      ];
      const data = await instance.linkCarrierAccount(...params);

      expect(data instanceof AmazonShippingApi.LinkCarrierAccountResponse).to.be.true;
      expect(data).to.equal(mocklinkCarrierAccountData.response.data);
    });

    it('should successfully call linkCarrierAccountWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklinkCarrierAccountData.response);

      const params = [
        mocklinkCarrierAccountData.request['carrierId'],
        mocklinkCarrierAccountData.request['body'],
      ];
      const response = await instance.linkCarrierAccountWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklinkCarrierAccountData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklinkCarrierAccountData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklinkCarrierAccountData.request['carrierId'],
          mocklinkCarrierAccountData.request['body'],
        ];
        await instance.linkCarrierAccount(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('linkCarrierAccount_0', () => {
    it('should successfully call linkCarrierAccount_0', async () => {
      instance.apiClient.callApi.resolves(mocklinkCarrierAccount_0Data.response);

      const params = [
        mocklinkCarrierAccount_0Data.request['carrierId'],
        mocklinkCarrierAccount_0Data.request['body'],
      ];
      const data = await instance.linkCarrierAccount_0(...params);

      expect(data instanceof AmazonShippingApi.LinkCarrierAccountResponse).to.be.true;
      expect(data).to.equal(mocklinkCarrierAccount_0Data.response.data);
    });

    it('should successfully call linkCarrierAccount_0WithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklinkCarrierAccount_0Data.response);

      const params = [
        mocklinkCarrierAccount_0Data.request['carrierId'],
        mocklinkCarrierAccount_0Data.request['body'],
      ];
      const response = await instance.linkCarrierAccount_0WithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklinkCarrierAccount_0Data.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklinkCarrierAccount_0Data.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklinkCarrierAccount_0Data.request['carrierId'],
          mocklinkCarrierAccount_0Data.request['body'],
        ];
        await instance.linkCarrierAccount_0(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('oneClickShipment', () => {
    it('should successfully call oneClickShipment', async () => {
      instance.apiClient.callApi.resolves(mockoneClickShipmentData.response);

      const params = [
        mockoneClickShipmentData.request['body'],
      ];
      const data = await instance.oneClickShipment(...params);

      expect(data instanceof AmazonShippingApi.OneClickShipmentResponse).to.be.true;
      expect(data).to.equal(mockoneClickShipmentData.response.data);
    });

    it('should successfully call oneClickShipmentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockoneClickShipmentData.response);

      const params = [
        mockoneClickShipmentData.request['body'],
      ];
      const response = await instance.oneClickShipmentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockoneClickShipmentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockoneClickShipmentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockoneClickShipmentData.request['body'],
        ];
        await instance.oneClickShipment(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('purchaseShipment', () => {
    it('should successfully call purchaseShipment', async () => {
      instance.apiClient.callApi.resolves(mockpurchaseShipmentData.response);

      const params = [
        mockpurchaseShipmentData.request['body'],
      ];
      const data = await instance.purchaseShipment(...params);

      expect(data instanceof AmazonShippingApi.PurchaseShipmentResponse).to.be.true;
      expect(data).to.equal(mockpurchaseShipmentData.response.data);
    });

    it('should successfully call purchaseShipmentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockpurchaseShipmentData.response);

      const params = [
        mockpurchaseShipmentData.request['body'],
      ];
      const response = await instance.purchaseShipmentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockpurchaseShipmentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockpurchaseShipmentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockpurchaseShipmentData.request['body'],
        ];
        await instance.purchaseShipment(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('submitNdrFeedback', () => {
    it('should successfully call submitNdrFeedback', async () => {
      instance.apiClient.callApi.resolves(mocksubmitNdrFeedbackData.response);

      const params = [
        mocksubmitNdrFeedbackData.request['body'],
      ];
      const data = await instance.submitNdrFeedback(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call submitNdrFeedbackWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocksubmitNdrFeedbackData.response);

      const params = [
        mocksubmitNdrFeedbackData.request['body'],
      ];
      const response = await instance.submitNdrFeedbackWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocksubmitNdrFeedbackData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocksubmitNdrFeedbackData.request['body'],
        ];
        await instance.submitNdrFeedback(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('unlinkCarrierAccount', () => {
    it('should successfully call unlinkCarrierAccount', async () => {
      instance.apiClient.callApi.resolves(mockunlinkCarrierAccountData.response);

      const params = [
        mockunlinkCarrierAccountData.request['carrierId'],
        mockunlinkCarrierAccountData.request['body'],
      ];
      const data = await instance.unlinkCarrierAccount(...params);

      expect(data instanceof AmazonShippingApi.UnlinkCarrierAccountResponse).to.be.true;
      expect(data).to.equal(mockunlinkCarrierAccountData.response.data);
    });

    it('should successfully call unlinkCarrierAccountWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockunlinkCarrierAccountData.response);

      const params = [
        mockunlinkCarrierAccountData.request['carrierId'],
        mockunlinkCarrierAccountData.request['body'],
      ];
      const response = await instance.unlinkCarrierAccountWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockunlinkCarrierAccountData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockunlinkCarrierAccountData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockunlinkCarrierAccountData.request['carrierId'],
          mockunlinkCarrierAccountData.request['body'],
        ];
        await instance.unlinkCarrierAccount(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new AmazonShippingApi.ShippingApi();
      expect(defaultInstance.apiClient).to.equal(AmazonShippingApi.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new AmazonShippingApi.ApiClient();
      const customInstance = new AmazonShippingApi.ShippingApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
