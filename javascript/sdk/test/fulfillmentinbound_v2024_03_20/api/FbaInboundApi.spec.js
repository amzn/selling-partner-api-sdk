/**
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'fulfillmentinbound_v2024_03_20', 'index.js');
const TheSellingPartnerApiForFbaInboundOperations = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = TheSellingPartnerApiForFbaInboundOperations[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockcancelInboundPlanData = {
  request: {
    'inboundPlanId': generateMockData('String')
  },
  response: {
    data: generateMockData('CancelInboundPlanResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockcancelSelfShipAppointmentData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
    'body': generateMockData('CancelSelfShipAppointmentRequest')
  },
  response: {
    data: generateMockData('CancelSelfShipAppointmentResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockconfirmDeliveryWindowOptionsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
    'deliveryWindowOptionId': generateMockData('String')
  },
  response: {
    data: generateMockData('ConfirmDeliveryWindowOptionsResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockconfirmPackingOptionData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'packingOptionId': generateMockData('String')
  },
  response: {
    data: generateMockData('ConfirmPackingOptionResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockconfirmPlacementOptionData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'placementOptionId': generateMockData('String')
  },
  response: {
    data: generateMockData('ConfirmPlacementOptionResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockconfirmShipmentContentUpdatePreviewData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
    'contentUpdatePreviewId': generateMockData('String')
  },
  response: {
    data: generateMockData('ConfirmShipmentContentUpdatePreviewResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockconfirmTransportationOptionsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'body': generateMockData('ConfirmTransportationOptionsRequest')
  },
  response: {
    data: generateMockData('ConfirmTransportationOptionsResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockcreateInboundPlanData = {
  request: {
    'body': generateMockData('CreateInboundPlanRequest')
  },
  response: {
    data: generateMockData('CreateInboundPlanResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockcreateMarketplaceItemLabelsData = {
  request: {
    'body': generateMockData('CreateMarketplaceItemLabelsRequest')
  },
  response: {
    data: generateMockData('CreateMarketplaceItemLabelsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgenerateDeliveryWindowOptionsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String')
  },
  response: {
    data: generateMockData('GenerateDeliveryWindowOptionsResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockgeneratePackingOptionsData = {
  request: {
    'inboundPlanId': generateMockData('String')
  },
  response: {
    data: generateMockData('GeneratePackingOptionsResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockgeneratePlacementOptionsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'body': generateMockData('GeneratePlacementOptionsRequest')
  },
  response: {
    data: generateMockData('GeneratePlacementOptionsResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockgenerateSelfShipAppointmentSlotsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
    'body': generateMockData('GenerateSelfShipAppointmentSlotsRequest')
  },
  response: {
    data: generateMockData('GenerateSelfShipAppointmentSlotsResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockgenerateShipmentContentUpdatePreviewsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
    'body': generateMockData('GenerateShipmentContentUpdatePreviewsRequest')
  },
  response: {
    data: generateMockData('GenerateShipmentContentUpdatePreviewsResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockgenerateTransportationOptionsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'body': generateMockData('GenerateTransportationOptionsRequest')
  },
  response: {
    data: generateMockData('GenerateTransportationOptionsResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockgetDeliveryChallanDocumentData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String')
  },
  response: {
    data: generateMockData('GetDeliveryChallanDocumentResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetInboundOperationStatusData = {
  request: {
    'operationId': generateMockData('String')
  },
  response: {
    data: generateMockData('InboundOperationStatus'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetInboundPlanData = {
  request: {
    'inboundPlanId': generateMockData('String')
  },
  response: {
    data: generateMockData('InboundPlan'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetSelfShipAppointmentSlotsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetSelfShipAppointmentSlotsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetShipmentData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String')
  },
  response: {
    data: generateMockData('Shipment'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetShipmentContentUpdatePreviewData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
    'contentUpdatePreviewId': generateMockData('String')
  },
  response: {
    data: generateMockData('ContentUpdatePreview'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistDeliveryWindowOptionsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListDeliveryWindowOptionsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistInboundPlanBoxesData = {
  request: {
    'inboundPlanId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListInboundPlanBoxesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistInboundPlanItemsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListInboundPlanItemsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistInboundPlanPalletsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListInboundPlanPalletsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistInboundPlansData = {
  request: {
  },
  response: {
    data: generateMockData('ListInboundPlansResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistItemComplianceDetailsData = {
  request: {
    'mskus': generateMockData('String', true),
    'marketplaceId': generateMockData('String')
  },
  response: {
    data: generateMockData('ListItemComplianceDetailsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistPackingGroupBoxesData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'packingGroupId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListPackingGroupBoxesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistPackingGroupItemsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'packingGroupId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListPackingGroupItemsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistPackingOptionsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListPackingOptionsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistPlacementOptionsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListPlacementOptionsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistPrepDetailsData = {
  request: {
    'marketplaceId': generateMockData('String'),
    'mskus': generateMockData('String', true)
  },
  response: {
    data: generateMockData('ListPrepDetailsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistShipmentBoxesData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListShipmentBoxesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistShipmentContentUpdatePreviewsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListShipmentContentUpdatePreviewsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistShipmentItemsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListShipmentItemsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistShipmentPalletsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListShipmentPalletsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistTransportationOptionsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListTransportationOptionsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockscheduleSelfShipAppointmentData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
    'slotId': generateMockData('String'),
    'body': generateMockData('ScheduleSelfShipAppointmentRequest')
  },
  response: {
    data: generateMockData('ScheduleSelfShipAppointmentResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocksetPackingInformationData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'body': generateMockData('SetPackingInformationRequest')
  },
  response: {
    data: generateMockData('SetPackingInformationResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mocksetPrepDetailsData = {
  request: {
    'body': generateMockData('SetPrepDetailsRequest')
  },
  response: {
    data: generateMockData('SetPrepDetailsResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockupdateInboundPlanNameData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'body': generateMockData('UpdateInboundPlanNameRequest')
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};
const mockupdateItemComplianceDetailsData = {
  request: {
    'marketplaceId': generateMockData('String'),
    'body': generateMockData('UpdateItemComplianceDetailsRequest')
  },
  response: {
    data: generateMockData('UpdateItemComplianceDetailsResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockupdateShipmentNameData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
    'body': generateMockData('UpdateShipmentNameRequest')
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};
const mockupdateShipmentSourceAddressData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
    'body': generateMockData('UpdateShipmentSourceAddressRequest')
  },
  response: {
    data: generateMockData('UpdateShipmentSourceAddressResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockupdateShipmentTrackingDetailsData = {
  request: {
    'inboundPlanId': generateMockData('String'),
    'shipmentId': generateMockData('String'),
    'body': generateMockData('UpdateShipmentTrackingDetailsRequest')
  },
  response: {
    data: generateMockData('UpdateShipmentTrackingDetailsResponse'),
    statusCode: 202,
    headers: {}
  }
};

describe('FbaInboundApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new TheSellingPartnerApiForFbaInboundOperations.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new TheSellingPartnerApiForFbaInboundOperations.FbaInboundApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('cancelInboundPlan', () => {
    it('should successfully call cancelInboundPlan', async () => {
      instance.apiClient.callApi.resolves(mockcancelInboundPlanData.response);

      const params = [
        mockcancelInboundPlanData.request['inboundPlanId']
      ];
      const data = await instance.cancelInboundPlan(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.CancelInboundPlanResponse).to.be.true;
      expect(data).to.equal(mockcancelInboundPlanData.response.data);
    });

    it('should successfully call cancelInboundPlanWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcancelInboundPlanData.response);

      const params = [
        mockcancelInboundPlanData.request['inboundPlanId']
      ];
      const response = await instance.cancelInboundPlanWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcancelInboundPlanData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcancelInboundPlanData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcancelInboundPlanData.request['inboundPlanId']
        ];
        await instance.cancelInboundPlan(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('cancelSelfShipAppointment', () => {
    it('should successfully call cancelSelfShipAppointment', async () => {
      instance.apiClient.callApi.resolves(mockcancelSelfShipAppointmentData.response);

      const params = [
        mockcancelSelfShipAppointmentData.request['inboundPlanId'],
        mockcancelSelfShipAppointmentData.request['shipmentId'],
        mockcancelSelfShipAppointmentData.request['body']
      ];
      const data = await instance.cancelSelfShipAppointment(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.CancelSelfShipAppointmentResponse).to.be.true;
      expect(data).to.equal(mockcancelSelfShipAppointmentData.response.data);
    });

    it('should successfully call cancelSelfShipAppointmentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcancelSelfShipAppointmentData.response);

      const params = [
        mockcancelSelfShipAppointmentData.request['inboundPlanId'],
        mockcancelSelfShipAppointmentData.request['shipmentId'],
        mockcancelSelfShipAppointmentData.request['body']
      ];
      const response = await instance.cancelSelfShipAppointmentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcancelSelfShipAppointmentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcancelSelfShipAppointmentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcancelSelfShipAppointmentData.request['inboundPlanId'],
          mockcancelSelfShipAppointmentData.request['shipmentId'],
          mockcancelSelfShipAppointmentData.request['body']
        ];
        await instance.cancelSelfShipAppointment(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('confirmDeliveryWindowOptions', () => {
    it('should successfully call confirmDeliveryWindowOptions', async () => {
      instance.apiClient.callApi.resolves(mockconfirmDeliveryWindowOptionsData.response);

      const params = [
        mockconfirmDeliveryWindowOptionsData.request['inboundPlanId'],
        mockconfirmDeliveryWindowOptionsData.request['shipmentId'],
        mockconfirmDeliveryWindowOptionsData.request['deliveryWindowOptionId']
      ];
      const data = await instance.confirmDeliveryWindowOptions(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ConfirmDeliveryWindowOptionsResponse).to.be.true;
      expect(data).to.equal(mockconfirmDeliveryWindowOptionsData.response.data);
    });

    it('should successfully call confirmDeliveryWindowOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockconfirmDeliveryWindowOptionsData.response);

      const params = [
        mockconfirmDeliveryWindowOptionsData.request['inboundPlanId'],
        mockconfirmDeliveryWindowOptionsData.request['shipmentId'],
        mockconfirmDeliveryWindowOptionsData.request['deliveryWindowOptionId']
      ];
      const response = await instance.confirmDeliveryWindowOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockconfirmDeliveryWindowOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockconfirmDeliveryWindowOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockconfirmDeliveryWindowOptionsData.request['inboundPlanId'],
          mockconfirmDeliveryWindowOptionsData.request['shipmentId'],
          mockconfirmDeliveryWindowOptionsData.request['deliveryWindowOptionId']
        ];
        await instance.confirmDeliveryWindowOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('confirmPackingOption', () => {
    it('should successfully call confirmPackingOption', async () => {
      instance.apiClient.callApi.resolves(mockconfirmPackingOptionData.response);

      const params = [
        mockconfirmPackingOptionData.request['inboundPlanId'],
        mockconfirmPackingOptionData.request['packingOptionId']
      ];
      const data = await instance.confirmPackingOption(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ConfirmPackingOptionResponse).to.be.true;
      expect(data).to.equal(mockconfirmPackingOptionData.response.data);
    });

    it('should successfully call confirmPackingOptionWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockconfirmPackingOptionData.response);

      const params = [
        mockconfirmPackingOptionData.request['inboundPlanId'],
        mockconfirmPackingOptionData.request['packingOptionId']
      ];
      const response = await instance.confirmPackingOptionWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockconfirmPackingOptionData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockconfirmPackingOptionData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockconfirmPackingOptionData.request['inboundPlanId'],
          mockconfirmPackingOptionData.request['packingOptionId']
        ];
        await instance.confirmPackingOption(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('confirmPlacementOption', () => {
    it('should successfully call confirmPlacementOption', async () => {
      instance.apiClient.callApi.resolves(mockconfirmPlacementOptionData.response);

      const params = [
        mockconfirmPlacementOptionData.request['inboundPlanId'],
        mockconfirmPlacementOptionData.request['placementOptionId']
      ];
      const data = await instance.confirmPlacementOption(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ConfirmPlacementOptionResponse).to.be.true;
      expect(data).to.equal(mockconfirmPlacementOptionData.response.data);
    });

    it('should successfully call confirmPlacementOptionWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockconfirmPlacementOptionData.response);

      const params = [
        mockconfirmPlacementOptionData.request['inboundPlanId'],
        mockconfirmPlacementOptionData.request['placementOptionId']
      ];
      const response = await instance.confirmPlacementOptionWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockconfirmPlacementOptionData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockconfirmPlacementOptionData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockconfirmPlacementOptionData.request['inboundPlanId'],
          mockconfirmPlacementOptionData.request['placementOptionId']
        ];
        await instance.confirmPlacementOption(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('confirmShipmentContentUpdatePreview', () => {
    it('should successfully call confirmShipmentContentUpdatePreview', async () => {
      instance.apiClient.callApi.resolves(mockconfirmShipmentContentUpdatePreviewData.response);

      const params = [
        mockconfirmShipmentContentUpdatePreviewData.request['inboundPlanId'],
        mockconfirmShipmentContentUpdatePreviewData.request['shipmentId'],
        mockconfirmShipmentContentUpdatePreviewData.request['contentUpdatePreviewId']
      ];
      const data = await instance.confirmShipmentContentUpdatePreview(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ConfirmShipmentContentUpdatePreviewResponse).to.be.true;
      expect(data).to.equal(mockconfirmShipmentContentUpdatePreviewData.response.data);
    });

    it('should successfully call confirmShipmentContentUpdatePreviewWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockconfirmShipmentContentUpdatePreviewData.response);

      const params = [
        mockconfirmShipmentContentUpdatePreviewData.request['inboundPlanId'],
        mockconfirmShipmentContentUpdatePreviewData.request['shipmentId'],
        mockconfirmShipmentContentUpdatePreviewData.request['contentUpdatePreviewId']
      ];
      const response = await instance.confirmShipmentContentUpdatePreviewWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockconfirmShipmentContentUpdatePreviewData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockconfirmShipmentContentUpdatePreviewData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockconfirmShipmentContentUpdatePreviewData.request['inboundPlanId'],
          mockconfirmShipmentContentUpdatePreviewData.request['shipmentId'],
          mockconfirmShipmentContentUpdatePreviewData.request['contentUpdatePreviewId']
        ];
        await instance.confirmShipmentContentUpdatePreview(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('confirmTransportationOptions', () => {
    it('should successfully call confirmTransportationOptions', async () => {
      instance.apiClient.callApi.resolves(mockconfirmTransportationOptionsData.response);

      const params = [
        mockconfirmTransportationOptionsData.request['inboundPlanId'],
        mockconfirmTransportationOptionsData.request['body']
      ];
      const data = await instance.confirmTransportationOptions(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ConfirmTransportationOptionsResponse).to.be.true;
      expect(data).to.equal(mockconfirmTransportationOptionsData.response.data);
    });

    it('should successfully call confirmTransportationOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockconfirmTransportationOptionsData.response);

      const params = [
        mockconfirmTransportationOptionsData.request['inboundPlanId'],
        mockconfirmTransportationOptionsData.request['body']
      ];
      const response = await instance.confirmTransportationOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockconfirmTransportationOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockconfirmTransportationOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockconfirmTransportationOptionsData.request['inboundPlanId'],
          mockconfirmTransportationOptionsData.request['body']
        ];
        await instance.confirmTransportationOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createInboundPlan', () => {
    it('should successfully call createInboundPlan', async () => {
      instance.apiClient.callApi.resolves(mockcreateInboundPlanData.response);

      const params = [
        mockcreateInboundPlanData.request['body']
      ];
      const data = await instance.createInboundPlan(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.CreateInboundPlanResponse).to.be.true;
      expect(data).to.equal(mockcreateInboundPlanData.response.data);
    });

    it('should successfully call createInboundPlanWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateInboundPlanData.response);

      const params = [
        mockcreateInboundPlanData.request['body']
      ];
      const response = await instance.createInboundPlanWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateInboundPlanData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateInboundPlanData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateInboundPlanData.request['body']
        ];
        await instance.createInboundPlan(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createMarketplaceItemLabels', () => {
    it('should successfully call createMarketplaceItemLabels', async () => {
      instance.apiClient.callApi.resolves(mockcreateMarketplaceItemLabelsData.response);

      const params = [
        mockcreateMarketplaceItemLabelsData.request['body']
      ];
      const data = await instance.createMarketplaceItemLabels(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.CreateMarketplaceItemLabelsResponse).to.be.true;
      expect(data).to.equal(mockcreateMarketplaceItemLabelsData.response.data);
    });

    it('should successfully call createMarketplaceItemLabelsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateMarketplaceItemLabelsData.response);

      const params = [
        mockcreateMarketplaceItemLabelsData.request['body']
      ];
      const response = await instance.createMarketplaceItemLabelsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateMarketplaceItemLabelsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateMarketplaceItemLabelsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateMarketplaceItemLabelsData.request['body']
        ];
        await instance.createMarketplaceItemLabels(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('generateDeliveryWindowOptions', () => {
    it('should successfully call generateDeliveryWindowOptions', async () => {
      instance.apiClient.callApi.resolves(mockgenerateDeliveryWindowOptionsData.response);

      const params = [
        mockgenerateDeliveryWindowOptionsData.request['inboundPlanId'],
        mockgenerateDeliveryWindowOptionsData.request['shipmentId']
      ];
      const data = await instance.generateDeliveryWindowOptions(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.GenerateDeliveryWindowOptionsResponse).to.be.true;
      expect(data).to.equal(mockgenerateDeliveryWindowOptionsData.response.data);
    });

    it('should successfully call generateDeliveryWindowOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgenerateDeliveryWindowOptionsData.response);

      const params = [
        mockgenerateDeliveryWindowOptionsData.request['inboundPlanId'],
        mockgenerateDeliveryWindowOptionsData.request['shipmentId']
      ];
      const response = await instance.generateDeliveryWindowOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgenerateDeliveryWindowOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgenerateDeliveryWindowOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgenerateDeliveryWindowOptionsData.request['inboundPlanId'],
          mockgenerateDeliveryWindowOptionsData.request['shipmentId']
        ];
        await instance.generateDeliveryWindowOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('generatePackingOptions', () => {
    it('should successfully call generatePackingOptions', async () => {
      instance.apiClient.callApi.resolves(mockgeneratePackingOptionsData.response);

      const params = [
        mockgeneratePackingOptionsData.request['inboundPlanId']
      ];
      const data = await instance.generatePackingOptions(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.GeneratePackingOptionsResponse).to.be.true;
      expect(data).to.equal(mockgeneratePackingOptionsData.response.data);
    });

    it('should successfully call generatePackingOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgeneratePackingOptionsData.response);

      const params = [
        mockgeneratePackingOptionsData.request['inboundPlanId']
      ];
      const response = await instance.generatePackingOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgeneratePackingOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgeneratePackingOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgeneratePackingOptionsData.request['inboundPlanId']
        ];
        await instance.generatePackingOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('generatePlacementOptions', () => {
    it('should successfully call generatePlacementOptions', async () => {
      instance.apiClient.callApi.resolves(mockgeneratePlacementOptionsData.response);

      const params = [
        mockgeneratePlacementOptionsData.request['inboundPlanId'],
        mockgeneratePlacementOptionsData.request['body']
      ];
      const data = await instance.generatePlacementOptions(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.GeneratePlacementOptionsResponse).to.be.true;
      expect(data).to.equal(mockgeneratePlacementOptionsData.response.data);
    });

    it('should successfully call generatePlacementOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgeneratePlacementOptionsData.response);

      const params = [
        mockgeneratePlacementOptionsData.request['inboundPlanId'],
        mockgeneratePlacementOptionsData.request['body']
      ];
      const response = await instance.generatePlacementOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgeneratePlacementOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgeneratePlacementOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgeneratePlacementOptionsData.request['inboundPlanId'],
          mockgeneratePlacementOptionsData.request['body']
        ];
        await instance.generatePlacementOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('generateSelfShipAppointmentSlots', () => {
    it('should successfully call generateSelfShipAppointmentSlots', async () => {
      instance.apiClient.callApi.resolves(mockgenerateSelfShipAppointmentSlotsData.response);

      const params = [
        mockgenerateSelfShipAppointmentSlotsData.request['inboundPlanId'],
        mockgenerateSelfShipAppointmentSlotsData.request['shipmentId'],
        mockgenerateSelfShipAppointmentSlotsData.request['body']
      ];
      const data = await instance.generateSelfShipAppointmentSlots(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.GenerateSelfShipAppointmentSlotsResponse).to.be.true;
      expect(data).to.equal(mockgenerateSelfShipAppointmentSlotsData.response.data);
    });

    it('should successfully call generateSelfShipAppointmentSlotsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgenerateSelfShipAppointmentSlotsData.response);

      const params = [
        mockgenerateSelfShipAppointmentSlotsData.request['inboundPlanId'],
        mockgenerateSelfShipAppointmentSlotsData.request['shipmentId'],
        mockgenerateSelfShipAppointmentSlotsData.request['body']
      ];
      const response = await instance.generateSelfShipAppointmentSlotsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgenerateSelfShipAppointmentSlotsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgenerateSelfShipAppointmentSlotsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgenerateSelfShipAppointmentSlotsData.request['inboundPlanId'],
          mockgenerateSelfShipAppointmentSlotsData.request['shipmentId'],
          mockgenerateSelfShipAppointmentSlotsData.request['body']
        ];
        await instance.generateSelfShipAppointmentSlots(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('generateShipmentContentUpdatePreviews', () => {
    it('should successfully call generateShipmentContentUpdatePreviews', async () => {
      instance.apiClient.callApi.resolves(mockgenerateShipmentContentUpdatePreviewsData.response);

      const params = [
        mockgenerateShipmentContentUpdatePreviewsData.request['inboundPlanId'],
        mockgenerateShipmentContentUpdatePreviewsData.request['shipmentId'],
        mockgenerateShipmentContentUpdatePreviewsData.request['body']
      ];
      const data = await instance.generateShipmentContentUpdatePreviews(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.GenerateShipmentContentUpdatePreviewsResponse).to.be.true;
      expect(data).to.equal(mockgenerateShipmentContentUpdatePreviewsData.response.data);
    });

    it('should successfully call generateShipmentContentUpdatePreviewsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgenerateShipmentContentUpdatePreviewsData.response);

      const params = [
        mockgenerateShipmentContentUpdatePreviewsData.request['inboundPlanId'],
        mockgenerateShipmentContentUpdatePreviewsData.request['shipmentId'],
        mockgenerateShipmentContentUpdatePreviewsData.request['body']
      ];
      const response = await instance.generateShipmentContentUpdatePreviewsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgenerateShipmentContentUpdatePreviewsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgenerateShipmentContentUpdatePreviewsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgenerateShipmentContentUpdatePreviewsData.request['inboundPlanId'],
          mockgenerateShipmentContentUpdatePreviewsData.request['shipmentId'],
          mockgenerateShipmentContentUpdatePreviewsData.request['body']
        ];
        await instance.generateShipmentContentUpdatePreviews(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('generateTransportationOptions', () => {
    it('should successfully call generateTransportationOptions', async () => {
      instance.apiClient.callApi.resolves(mockgenerateTransportationOptionsData.response);

      const params = [
        mockgenerateTransportationOptionsData.request['inboundPlanId'],
        mockgenerateTransportationOptionsData.request['body']
      ];
      const data = await instance.generateTransportationOptions(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.GenerateTransportationOptionsResponse).to.be.true;
      expect(data).to.equal(mockgenerateTransportationOptionsData.response.data);
    });

    it('should successfully call generateTransportationOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgenerateTransportationOptionsData.response);

      const params = [
        mockgenerateTransportationOptionsData.request['inboundPlanId'],
        mockgenerateTransportationOptionsData.request['body']
      ];
      const response = await instance.generateTransportationOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgenerateTransportationOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgenerateTransportationOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgenerateTransportationOptionsData.request['inboundPlanId'],
          mockgenerateTransportationOptionsData.request['body']
        ];
        await instance.generateTransportationOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getDeliveryChallanDocument', () => {
    it('should successfully call getDeliveryChallanDocument', async () => {
      instance.apiClient.callApi.resolves(mockgetDeliveryChallanDocumentData.response);

      const params = [
        mockgetDeliveryChallanDocumentData.request['inboundPlanId'],
        mockgetDeliveryChallanDocumentData.request['shipmentId']
      ];
      const data = await instance.getDeliveryChallanDocument(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.GetDeliveryChallanDocumentResponse).to.be.true;
      expect(data).to.equal(mockgetDeliveryChallanDocumentData.response.data);
    });

    it('should successfully call getDeliveryChallanDocumentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetDeliveryChallanDocumentData.response);

      const params = [
        mockgetDeliveryChallanDocumentData.request['inboundPlanId'],
        mockgetDeliveryChallanDocumentData.request['shipmentId']
      ];
      const response = await instance.getDeliveryChallanDocumentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetDeliveryChallanDocumentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetDeliveryChallanDocumentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetDeliveryChallanDocumentData.request['inboundPlanId'],
          mockgetDeliveryChallanDocumentData.request['shipmentId']
        ];
        await instance.getDeliveryChallanDocument(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInboundOperationStatus', () => {
    it('should successfully call getInboundOperationStatus', async () => {
      instance.apiClient.callApi.resolves(mockgetInboundOperationStatusData.response);

      const params = [
        mockgetInboundOperationStatusData.request['operationId']
      ];
      const data = await instance.getInboundOperationStatus(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.InboundOperationStatus).to.be.true;
      expect(data).to.equal(mockgetInboundOperationStatusData.response.data);
    });

    it('should successfully call getInboundOperationStatusWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInboundOperationStatusData.response);

      const params = [
        mockgetInboundOperationStatusData.request['operationId']
      ];
      const response = await instance.getInboundOperationStatusWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInboundOperationStatusData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInboundOperationStatusData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInboundOperationStatusData.request['operationId']
        ];
        await instance.getInboundOperationStatus(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInboundPlan', () => {
    it('should successfully call getInboundPlan', async () => {
      instance.apiClient.callApi.resolves(mockgetInboundPlanData.response);

      const params = [
        mockgetInboundPlanData.request['inboundPlanId']
      ];
      const data = await instance.getInboundPlan(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.InboundPlan).to.be.true;
      expect(data).to.equal(mockgetInboundPlanData.response.data);
    });

    it('should successfully call getInboundPlanWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInboundPlanData.response);

      const params = [
        mockgetInboundPlanData.request['inboundPlanId']
      ];
      const response = await instance.getInboundPlanWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInboundPlanData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInboundPlanData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInboundPlanData.request['inboundPlanId']
        ];
        await instance.getInboundPlan(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getSelfShipAppointmentSlots', () => {
    it('should successfully call getSelfShipAppointmentSlots', async () => {
      instance.apiClient.callApi.resolves(mockgetSelfShipAppointmentSlotsData.response);

      const params = [
        mockgetSelfShipAppointmentSlotsData.request['inboundPlanId'],
        mockgetSelfShipAppointmentSlotsData.request['shipmentId'],
      ];
      const data = await instance.getSelfShipAppointmentSlots(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.GetSelfShipAppointmentSlotsResponse).to.be.true;
      expect(data).to.equal(mockgetSelfShipAppointmentSlotsData.response.data);
    });

    it('should successfully call getSelfShipAppointmentSlotsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetSelfShipAppointmentSlotsData.response);

      const params = [
        mockgetSelfShipAppointmentSlotsData.request['inboundPlanId'],
        mockgetSelfShipAppointmentSlotsData.request['shipmentId'],
      ];
      const response = await instance.getSelfShipAppointmentSlotsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetSelfShipAppointmentSlotsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetSelfShipAppointmentSlotsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetSelfShipAppointmentSlotsData.request['inboundPlanId'],
          mockgetSelfShipAppointmentSlotsData.request['shipmentId'],
        ];
        await instance.getSelfShipAppointmentSlots(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getShipment', () => {
    it('should successfully call getShipment', async () => {
      instance.apiClient.callApi.resolves(mockgetShipmentData.response);

      const params = [
        mockgetShipmentData.request['inboundPlanId'],
        mockgetShipmentData.request['shipmentId']
      ];
      const data = await instance.getShipment(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.Shipment).to.be.true;
      expect(data).to.equal(mockgetShipmentData.response.data);
    });

    it('should successfully call getShipmentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetShipmentData.response);

      const params = [
        mockgetShipmentData.request['inboundPlanId'],
        mockgetShipmentData.request['shipmentId']
      ];
      const response = await instance.getShipmentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetShipmentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetShipmentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetShipmentData.request['inboundPlanId'],
          mockgetShipmentData.request['shipmentId']
        ];
        await instance.getShipment(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getShipmentContentUpdatePreview', () => {
    it('should successfully call getShipmentContentUpdatePreview', async () => {
      instance.apiClient.callApi.resolves(mockgetShipmentContentUpdatePreviewData.response);

      const params = [
        mockgetShipmentContentUpdatePreviewData.request['inboundPlanId'],
        mockgetShipmentContentUpdatePreviewData.request['shipmentId'],
        mockgetShipmentContentUpdatePreviewData.request['contentUpdatePreviewId']
      ];
      const data = await instance.getShipmentContentUpdatePreview(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ContentUpdatePreview).to.be.true;
      expect(data).to.equal(mockgetShipmentContentUpdatePreviewData.response.data);
    });

    it('should successfully call getShipmentContentUpdatePreviewWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetShipmentContentUpdatePreviewData.response);

      const params = [
        mockgetShipmentContentUpdatePreviewData.request['inboundPlanId'],
        mockgetShipmentContentUpdatePreviewData.request['shipmentId'],
        mockgetShipmentContentUpdatePreviewData.request['contentUpdatePreviewId']
      ];
      const response = await instance.getShipmentContentUpdatePreviewWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetShipmentContentUpdatePreviewData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetShipmentContentUpdatePreviewData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetShipmentContentUpdatePreviewData.request['inboundPlanId'],
          mockgetShipmentContentUpdatePreviewData.request['shipmentId'],
          mockgetShipmentContentUpdatePreviewData.request['contentUpdatePreviewId']
        ];
        await instance.getShipmentContentUpdatePreview(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listDeliveryWindowOptions', () => {
    it('should successfully call listDeliveryWindowOptions', async () => {
      instance.apiClient.callApi.resolves(mocklistDeliveryWindowOptionsData.response);

      const params = [
        mocklistDeliveryWindowOptionsData.request['inboundPlanId'],
        mocklistDeliveryWindowOptionsData.request['shipmentId'],
      ];
      const data = await instance.listDeliveryWindowOptions(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListDeliveryWindowOptionsResponse).to.be.true;
      expect(data).to.equal(mocklistDeliveryWindowOptionsData.response.data);
    });

    it('should successfully call listDeliveryWindowOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistDeliveryWindowOptionsData.response);

      const params = [
        mocklistDeliveryWindowOptionsData.request['inboundPlanId'],
        mocklistDeliveryWindowOptionsData.request['shipmentId'],
      ];
      const response = await instance.listDeliveryWindowOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistDeliveryWindowOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistDeliveryWindowOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistDeliveryWindowOptionsData.request['inboundPlanId'],
          mocklistDeliveryWindowOptionsData.request['shipmentId'],
        ];
        await instance.listDeliveryWindowOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listInboundPlanBoxes', () => {
    it('should successfully call listInboundPlanBoxes', async () => {
      instance.apiClient.callApi.resolves(mocklistInboundPlanBoxesData.response);

      const params = [
        mocklistInboundPlanBoxesData.request['inboundPlanId'],
      ];
      const data = await instance.listInboundPlanBoxes(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListInboundPlanBoxesResponse).to.be.true;
      expect(data).to.equal(mocklistInboundPlanBoxesData.response.data);
    });

    it('should successfully call listInboundPlanBoxesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistInboundPlanBoxesData.response);

      const params = [
        mocklistInboundPlanBoxesData.request['inboundPlanId'],
      ];
      const response = await instance.listInboundPlanBoxesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistInboundPlanBoxesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistInboundPlanBoxesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistInboundPlanBoxesData.request['inboundPlanId'],
        ];
        await instance.listInboundPlanBoxes(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listInboundPlanItems', () => {
    it('should successfully call listInboundPlanItems', async () => {
      instance.apiClient.callApi.resolves(mocklistInboundPlanItemsData.response);

      const params = [
        mocklistInboundPlanItemsData.request['inboundPlanId'],
      ];
      const data = await instance.listInboundPlanItems(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListInboundPlanItemsResponse).to.be.true;
      expect(data).to.equal(mocklistInboundPlanItemsData.response.data);
    });

    it('should successfully call listInboundPlanItemsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistInboundPlanItemsData.response);

      const params = [
        mocklistInboundPlanItemsData.request['inboundPlanId'],
      ];
      const response = await instance.listInboundPlanItemsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistInboundPlanItemsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistInboundPlanItemsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistInboundPlanItemsData.request['inboundPlanId'],
        ];
        await instance.listInboundPlanItems(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listInboundPlanPallets', () => {
    it('should successfully call listInboundPlanPallets', async () => {
      instance.apiClient.callApi.resolves(mocklistInboundPlanPalletsData.response);

      const params = [
        mocklistInboundPlanPalletsData.request['inboundPlanId'],
      ];
      const data = await instance.listInboundPlanPallets(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListInboundPlanPalletsResponse).to.be.true;
      expect(data).to.equal(mocklistInboundPlanPalletsData.response.data);
    });

    it('should successfully call listInboundPlanPalletsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistInboundPlanPalletsData.response);

      const params = [
        mocklistInboundPlanPalletsData.request['inboundPlanId'],
      ];
      const response = await instance.listInboundPlanPalletsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistInboundPlanPalletsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistInboundPlanPalletsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistInboundPlanPalletsData.request['inboundPlanId'],
        ];
        await instance.listInboundPlanPallets(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listInboundPlans', () => {
    it('should successfully call listInboundPlans', async () => {
      instance.apiClient.callApi.resolves(mocklistInboundPlansData.response);

      const params = [
      ];
      const data = await instance.listInboundPlans(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListInboundPlansResponse).to.be.true;
      expect(data).to.equal(mocklistInboundPlansData.response.data);
    });

    it('should successfully call listInboundPlansWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistInboundPlansData.response);

      const params = [
      ];
      const response = await instance.listInboundPlansWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistInboundPlansData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistInboundPlansData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
        ];
        await instance.listInboundPlans(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listItemComplianceDetails', () => {
    it('should successfully call listItemComplianceDetails', async () => {
      instance.apiClient.callApi.resolves(mocklistItemComplianceDetailsData.response);

      const params = [
        mocklistItemComplianceDetailsData.request['mskus'],
        mocklistItemComplianceDetailsData.request['marketplaceId']
      ];
      const data = await instance.listItemComplianceDetails(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListItemComplianceDetailsResponse).to.be.true;
      expect(data).to.equal(mocklistItemComplianceDetailsData.response.data);
    });

    it('should successfully call listItemComplianceDetailsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistItemComplianceDetailsData.response);

      const params = [
        mocklistItemComplianceDetailsData.request['mskus'],
        mocklistItemComplianceDetailsData.request['marketplaceId']
      ];
      const response = await instance.listItemComplianceDetailsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistItemComplianceDetailsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistItemComplianceDetailsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistItemComplianceDetailsData.request['mskus'],
          mocklistItemComplianceDetailsData.request['marketplaceId']
        ];
        await instance.listItemComplianceDetails(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listPackingGroupBoxes', () => {
    it('should successfully call listPackingGroupBoxes', async () => {
      instance.apiClient.callApi.resolves(mocklistPackingGroupBoxesData.response);

      const params = [
        mocklistPackingGroupBoxesData.request['inboundPlanId'],
        mocklistPackingGroupBoxesData.request['packingGroupId'],
      ];
      const data = await instance.listPackingGroupBoxes(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListPackingGroupBoxesResponse).to.be.true;
      expect(data).to.equal(mocklistPackingGroupBoxesData.response.data);
    });

    it('should successfully call listPackingGroupBoxesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistPackingGroupBoxesData.response);

      const params = [
        mocklistPackingGroupBoxesData.request['inboundPlanId'],
        mocklistPackingGroupBoxesData.request['packingGroupId'],
      ];
      const response = await instance.listPackingGroupBoxesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistPackingGroupBoxesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistPackingGroupBoxesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistPackingGroupBoxesData.request['inboundPlanId'],
          mocklistPackingGroupBoxesData.request['packingGroupId'],
        ];
        await instance.listPackingGroupBoxes(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listPackingGroupItems', () => {
    it('should successfully call listPackingGroupItems', async () => {
      instance.apiClient.callApi.resolves(mocklistPackingGroupItemsData.response);

      const params = [
        mocklistPackingGroupItemsData.request['inboundPlanId'],
        mocklistPackingGroupItemsData.request['packingGroupId'],
      ];
      const data = await instance.listPackingGroupItems(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListPackingGroupItemsResponse).to.be.true;
      expect(data).to.equal(mocklistPackingGroupItemsData.response.data);
    });

    it('should successfully call listPackingGroupItemsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistPackingGroupItemsData.response);

      const params = [
        mocklistPackingGroupItemsData.request['inboundPlanId'],
        mocklistPackingGroupItemsData.request['packingGroupId'],
      ];
      const response = await instance.listPackingGroupItemsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistPackingGroupItemsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistPackingGroupItemsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistPackingGroupItemsData.request['inboundPlanId'],
          mocklistPackingGroupItemsData.request['packingGroupId'],
        ];
        await instance.listPackingGroupItems(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listPackingOptions', () => {
    it('should successfully call listPackingOptions', async () => {
      instance.apiClient.callApi.resolves(mocklistPackingOptionsData.response);

      const params = [
        mocklistPackingOptionsData.request['inboundPlanId'],
      ];
      const data = await instance.listPackingOptions(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListPackingOptionsResponse).to.be.true;
      expect(data).to.equal(mocklistPackingOptionsData.response.data);
    });

    it('should successfully call listPackingOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistPackingOptionsData.response);

      const params = [
        mocklistPackingOptionsData.request['inboundPlanId'],
      ];
      const response = await instance.listPackingOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistPackingOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistPackingOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistPackingOptionsData.request['inboundPlanId'],
        ];
        await instance.listPackingOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listPlacementOptions', () => {
    it('should successfully call listPlacementOptions', async () => {
      instance.apiClient.callApi.resolves(mocklistPlacementOptionsData.response);

      const params = [
        mocklistPlacementOptionsData.request['inboundPlanId'],
      ];
      const data = await instance.listPlacementOptions(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListPlacementOptionsResponse).to.be.true;
      expect(data).to.equal(mocklistPlacementOptionsData.response.data);
    });

    it('should successfully call listPlacementOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistPlacementOptionsData.response);

      const params = [
        mocklistPlacementOptionsData.request['inboundPlanId'],
      ];
      const response = await instance.listPlacementOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistPlacementOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistPlacementOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistPlacementOptionsData.request['inboundPlanId'],
        ];
        await instance.listPlacementOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listPrepDetails', () => {
    it('should successfully call listPrepDetails', async () => {
      instance.apiClient.callApi.resolves(mocklistPrepDetailsData.response);

      const params = [
        mocklistPrepDetailsData.request['marketplaceId'],
        mocklistPrepDetailsData.request['mskus']
      ];
      const data = await instance.listPrepDetails(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListPrepDetailsResponse).to.be.true;
      expect(data).to.equal(mocklistPrepDetailsData.response.data);
    });

    it('should successfully call listPrepDetailsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistPrepDetailsData.response);

      const params = [
        mocklistPrepDetailsData.request['marketplaceId'],
        mocklistPrepDetailsData.request['mskus']
      ];
      const response = await instance.listPrepDetailsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistPrepDetailsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistPrepDetailsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistPrepDetailsData.request['marketplaceId'],
          mocklistPrepDetailsData.request['mskus']
        ];
        await instance.listPrepDetails(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listShipmentBoxes', () => {
    it('should successfully call listShipmentBoxes', async () => {
      instance.apiClient.callApi.resolves(mocklistShipmentBoxesData.response);

      const params = [
        mocklistShipmentBoxesData.request['inboundPlanId'],
        mocklistShipmentBoxesData.request['shipmentId'],
      ];
      const data = await instance.listShipmentBoxes(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListShipmentBoxesResponse).to.be.true;
      expect(data).to.equal(mocklistShipmentBoxesData.response.data);
    });

    it('should successfully call listShipmentBoxesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistShipmentBoxesData.response);

      const params = [
        mocklistShipmentBoxesData.request['inboundPlanId'],
        mocklistShipmentBoxesData.request['shipmentId'],
      ];
      const response = await instance.listShipmentBoxesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistShipmentBoxesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistShipmentBoxesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistShipmentBoxesData.request['inboundPlanId'],
          mocklistShipmentBoxesData.request['shipmentId'],
        ];
        await instance.listShipmentBoxes(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listShipmentContentUpdatePreviews', () => {
    it('should successfully call listShipmentContentUpdatePreviews', async () => {
      instance.apiClient.callApi.resolves(mocklistShipmentContentUpdatePreviewsData.response);

      const params = [
        mocklistShipmentContentUpdatePreviewsData.request['inboundPlanId'],
        mocklistShipmentContentUpdatePreviewsData.request['shipmentId'],
      ];
      const data = await instance.listShipmentContentUpdatePreviews(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListShipmentContentUpdatePreviewsResponse).to.be.true;
      expect(data).to.equal(mocklistShipmentContentUpdatePreviewsData.response.data);
    });

    it('should successfully call listShipmentContentUpdatePreviewsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistShipmentContentUpdatePreviewsData.response);

      const params = [
        mocklistShipmentContentUpdatePreviewsData.request['inboundPlanId'],
        mocklistShipmentContentUpdatePreviewsData.request['shipmentId'],
      ];
      const response = await instance.listShipmentContentUpdatePreviewsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistShipmentContentUpdatePreviewsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistShipmentContentUpdatePreviewsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistShipmentContentUpdatePreviewsData.request['inboundPlanId'],
          mocklistShipmentContentUpdatePreviewsData.request['shipmentId'],
        ];
        await instance.listShipmentContentUpdatePreviews(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listShipmentItems', () => {
    it('should successfully call listShipmentItems', async () => {
      instance.apiClient.callApi.resolves(mocklistShipmentItemsData.response);

      const params = [
        mocklistShipmentItemsData.request['inboundPlanId'],
        mocklistShipmentItemsData.request['shipmentId'],
      ];
      const data = await instance.listShipmentItems(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListShipmentItemsResponse).to.be.true;
      expect(data).to.equal(mocklistShipmentItemsData.response.data);
    });

    it('should successfully call listShipmentItemsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistShipmentItemsData.response);

      const params = [
        mocklistShipmentItemsData.request['inboundPlanId'],
        mocklistShipmentItemsData.request['shipmentId'],
      ];
      const response = await instance.listShipmentItemsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistShipmentItemsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistShipmentItemsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistShipmentItemsData.request['inboundPlanId'],
          mocklistShipmentItemsData.request['shipmentId'],
        ];
        await instance.listShipmentItems(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listShipmentPallets', () => {
    it('should successfully call listShipmentPallets', async () => {
      instance.apiClient.callApi.resolves(mocklistShipmentPalletsData.response);

      const params = [
        mocklistShipmentPalletsData.request['inboundPlanId'],
        mocklistShipmentPalletsData.request['shipmentId'],
      ];
      const data = await instance.listShipmentPallets(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListShipmentPalletsResponse).to.be.true;
      expect(data).to.equal(mocklistShipmentPalletsData.response.data);
    });

    it('should successfully call listShipmentPalletsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistShipmentPalletsData.response);

      const params = [
        mocklistShipmentPalletsData.request['inboundPlanId'],
        mocklistShipmentPalletsData.request['shipmentId'],
      ];
      const response = await instance.listShipmentPalletsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistShipmentPalletsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistShipmentPalletsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistShipmentPalletsData.request['inboundPlanId'],
          mocklistShipmentPalletsData.request['shipmentId'],
        ];
        await instance.listShipmentPallets(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listTransportationOptions', () => {
    it('should successfully call listTransportationOptions', async () => {
      instance.apiClient.callApi.resolves(mocklistTransportationOptionsData.response);

      const params = [
        mocklistTransportationOptionsData.request['inboundPlanId'],
      ];
      const data = await instance.listTransportationOptions(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ListTransportationOptionsResponse).to.be.true;
      expect(data).to.equal(mocklistTransportationOptionsData.response.data);
    });

    it('should successfully call listTransportationOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistTransportationOptionsData.response);

      const params = [
        mocklistTransportationOptionsData.request['inboundPlanId'],
      ];
      const response = await instance.listTransportationOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistTransportationOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistTransportationOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocklistTransportationOptionsData.request['inboundPlanId'],
        ];
        await instance.listTransportationOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('scheduleSelfShipAppointment', () => {
    it('should successfully call scheduleSelfShipAppointment', async () => {
      instance.apiClient.callApi.resolves(mockscheduleSelfShipAppointmentData.response);

      const params = [
        mockscheduleSelfShipAppointmentData.request['inboundPlanId'],
        mockscheduleSelfShipAppointmentData.request['shipmentId'],
        mockscheduleSelfShipAppointmentData.request['slotId'],
        mockscheduleSelfShipAppointmentData.request['body']
      ];
      const data = await instance.scheduleSelfShipAppointment(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.ScheduleSelfShipAppointmentResponse).to.be.true;
      expect(data).to.equal(mockscheduleSelfShipAppointmentData.response.data);
    });

    it('should successfully call scheduleSelfShipAppointmentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockscheduleSelfShipAppointmentData.response);

      const params = [
        mockscheduleSelfShipAppointmentData.request['inboundPlanId'],
        mockscheduleSelfShipAppointmentData.request['shipmentId'],
        mockscheduleSelfShipAppointmentData.request['slotId'],
        mockscheduleSelfShipAppointmentData.request['body']
      ];
      const response = await instance.scheduleSelfShipAppointmentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockscheduleSelfShipAppointmentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockscheduleSelfShipAppointmentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockscheduleSelfShipAppointmentData.request['inboundPlanId'],
          mockscheduleSelfShipAppointmentData.request['shipmentId'],
          mockscheduleSelfShipAppointmentData.request['slotId'],
          mockscheduleSelfShipAppointmentData.request['body']
        ];
        await instance.scheduleSelfShipAppointment(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('setPackingInformation', () => {
    it('should successfully call setPackingInformation', async () => {
      instance.apiClient.callApi.resolves(mocksetPackingInformationData.response);

      const params = [
        mocksetPackingInformationData.request['inboundPlanId'],
        mocksetPackingInformationData.request['body']
      ];
      const data = await instance.setPackingInformation(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.SetPackingInformationResponse).to.be.true;
      expect(data).to.equal(mocksetPackingInformationData.response.data);
    });

    it('should successfully call setPackingInformationWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocksetPackingInformationData.response);

      const params = [
        mocksetPackingInformationData.request['inboundPlanId'],
        mocksetPackingInformationData.request['body']
      ];
      const response = await instance.setPackingInformationWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocksetPackingInformationData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocksetPackingInformationData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocksetPackingInformationData.request['inboundPlanId'],
          mocksetPackingInformationData.request['body']
        ];
        await instance.setPackingInformation(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('setPrepDetails', () => {
    it('should successfully call setPrepDetails', async () => {
      instance.apiClient.callApi.resolves(mocksetPrepDetailsData.response);

      const params = [
        mocksetPrepDetailsData.request['body']
      ];
      const data = await instance.setPrepDetails(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.SetPrepDetailsResponse).to.be.true;
      expect(data).to.equal(mocksetPrepDetailsData.response.data);
    });

    it('should successfully call setPrepDetailsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocksetPrepDetailsData.response);

      const params = [
        mocksetPrepDetailsData.request['body']
      ];
      const response = await instance.setPrepDetailsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocksetPrepDetailsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocksetPrepDetailsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocksetPrepDetailsData.request['body']
        ];
        await instance.setPrepDetails(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateInboundPlanName', () => {
    it('should successfully call updateInboundPlanName', async () => {
      instance.apiClient.callApi.resolves(mockupdateInboundPlanNameData.response);

      const params = [
        mockupdateInboundPlanNameData.request['inboundPlanId'],
        mockupdateInboundPlanNameData.request['body']
      ];
      const data = await instance.updateInboundPlanName(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call updateInboundPlanNameWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateInboundPlanNameData.response);

      const params = [
        mockupdateInboundPlanNameData.request['inboundPlanId'],
        mockupdateInboundPlanNameData.request['body']
      ];
      const response = await instance.updateInboundPlanNameWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateInboundPlanNameData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateInboundPlanNameData.request['inboundPlanId'],
          mockupdateInboundPlanNameData.request['body']
        ];
        await instance.updateInboundPlanName(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateItemComplianceDetails', () => {
    it('should successfully call updateItemComplianceDetails', async () => {
      instance.apiClient.callApi.resolves(mockupdateItemComplianceDetailsData.response);

      const params = [
        mockupdateItemComplianceDetailsData.request['marketplaceId'],
        mockupdateItemComplianceDetailsData.request['body']
      ];
      const data = await instance.updateItemComplianceDetails(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.UpdateItemComplianceDetailsResponse).to.be.true;
      expect(data).to.equal(mockupdateItemComplianceDetailsData.response.data);
    });

    it('should successfully call updateItemComplianceDetailsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateItemComplianceDetailsData.response);

      const params = [
        mockupdateItemComplianceDetailsData.request['marketplaceId'],
        mockupdateItemComplianceDetailsData.request['body']
      ];
      const response = await instance.updateItemComplianceDetailsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateItemComplianceDetailsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockupdateItemComplianceDetailsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateItemComplianceDetailsData.request['marketplaceId'],
          mockupdateItemComplianceDetailsData.request['body']
        ];
        await instance.updateItemComplianceDetails(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateShipmentName', () => {
    it('should successfully call updateShipmentName', async () => {
      instance.apiClient.callApi.resolves(mockupdateShipmentNameData.response);

      const params = [
        mockupdateShipmentNameData.request['inboundPlanId'],
        mockupdateShipmentNameData.request['shipmentId'],
        mockupdateShipmentNameData.request['body']
      ];
      const data = await instance.updateShipmentName(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call updateShipmentNameWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateShipmentNameData.response);

      const params = [
        mockupdateShipmentNameData.request['inboundPlanId'],
        mockupdateShipmentNameData.request['shipmentId'],
        mockupdateShipmentNameData.request['body']
      ];
      const response = await instance.updateShipmentNameWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateShipmentNameData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateShipmentNameData.request['inboundPlanId'],
          mockupdateShipmentNameData.request['shipmentId'],
          mockupdateShipmentNameData.request['body']
        ];
        await instance.updateShipmentName(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateShipmentSourceAddress', () => {
    it('should successfully call updateShipmentSourceAddress', async () => {
      instance.apiClient.callApi.resolves(mockupdateShipmentSourceAddressData.response);

      const params = [
        mockupdateShipmentSourceAddressData.request['inboundPlanId'],
        mockupdateShipmentSourceAddressData.request['shipmentId'],
        mockupdateShipmentSourceAddressData.request['body']
      ];
      const data = await instance.updateShipmentSourceAddress(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.UpdateShipmentSourceAddressResponse).to.be.true;
      expect(data).to.equal(mockupdateShipmentSourceAddressData.response.data);
    });

    it('should successfully call updateShipmentSourceAddressWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateShipmentSourceAddressData.response);

      const params = [
        mockupdateShipmentSourceAddressData.request['inboundPlanId'],
        mockupdateShipmentSourceAddressData.request['shipmentId'],
        mockupdateShipmentSourceAddressData.request['body']
      ];
      const response = await instance.updateShipmentSourceAddressWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateShipmentSourceAddressData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockupdateShipmentSourceAddressData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateShipmentSourceAddressData.request['inboundPlanId'],
          mockupdateShipmentSourceAddressData.request['shipmentId'],
          mockupdateShipmentSourceAddressData.request['body']
        ];
        await instance.updateShipmentSourceAddress(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateShipmentTrackingDetails', () => {
    it('should successfully call updateShipmentTrackingDetails', async () => {
      instance.apiClient.callApi.resolves(mockupdateShipmentTrackingDetailsData.response);

      const params = [
        mockupdateShipmentTrackingDetailsData.request['inboundPlanId'],
        mockupdateShipmentTrackingDetailsData.request['shipmentId'],
        mockupdateShipmentTrackingDetailsData.request['body']
      ];
      const data = await instance.updateShipmentTrackingDetails(...params);

      expect(data instanceof TheSellingPartnerApiForFbaInboundOperations.UpdateShipmentTrackingDetailsResponse).to.be.true;
      expect(data).to.equal(mockupdateShipmentTrackingDetailsData.response.data);
    });

    it('should successfully call updateShipmentTrackingDetailsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateShipmentTrackingDetailsData.response);

      const params = [
        mockupdateShipmentTrackingDetailsData.request['inboundPlanId'],
        mockupdateShipmentTrackingDetailsData.request['shipmentId'],
        mockupdateShipmentTrackingDetailsData.request['body']
      ];
      const response = await instance.updateShipmentTrackingDetailsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateShipmentTrackingDetailsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockupdateShipmentTrackingDetailsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateShipmentTrackingDetailsData.request['inboundPlanId'],
          mockupdateShipmentTrackingDetailsData.request['shipmentId'],
          mockupdateShipmentTrackingDetailsData.request['body']
        ];
        await instance.updateShipmentTrackingDetails(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new TheSellingPartnerApiForFbaInboundOperations.FbaInboundApi();
      expect(defaultInstance.apiClient).to.equal(TheSellingPartnerApiForFbaInboundOperations.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new TheSellingPartnerApiForFbaInboundOperations.ApiClient();
      const customInstance = new TheSellingPartnerApiForFbaInboundOperations.FbaInboundApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
