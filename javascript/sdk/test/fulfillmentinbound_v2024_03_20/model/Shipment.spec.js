/**
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'fulfillmentinbound_v2024_03_20', 'index.js');
const TheSellingPartnerApiForFbaInboundOperations = await import(modulePath);

let instance;

beforeEach(() => {
  try {
    instance = new TheSellingPartnerApiForFbaInboundOperations.Shipment();
  } catch (e) {
    //Handle the cases when this model extends another model by using Model.call(this);
    instance = Object.create(TheSellingPartnerApiForFbaInboundOperations.Shipment.prototype);
  }
});

afterEach(() => {
  instance = null;
});

describe('Shipment', () => {
  it('should create an instance of Shipment', () => {
    expect(instance).to.be.a(TheSellingPartnerApiForFbaInboundOperations.Shipment);
  });

  it('should have the property amazonReferenceId', () => {
    // verify property exists
    expect(instance).to.have.property('amazonReferenceId');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.amazonReferenceId = expectedValue;
    expect(instance.amazonReferenceId).to.equal(expectedValue);
  });

  it('should have the property contactInformation', () => {
    // verify property exists
    expect(instance).to.have.property('contactInformation');

    // set and verify value
    const expectedValue = generateMockData('ContactInformation');
    instance.contactInformation = expectedValue;
    expect(instance.contactInformation).to.equal(expectedValue);
  });

  it('should have the property dates', () => {
    // verify property exists
    expect(instance).to.have.property('dates');

    // set and verify value
    const expectedValue = generateMockData('Dates');
    instance.dates = expectedValue;
    expect(instance.dates).to.equal(expectedValue);
  });

  it('should have the property destination', () => {
    // verify property exists
    expect(instance).to.have.property('destination');

    // set and verify value
    const expectedValue = generateMockData('ShipmentDestination');
    instance.destination = expectedValue;
    expect(instance.destination).to.equal(expectedValue);
  });

  it('should have the property freightInformation', () => {
    // verify property exists
    expect(instance).to.have.property('freightInformation');

    // set and verify value
    const expectedValue = generateMockData('FreightInformation');
    instance.freightInformation = expectedValue;
    expect(instance.freightInformation).to.equal(expectedValue);
  });

  it('should have the property name', () => {
    // verify property exists
    expect(instance).to.have.property('name');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.name = expectedValue;
    expect(instance.name).to.equal(expectedValue);
  });

  it('should have the property placementOptionId', () => {
    // verify property exists
    expect(instance).to.have.property('placementOptionId');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.placementOptionId = expectedValue;
    expect(instance.placementOptionId).to.equal(expectedValue);
  });

  it('should have the property selectedDeliveryWindow', () => {
    // verify property exists
    expect(instance).to.have.property('selectedDeliveryWindow');

    // set and verify value
    const expectedValue = generateMockData('SelectedDeliveryWindow');
    instance.selectedDeliveryWindow = expectedValue;
    expect(instance.selectedDeliveryWindow).to.equal(expectedValue);
  });

  it('should have the property selectedTransportationOptionId', () => {
    // verify property exists
    expect(instance).to.have.property('selectedTransportationOptionId');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.selectedTransportationOptionId = expectedValue;
    expect(instance.selectedTransportationOptionId).to.equal(expectedValue);
  });

  it('should have the property selfShipAppointmentDetails', () => {
    // verify property exists
    expect(instance).to.have.property('selfShipAppointmentDetails');

    // set and verify value
    const expectedValue = generateMockData('SelfShipAppointmentDetails', true);
    instance.selfShipAppointmentDetails = expectedValue;
    expect(instance.selfShipAppointmentDetails).to.equal(expectedValue);
  });

  it('should have the property shipmentConfirmationId', () => {
    // verify property exists
    expect(instance).to.have.property('shipmentConfirmationId');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.shipmentConfirmationId = expectedValue;
    expect(instance.shipmentConfirmationId).to.equal(expectedValue);
  });

  it('should have the property shipmentId', () => {
    // verify property exists
    expect(instance).to.have.property('shipmentId');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.shipmentId = expectedValue;
    expect(instance.shipmentId).to.equal(expectedValue);
  });

  it('should have the property source', () => {
    // verify property exists
    expect(instance).to.have.property('source');

    // set and verify value
    const expectedValue = generateMockData('ShipmentSource');
    instance.source = expectedValue;
    expect(instance.source).to.equal(expectedValue);
  });

  it('should have the property status', () => {
    // verify property exists
    expect(instance).to.have.property('status');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.status = expectedValue;
    expect(instance.status).to.equal(expectedValue);
  });

  it('should have the property trackingDetails', () => {
    // verify property exists
    expect(instance).to.have.property('trackingDetails');

    // set and verify value
    const expectedValue = generateMockData('TrackingDetails');
    instance.trackingDetails = expectedValue;
    expect(instance.trackingDetails).to.equal(expectedValue);
  });

});

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = TheSellingPartnerApiForFbaInboundOperations[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}
