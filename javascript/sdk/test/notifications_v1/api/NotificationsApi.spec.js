/**
 * Selling Partner API for Notifications
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'notifications_v1', 'index.js');
const SellingPartnerApiForNotifications = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForNotifications[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockcreateDestinationData = {
  request: {
    'body': generateMockData('CreateDestinationRequest')
  },
  response: {
    data: generateMockData('CreateDestinationResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockcreateSubscriptionData = {
  request: {
    'notificationType': generateMockData('String'),
    'body': generateMockData('CreateSubscriptionRequest')
  },
  response: {
    data: generateMockData('CreateSubscriptionResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockdeleteDestinationData = {
  request: {
    'destinationId': generateMockData('String')
  },
  response: {
    data: generateMockData('DeleteDestinationResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockdeleteSubscriptionByIdData = {
  request: {
    'subscriptionId': generateMockData('String'),
    'notificationType': generateMockData('String')
  },
  response: {
    data: generateMockData('DeleteSubscriptionByIdResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetDestinationData = {
  request: {
    'destinationId': generateMockData('String')
  },
  response: {
    data: generateMockData('GetDestinationResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetDestinationsData = {
  request: {
  },
  response: {
    data: generateMockData('GetDestinationsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetSubscriptionData = {
  request: {
    'notificationType': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetSubscriptionResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetSubscriptionByIdData = {
  request: {
    'subscriptionId': generateMockData('String'),
    'notificationType': generateMockData('String')
  },
  response: {
    data: generateMockData('GetSubscriptionByIdResponse'),
    statusCode: 200,
    headers: {}
  }
};

describe('NotificationsApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new SellingPartnerApiForNotifications.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForNotifications.NotificationsApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('createDestination', () => {
    it('should successfully call createDestination', async () => {
      instance.apiClient.callApi.resolves(mockcreateDestinationData.response);

      const params = [
        mockcreateDestinationData.request['body']
      ];
      const data = await instance.createDestination(...params);

      expect(data instanceof SellingPartnerApiForNotifications.CreateDestinationResponse).to.be.true;
      expect(data).to.equal(mockcreateDestinationData.response.data);
    });

    it('should successfully call createDestinationWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateDestinationData.response);

      const params = [
        mockcreateDestinationData.request['body']
      ];
      const response = await instance.createDestinationWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateDestinationData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateDestinationData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateDestinationData.request['body']
        ];
        await instance.createDestination(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createSubscription', () => {
    it('should successfully call createSubscription', async () => {
      instance.apiClient.callApi.resolves(mockcreateSubscriptionData.response);

      const params = [
        mockcreateSubscriptionData.request['notificationType'],
        mockcreateSubscriptionData.request['body']
      ];
      const data = await instance.createSubscription(...params);

      expect(data instanceof SellingPartnerApiForNotifications.CreateSubscriptionResponse).to.be.true;
      expect(data).to.equal(mockcreateSubscriptionData.response.data);
    });

    it('should successfully call createSubscriptionWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateSubscriptionData.response);

      const params = [
        mockcreateSubscriptionData.request['notificationType'],
        mockcreateSubscriptionData.request['body']
      ];
      const response = await instance.createSubscriptionWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateSubscriptionData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateSubscriptionData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateSubscriptionData.request['notificationType'],
          mockcreateSubscriptionData.request['body']
        ];
        await instance.createSubscription(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('deleteDestination', () => {
    it('should successfully call deleteDestination', async () => {
      instance.apiClient.callApi.resolves(mockdeleteDestinationData.response);

      const params = [
        mockdeleteDestinationData.request['destinationId']
      ];
      const data = await instance.deleteDestination(...params);

      expect(data instanceof SellingPartnerApiForNotifications.DeleteDestinationResponse).to.be.true;
      expect(data).to.equal(mockdeleteDestinationData.response.data);
    });

    it('should successfully call deleteDestinationWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockdeleteDestinationData.response);

      const params = [
        mockdeleteDestinationData.request['destinationId']
      ];
      const response = await instance.deleteDestinationWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockdeleteDestinationData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockdeleteDestinationData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockdeleteDestinationData.request['destinationId']
        ];
        await instance.deleteDestination(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('deleteSubscriptionById', () => {
    it('should successfully call deleteSubscriptionById', async () => {
      instance.apiClient.callApi.resolves(mockdeleteSubscriptionByIdData.response);

      const params = [
        mockdeleteSubscriptionByIdData.request['subscriptionId'],
        mockdeleteSubscriptionByIdData.request['notificationType']
      ];
      const data = await instance.deleteSubscriptionById(...params);

      expect(data instanceof SellingPartnerApiForNotifications.DeleteSubscriptionByIdResponse).to.be.true;
      expect(data).to.equal(mockdeleteSubscriptionByIdData.response.data);
    });

    it('should successfully call deleteSubscriptionByIdWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockdeleteSubscriptionByIdData.response);

      const params = [
        mockdeleteSubscriptionByIdData.request['subscriptionId'],
        mockdeleteSubscriptionByIdData.request['notificationType']
      ];
      const response = await instance.deleteSubscriptionByIdWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockdeleteSubscriptionByIdData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockdeleteSubscriptionByIdData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockdeleteSubscriptionByIdData.request['subscriptionId'],
          mockdeleteSubscriptionByIdData.request['notificationType']
        ];
        await instance.deleteSubscriptionById(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getDestination', () => {
    it('should successfully call getDestination', async () => {
      instance.apiClient.callApi.resolves(mockgetDestinationData.response);

      const params = [
        mockgetDestinationData.request['destinationId']
      ];
      const data = await instance.getDestination(...params);

      expect(data instanceof SellingPartnerApiForNotifications.GetDestinationResponse).to.be.true;
      expect(data).to.equal(mockgetDestinationData.response.data);
    });

    it('should successfully call getDestinationWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetDestinationData.response);

      const params = [
        mockgetDestinationData.request['destinationId']
      ];
      const response = await instance.getDestinationWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetDestinationData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetDestinationData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetDestinationData.request['destinationId']
        ];
        await instance.getDestination(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getDestinations', () => {
    it('should successfully call getDestinations', async () => {
      instance.apiClient.callApi.resolves(mockgetDestinationsData.response);

      const data = await instance.getDestinations();

      expect(data instanceof SellingPartnerApiForNotifications.GetDestinationsResponse).to.be.true;
      expect(data).to.equal(mockgetDestinationsData.response.data);
    });

    it('should successfully call getDestinationsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetDestinationsData.response);

      const response = await instance.getDestinationsWithHttpInfo();

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetDestinationsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetDestinationsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        await instance.getDestinations();
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getSubscription', () => {
    it('should successfully call getSubscription', async () => {
      instance.apiClient.callApi.resolves(mockgetSubscriptionData.response);

      const params = [
        mockgetSubscriptionData.request['notificationType'],
      ];
      const data = await instance.getSubscription(...params);

      expect(data instanceof SellingPartnerApiForNotifications.GetSubscriptionResponse).to.be.true;
      expect(data).to.equal(mockgetSubscriptionData.response.data);
    });

    it('should successfully call getSubscriptionWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetSubscriptionData.response);

      const params = [
        mockgetSubscriptionData.request['notificationType'],
      ];
      const response = await instance.getSubscriptionWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetSubscriptionData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetSubscriptionData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetSubscriptionData.request['notificationType'],
        ];
        await instance.getSubscription(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getSubscriptionById', () => {
    it('should successfully call getSubscriptionById', async () => {
      instance.apiClient.callApi.resolves(mockgetSubscriptionByIdData.response);

      const params = [
        mockgetSubscriptionByIdData.request['subscriptionId'],
        mockgetSubscriptionByIdData.request['notificationType']
      ];
      const data = await instance.getSubscriptionById(...params);

      expect(data instanceof SellingPartnerApiForNotifications.GetSubscriptionByIdResponse).to.be.true;
      expect(data).to.equal(mockgetSubscriptionByIdData.response.data);
    });

    it('should successfully call getSubscriptionByIdWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetSubscriptionByIdData.response);

      const params = [
        mockgetSubscriptionByIdData.request['subscriptionId'],
        mockgetSubscriptionByIdData.request['notificationType']
      ];
      const response = await instance.getSubscriptionByIdWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetSubscriptionByIdData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetSubscriptionByIdData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetSubscriptionByIdData.request['subscriptionId'],
          mockgetSubscriptionByIdData.request['notificationType']
        ];
        await instance.getSubscriptionById(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new SellingPartnerApiForNotifications.NotificationsApi();
      expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForNotifications.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new SellingPartnerApiForNotifications.ApiClient();
      const customInstance = new SellingPartnerApiForNotifications.NotificationsApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
