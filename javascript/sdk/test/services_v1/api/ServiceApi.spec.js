/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'services_v1', 'index.js');
const SellingPartnerApiForServices = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForServices[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockaddAppointmentForServiceJobByServiceJobIdData = {
  request: {
    'serviceJobId': generateMockData('String'),
    'body': generateMockData('AddAppointmentRequest')
  },
  response: {
    data: generateMockData('SetAppointmentResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockassignAppointmentResourcesData = {
  request: {
    'serviceJobId': generateMockData('String'),
    'appointmentId': generateMockData('String'),
    'body': generateMockData('AssignAppointmentResourcesRequest')
  },
  response: {
    data: generateMockData('AssignAppointmentResourcesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockcancelReservationData = {
  request: {
    'reservationId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true)
  },
  response: {
    data: generateMockData('CancelReservationResponse'),
    statusCode: 204,
    headers: {}
  }
};
const mockcancelServiceJobByServiceJobIdData = {
  request: {
    'serviceJobId': generateMockData('String'),
    'cancellationReasonCode': generateMockData('String')
  },
  response: {
    data: generateMockData('CancelServiceJobByServiceJobIdResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockcompleteServiceJobByServiceJobIdData = {
  request: {
    'serviceJobId': generateMockData('String')
  },
  response: {
    data: generateMockData('CompleteServiceJobByServiceJobIdResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockcreateReservationData = {
  request: {
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('CreateReservationRequest')
  },
  response: {
    data: generateMockData('CreateReservationResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockcreateServiceDocumentUploadDestinationData = {
  request: {
    'body': generateMockData('ServiceUploadDocument')
  },
  response: {
    data: generateMockData('CreateServiceDocumentUploadDestination'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetAppointmentSlotsData = {
  request: {
    'asin': generateMockData('String'),
    'storeId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
  },
  response: {
    data: generateMockData('GetAppointmentSlotsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetAppointmmentSlotsByJobIdData = {
  request: {
    'serviceJobId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
  },
  response: {
    data: generateMockData('GetAppointmentSlotsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetFixedSlotCapacityData = {
  request: {
    'resourceId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('FixedSlotCapacityQuery'),
  },
  response: {
    data: generateMockData('FixedSlotCapacity'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetRangeSlotCapacityData = {
  request: {
    'resourceId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('RangeSlotCapacityQuery'),
  },
  response: {
    data: generateMockData('RangeSlotCapacity'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetServiceJobByServiceJobIdData = {
  request: {
    'serviceJobId': generateMockData('String')
  },
  response: {
    data: generateMockData('GetServiceJobByServiceJobIdResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetServiceJobsData = {
  request: {
    'marketplaceIds': generateMockData('String', true),
  },
  response: {
    data: generateMockData('GetServiceJobsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockrescheduleAppointmentForServiceJobByServiceJobIdData = {
  request: {
    'serviceJobId': generateMockData('String'),
    'appointmentId': generateMockData('String'),
    'body': generateMockData('RescheduleAppointmentRequest')
  },
  response: {
    data: generateMockData('SetAppointmentResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocksetAppointmentFulfillmentDataData = {
  request: {
    'serviceJobId': generateMockData('String'),
    'appointmentId': generateMockData('String'),
    'body': generateMockData('SetAppointmentFulfillmentDataRequest')
  },
  response: {
    data: generateMockData('String'),
    statusCode: 204,
    headers: {}
  }
};
const mockupdateReservationData = {
  request: {
    'reservationId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('UpdateReservationRequest')
  },
  response: {
    data: generateMockData('UpdateReservationResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockupdateScheduleData = {
  request: {
    'resourceId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('UpdateScheduleRequest')
  },
  response: {
    data: generateMockData('UpdateScheduleResponse'),
    statusCode: 200,
    headers: {}
  }
};

describe('ServiceApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new SellingPartnerApiForServices.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForServices.ServiceApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('addAppointmentForServiceJobByServiceJobId', () => {
    it('should successfully call addAppointmentForServiceJobByServiceJobId', async () => {
      instance.apiClient.callApi.resolves(mockaddAppointmentForServiceJobByServiceJobIdData.response);

      const params = [
        mockaddAppointmentForServiceJobByServiceJobIdData.request['serviceJobId'],
        mockaddAppointmentForServiceJobByServiceJobIdData.request['body']
      ];
      const data = await instance.addAppointmentForServiceJobByServiceJobId(...params);

      expect(data instanceof SellingPartnerApiForServices.SetAppointmentResponse).to.be.true;
      expect(data).to.equal(mockaddAppointmentForServiceJobByServiceJobIdData.response.data);
    });

    it('should successfully call addAppointmentForServiceJobByServiceJobIdWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockaddAppointmentForServiceJobByServiceJobIdData.response);

      const params = [
        mockaddAppointmentForServiceJobByServiceJobIdData.request['serviceJobId'],
        mockaddAppointmentForServiceJobByServiceJobIdData.request['body']
      ];
      const response = await instance.addAppointmentForServiceJobByServiceJobIdWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockaddAppointmentForServiceJobByServiceJobIdData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockaddAppointmentForServiceJobByServiceJobIdData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockaddAppointmentForServiceJobByServiceJobIdData.request['serviceJobId'],
          mockaddAppointmentForServiceJobByServiceJobIdData.request['body']
        ];
        await instance.addAppointmentForServiceJobByServiceJobId(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('assignAppointmentResources', () => {
    it('should successfully call assignAppointmentResources', async () => {
      instance.apiClient.callApi.resolves(mockassignAppointmentResourcesData.response);

      const params = [
        mockassignAppointmentResourcesData.request['serviceJobId'],
        mockassignAppointmentResourcesData.request['appointmentId'],
        mockassignAppointmentResourcesData.request['body']
      ];
      const data = await instance.assignAppointmentResources(...params);

      expect(data instanceof SellingPartnerApiForServices.AssignAppointmentResourcesResponse).to.be.true;
      expect(data).to.equal(mockassignAppointmentResourcesData.response.data);
    });

    it('should successfully call assignAppointmentResourcesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockassignAppointmentResourcesData.response);

      const params = [
        mockassignAppointmentResourcesData.request['serviceJobId'],
        mockassignAppointmentResourcesData.request['appointmentId'],
        mockassignAppointmentResourcesData.request['body']
      ];
      const response = await instance.assignAppointmentResourcesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockassignAppointmentResourcesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockassignAppointmentResourcesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockassignAppointmentResourcesData.request['serviceJobId'],
          mockassignAppointmentResourcesData.request['appointmentId'],
          mockassignAppointmentResourcesData.request['body']
        ];
        await instance.assignAppointmentResources(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('cancelReservation', () => {
    it('should successfully call cancelReservation', async () => {
      instance.apiClient.callApi.resolves(mockcancelReservationData.response);

      const params = [
        mockcancelReservationData.request['reservationId'],
        mockcancelReservationData.request['marketplaceIds']
      ];
      const data = await instance.cancelReservation(...params);

      expect(data instanceof SellingPartnerApiForServices.CancelReservationResponse).to.be.true;
      expect(data).to.equal(mockcancelReservationData.response.data);
    });

    it('should successfully call cancelReservationWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcancelReservationData.response);

      const params = [
        mockcancelReservationData.request['reservationId'],
        mockcancelReservationData.request['marketplaceIds']
      ];
      const response = await instance.cancelReservationWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcancelReservationData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcancelReservationData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcancelReservationData.request['reservationId'],
          mockcancelReservationData.request['marketplaceIds']
        ];
        await instance.cancelReservation(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('cancelServiceJobByServiceJobId', () => {
    it('should successfully call cancelServiceJobByServiceJobId', async () => {
      instance.apiClient.callApi.resolves(mockcancelServiceJobByServiceJobIdData.response);

      const params = [
        mockcancelServiceJobByServiceJobIdData.request['serviceJobId'],
        mockcancelServiceJobByServiceJobIdData.request['cancellationReasonCode']
      ];
      const data = await instance.cancelServiceJobByServiceJobId(...params);

      expect(data instanceof SellingPartnerApiForServices.CancelServiceJobByServiceJobIdResponse).to.be.true;
      expect(data).to.equal(mockcancelServiceJobByServiceJobIdData.response.data);
    });

    it('should successfully call cancelServiceJobByServiceJobIdWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcancelServiceJobByServiceJobIdData.response);

      const params = [
        mockcancelServiceJobByServiceJobIdData.request['serviceJobId'],
        mockcancelServiceJobByServiceJobIdData.request['cancellationReasonCode']
      ];
      const response = await instance.cancelServiceJobByServiceJobIdWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcancelServiceJobByServiceJobIdData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcancelServiceJobByServiceJobIdData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcancelServiceJobByServiceJobIdData.request['serviceJobId'],
          mockcancelServiceJobByServiceJobIdData.request['cancellationReasonCode']
        ];
        await instance.cancelServiceJobByServiceJobId(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('completeServiceJobByServiceJobId', () => {
    it('should successfully call completeServiceJobByServiceJobId', async () => {
      instance.apiClient.callApi.resolves(mockcompleteServiceJobByServiceJobIdData.response);

      const params = [
        mockcompleteServiceJobByServiceJobIdData.request['serviceJobId']
      ];
      const data = await instance.completeServiceJobByServiceJobId(...params);

      expect(data instanceof SellingPartnerApiForServices.CompleteServiceJobByServiceJobIdResponse).to.be.true;
      expect(data).to.equal(mockcompleteServiceJobByServiceJobIdData.response.data);
    });

    it('should successfully call completeServiceJobByServiceJobIdWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcompleteServiceJobByServiceJobIdData.response);

      const params = [
        mockcompleteServiceJobByServiceJobIdData.request['serviceJobId']
      ];
      const response = await instance.completeServiceJobByServiceJobIdWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcompleteServiceJobByServiceJobIdData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcompleteServiceJobByServiceJobIdData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcompleteServiceJobByServiceJobIdData.request['serviceJobId']
        ];
        await instance.completeServiceJobByServiceJobId(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createReservation', () => {
    it('should successfully call createReservation', async () => {
      instance.apiClient.callApi.resolves(mockcreateReservationData.response);

      const params = [
        mockcreateReservationData.request['marketplaceIds'],
        mockcreateReservationData.request['body']
      ];
      const data = await instance.createReservation(...params);

      expect(data instanceof SellingPartnerApiForServices.CreateReservationResponse).to.be.true;
      expect(data).to.equal(mockcreateReservationData.response.data);
    });

    it('should successfully call createReservationWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateReservationData.response);

      const params = [
        mockcreateReservationData.request['marketplaceIds'],
        mockcreateReservationData.request['body']
      ];
      const response = await instance.createReservationWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateReservationData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateReservationData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateReservationData.request['marketplaceIds'],
          mockcreateReservationData.request['body']
        ];
        await instance.createReservation(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createServiceDocumentUploadDestination', () => {
    it('should successfully call createServiceDocumentUploadDestination', async () => {
      instance.apiClient.callApi.resolves(mockcreateServiceDocumentUploadDestinationData.response);

      const params = [
        mockcreateServiceDocumentUploadDestinationData.request['body']
      ];
      const data = await instance.createServiceDocumentUploadDestination(...params);

      expect(data instanceof SellingPartnerApiForServices.CreateServiceDocumentUploadDestination).to.be.true;
      expect(data).to.equal(mockcreateServiceDocumentUploadDestinationData.response.data);
    });

    it('should successfully call createServiceDocumentUploadDestinationWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateServiceDocumentUploadDestinationData.response);

      const params = [
        mockcreateServiceDocumentUploadDestinationData.request['body']
      ];
      const response = await instance.createServiceDocumentUploadDestinationWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateServiceDocumentUploadDestinationData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateServiceDocumentUploadDestinationData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateServiceDocumentUploadDestinationData.request['body']
        ];
        await instance.createServiceDocumentUploadDestination(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getAppointmentSlots', () => {
    it('should successfully call getAppointmentSlots', async () => {
      instance.apiClient.callApi.resolves(mockgetAppointmentSlotsData.response);

      const params = [
        mockgetAppointmentSlotsData.request['asin'],
        mockgetAppointmentSlotsData.request['storeId'],
        mockgetAppointmentSlotsData.request['marketplaceIds'],
      ];
      const data = await instance.getAppointmentSlots(...params);

      expect(data instanceof SellingPartnerApiForServices.GetAppointmentSlotsResponse).to.be.true;
      expect(data).to.equal(mockgetAppointmentSlotsData.response.data);
    });

    it('should successfully call getAppointmentSlotsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetAppointmentSlotsData.response);

      const params = [
        mockgetAppointmentSlotsData.request['asin'],
        mockgetAppointmentSlotsData.request['storeId'],
        mockgetAppointmentSlotsData.request['marketplaceIds'],
      ];
      const response = await instance.getAppointmentSlotsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetAppointmentSlotsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetAppointmentSlotsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetAppointmentSlotsData.request['asin'],
          mockgetAppointmentSlotsData.request['storeId'],
          mockgetAppointmentSlotsData.request['marketplaceIds'],
        ];
        await instance.getAppointmentSlots(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getAppointmmentSlotsByJobId', () => {
    it('should successfully call getAppointmmentSlotsByJobId', async () => {
      instance.apiClient.callApi.resolves(mockgetAppointmmentSlotsByJobIdData.response);

      const params = [
        mockgetAppointmmentSlotsByJobIdData.request['serviceJobId'],
        mockgetAppointmmentSlotsByJobIdData.request['marketplaceIds'],
      ];
      const data = await instance.getAppointmmentSlotsByJobId(...params);

      expect(data instanceof SellingPartnerApiForServices.GetAppointmentSlotsResponse).to.be.true;
      expect(data).to.equal(mockgetAppointmmentSlotsByJobIdData.response.data);
    });

    it('should successfully call getAppointmmentSlotsByJobIdWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetAppointmmentSlotsByJobIdData.response);

      const params = [
        mockgetAppointmmentSlotsByJobIdData.request['serviceJobId'],
        mockgetAppointmmentSlotsByJobIdData.request['marketplaceIds'],
      ];
      const response = await instance.getAppointmmentSlotsByJobIdWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetAppointmmentSlotsByJobIdData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetAppointmmentSlotsByJobIdData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetAppointmmentSlotsByJobIdData.request['serviceJobId'],
          mockgetAppointmmentSlotsByJobIdData.request['marketplaceIds'],
        ];
        await instance.getAppointmmentSlotsByJobId(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getFixedSlotCapacity', () => {
    it('should successfully call getFixedSlotCapacity', async () => {
      instance.apiClient.callApi.resolves(mockgetFixedSlotCapacityData.response);

      const params = [
        mockgetFixedSlotCapacityData.request['resourceId'],
        mockgetFixedSlotCapacityData.request['marketplaceIds'],
        mockgetFixedSlotCapacityData.request['body'],
      ];
      const data = await instance.getFixedSlotCapacity(...params);

      expect(data instanceof SellingPartnerApiForServices.FixedSlotCapacity).to.be.true;
      expect(data).to.equal(mockgetFixedSlotCapacityData.response.data);
    });

    it('should successfully call getFixedSlotCapacityWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetFixedSlotCapacityData.response);

      const params = [
        mockgetFixedSlotCapacityData.request['resourceId'],
        mockgetFixedSlotCapacityData.request['marketplaceIds'],
        mockgetFixedSlotCapacityData.request['body'],
      ];
      const response = await instance.getFixedSlotCapacityWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetFixedSlotCapacityData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetFixedSlotCapacityData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetFixedSlotCapacityData.request['resourceId'],
          mockgetFixedSlotCapacityData.request['marketplaceIds'],
          mockgetFixedSlotCapacityData.request['body'],
        ];
        await instance.getFixedSlotCapacity(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getRangeSlotCapacity', () => {
    it('should successfully call getRangeSlotCapacity', async () => {
      instance.apiClient.callApi.resolves(mockgetRangeSlotCapacityData.response);

      const params = [
        mockgetRangeSlotCapacityData.request['resourceId'],
        mockgetRangeSlotCapacityData.request['marketplaceIds'],
        mockgetRangeSlotCapacityData.request['body'],
      ];
      const data = await instance.getRangeSlotCapacity(...params);

      expect(data instanceof SellingPartnerApiForServices.RangeSlotCapacity).to.be.true;
      expect(data).to.equal(mockgetRangeSlotCapacityData.response.data);
    });

    it('should successfully call getRangeSlotCapacityWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetRangeSlotCapacityData.response);

      const params = [
        mockgetRangeSlotCapacityData.request['resourceId'],
        mockgetRangeSlotCapacityData.request['marketplaceIds'],
        mockgetRangeSlotCapacityData.request['body'],
      ];
      const response = await instance.getRangeSlotCapacityWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetRangeSlotCapacityData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetRangeSlotCapacityData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetRangeSlotCapacityData.request['resourceId'],
          mockgetRangeSlotCapacityData.request['marketplaceIds'],
          mockgetRangeSlotCapacityData.request['body'],
        ];
        await instance.getRangeSlotCapacity(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getServiceJobByServiceJobId', () => {
    it('should successfully call getServiceJobByServiceJobId', async () => {
      instance.apiClient.callApi.resolves(mockgetServiceJobByServiceJobIdData.response);

      const params = [
        mockgetServiceJobByServiceJobIdData.request['serviceJobId']
      ];
      const data = await instance.getServiceJobByServiceJobId(...params);

      expect(data instanceof SellingPartnerApiForServices.GetServiceJobByServiceJobIdResponse).to.be.true;
      expect(data).to.equal(mockgetServiceJobByServiceJobIdData.response.data);
    });

    it('should successfully call getServiceJobByServiceJobIdWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetServiceJobByServiceJobIdData.response);

      const params = [
        mockgetServiceJobByServiceJobIdData.request['serviceJobId']
      ];
      const response = await instance.getServiceJobByServiceJobIdWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetServiceJobByServiceJobIdData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetServiceJobByServiceJobIdData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetServiceJobByServiceJobIdData.request['serviceJobId']
        ];
        await instance.getServiceJobByServiceJobId(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getServiceJobs', () => {
    it('should successfully call getServiceJobs', async () => {
      instance.apiClient.callApi.resolves(mockgetServiceJobsData.response);

      const params = [
        mockgetServiceJobsData.request['marketplaceIds'],
      ];
      const data = await instance.getServiceJobs(...params);

      expect(data instanceof SellingPartnerApiForServices.GetServiceJobsResponse).to.be.true;
      expect(data).to.equal(mockgetServiceJobsData.response.data);
    });

    it('should successfully call getServiceJobsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetServiceJobsData.response);

      const params = [
        mockgetServiceJobsData.request['marketplaceIds'],
      ];
      const response = await instance.getServiceJobsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetServiceJobsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetServiceJobsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetServiceJobsData.request['marketplaceIds'],
        ];
        await instance.getServiceJobs(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('rescheduleAppointmentForServiceJobByServiceJobId', () => {
    it('should successfully call rescheduleAppointmentForServiceJobByServiceJobId', async () => {
      instance.apiClient.callApi.resolves(mockrescheduleAppointmentForServiceJobByServiceJobIdData.response);

      const params = [
        mockrescheduleAppointmentForServiceJobByServiceJobIdData.request['serviceJobId'],
        mockrescheduleAppointmentForServiceJobByServiceJobIdData.request['appointmentId'],
        mockrescheduleAppointmentForServiceJobByServiceJobIdData.request['body']
      ];
      const data = await instance.rescheduleAppointmentForServiceJobByServiceJobId(...params);

      expect(data instanceof SellingPartnerApiForServices.SetAppointmentResponse).to.be.true;
      expect(data).to.equal(mockrescheduleAppointmentForServiceJobByServiceJobIdData.response.data);
    });

    it('should successfully call rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockrescheduleAppointmentForServiceJobByServiceJobIdData.response);

      const params = [
        mockrescheduleAppointmentForServiceJobByServiceJobIdData.request['serviceJobId'],
        mockrescheduleAppointmentForServiceJobByServiceJobIdData.request['appointmentId'],
        mockrescheduleAppointmentForServiceJobByServiceJobIdData.request['body']
      ];
      const response = await instance.rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockrescheduleAppointmentForServiceJobByServiceJobIdData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockrescheduleAppointmentForServiceJobByServiceJobIdData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockrescheduleAppointmentForServiceJobByServiceJobIdData.request['serviceJobId'],
          mockrescheduleAppointmentForServiceJobByServiceJobIdData.request['appointmentId'],
          mockrescheduleAppointmentForServiceJobByServiceJobIdData.request['body']
        ];
        await instance.rescheduleAppointmentForServiceJobByServiceJobId(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('setAppointmentFulfillmentData', () => {
    it('should successfully call setAppointmentFulfillmentData', async () => {
      instance.apiClient.callApi.resolves(mocksetAppointmentFulfillmentDataData.response);

      const params = [
        mocksetAppointmentFulfillmentDataData.request['serviceJobId'],
        mocksetAppointmentFulfillmentDataData.request['appointmentId'],
        mocksetAppointmentFulfillmentDataData.request['body']
      ];
      const data = await instance.setAppointmentFulfillmentData(...params);

      expect(data instanceof String).to.be.true;
      expect(data).to.equal(mocksetAppointmentFulfillmentDataData.response.data);
    });

    it('should successfully call setAppointmentFulfillmentDataWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocksetAppointmentFulfillmentDataData.response);

      const params = [
        mocksetAppointmentFulfillmentDataData.request['serviceJobId'],
        mocksetAppointmentFulfillmentDataData.request['appointmentId'],
        mocksetAppointmentFulfillmentDataData.request['body']
      ];
      const response = await instance.setAppointmentFulfillmentDataWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocksetAppointmentFulfillmentDataData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocksetAppointmentFulfillmentDataData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocksetAppointmentFulfillmentDataData.request['serviceJobId'],
          mocksetAppointmentFulfillmentDataData.request['appointmentId'],
          mocksetAppointmentFulfillmentDataData.request['body']
        ];
        await instance.setAppointmentFulfillmentData(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateReservation', () => {
    it('should successfully call updateReservation', async () => {
      instance.apiClient.callApi.resolves(mockupdateReservationData.response);

      const params = [
        mockupdateReservationData.request['reservationId'],
        mockupdateReservationData.request['marketplaceIds'],
        mockupdateReservationData.request['body']
      ];
      const data = await instance.updateReservation(...params);

      expect(data instanceof SellingPartnerApiForServices.UpdateReservationResponse).to.be.true;
      expect(data).to.equal(mockupdateReservationData.response.data);
    });

    it('should successfully call updateReservationWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateReservationData.response);

      const params = [
        mockupdateReservationData.request['reservationId'],
        mockupdateReservationData.request['marketplaceIds'],
        mockupdateReservationData.request['body']
      ];
      const response = await instance.updateReservationWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateReservationData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockupdateReservationData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateReservationData.request['reservationId'],
          mockupdateReservationData.request['marketplaceIds'],
          mockupdateReservationData.request['body']
        ];
        await instance.updateReservation(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateSchedule', () => {
    it('should successfully call updateSchedule', async () => {
      instance.apiClient.callApi.resolves(mockupdateScheduleData.response);

      const params = [
        mockupdateScheduleData.request['resourceId'],
        mockupdateScheduleData.request['marketplaceIds'],
        mockupdateScheduleData.request['body']
      ];
      const data = await instance.updateSchedule(...params);

      expect(data instanceof SellingPartnerApiForServices.UpdateScheduleResponse).to.be.true;
      expect(data).to.equal(mockupdateScheduleData.response.data);
    });

    it('should successfully call updateScheduleWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateScheduleData.response);

      const params = [
        mockupdateScheduleData.request['resourceId'],
        mockupdateScheduleData.request['marketplaceIds'],
        mockupdateScheduleData.request['body']
      ];
      const response = await instance.updateScheduleWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateScheduleData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockupdateScheduleData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateScheduleData.request['resourceId'],
          mockupdateScheduleData.request['marketplaceIds'],
          mockupdateScheduleData.request['body']
        ];
        await instance.updateSchedule(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new SellingPartnerApiForServices.ServiceApi();
      expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForServices.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new SellingPartnerApiForServices.ApiClient();
      const customInstance = new SellingPartnerApiForServices.ServiceApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
