/**
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'externalfulfillmentshipments_v2024_09_11', 'index.js');
const TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockcreatePackagesData = {
  request: {
    'shipmentId': generateMockData('String'),
    'body': generateMockData('Packages')
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};
const mockgenerateInvoiceData = {
  request: {
    'shipmentId': generateMockData('String')
  },
  response: {
    data: generateMockData('InvoiceResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgenerateShipLabelsData = {
  request: {
    'shipmentId': generateMockData('String'),
    'operation': generateMockData('String'),
  },
  response: {
    data: generateMockData('ShipLabelsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockprocessShipmentData = {
  request: {
    'shipmentId': generateMockData('String'),
    'operation': generateMockData('String'),
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};
const mockretrieveInvoiceData = {
  request: {
    'shipmentId': generateMockData('String')
  },
  response: {
    data: generateMockData('InvoiceResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockretrieveShippingOptionsData = {
  request: {
    'shipmentId': generateMockData('String'),
    'packageId': generateMockData('String')
  },
  response: {
    data: generateMockData('ShippingOptionsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockupdatePackageData = {
  request: {
    'shipmentId': generateMockData('String'),
    'packageId': generateMockData('String'),
    'body': generateMockData('Package')
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};
const mockupdatePackageStatusData = {
  request: {
    'shipmentId': generateMockData('String'),
    'packageId': generateMockData('String'),
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};

describe('ShipmentProcessingApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ShipmentProcessingApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('createPackages', () => {
    it('should successfully call createPackages', async () => {
      instance.apiClient.callApi.resolves(mockcreatePackagesData.response);

      const params = [
        mockcreatePackagesData.request['shipmentId'],
        mockcreatePackagesData.request['body']
      ];
      const data = await instance.createPackages(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call createPackagesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreatePackagesData.response);

      const params = [
        mockcreatePackagesData.request['shipmentId'],
        mockcreatePackagesData.request['body']
      ];
      const response = await instance.createPackagesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreatePackagesData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreatePackagesData.request['shipmentId'],
          mockcreatePackagesData.request['body']
        ];
        await instance.createPackages(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('generateInvoice', () => {
    it('should successfully call generateInvoice', async () => {
      instance.apiClient.callApi.resolves(mockgenerateInvoiceData.response);

      const params = [
        mockgenerateInvoiceData.request['shipmentId']
      ];
      const data = await instance.generateInvoice(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.InvoiceResponse).to.be.true;
      expect(data).to.equal(mockgenerateInvoiceData.response.data);
    });

    it('should successfully call generateInvoiceWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgenerateInvoiceData.response);

      const params = [
        mockgenerateInvoiceData.request['shipmentId']
      ];
      const response = await instance.generateInvoiceWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgenerateInvoiceData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgenerateInvoiceData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgenerateInvoiceData.request['shipmentId']
        ];
        await instance.generateInvoice(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('generateShipLabels', () => {
    it('should successfully call generateShipLabels', async () => {
      instance.apiClient.callApi.resolves(mockgenerateShipLabelsData.response);

      const params = [
        mockgenerateShipLabelsData.request['shipmentId'],
        mockgenerateShipLabelsData.request['operation'],
      ];
      const data = await instance.generateShipLabels(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ShipLabelsResponse).to.be.true;
      expect(data).to.equal(mockgenerateShipLabelsData.response.data);
    });

    it('should successfully call generateShipLabelsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgenerateShipLabelsData.response);

      const params = [
        mockgenerateShipLabelsData.request['shipmentId'],
        mockgenerateShipLabelsData.request['operation'],
      ];
      const response = await instance.generateShipLabelsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgenerateShipLabelsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgenerateShipLabelsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgenerateShipLabelsData.request['shipmentId'],
          mockgenerateShipLabelsData.request['operation'],
        ];
        await instance.generateShipLabels(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('processShipment', () => {
    it('should successfully call processShipment', async () => {
      instance.apiClient.callApi.resolves(mockprocessShipmentData.response);

      const params = [
        mockprocessShipmentData.request['shipmentId'],
        mockprocessShipmentData.request['operation'],
      ];
      const data = await instance.processShipment(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call processShipmentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockprocessShipmentData.response);

      const params = [
        mockprocessShipmentData.request['shipmentId'],
        mockprocessShipmentData.request['operation'],
      ];
      const response = await instance.processShipmentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockprocessShipmentData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockprocessShipmentData.request['shipmentId'],
          mockprocessShipmentData.request['operation'],
        ];
        await instance.processShipment(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('retrieveInvoice', () => {
    it('should successfully call retrieveInvoice', async () => {
      instance.apiClient.callApi.resolves(mockretrieveInvoiceData.response);

      const params = [
        mockretrieveInvoiceData.request['shipmentId']
      ];
      const data = await instance.retrieveInvoice(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.InvoiceResponse).to.be.true;
      expect(data).to.equal(mockretrieveInvoiceData.response.data);
    });

    it('should successfully call retrieveInvoiceWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockretrieveInvoiceData.response);

      const params = [
        mockretrieveInvoiceData.request['shipmentId']
      ];
      const response = await instance.retrieveInvoiceWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockretrieveInvoiceData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockretrieveInvoiceData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockretrieveInvoiceData.request['shipmentId']
        ];
        await instance.retrieveInvoice(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('retrieveShippingOptions', () => {
    it('should successfully call retrieveShippingOptions', async () => {
      instance.apiClient.callApi.resolves(mockretrieveShippingOptionsData.response);

      const params = [
        mockretrieveShippingOptionsData.request['shipmentId'],
        mockretrieveShippingOptionsData.request['packageId']
      ];
      const data = await instance.retrieveShippingOptions(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ShippingOptionsResponse).to.be.true;
      expect(data).to.equal(mockretrieveShippingOptionsData.response.data);
    });

    it('should successfully call retrieveShippingOptionsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockretrieveShippingOptionsData.response);

      const params = [
        mockretrieveShippingOptionsData.request['shipmentId'],
        mockretrieveShippingOptionsData.request['packageId']
      ];
      const response = await instance.retrieveShippingOptionsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockretrieveShippingOptionsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockretrieveShippingOptionsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockretrieveShippingOptionsData.request['shipmentId'],
          mockretrieveShippingOptionsData.request['packageId']
        ];
        await instance.retrieveShippingOptions(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updatePackage', () => {
    it('should successfully call updatePackage', async () => {
      instance.apiClient.callApi.resolves(mockupdatePackageData.response);

      const params = [
        mockupdatePackageData.request['shipmentId'],
        mockupdatePackageData.request['packageId'],
        mockupdatePackageData.request['body']
      ];
      const data = await instance.updatePackage(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call updatePackageWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdatePackageData.response);

      const params = [
        mockupdatePackageData.request['shipmentId'],
        mockupdatePackageData.request['packageId'],
        mockupdatePackageData.request['body']
      ];
      const response = await instance.updatePackageWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdatePackageData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdatePackageData.request['shipmentId'],
          mockupdatePackageData.request['packageId'],
          mockupdatePackageData.request['body']
        ];
        await instance.updatePackage(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updatePackageStatus', () => {
    it('should successfully call updatePackageStatus', async () => {
      instance.apiClient.callApi.resolves(mockupdatePackageStatusData.response);

      const params = [
        mockupdatePackageStatusData.request['shipmentId'],
        mockupdatePackageStatusData.request['packageId'],
      ];
      const data = await instance.updatePackageStatus(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call updatePackageStatusWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdatePackageStatusData.response);

      const params = [
        mockupdatePackageStatusData.request['shipmentId'],
        mockupdatePackageStatusData.request['packageId'],
      ];
      const response = await instance.updatePackageStatusWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdatePackageStatusData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdatePackageStatusData.request['shipmentId'],
          mockupdatePackageStatusData.request['packageId'],
        ];
        await instance.updatePackageStatus(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ShipmentProcessingApi();
      expect(defaultInstance.apiClient).to.equal(TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ApiClient();
      const customInstance = new TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ShipmentProcessingApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
