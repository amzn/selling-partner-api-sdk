/**
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'externalfulfillmentshipments_v2024_09_11', 'index.js');
const TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockgetShipmentData = {
  request: {
    'shipmentId': generateMockData('String')
  },
  response: {
    data: generateMockData('Shipment'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetShipmentsData = {
  request: {
    'status': generateMockData('String'),
  },
  response: {
    data: generateMockData('ShipmentsResponse'),
    statusCode: 200,
    headers: {}
  }
};

describe('ShipmentRetrievalApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ShipmentRetrievalApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('getShipment', () => {
    it('should successfully call getShipment', async () => {
      instance.apiClient.callApi.resolves(mockgetShipmentData.response);

      const params = [
        mockgetShipmentData.request['shipmentId']
      ];
      const data = await instance.getShipment(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.Shipment).to.be.true;
      expect(data).to.equal(mockgetShipmentData.response.data);
    });

    it('should successfully call getShipmentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetShipmentData.response);

      const params = [
        mockgetShipmentData.request['shipmentId']
      ];
      const response = await instance.getShipmentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetShipmentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetShipmentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetShipmentData.request['shipmentId']
        ];
        await instance.getShipment(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getShipments', () => {
    it('should successfully call getShipments', async () => {
      instance.apiClient.callApi.resolves(mockgetShipmentsData.response);

      const params = [
        mockgetShipmentsData.request['status'],
      ];
      const data = await instance.getShipments(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ShipmentsResponse).to.be.true;
      expect(data).to.equal(mockgetShipmentsData.response.data);
    });

    it('should successfully call getShipmentsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetShipmentsData.response);

      const params = [
        mockgetShipmentsData.request['status'],
      ];
      const response = await instance.getShipmentsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetShipmentsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetShipmentsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetShipmentsData.request['status'],
        ];
        await instance.getShipments(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ShipmentRetrievalApi();
      expect(defaultInstance.apiClient).to.equal(TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ApiClient();
      const customInstance = new TheSellingPartnerApiForAmazonExternalFulfillmentShipmentsProcessing.ShipmentRetrievalApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
