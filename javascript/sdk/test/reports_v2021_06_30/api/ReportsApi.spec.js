/**
 * Selling Partner API for Reports
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2021-06-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'reports_v2021_06_30', 'index.js');
const SellingPartnerApiForReports = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForReports[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockcancelReportData = {
  request: {
    'reportId': generateMockData('String')
  },
  response: {
    statusCode: 200,
    headers: {}
  }
};
const mockcancelReportScheduleData = {
  request: {
    'reportScheduleId': generateMockData('String')
  },
  response: {
    statusCode: 200,
    headers: {}
  }
};
const mockcreateReportData = {
  request: {
    'body': generateMockData('CreateReportSpecification')
  },
  response: {
    data: generateMockData('CreateReportResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockcreateReportScheduleData = {
  request: {
    'body': generateMockData('CreateReportScheduleSpecification')
  },
  response: {
    data: generateMockData('CreateReportScheduleResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockgetReportData = {
  request: {
    'reportId': generateMockData('String')
  },
  response: {
    data: generateMockData('Report'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetReportDocumentData = {
  request: {
    'reportDocumentId': generateMockData('String')
  },
  response: {
    data: generateMockData('ReportDocument'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetReportScheduleData = {
  request: {
    'reportScheduleId': generateMockData('String')
  },
  response: {
    data: generateMockData('ReportSchedule'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetReportSchedulesData = {
  request: {
    'reportTypes': generateMockData('String', true)
  },
  response: {
    data: generateMockData('ReportScheduleList'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetReportsData = {
  request: {
  },
  response: {
    data: generateMockData('GetReportsResponse'),
    statusCode: 200,
    headers: {}
  }
};

describe('ReportsApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new SellingPartnerApiForReports.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForReports.ReportsApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('cancelReport', () => {
    it('should successfully call cancelReport', async () => {
      instance.apiClient.callApi.resolves(mockcancelReportData.response);

      const params = [
        mockcancelReportData.request['reportId']
      ];
      const data = await instance.cancelReport(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call cancelReportWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcancelReportData.response);

      const params = [
        mockcancelReportData.request['reportId']
      ];
      const response = await instance.cancelReportWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcancelReportData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcancelReportData.request['reportId']
        ];
        await instance.cancelReport(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('cancelReportSchedule', () => {
    it('should successfully call cancelReportSchedule', async () => {
      instance.apiClient.callApi.resolves(mockcancelReportScheduleData.response);

      const params = [
        mockcancelReportScheduleData.request['reportScheduleId']
      ];
      const data = await instance.cancelReportSchedule(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call cancelReportScheduleWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcancelReportScheduleData.response);

      const params = [
        mockcancelReportScheduleData.request['reportScheduleId']
      ];
      const response = await instance.cancelReportScheduleWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcancelReportScheduleData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcancelReportScheduleData.request['reportScheduleId']
        ];
        await instance.cancelReportSchedule(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createReport', () => {
    it('should successfully call createReport', async () => {
      instance.apiClient.callApi.resolves(mockcreateReportData.response);

      const params = [
        mockcreateReportData.request['body']
      ];
      const data = await instance.createReport(...params);

      expect(data instanceof SellingPartnerApiForReports.CreateReportResponse).to.be.true;
      expect(data).to.equal(mockcreateReportData.response.data);
    });

    it('should successfully call createReportWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateReportData.response);

      const params = [
        mockcreateReportData.request['body']
      ];
      const response = await instance.createReportWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateReportData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateReportData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateReportData.request['body']
        ];
        await instance.createReport(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createReportSchedule', () => {
    it('should successfully call createReportSchedule', async () => {
      instance.apiClient.callApi.resolves(mockcreateReportScheduleData.response);

      const params = [
        mockcreateReportScheduleData.request['body']
      ];
      const data = await instance.createReportSchedule(...params);

      expect(data instanceof SellingPartnerApiForReports.CreateReportScheduleResponse).to.be.true;
      expect(data).to.equal(mockcreateReportScheduleData.response.data);
    });

    it('should successfully call createReportScheduleWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateReportScheduleData.response);

      const params = [
        mockcreateReportScheduleData.request['body']
      ];
      const response = await instance.createReportScheduleWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateReportScheduleData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateReportScheduleData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateReportScheduleData.request['body']
        ];
        await instance.createReportSchedule(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getReport', () => {
    it('should successfully call getReport', async () => {
      instance.apiClient.callApi.resolves(mockgetReportData.response);

      const params = [
        mockgetReportData.request['reportId']
      ];
      const data = await instance.getReport(...params);

      expect(data instanceof SellingPartnerApiForReports.Report).to.be.true;
      expect(data).to.equal(mockgetReportData.response.data);
    });

    it('should successfully call getReportWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetReportData.response);

      const params = [
        mockgetReportData.request['reportId']
      ];
      const response = await instance.getReportWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetReportData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetReportData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetReportData.request['reportId']
        ];
        await instance.getReport(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getReportDocument', () => {
    it('should successfully call getReportDocument', async () => {
      instance.apiClient.callApi.resolves(mockgetReportDocumentData.response);

      const params = [
        mockgetReportDocumentData.request['reportDocumentId']
      ];
      const data = await instance.getReportDocument(...params);

      expect(data instanceof SellingPartnerApiForReports.ReportDocument).to.be.true;
      expect(data).to.equal(mockgetReportDocumentData.response.data);
    });

    it('should successfully call getReportDocumentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetReportDocumentData.response);

      const params = [
        mockgetReportDocumentData.request['reportDocumentId']
      ];
      const response = await instance.getReportDocumentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetReportDocumentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetReportDocumentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetReportDocumentData.request['reportDocumentId']
        ];
        await instance.getReportDocument(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getReportSchedule', () => {
    it('should successfully call getReportSchedule', async () => {
      instance.apiClient.callApi.resolves(mockgetReportScheduleData.response);

      const params = [
        mockgetReportScheduleData.request['reportScheduleId']
      ];
      const data = await instance.getReportSchedule(...params);

      expect(data instanceof SellingPartnerApiForReports.ReportSchedule).to.be.true;
      expect(data).to.equal(mockgetReportScheduleData.response.data);
    });

    it('should successfully call getReportScheduleWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetReportScheduleData.response);

      const params = [
        mockgetReportScheduleData.request['reportScheduleId']
      ];
      const response = await instance.getReportScheduleWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetReportScheduleData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetReportScheduleData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetReportScheduleData.request['reportScheduleId']
        ];
        await instance.getReportSchedule(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getReportSchedules', () => {
    it('should successfully call getReportSchedules', async () => {
      instance.apiClient.callApi.resolves(mockgetReportSchedulesData.response);

      const params = [
        mockgetReportSchedulesData.request['reportTypes']
      ];
      const data = await instance.getReportSchedules(...params);

      expect(data instanceof SellingPartnerApiForReports.ReportScheduleList).to.be.true;
      expect(data).to.equal(mockgetReportSchedulesData.response.data);
    });

    it('should successfully call getReportSchedulesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetReportSchedulesData.response);

      const params = [
        mockgetReportSchedulesData.request['reportTypes']
      ];
      const response = await instance.getReportSchedulesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetReportSchedulesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetReportSchedulesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetReportSchedulesData.request['reportTypes']
        ];
        await instance.getReportSchedules(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getReports', () => {
    it('should successfully call getReports', async () => {
      instance.apiClient.callApi.resolves(mockgetReportsData.response);

      const params = [
      ];
      const data = await instance.getReports(...params);

      expect(data instanceof SellingPartnerApiForReports.GetReportsResponse).to.be.true;
      expect(data).to.equal(mockgetReportsData.response.data);
    });

    it('should successfully call getReportsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetReportsData.response);

      const params = [
      ];
      const response = await instance.getReportsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetReportsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetReportsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
        ];
        await instance.getReports(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new SellingPartnerApiForReports.ReportsApi();
      expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForReports.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new SellingPartnerApiForReports.ApiClient();
      const customInstance = new SellingPartnerApiForReports.ReportsApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
