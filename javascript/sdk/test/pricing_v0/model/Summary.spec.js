/**
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'pricing_v0', 'index.js');
const SellingPartnerApiForPricing = await import(modulePath);

let instance;

beforeEach(() => {
  try {
    instance = new SellingPartnerApiForPricing.Summary();
  } catch (e) {
    //Handle the cases when this model extends another model by using Model.call(this);
    instance = Object.create(SellingPartnerApiForPricing.Summary.prototype);
  }
});

afterEach(() => {
  instance = null;
});

describe('Summary', () => {
  it('should create an instance of Summary', () => {
    expect(instance).to.be.a(SellingPartnerApiForPricing.Summary);
  });

  it('should have the property totalOfferCount', () => {
    // verify property exists
    expect(instance).to.have.property('totalOfferCount');

    // set and verify value
    const expectedValue = generateMockData('Number');
    instance.totalOfferCount = expectedValue;
    expect(instance.totalOfferCount).to.equal(expectedValue);
  });

  it('should have the property numberOfOffers', () => {
    // verify property exists
    expect(instance).to.have.property('numberOfOffers');

    // set and verify value
    const expectedValue = generateMockData('OfferCountType', true);
    instance.numberOfOffers = expectedValue;
    expect(instance.numberOfOffers).to.equal(expectedValue);
  });

  it('should have the property lowestPrices', () => {
    // verify property exists
    expect(instance).to.have.property('lowestPrices');

    // set and verify value
    const expectedValue = generateMockData('LowestPriceType', true);
    instance.lowestPrices = expectedValue;
    expect(instance.lowestPrices).to.equal(expectedValue);
  });

  it('should have the property buyBoxPrices', () => {
    // verify property exists
    expect(instance).to.have.property('buyBoxPrices');

    // set and verify value
    const expectedValue = generateMockData('BuyBoxPriceType', true);
    instance.buyBoxPrices = expectedValue;
    expect(instance.buyBoxPrices).to.equal(expectedValue);
  });

  it('should have the property listPrice', () => {
    // verify property exists
    expect(instance).to.have.property('listPrice');

    // set and verify value
    const expectedValue = generateMockData('MoneyType');
    instance.listPrice = expectedValue;
    expect(instance.listPrice).to.equal(expectedValue);
  });

  it('should have the property competitivePriceThreshold', () => {
    // verify property exists
    expect(instance).to.have.property('competitivePriceThreshold');

    // set and verify value
    const expectedValue = generateMockData('MoneyType');
    instance.competitivePriceThreshold = expectedValue;
    expect(instance.competitivePriceThreshold).to.equal(expectedValue);
  });

  it('should have the property suggestedLowerPricePlusShipping', () => {
    // verify property exists
    expect(instance).to.have.property('suggestedLowerPricePlusShipping');

    // set and verify value
    const expectedValue = generateMockData('MoneyType');
    instance.suggestedLowerPricePlusShipping = expectedValue;
    expect(instance.suggestedLowerPricePlusShipping).to.equal(expectedValue);
  });

  it('should have the property salesRankings', () => {
    // verify property exists
    expect(instance).to.have.property('salesRankings');

    // set and verify value
    const expectedValue = generateMockData('SalesRankType', true);
    instance.salesRankings = expectedValue;
    expect(instance.salesRankings).to.equal(expectedValue);
  });

  it('should have the property buyBoxEligibleOffers', () => {
    // verify property exists
    expect(instance).to.have.property('buyBoxEligibleOffers');

    // set and verify value
    const expectedValue = generateMockData('OfferCountType', true);
    instance.buyBoxEligibleOffers = expectedValue;
    expect(instance.buyBoxEligibleOffers).to.equal(expectedValue);
  });

  it('should have the property offersAvailableTime', () => {
    // verify property exists
    expect(instance).to.have.property('offersAvailableTime');

    // set and verify value
    const expectedValue = generateMockData('Date');
    instance.offersAvailableTime = expectedValue;
    expect(instance.offersAvailableTime).to.equal(expectedValue);
  });

});

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForPricing[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}
