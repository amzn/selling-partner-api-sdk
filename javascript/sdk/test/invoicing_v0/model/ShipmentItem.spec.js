/**
 * Selling Partner API for Shipment Invoicing
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'invoicing_v0', 'index.js');
const SellingPartnerApiForShipmentInvoicing = await import(modulePath);

let instance;

beforeEach(() => {
  try {
    instance = new SellingPartnerApiForShipmentInvoicing.ShipmentItem();
  } catch (e) {
    //Handle the cases when this model extends another model by using Model.call(this);
    instance = Object.create(SellingPartnerApiForShipmentInvoicing.ShipmentItem.prototype);
  }
});

afterEach(() => {
  instance = null;
});

describe('ShipmentItem', () => {
  it('should create an instance of ShipmentItem', () => {
    expect(instance).to.be.a(SellingPartnerApiForShipmentInvoicing.ShipmentItem);
  });

  it('should have the property ASIN', () => {
    // verify property exists
    expect(instance).to.have.property('ASIN');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.ASIN = expectedValue;
    expect(instance.ASIN).to.equal(expectedValue);
  });

  it('should have the property sellerSKU', () => {
    // verify property exists
    expect(instance).to.have.property('sellerSKU');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.sellerSKU = expectedValue;
    expect(instance.sellerSKU).to.equal(expectedValue);
  });

  it('should have the property orderItemId', () => {
    // verify property exists
    expect(instance).to.have.property('orderItemId');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.orderItemId = expectedValue;
    expect(instance.orderItemId).to.equal(expectedValue);
  });

  it('should have the property title', () => {
    // verify property exists
    expect(instance).to.have.property('title');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.title = expectedValue;
    expect(instance.title).to.equal(expectedValue);
  });

  it('should have the property quantityOrdered', () => {
    // verify property exists
    expect(instance).to.have.property('quantityOrdered');

    // set and verify value
    const expectedValue = generateMockData('Number');
    instance.quantityOrdered = expectedValue;
    expect(instance.quantityOrdered).to.equal(expectedValue);
  });

  it('should have the property itemPrice', () => {
    // verify property exists
    expect(instance).to.have.property('itemPrice');

    // set and verify value
    const expectedValue = generateMockData('Money');
    instance.itemPrice = expectedValue;
    expect(instance.itemPrice).to.equal(expectedValue);
  });

  it('should have the property shippingPrice', () => {
    // verify property exists
    expect(instance).to.have.property('shippingPrice');

    // set and verify value
    const expectedValue = generateMockData('Money');
    instance.shippingPrice = expectedValue;
    expect(instance.shippingPrice).to.equal(expectedValue);
  });

  it('should have the property giftWrapPrice', () => {
    // verify property exists
    expect(instance).to.have.property('giftWrapPrice');

    // set and verify value
    const expectedValue = generateMockData('Money');
    instance.giftWrapPrice = expectedValue;
    expect(instance.giftWrapPrice).to.equal(expectedValue);
  });

  it('should have the property shippingDiscount', () => {
    // verify property exists
    expect(instance).to.have.property('shippingDiscount');

    // set and verify value
    const expectedValue = generateMockData('Money');
    instance.shippingDiscount = expectedValue;
    expect(instance.shippingDiscount).to.equal(expectedValue);
  });

  it('should have the property promotionDiscount', () => {
    // verify property exists
    expect(instance).to.have.property('promotionDiscount');

    // set and verify value
    const expectedValue = generateMockData('Money');
    instance.promotionDiscount = expectedValue;
    expect(instance.promotionDiscount).to.equal(expectedValue);
  });

  it('should have the property serialNumbers', () => {
    // verify property exists
    expect(instance).to.have.property('serialNumbers');

    // set and verify value
    const expectedValue = generateMockData('String', true);
    instance.serialNumbers = expectedValue;
    expect(instance.serialNumbers).to.equal(expectedValue);
  });

});

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForShipmentInvoicing[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}
