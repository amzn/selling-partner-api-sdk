/**
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'listingsitems_v2021_08_01', 'index.js');
const SellingPartnerApiForListingsItems = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForListingsItems[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockdeleteListingsItemData = {
  request: {
    'sellerId': generateMockData('String'),
    'sku': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
  },
  response: {
    data: generateMockData('ListingsItemSubmissionResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetListingsItemData = {
  request: {
    'sellerId': generateMockData('String'),
    'sku': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
  },
  response: {
    data: generateMockData('Item'),
    statusCode: 200,
    headers: {}
  }
};
const mockpatchListingsItemData = {
  request: {
    'sellerId': generateMockData('String'),
    'sku': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('ListingsItemPatchRequest'),
  },
  response: {
    data: generateMockData('ListingsItemSubmissionResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockputListingsItemData = {
  request: {
    'sellerId': generateMockData('String'),
    'sku': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('ListingsItemPutRequest'),
  },
  response: {
    data: generateMockData('ListingsItemSubmissionResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocksearchListingsItemsData = {
  request: {
    'sellerId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
  },
  response: {
    data: generateMockData('ItemSearchResults'),
    statusCode: 200,
    headers: {}
  }
};

describe('ListingsApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new SellingPartnerApiForListingsItems.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForListingsItems.ListingsApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('deleteListingsItem', () => {
    it('should successfully call deleteListingsItem', async () => {
      instance.apiClient.callApi.resolves(mockdeleteListingsItemData.response);

      const params = [
        mockdeleteListingsItemData.request['sellerId'],
        mockdeleteListingsItemData.request['sku'],
        mockdeleteListingsItemData.request['marketplaceIds'],
      ];
      const data = await instance.deleteListingsItem(...params);

      expect(data instanceof SellingPartnerApiForListingsItems.ListingsItemSubmissionResponse).to.be.true;
      expect(data).to.equal(mockdeleteListingsItemData.response.data);
    });

    it('should successfully call deleteListingsItemWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockdeleteListingsItemData.response);

      const params = [
        mockdeleteListingsItemData.request['sellerId'],
        mockdeleteListingsItemData.request['sku'],
        mockdeleteListingsItemData.request['marketplaceIds'],
      ];
      const response = await instance.deleteListingsItemWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockdeleteListingsItemData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockdeleteListingsItemData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockdeleteListingsItemData.request['sellerId'],
          mockdeleteListingsItemData.request['sku'],
          mockdeleteListingsItemData.request['marketplaceIds'],
        ];
        await instance.deleteListingsItem(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getListingsItem', () => {
    it('should successfully call getListingsItem', async () => {
      instance.apiClient.callApi.resolves(mockgetListingsItemData.response);

      const params = [
        mockgetListingsItemData.request['sellerId'],
        mockgetListingsItemData.request['sku'],
        mockgetListingsItemData.request['marketplaceIds'],
      ];
      const data = await instance.getListingsItem(...params);

      expect(data instanceof SellingPartnerApiForListingsItems.Item).to.be.true;
      expect(data).to.equal(mockgetListingsItemData.response.data);
    });

    it('should successfully call getListingsItemWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetListingsItemData.response);

      const params = [
        mockgetListingsItemData.request['sellerId'],
        mockgetListingsItemData.request['sku'],
        mockgetListingsItemData.request['marketplaceIds'],
      ];
      const response = await instance.getListingsItemWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetListingsItemData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetListingsItemData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetListingsItemData.request['sellerId'],
          mockgetListingsItemData.request['sku'],
          mockgetListingsItemData.request['marketplaceIds'],
        ];
        await instance.getListingsItem(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('patchListingsItem', () => {
    it('should successfully call patchListingsItem', async () => {
      instance.apiClient.callApi.resolves(mockpatchListingsItemData.response);

      const params = [
        mockpatchListingsItemData.request['sellerId'],
        mockpatchListingsItemData.request['sku'],
        mockpatchListingsItemData.request['marketplaceIds'],
        mockpatchListingsItemData.request['body'],
      ];
      const data = await instance.patchListingsItem(...params);

      expect(data instanceof SellingPartnerApiForListingsItems.ListingsItemSubmissionResponse).to.be.true;
      expect(data).to.equal(mockpatchListingsItemData.response.data);
    });

    it('should successfully call patchListingsItemWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockpatchListingsItemData.response);

      const params = [
        mockpatchListingsItemData.request['sellerId'],
        mockpatchListingsItemData.request['sku'],
        mockpatchListingsItemData.request['marketplaceIds'],
        mockpatchListingsItemData.request['body'],
      ];
      const response = await instance.patchListingsItemWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockpatchListingsItemData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockpatchListingsItemData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockpatchListingsItemData.request['sellerId'],
          mockpatchListingsItemData.request['sku'],
          mockpatchListingsItemData.request['marketplaceIds'],
          mockpatchListingsItemData.request['body'],
        ];
        await instance.patchListingsItem(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('putListingsItem', () => {
    it('should successfully call putListingsItem', async () => {
      instance.apiClient.callApi.resolves(mockputListingsItemData.response);

      const params = [
        mockputListingsItemData.request['sellerId'],
        mockputListingsItemData.request['sku'],
        mockputListingsItemData.request['marketplaceIds'],
        mockputListingsItemData.request['body'],
      ];
      const data = await instance.putListingsItem(...params);

      expect(data instanceof SellingPartnerApiForListingsItems.ListingsItemSubmissionResponse).to.be.true;
      expect(data).to.equal(mockputListingsItemData.response.data);
    });

    it('should successfully call putListingsItemWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockputListingsItemData.response);

      const params = [
        mockputListingsItemData.request['sellerId'],
        mockputListingsItemData.request['sku'],
        mockputListingsItemData.request['marketplaceIds'],
        mockputListingsItemData.request['body'],
      ];
      const response = await instance.putListingsItemWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockputListingsItemData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockputListingsItemData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockputListingsItemData.request['sellerId'],
          mockputListingsItemData.request['sku'],
          mockputListingsItemData.request['marketplaceIds'],
          mockputListingsItemData.request['body'],
        ];
        await instance.putListingsItem(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('searchListingsItems', () => {
    it('should successfully call searchListingsItems', async () => {
      instance.apiClient.callApi.resolves(mocksearchListingsItemsData.response);

      const params = [
        mocksearchListingsItemsData.request['sellerId'],
        mocksearchListingsItemsData.request['marketplaceIds'],
      ];
      const data = await instance.searchListingsItems(...params);

      expect(data instanceof SellingPartnerApiForListingsItems.ItemSearchResults).to.be.true;
      expect(data).to.equal(mocksearchListingsItemsData.response.data);
    });

    it('should successfully call searchListingsItemsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocksearchListingsItemsData.response);

      const params = [
        mocksearchListingsItemsData.request['sellerId'],
        mocksearchListingsItemsData.request['marketplaceIds'],
      ];
      const response = await instance.searchListingsItemsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocksearchListingsItemsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocksearchListingsItemsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocksearchListingsItemsData.request['sellerId'],
          mocksearchListingsItemsData.request['marketplaceIds'],
        ];
        await instance.searchListingsItems(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new SellingPartnerApiForListingsItems.ListingsApi();
      expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForListingsItems.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new SellingPartnerApiForListingsItems.ApiClient();
      const customInstance = new SellingPartnerApiForListingsItems.ListingsApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
