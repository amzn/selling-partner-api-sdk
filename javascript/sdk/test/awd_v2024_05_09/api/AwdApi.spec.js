/**
 * The Selling Partner API for Amazon Warehousing and Distribution
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'awd_v2024_05_09', 'index.js');
const TheSellingPartnerApiForAmazonWarehousingAndDistribution = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = TheSellingPartnerApiForAmazonWarehousingAndDistribution[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockcancelInboundData = {
  request: {
    'orderId': generateMockData('String')
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};
const mockcheckInboundEligibilityData = {
  request: {
    'body': generateMockData('InboundPackages')
  },
  response: {
    data: generateMockData('InboundEligibility'),
    statusCode: 200,
    headers: {}
  }
};
const mockconfirmInboundData = {
  request: {
    'orderId': generateMockData('String')
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};
const mockcreateInboundData = {
  request: {
    'body': generateMockData('InboundOrderCreationData')
  },
  response: {
    data: generateMockData('InboundOrderReference'),
    statusCode: 201,
    headers: {}
  }
};
const mockgetInboundData = {
  request: {
    'orderId': generateMockData('String')
  },
  response: {
    data: generateMockData('InboundOrder'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetInboundShipmentData = {
  request: {
    'shipmentId': generateMockData('String'),
  },
  response: {
    data: generateMockData('InboundShipment'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetInboundShipmentLabelsData = {
  request: {
    'shipmentId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ShipmentLabels'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistInboundShipmentsData = {
  request: {
  },
  response: {
    data: generateMockData('ShipmentListing'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistInventoryData = {
  request: {
  },
  response: {
    data: generateMockData('InventoryListing'),
    statusCode: 200,
    headers: {}
  }
};
const mockupdateInboundData = {
  request: {
    'orderId': generateMockData('String'),
    'body': generateMockData('InboundOrder')
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};
const mockupdateInboundShipmentTransportDetailsData = {
  request: {
    'shipmentId': generateMockData('String'),
    'body': generateMockData('TransportationDetails')
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};

describe('AwdApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new TheSellingPartnerApiForAmazonWarehousingAndDistribution.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new TheSellingPartnerApiForAmazonWarehousingAndDistribution.AwdApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('cancelInbound', () => {
    it('should successfully call cancelInbound', async () => {
      instance.apiClient.callApi.resolves(mockcancelInboundData.response);

      const params = [
        mockcancelInboundData.request['orderId']
      ];
      const data = await instance.cancelInbound(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call cancelInboundWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcancelInboundData.response);

      const params = [
        mockcancelInboundData.request['orderId']
      ];
      const response = await instance.cancelInboundWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcancelInboundData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcancelInboundData.request['orderId']
        ];
        await instance.cancelInbound(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('checkInboundEligibility', () => {
    it('should successfully call checkInboundEligibility', async () => {
      instance.apiClient.callApi.resolves(mockcheckInboundEligibilityData.response);

      const params = [
        mockcheckInboundEligibilityData.request['body']
      ];
      const data = await instance.checkInboundEligibility(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonWarehousingAndDistribution.InboundEligibility).to.be.true;
      expect(data).to.equal(mockcheckInboundEligibilityData.response.data);
    });

    it('should successfully call checkInboundEligibilityWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcheckInboundEligibilityData.response);

      const params = [
        mockcheckInboundEligibilityData.request['body']
      ];
      const response = await instance.checkInboundEligibilityWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcheckInboundEligibilityData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcheckInboundEligibilityData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcheckInboundEligibilityData.request['body']
        ];
        await instance.checkInboundEligibility(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('confirmInbound', () => {
    it('should successfully call confirmInbound', async () => {
      instance.apiClient.callApi.resolves(mockconfirmInboundData.response);

      const params = [
        mockconfirmInboundData.request['orderId']
      ];
      const data = await instance.confirmInbound(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call confirmInboundWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockconfirmInboundData.response);

      const params = [
        mockconfirmInboundData.request['orderId']
      ];
      const response = await instance.confirmInboundWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockconfirmInboundData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockconfirmInboundData.request['orderId']
        ];
        await instance.confirmInbound(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createInbound', () => {
    it('should successfully call createInbound', async () => {
      instance.apiClient.callApi.resolves(mockcreateInboundData.response);

      const params = [
        mockcreateInboundData.request['body']
      ];
      const data = await instance.createInbound(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonWarehousingAndDistribution.InboundOrderReference).to.be.true;
      expect(data).to.equal(mockcreateInboundData.response.data);
    });

    it('should successfully call createInboundWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateInboundData.response);

      const params = [
        mockcreateInboundData.request['body']
      ];
      const response = await instance.createInboundWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateInboundData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateInboundData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateInboundData.request['body']
        ];
        await instance.createInbound(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInbound', () => {
    it('should successfully call getInbound', async () => {
      instance.apiClient.callApi.resolves(mockgetInboundData.response);

      const params = [
        mockgetInboundData.request['orderId']
      ];
      const data = await instance.getInbound(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonWarehousingAndDistribution.InboundOrder).to.be.true;
      expect(data).to.equal(mockgetInboundData.response.data);
    });

    it('should successfully call getInboundWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInboundData.response);

      const params = [
        mockgetInboundData.request['orderId']
      ];
      const response = await instance.getInboundWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInboundData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInboundData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInboundData.request['orderId']
        ];
        await instance.getInbound(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInboundShipment', () => {
    it('should successfully call getInboundShipment', async () => {
      instance.apiClient.callApi.resolves(mockgetInboundShipmentData.response);

      const params = [
        mockgetInboundShipmentData.request['shipmentId'],
      ];
      const data = await instance.getInboundShipment(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonWarehousingAndDistribution.InboundShipment).to.be.true;
      expect(data).to.equal(mockgetInboundShipmentData.response.data);
    });

    it('should successfully call getInboundShipmentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInboundShipmentData.response);

      const params = [
        mockgetInboundShipmentData.request['shipmentId'],
      ];
      const response = await instance.getInboundShipmentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInboundShipmentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInboundShipmentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInboundShipmentData.request['shipmentId'],
        ];
        await instance.getInboundShipment(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInboundShipmentLabels', () => {
    it('should successfully call getInboundShipmentLabels', async () => {
      instance.apiClient.callApi.resolves(mockgetInboundShipmentLabelsData.response);

      const params = [
        mockgetInboundShipmentLabelsData.request['shipmentId'],
      ];
      const data = await instance.getInboundShipmentLabels(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonWarehousingAndDistribution.ShipmentLabels).to.be.true;
      expect(data).to.equal(mockgetInboundShipmentLabelsData.response.data);
    });

    it('should successfully call getInboundShipmentLabelsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInboundShipmentLabelsData.response);

      const params = [
        mockgetInboundShipmentLabelsData.request['shipmentId'],
      ];
      const response = await instance.getInboundShipmentLabelsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInboundShipmentLabelsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInboundShipmentLabelsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInboundShipmentLabelsData.request['shipmentId'],
        ];
        await instance.getInboundShipmentLabels(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listInboundShipments', () => {
    it('should successfully call listInboundShipments', async () => {
      instance.apiClient.callApi.resolves(mocklistInboundShipmentsData.response);

      const params = [
      ];
      const data = await instance.listInboundShipments(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonWarehousingAndDistribution.ShipmentListing).to.be.true;
      expect(data).to.equal(mocklistInboundShipmentsData.response.data);
    });

    it('should successfully call listInboundShipmentsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistInboundShipmentsData.response);

      const params = [
      ];
      const response = await instance.listInboundShipmentsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistInboundShipmentsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistInboundShipmentsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
        ];
        await instance.listInboundShipments(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('listInventory', () => {
    it('should successfully call listInventory', async () => {
      instance.apiClient.callApi.resolves(mocklistInventoryData.response);

      const params = [
      ];
      const data = await instance.listInventory(...params);

      expect(data instanceof TheSellingPartnerApiForAmazonWarehousingAndDistribution.InventoryListing).to.be.true;
      expect(data).to.equal(mocklistInventoryData.response.data);
    });

    it('should successfully call listInventoryWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocklistInventoryData.response);

      const params = [
      ];
      const response = await instance.listInventoryWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocklistInventoryData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocklistInventoryData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
        ];
        await instance.listInventory(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateInbound', () => {
    it('should successfully call updateInbound', async () => {
      instance.apiClient.callApi.resolves(mockupdateInboundData.response);

      const params = [
        mockupdateInboundData.request['orderId'],
        mockupdateInboundData.request['body']
      ];
      const data = await instance.updateInbound(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call updateInboundWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateInboundData.response);

      const params = [
        mockupdateInboundData.request['orderId'],
        mockupdateInboundData.request['body']
      ];
      const response = await instance.updateInboundWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateInboundData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateInboundData.request['orderId'],
          mockupdateInboundData.request['body']
        ];
        await instance.updateInbound(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateInboundShipmentTransportDetails', () => {
    it('should successfully call updateInboundShipmentTransportDetails', async () => {
      instance.apiClient.callApi.resolves(mockupdateInboundShipmentTransportDetailsData.response);

      const params = [
        mockupdateInboundShipmentTransportDetailsData.request['shipmentId'],
        mockupdateInboundShipmentTransportDetailsData.request['body']
      ];
      const data = await instance.updateInboundShipmentTransportDetails(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call updateInboundShipmentTransportDetailsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateInboundShipmentTransportDetailsData.response);

      const params = [
        mockupdateInboundShipmentTransportDetailsData.request['shipmentId'],
        mockupdateInboundShipmentTransportDetailsData.request['body']
      ];
      const response = await instance.updateInboundShipmentTransportDetailsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateInboundShipmentTransportDetailsData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateInboundShipmentTransportDetailsData.request['shipmentId'],
          mockupdateInboundShipmentTransportDetailsData.request['body']
        ];
        await instance.updateInboundShipmentTransportDetails(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new TheSellingPartnerApiForAmazonWarehousingAndDistribution.AwdApi();
      expect(defaultInstance.apiClient).to.equal(TheSellingPartnerApiForAmazonWarehousingAndDistribution.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new TheSellingPartnerApiForAmazonWarehousingAndDistribution.ApiClient();
      const customInstance = new TheSellingPartnerApiForAmazonWarehousingAndDistribution.AwdApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
