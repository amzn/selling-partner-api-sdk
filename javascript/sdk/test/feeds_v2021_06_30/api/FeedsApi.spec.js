/**
 * Selling Partner API for Feeds
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * The version of the OpenAPI document: 2021-06-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'feeds_v2021_06_30', 'index.js');
const SellingPartnerApiForFeeds = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForFeeds[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockcancelFeedData = {
  request: {
    'feedId': generateMockData('String')
  },
  response: {
    statusCode: 200,
    headers: {}
  }
};
const mockcreateFeedData = {
  request: {
    'body': generateMockData('CreateFeedSpecification')
  },
  response: {
    data: generateMockData('CreateFeedResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockcreateFeedDocumentData = {
  request: {
    'body': generateMockData('CreateFeedDocumentSpecification')
  },
  response: {
    data: generateMockData('CreateFeedDocumentResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockgetFeedData = {
  request: {
    'feedId': generateMockData('String')
  },
  response: {
    data: generateMockData('Feed'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetFeedDocumentData = {
  request: {
    'feedDocumentId': generateMockData('String')
  },
  response: {
    data: generateMockData('FeedDocument'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetFeedsData = {
  request: {
  },
  response: {
    data: generateMockData('GetFeedsResponse'),
    statusCode: 200,
    headers: {}
  }
};

describe('FeedsApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new SellingPartnerApiForFeeds.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForFeeds.FeedsApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('cancelFeed', () => {
    it('should successfully call cancelFeed', async () => {
      instance.apiClient.callApi.resolves(mockcancelFeedData.response);

      const params = [
        mockcancelFeedData.request['feedId']
      ];
      const data = await instance.cancelFeed(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call cancelFeedWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcancelFeedData.response);

      const params = [
        mockcancelFeedData.request['feedId']
      ];
      const response = await instance.cancelFeedWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcancelFeedData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcancelFeedData.request['feedId']
        ];
        await instance.cancelFeed(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createFeed', () => {
    it('should successfully call createFeed', async () => {
      instance.apiClient.callApi.resolves(mockcreateFeedData.response);

      const params = [
        mockcreateFeedData.request['body']
      ];
      const data = await instance.createFeed(...params);

      expect(data instanceof SellingPartnerApiForFeeds.CreateFeedResponse).to.be.true;
      expect(data).to.equal(mockcreateFeedData.response.data);
    });

    it('should successfully call createFeedWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateFeedData.response);

      const params = [
        mockcreateFeedData.request['body']
      ];
      const response = await instance.createFeedWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateFeedData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateFeedData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateFeedData.request['body']
        ];
        await instance.createFeed(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createFeedDocument', () => {
    it('should successfully call createFeedDocument', async () => {
      instance.apiClient.callApi.resolves(mockcreateFeedDocumentData.response);

      const params = [
        mockcreateFeedDocumentData.request['body']
      ];
      const data = await instance.createFeedDocument(...params);

      expect(data instanceof SellingPartnerApiForFeeds.CreateFeedDocumentResponse).to.be.true;
      expect(data).to.equal(mockcreateFeedDocumentData.response.data);
    });

    it('should successfully call createFeedDocumentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateFeedDocumentData.response);

      const params = [
        mockcreateFeedDocumentData.request['body']
      ];
      const response = await instance.createFeedDocumentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateFeedDocumentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateFeedDocumentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateFeedDocumentData.request['body']
        ];
        await instance.createFeedDocument(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getFeed', () => {
    it('should successfully call getFeed', async () => {
      instance.apiClient.callApi.resolves(mockgetFeedData.response);

      const params = [
        mockgetFeedData.request['feedId']
      ];
      const data = await instance.getFeed(...params);

      expect(data instanceof SellingPartnerApiForFeeds.Feed).to.be.true;
      expect(data).to.equal(mockgetFeedData.response.data);
    });

    it('should successfully call getFeedWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetFeedData.response);

      const params = [
        mockgetFeedData.request['feedId']
      ];
      const response = await instance.getFeedWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetFeedData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetFeedData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetFeedData.request['feedId']
        ];
        await instance.getFeed(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getFeedDocument', () => {
    it('should successfully call getFeedDocument', async () => {
      instance.apiClient.callApi.resolves(mockgetFeedDocumentData.response);

      const params = [
        mockgetFeedDocumentData.request['feedDocumentId']
      ];
      const data = await instance.getFeedDocument(...params);

      expect(data instanceof SellingPartnerApiForFeeds.FeedDocument).to.be.true;
      expect(data).to.equal(mockgetFeedDocumentData.response.data);
    });

    it('should successfully call getFeedDocumentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetFeedDocumentData.response);

      const params = [
        mockgetFeedDocumentData.request['feedDocumentId']
      ];
      const response = await instance.getFeedDocumentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetFeedDocumentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetFeedDocumentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetFeedDocumentData.request['feedDocumentId']
        ];
        await instance.getFeedDocument(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getFeeds', () => {
    it('should successfully call getFeeds', async () => {
      instance.apiClient.callApi.resolves(mockgetFeedsData.response);

      const params = [
      ];
      const data = await instance.getFeeds(...params);

      expect(data instanceof SellingPartnerApiForFeeds.GetFeedsResponse).to.be.true;
      expect(data).to.equal(mockgetFeedsData.response.data);
    });

    it('should successfully call getFeedsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetFeedsData.response);

      const params = [
      ];
      const response = await instance.getFeedsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetFeedsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetFeedsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
        ];
        await instance.getFeeds(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new SellingPartnerApiForFeeds.FeedsApi();
      expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForFeeds.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new SellingPartnerApiForFeeds.ApiClient();
      const customInstance = new SellingPartnerApiForFeeds.FeedsApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
