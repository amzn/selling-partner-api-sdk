/**
 * The Selling Partner API for Invoices.
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'invoices_v2024_06_19', 'index.js');
const TheSellingPartnerApiForInvoices = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = TheSellingPartnerApiForInvoices[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockcreateInvoicesExportData = {
  request: {
    'body': generateMockData('ExportInvoicesRequest')
  },
  response: {
    data: generateMockData('ExportInvoicesResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockgetInvoiceData = {
  request: {
    'marketplaceId': generateMockData('String'),
    'invoiceId': generateMockData('String')
  },
  response: {
    data: generateMockData('GetInvoiceResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetInvoicesData = {
  request: {
    'marketplaceId': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetInvoicesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetInvoicesAttributesData = {
  request: {
    'marketplaceId': generateMockData('String')
  },
  response: {
    data: generateMockData('GetInvoicesAttributesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetInvoicesDocumentData = {
  request: {
    'invoicesDocumentId': generateMockData('String')
  },
  response: {
    data: generateMockData('GetInvoicesDocumentResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetInvoicesExportData = {
  request: {
    'exportId': generateMockData('String')
  },
  response: {
    data: generateMockData('GetInvoicesExportResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetInvoicesExportsData = {
  request: {
    'marketplaceId': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetInvoicesExportsResponse'),
    statusCode: 200,
    headers: {}
  }
};

describe('InvoicesApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new TheSellingPartnerApiForInvoices.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new TheSellingPartnerApiForInvoices.InvoicesApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('createInvoicesExport', () => {
    it('should successfully call createInvoicesExport', async () => {
      instance.apiClient.callApi.resolves(mockcreateInvoicesExportData.response);

      const params = [
        mockcreateInvoicesExportData.request['body']
      ];
      const data = await instance.createInvoicesExport(...params);

      expect(data instanceof TheSellingPartnerApiForInvoices.ExportInvoicesResponse).to.be.true;
      expect(data).to.equal(mockcreateInvoicesExportData.response.data);
    });

    it('should successfully call createInvoicesExportWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateInvoicesExportData.response);

      const params = [
        mockcreateInvoicesExportData.request['body']
      ];
      const response = await instance.createInvoicesExportWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateInvoicesExportData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateInvoicesExportData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateInvoicesExportData.request['body']
        ];
        await instance.createInvoicesExport(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInvoice', () => {
    it('should successfully call getInvoice', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoiceData.response);

      const params = [
        mockgetInvoiceData.request['marketplaceId'],
        mockgetInvoiceData.request['invoiceId']
      ];
      const data = await instance.getInvoice(...params);

      expect(data instanceof TheSellingPartnerApiForInvoices.GetInvoiceResponse).to.be.true;
      expect(data).to.equal(mockgetInvoiceData.response.data);
    });

    it('should successfully call getInvoiceWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoiceData.response);

      const params = [
        mockgetInvoiceData.request['marketplaceId'],
        mockgetInvoiceData.request['invoiceId']
      ];
      const response = await instance.getInvoiceWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInvoiceData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInvoiceData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInvoiceData.request['marketplaceId'],
          mockgetInvoiceData.request['invoiceId']
        ];
        await instance.getInvoice(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInvoices', () => {
    it('should successfully call getInvoices', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoicesData.response);

      const params = [
        mockgetInvoicesData.request['marketplaceId'],
      ];
      const data = await instance.getInvoices(...params);

      expect(data instanceof TheSellingPartnerApiForInvoices.GetInvoicesResponse).to.be.true;
      expect(data).to.equal(mockgetInvoicesData.response.data);
    });

    it('should successfully call getInvoicesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoicesData.response);

      const params = [
        mockgetInvoicesData.request['marketplaceId'],
      ];
      const response = await instance.getInvoicesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInvoicesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInvoicesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInvoicesData.request['marketplaceId'],
        ];
        await instance.getInvoices(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInvoicesAttributes', () => {
    it('should successfully call getInvoicesAttributes', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoicesAttributesData.response);

      const params = [
        mockgetInvoicesAttributesData.request['marketplaceId']
      ];
      const data = await instance.getInvoicesAttributes(...params);

      expect(data instanceof TheSellingPartnerApiForInvoices.GetInvoicesAttributesResponse).to.be.true;
      expect(data).to.equal(mockgetInvoicesAttributesData.response.data);
    });

    it('should successfully call getInvoicesAttributesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoicesAttributesData.response);

      const params = [
        mockgetInvoicesAttributesData.request['marketplaceId']
      ];
      const response = await instance.getInvoicesAttributesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInvoicesAttributesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInvoicesAttributesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInvoicesAttributesData.request['marketplaceId']
        ];
        await instance.getInvoicesAttributes(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInvoicesDocument', () => {
    it('should successfully call getInvoicesDocument', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoicesDocumentData.response);

      const params = [
        mockgetInvoicesDocumentData.request['invoicesDocumentId']
      ];
      const data = await instance.getInvoicesDocument(...params);

      expect(data instanceof TheSellingPartnerApiForInvoices.GetInvoicesDocumentResponse).to.be.true;
      expect(data).to.equal(mockgetInvoicesDocumentData.response.data);
    });

    it('should successfully call getInvoicesDocumentWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoicesDocumentData.response);

      const params = [
        mockgetInvoicesDocumentData.request['invoicesDocumentId']
      ];
      const response = await instance.getInvoicesDocumentWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInvoicesDocumentData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInvoicesDocumentData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInvoicesDocumentData.request['invoicesDocumentId']
        ];
        await instance.getInvoicesDocument(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInvoicesExport', () => {
    it('should successfully call getInvoicesExport', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoicesExportData.response);

      const params = [
        mockgetInvoicesExportData.request['exportId']
      ];
      const data = await instance.getInvoicesExport(...params);

      expect(data instanceof TheSellingPartnerApiForInvoices.GetInvoicesExportResponse).to.be.true;
      expect(data).to.equal(mockgetInvoicesExportData.response.data);
    });

    it('should successfully call getInvoicesExportWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoicesExportData.response);

      const params = [
        mockgetInvoicesExportData.request['exportId']
      ];
      const response = await instance.getInvoicesExportWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInvoicesExportData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInvoicesExportData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInvoicesExportData.request['exportId']
        ];
        await instance.getInvoicesExport(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInvoicesExports', () => {
    it('should successfully call getInvoicesExports', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoicesExportsData.response);

      const params = [
        mockgetInvoicesExportsData.request['marketplaceId'],
      ];
      const data = await instance.getInvoicesExports(...params);

      expect(data instanceof TheSellingPartnerApiForInvoices.GetInvoicesExportsResponse).to.be.true;
      expect(data).to.equal(mockgetInvoicesExportsData.response.data);
    });

    it('should successfully call getInvoicesExportsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInvoicesExportsData.response);

      const params = [
        mockgetInvoicesExportsData.request['marketplaceId'],
      ];
      const response = await instance.getInvoicesExportsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInvoicesExportsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInvoicesExportsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInvoicesExportsData.request['marketplaceId'],
        ];
        await instance.getInvoicesExports(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new TheSellingPartnerApiForInvoices.InvoicesApi();
      expect(defaultInstance.apiClient).to.equal(TheSellingPartnerApiForInvoices.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new TheSellingPartnerApiForInvoices.ApiClient();
      const customInstance = new TheSellingPartnerApiForInvoices.InvoicesApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
