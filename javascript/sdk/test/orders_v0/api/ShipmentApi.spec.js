/**
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'orders_v0', 'index.js');
const SellingPartnerApiForOrders = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForOrders[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockupdateShipmentStatusData = {
  request: {
    'orderId': generateMockData('String'),
    'payload': generateMockData('UpdateShipmentStatusRequest')
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};

describe('ShipmentApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new SellingPartnerApiForOrders.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForOrders.ShipmentApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('updateShipmentStatus', () => {
    it('should successfully call updateShipmentStatus', async () => {
      instance.apiClient.callApi.resolves(mockupdateShipmentStatusData.response);

      const params = [
        mockupdateShipmentStatusData.request['orderId'],
        mockupdateShipmentStatusData.request['payload']
      ];
      const data = await instance.updateShipmentStatus(...params);

      expect(data).to.be.undefined;
    });

    it('should successfully call updateShipmentStatusWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateShipmentStatusData.response);

      const params = [
        mockupdateShipmentStatusData.request['orderId'],
        mockupdateShipmentStatusData.request['payload']
      ];
      const response = await instance.updateShipmentStatusWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateShipmentStatusData.response.statusCode)
      expect(response).to.have.property('headers');
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateShipmentStatusData.request['orderId'],
          mockupdateShipmentStatusData.request['payload']
        ];
        await instance.updateShipmentStatus(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new SellingPartnerApiForOrders.ShipmentApi();
      expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForOrders.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new SellingPartnerApiForOrders.ApiClient();
      const customInstance = new SellingPartnerApiForOrders.ShipmentApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
