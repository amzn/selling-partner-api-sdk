/**
 * Selling Partner API for Product Type Definitions
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).
 *
 * The version of the OpenAPI document: 2020-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'producttypedefinitions_v2020_09_01', 'index.js');
const SellingPartnerApiForProductTypeDefinitions = await import(modulePath);

let instance;

beforeEach(() => {
  try {
    instance = new SellingPartnerApiForProductTypeDefinitions.PropertyGroup();
  } catch (e) {
    //Handle the cases when this model extends another model by using Model.call(this);
    instance = Object.create(SellingPartnerApiForProductTypeDefinitions.PropertyGroup.prototype);
  }
});

afterEach(() => {
  instance = null;
});

describe('PropertyGroup', () => {
  it('should create an instance of PropertyGroup', () => {
    expect(instance).to.be.a(SellingPartnerApiForProductTypeDefinitions.PropertyGroup);
  });

  it('should have the property title', () => {
    // verify property exists
    expect(instance).to.have.property('title');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.title = expectedValue;
    expect(instance.title).to.equal(expectedValue);
  });

  it('should have the property description', () => {
    // verify property exists
    expect(instance).to.have.property('description');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.description = expectedValue;
    expect(instance.description).to.equal(expectedValue);
  });

  it('should have the property propertyNames', () => {
    // verify property exists
    expect(instance).to.have.property('propertyNames');

    // set and verify value
    const expectedValue = generateMockData('String', true);
    instance.propertyNames = expectedValue;
    expect(instance.propertyNames).to.equal(expectedValue);
  });

});

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForProductTypeDefinitions[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}
