/**
 * The Selling Partner API for Automotive.
 * The Selling Partner API for Automotive provides programmatic access to information needed by selling partners to provide compatibility information about their listed products.
 *
 * The version of the OpenAPI document: 2024-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'vehicles_v2024_11_01', 'index.js');
const TheSellingPartnerApiForAutomotive = await import(modulePath);

let instance;

beforeEach(() => {
  try {
    instance = new TheSellingPartnerApiForAutomotive.Vehicle();
  } catch (e) {
    //Handle the cases when this model extends another model by using Model.call(this);
    instance = Object.create(TheSellingPartnerApiForAutomotive.Vehicle.prototype);
  }
});

afterEach(() => {
  instance = null;
});

describe('Vehicle', () => {
  it('should create an instance of Vehicle', () => {
    expect(instance).to.be.a(TheSellingPartnerApiForAutomotive.Vehicle);
  });

  it('should have the property make', () => {
    // verify property exists
    expect(instance).to.have.property('make');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.make = expectedValue;
    expect(instance.make).to.equal(expectedValue);
  });

  it('should have the property model', () => {
    // verify property exists
    expect(instance).to.have.property('model');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.model = expectedValue;
    expect(instance.model).to.equal(expectedValue);
  });

  it('should have the property variantName', () => {
    // verify property exists
    expect(instance).to.have.property('variantName');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.variantName = expectedValue;
    expect(instance.variantName).to.equal(expectedValue);
  });

  it('should have the property bodyStyle', () => {
    // verify property exists
    expect(instance).to.have.property('bodyStyle');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.bodyStyle = expectedValue;
    expect(instance.bodyStyle).to.equal(expectedValue);
  });

  it('should have the property driveType', () => {
    // verify property exists
    expect(instance).to.have.property('driveType');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.driveType = expectedValue;
    expect(instance.driveType).to.equal(expectedValue);
  });

  it('should have the property energy', () => {
    // verify property exists
    expect(instance).to.have.property('energy');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.energy = expectedValue;
    expect(instance.energy).to.equal(expectedValue);
  });

  it('should have the property engineOutput', () => {
    // verify property exists
    expect(instance).to.have.property('engineOutput');

    // set and verify value
    const expectedValue = generateMockData('EngineOutput', true);
    instance.engineOutput = expectedValue;
    expect(instance.engineOutput).to.equal(expectedValue);
  });

  it('should have the property manufacturingStartDate', () => {
    // verify property exists
    expect(instance).to.have.property('manufacturingStartDate');

    // set and verify value
    const expectedValue = generateMockData('MonthAndYear');
    instance.manufacturingStartDate = expectedValue;
    expect(instance.manufacturingStartDate).to.equal(expectedValue);
  });

  it('should have the property manufacturingStopDate', () => {
    // verify property exists
    expect(instance).to.have.property('manufacturingStopDate');

    // set and verify value
    const expectedValue = generateMockData('MonthAndYear');
    instance.manufacturingStopDate = expectedValue;
    expect(instance.manufacturingStopDate).to.equal(expectedValue);
  });

  it('should have the property lastProcessedDate', () => {
    // verify property exists
    expect(instance).to.have.property('lastProcessedDate');

    // set and verify value
    const expectedValue = generateMockData('String');
    instance.lastProcessedDate = expectedValue;
    expect(instance.lastProcessedDate).to.equal(expectedValue);
  });

  it('should have the property status', () => {
    // verify property exists
    expect(instance).to.have.property('status');

    // set and verify value
    const expectedValue = generateMockData('VehicleStatusInCatalog');
    instance.status = expectedValue;
    expect(instance.status).to.equal(expectedValue);
  });

  it('should have the property identifiers', () => {
    // verify property exists
    expect(instance).to.have.property('identifiers');

    // set and verify value
    const expectedValue = generateMockData('VehicleIdentifiers', true);
    instance.identifiers = expectedValue;
    expect(instance.identifiers).to.equal(expectedValue);
  });

});

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = TheSellingPartnerApiForAutomotive[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}
