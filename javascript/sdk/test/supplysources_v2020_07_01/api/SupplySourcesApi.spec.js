/**
 * Selling Partner API for Supply Sources
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'supplysources_v2020_07_01', 'index.js');
const SellingPartnerApiForSupplySources = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForSupplySources[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockarchiveSupplySourceData = {
  request: {
    'supplySourceId': generateMockData('String')
  },
  response: {
    data: generateMockData('ErrorList'),
    statusCode: 204,
    headers: {}
  }
};
const mockcreateSupplySourceData = {
  request: {
    'payload': generateMockData('CreateSupplySourceRequest')
  },
  response: {
    data: generateMockData('CreateSupplySourceResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetSupplySourceData = {
  request: {
    'supplySourceId': generateMockData('String')
  },
  response: {
    data: generateMockData('SupplySource'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetSupplySourcesData = {
  request: {
  },
  response: {
    data: generateMockData('GetSupplySourcesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockupdateSupplySourceData = {
  request: {
    'supplySourceId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ErrorList'),
    statusCode: 204,
    headers: {}
  }
};
const mockupdateSupplySourceStatusData = {
  request: {
    'supplySourceId': generateMockData('String'),
  },
  response: {
    data: generateMockData('ErrorList'),
    statusCode: 204,
    headers: {}
  }
};

describe('SupplySourcesApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new SellingPartnerApiForSupplySources.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForSupplySources.SupplySourcesApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('archiveSupplySource', () => {
    it('should successfully call archiveSupplySource', async () => {
      instance.apiClient.callApi.resolves(mockarchiveSupplySourceData.response);

      const params = [
        mockarchiveSupplySourceData.request['supplySourceId']
      ];
      const data = await instance.archiveSupplySource(...params);

      expect(data instanceof SellingPartnerApiForSupplySources.ErrorList).to.be.true;
      expect(data).to.equal(mockarchiveSupplySourceData.response.data);
    });

    it('should successfully call archiveSupplySourceWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockarchiveSupplySourceData.response);

      const params = [
        mockarchiveSupplySourceData.request['supplySourceId']
      ];
      const response = await instance.archiveSupplySourceWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockarchiveSupplySourceData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockarchiveSupplySourceData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockarchiveSupplySourceData.request['supplySourceId']
        ];
        await instance.archiveSupplySource(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createSupplySource', () => {
    it('should successfully call createSupplySource', async () => {
      instance.apiClient.callApi.resolves(mockcreateSupplySourceData.response);

      const params = [
        mockcreateSupplySourceData.request['payload']
      ];
      const data = await instance.createSupplySource(...params);

      expect(data instanceof SellingPartnerApiForSupplySources.CreateSupplySourceResponse).to.be.true;
      expect(data).to.equal(mockcreateSupplySourceData.response.data);
    });

    it('should successfully call createSupplySourceWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateSupplySourceData.response);

      const params = [
        mockcreateSupplySourceData.request['payload']
      ];
      const response = await instance.createSupplySourceWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateSupplySourceData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateSupplySourceData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateSupplySourceData.request['payload']
        ];
        await instance.createSupplySource(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getSupplySource', () => {
    it('should successfully call getSupplySource', async () => {
      instance.apiClient.callApi.resolves(mockgetSupplySourceData.response);

      const params = [
        mockgetSupplySourceData.request['supplySourceId']
      ];
      const data = await instance.getSupplySource(...params);

      expect(data instanceof SellingPartnerApiForSupplySources.SupplySource).to.be.true;
      expect(data).to.equal(mockgetSupplySourceData.response.data);
    });

    it('should successfully call getSupplySourceWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetSupplySourceData.response);

      const params = [
        mockgetSupplySourceData.request['supplySourceId']
      ];
      const response = await instance.getSupplySourceWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetSupplySourceData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetSupplySourceData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetSupplySourceData.request['supplySourceId']
        ];
        await instance.getSupplySource(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getSupplySources', () => {
    it('should successfully call getSupplySources', async () => {
      instance.apiClient.callApi.resolves(mockgetSupplySourcesData.response);

      const params = [
      ];
      const data = await instance.getSupplySources(...params);

      expect(data instanceof SellingPartnerApiForSupplySources.GetSupplySourcesResponse).to.be.true;
      expect(data).to.equal(mockgetSupplySourcesData.response.data);
    });

    it('should successfully call getSupplySourcesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetSupplySourcesData.response);

      const params = [
      ];
      const response = await instance.getSupplySourcesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetSupplySourcesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetSupplySourcesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
        ];
        await instance.getSupplySources(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateSupplySource', () => {
    it('should successfully call updateSupplySource', async () => {
      instance.apiClient.callApi.resolves(mockupdateSupplySourceData.response);

      const params = [
        mockupdateSupplySourceData.request['supplySourceId'],
      ];
      const data = await instance.updateSupplySource(...params);

      expect(data instanceof SellingPartnerApiForSupplySources.ErrorList).to.be.true;
      expect(data).to.equal(mockupdateSupplySourceData.response.data);
    });

    it('should successfully call updateSupplySourceWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateSupplySourceData.response);

      const params = [
        mockupdateSupplySourceData.request['supplySourceId'],
      ];
      const response = await instance.updateSupplySourceWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateSupplySourceData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockupdateSupplySourceData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateSupplySourceData.request['supplySourceId'],
        ];
        await instance.updateSupplySource(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('updateSupplySourceStatus', () => {
    it('should successfully call updateSupplySourceStatus', async () => {
      instance.apiClient.callApi.resolves(mockupdateSupplySourceStatusData.response);

      const params = [
        mockupdateSupplySourceStatusData.request['supplySourceId'],
      ];
      const data = await instance.updateSupplySourceStatus(...params);

      expect(data instanceof SellingPartnerApiForSupplySources.ErrorList).to.be.true;
      expect(data).to.equal(mockupdateSupplySourceStatusData.response.data);
    });

    it('should successfully call updateSupplySourceStatusWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockupdateSupplySourceStatusData.response);

      const params = [
        mockupdateSupplySourceStatusData.request['supplySourceId'],
      ];
      const response = await instance.updateSupplySourceStatusWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockupdateSupplySourceStatusData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockupdateSupplySourceStatusData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockupdateSupplySourceStatusData.request['supplySourceId'],
        ];
        await instance.updateSupplySourceStatus(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new SellingPartnerApiForSupplySources.SupplySourcesApi();
      expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForSupplySources.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new SellingPartnerApiForSupplySources.ApiClient();
      const customInstance = new SellingPartnerApiForSupplySources.SupplySourcesApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
