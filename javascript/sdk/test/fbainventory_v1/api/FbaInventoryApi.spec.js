/**
 * Selling Partner API for FBA Inventory
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'fbainventory_v1', 'index.js');
const SellingPartnerApiForFbaInventory = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForFbaInventory[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockaddInventoryData = {
  request: {
    'xAmznIdempotencyToken': generateMockData('String'),
    'addInventoryRequestBody': generateMockData('AddInventoryRequest')
  },
  response: {
    data: generateMockData('AddInventoryResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockcreateInventoryItemData = {
  request: {
    'createInventoryItemRequestBody': generateMockData('CreateInventoryItemRequest')
  },
  response: {
    data: generateMockData('CreateInventoryItemResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockdeleteInventoryItemData = {
  request: {
    'sellerSku': generateMockData('String'),
    'marketplaceId': generateMockData('String')
  },
  response: {
    data: generateMockData('DeleteInventoryItemResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetInventorySummariesData = {
  request: {
    'granularityType': generateMockData('String'),
    'granularityId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
  },
  response: {
    data: generateMockData('GetInventorySummariesResponse'),
    statusCode: 200,
    headers: {}
  }
};

describe('FbaInventoryApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new SellingPartnerApiForFbaInventory.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForFbaInventory.FbaInventoryApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('addInventory', () => {
    it('should successfully call addInventory', async () => {
      instance.apiClient.callApi.resolves(mockaddInventoryData.response);

      const params = [
        mockaddInventoryData.request['xAmznIdempotencyToken'],
        mockaddInventoryData.request['addInventoryRequestBody']
      ];
      const data = await instance.addInventory(...params);

      expect(data instanceof SellingPartnerApiForFbaInventory.AddInventoryResponse).to.be.true;
      expect(data).to.equal(mockaddInventoryData.response.data);
    });

    it('should successfully call addInventoryWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockaddInventoryData.response);

      const params = [
        mockaddInventoryData.request['xAmznIdempotencyToken'],
        mockaddInventoryData.request['addInventoryRequestBody']
      ];
      const response = await instance.addInventoryWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockaddInventoryData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockaddInventoryData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockaddInventoryData.request['xAmznIdempotencyToken'],
          mockaddInventoryData.request['addInventoryRequestBody']
        ];
        await instance.addInventory(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createInventoryItem', () => {
    it('should successfully call createInventoryItem', async () => {
      instance.apiClient.callApi.resolves(mockcreateInventoryItemData.response);

      const params = [
        mockcreateInventoryItemData.request['createInventoryItemRequestBody']
      ];
      const data = await instance.createInventoryItem(...params);

      expect(data instanceof SellingPartnerApiForFbaInventory.CreateInventoryItemResponse).to.be.true;
      expect(data).to.equal(mockcreateInventoryItemData.response.data);
    });

    it('should successfully call createInventoryItemWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateInventoryItemData.response);

      const params = [
        mockcreateInventoryItemData.request['createInventoryItemRequestBody']
      ];
      const response = await instance.createInventoryItemWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateInventoryItemData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateInventoryItemData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateInventoryItemData.request['createInventoryItemRequestBody']
        ];
        await instance.createInventoryItem(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('deleteInventoryItem', () => {
    it('should successfully call deleteInventoryItem', async () => {
      instance.apiClient.callApi.resolves(mockdeleteInventoryItemData.response);

      const params = [
        mockdeleteInventoryItemData.request['sellerSku'],
        mockdeleteInventoryItemData.request['marketplaceId']
      ];
      const data = await instance.deleteInventoryItem(...params);

      expect(data instanceof SellingPartnerApiForFbaInventory.DeleteInventoryItemResponse).to.be.true;
      expect(data).to.equal(mockdeleteInventoryItemData.response.data);
    });

    it('should successfully call deleteInventoryItemWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockdeleteInventoryItemData.response);

      const params = [
        mockdeleteInventoryItemData.request['sellerSku'],
        mockdeleteInventoryItemData.request['marketplaceId']
      ];
      const response = await instance.deleteInventoryItemWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockdeleteInventoryItemData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockdeleteInventoryItemData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockdeleteInventoryItemData.request['sellerSku'],
          mockdeleteInventoryItemData.request['marketplaceId']
        ];
        await instance.deleteInventoryItem(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getInventorySummaries', () => {
    it('should successfully call getInventorySummaries', async () => {
      instance.apiClient.callApi.resolves(mockgetInventorySummariesData.response);

      const params = [
        mockgetInventorySummariesData.request['granularityType'],
        mockgetInventorySummariesData.request['granularityId'],
        mockgetInventorySummariesData.request['marketplaceIds'],
      ];
      const data = await instance.getInventorySummaries(...params);

      expect(data instanceof SellingPartnerApiForFbaInventory.GetInventorySummariesResponse).to.be.true;
      expect(data).to.equal(mockgetInventorySummariesData.response.data);
    });

    it('should successfully call getInventorySummariesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetInventorySummariesData.response);

      const params = [
        mockgetInventorySummariesData.request['granularityType'],
        mockgetInventorySummariesData.request['granularityId'],
        mockgetInventorySummariesData.request['marketplaceIds'],
      ];
      const response = await instance.getInventorySummariesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetInventorySummariesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetInventorySummariesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetInventorySummariesData.request['granularityType'],
          mockgetInventorySummariesData.request['granularityId'],
          mockgetInventorySummariesData.request['marketplaceIds'],
        ];
        await instance.getInventorySummaries(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new SellingPartnerApiForFbaInventory.FbaInventoryApi();
      expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForFbaInventory.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new SellingPartnerApiForFbaInventory.ApiClient();
      const customInstance = new SellingPartnerApiForFbaInventory.FbaInventoryApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
