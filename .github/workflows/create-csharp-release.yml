name: Create CSharp SDK Release
permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      newVersionNumber:
        type: string
        description: New version number
        required: true
  workflow_call:
    inputs:
      newVersionNumber:
        type: string
        required: true

env:
  SDK_VERSION: ${{ github.event.inputs.newVersionNumber }}

jobs:
  release_csharp:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        
      - name: Install .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Set new version number
        working-directory: ./csharp/sdk/src/software.amzn.spapi
        run: |
          sed -i "s/.*<\/Version>/    <Version>${{ github.event.inputs.newVersionNumber }}<\/Version>/" software.amzn.spapi.csproj
          sed -i "s/public const string Version = \"0.0.0\";/public const string Version = \"${{ github.event.inputs.newVersionNumber }}\";/" Client/Configuration.cs

      - name: Restore dependencies
        working-directory: ./csharp/sdk/src/software.amzn.spapi
        run: dotnet restore
            
      - name: Build
        working-directory: ./csharp/sdk/src/software.amzn.spapi
        id: build-project
        run: dotnet build --configuration Release --no-restore
  
      - name: Pack
        working-directory: ./csharp/sdk/src/software.amzn.spapi
        id: pack-csharp
        run: |
            dotnet pack ./software.amzn.spapi.csproj --configuration Release

      - name: PushNuget
        working-directory: ./csharp/sdk/src/software.amzn.spapi
        run: dotnet nuget push "**/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_TOKEN }} --skip-duplicate

  tag_and_release:
    needs: [ release_csharp ]
    uses: ./.github/workflows/create-tag-release.yml
    with:
      tagName: "csharp-${{ github.event.inputs.newVersionNumber }}"