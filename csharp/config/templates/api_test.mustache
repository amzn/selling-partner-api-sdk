{{>partial_header}}
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using {{packageName}}.Client;
using {{packageName}}.{{apiPackage}};
{{#hasImport}}using {{packageName}}.{{modelPackage}};
{{/hasImport}}
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace {{packageName}}.Test.{{apiPackage}}
{
    [Collection("TestCollection")]
    public class {{classname}}Tests
    {
        private {{classname}} api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new {{classname}}.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        {{#operations}}{{#operation}}
        [Fact]
        public void {{operationId}}Test()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("{{operationId}}") + "/code/{{responses.0.code}}";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "{{operationId}}"));
            httpClient.Send(request);
            {{#allParams}}{{#required}}
            {{{dataType}}} {{paramName}} = fixture.Create<{{{dataType}}}>();
            {{/required}}{{/allParams}}

            {{#returnType}}var response = {{/returnType}}api.{{operationId}}WithHttpInfo({{#allParams}}{{#required}}{{paramName}}{{/required}}{{^required}}null{{/required}}{{^-last}}, {{/-last}}{{/allParams}});

            {{#returnType}}
            Assert.Equal({{responses.0.code}}, (int) response.StatusCode);
            AssertValidResponsePayload({{responses.0.code}}, response.Content);
            {{/returnType}}
        }
        {{/operation}}{{/operations}}

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }

        private static string AppendQualifier(string url, string operationId) {
            if ("{{apiPackage}}".Contains("vendor") && operationId.Equals("GetOrder")) url += "?qualifier=Vendor";
            if ("{{apiPackage}}".Contains("fulfillment.inbound") && operationId.Equals("GetShipment")) url += "?qualifier=FbaInbound";
            if ("{{apiPackage}}".Contains("sellerWallet") && operationId.Equals("GetAccount")) url += "?qualifier=SellerWallet";
            if ("{{apiPackage}}".Contains("sellerWallet") && operationId.Equals("GetTransaction")) url += "?qualifier=SellerWallet";
            return url;
        }
    }
}
