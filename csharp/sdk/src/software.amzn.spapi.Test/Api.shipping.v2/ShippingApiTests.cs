/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.shipping.v2;
using software.amzn.spapi.Model.shipping.v2;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.shipping.v2
{
    [Collection("TestCollection")]
    public class ShippingApiTests
    {
        private ShippingApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new ShippingApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void CancelShipmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("CancelShipment") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "CancelShipment"));
            httpClient.Send(request);
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.CancelShipmentWithHttpInfo(shipmentId, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void CreateClaimTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("CreateClaim") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "CreateClaim"));
            httpClient.Send(request);
            
            CreateClaimRequest body = fixture.Create<CreateClaimRequest>();
            

            var response = api.CreateClaimWithHttpInfo(body, null);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void DirectPurchaseShipmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("DirectPurchaseShipment") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "DirectPurchaseShipment"));
            httpClient.Send(request);
            
            DirectPurchaseRequest body = fixture.Create<DirectPurchaseRequest>();
            

            var response = api.DirectPurchaseShipmentWithHttpInfo(body, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GenerateCollectionFormTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GenerateCollectionForm") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GenerateCollectionForm"));
            httpClient.Send(request);
            
            GenerateCollectionFormRequest body = fixture.Create<GenerateCollectionFormRequest>();
            

            var response = api.GenerateCollectionFormWithHttpInfo(body, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetAccessPointsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetAccessPoints") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetAccessPoints"));
            httpClient.Send(request);
            
            List<string> accessPointTypes = fixture.Create<List<string>>();
            
            string countryCode = fixture.Create<string>();
            
            string postalCode = fixture.Create<string>();
            

            var response = api.GetAccessPointsWithHttpInfo(accessPointTypes, countryCode, postalCode, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetAdditionalInputsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetAdditionalInputs") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetAdditionalInputs"));
            httpClient.Send(request);
            
            string requestToken = fixture.Create<string>();
            
            string rateId = fixture.Create<string>();
            

            var response = api.GetAdditionalInputsWithHttpInfo(requestToken, rateId, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetCarrierAccountFormInputsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetCarrierAccountFormInputs") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetCarrierAccountFormInputs"));
            httpClient.Send(request);
            

            var response = api.GetCarrierAccountFormInputsWithHttpInfo(null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetCarrierAccountsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetCarrierAccounts") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetCarrierAccounts"));
            httpClient.Send(request);
            
            GetCarrierAccountsRequest body = fixture.Create<GetCarrierAccountsRequest>();
            

            var response = api.GetCarrierAccountsWithHttpInfo(body, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetCollectionFormTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetCollectionForm") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetCollectionForm"));
            httpClient.Send(request);
            
            string collectionFormId = fixture.Create<string>();
            

            var response = api.GetCollectionFormWithHttpInfo(collectionFormId, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetCollectionFormHistoryTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetCollectionFormHistory") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetCollectionFormHistory"));
            httpClient.Send(request);
            
            GetCollectionFormHistoryRequest body = fixture.Create<GetCollectionFormHistoryRequest>();
            

            var response = api.GetCollectionFormHistoryWithHttpInfo(body, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetRatesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetRates") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetRates"));
            httpClient.Send(request);
            
            GetRatesRequest body = fixture.Create<GetRatesRequest>();
            

            var response = api.GetRatesWithHttpInfo(body, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetShipmentDocumentsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetShipmentDocuments") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetShipmentDocuments"));
            httpClient.Send(request);
            
            string shipmentId = fixture.Create<string>();
            
            string packageClientReferenceId = fixture.Create<string>();
            

            var response = api.GetShipmentDocumentsWithHttpInfo(shipmentId, packageClientReferenceId, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetTrackingTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetTracking") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetTracking"));
            httpClient.Send(request);
            
            string trackingId = fixture.Create<string>();
            
            string carrierId = fixture.Create<string>();
            

            var response = api.GetTrackingWithHttpInfo(trackingId, carrierId, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetUnmanifestedShipmentsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetUnmanifestedShipments") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetUnmanifestedShipments"));
            httpClient.Send(request);
            
            GetUnmanifestedShipmentsRequest body = fixture.Create<GetUnmanifestedShipmentsRequest>();
            

            var response = api.GetUnmanifestedShipmentsWithHttpInfo(body, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void LinkCarrierAccountTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("LinkCarrierAccount") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "LinkCarrierAccount"));
            httpClient.Send(request);
            
            string carrierId = fixture.Create<string>();
            
            LinkCarrierAccountRequest body = fixture.Create<LinkCarrierAccountRequest>();
            

            var response = api.LinkCarrierAccountWithHttpInfo(carrierId, body, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void LinkCarrierAccount_0Test()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("LinkCarrierAccount_0") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "LinkCarrierAccount_0"));
            httpClient.Send(request);
            
            string carrierId = fixture.Create<string>();
            
            LinkCarrierAccountRequest body = fixture.Create<LinkCarrierAccountRequest>();
            

            var response = api.LinkCarrierAccount_0WithHttpInfo(carrierId, body, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void OneClickShipmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("OneClickShipment") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "OneClickShipment"));
            httpClient.Send(request);
            
            OneClickShipmentRequest body = fixture.Create<OneClickShipmentRequest>();
            

            var response = api.OneClickShipmentWithHttpInfo(body, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void PurchaseShipmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("PurchaseShipment") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "PurchaseShipment"));
            httpClient.Send(request);
            
            PurchaseShipmentRequest body = fixture.Create<PurchaseShipmentRequest>();
            

            var response = api.PurchaseShipmentWithHttpInfo(body, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void SubmitNdrFeedbackTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("SubmitNdrFeedback") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "SubmitNdrFeedback"));
            httpClient.Send(request);
            
            SubmitNdrFeedbackRequest body = fixture.Create<SubmitNdrFeedbackRequest>();
            

            api.SubmitNdrFeedbackWithHttpInfo(body, null);

        }
        
        [Fact]
        public void UnlinkCarrierAccountTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("UnlinkCarrierAccount") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "UnlinkCarrierAccount"));
            httpClient.Send(request);
            
            string carrierId = fixture.Create<string>();
            
            UnlinkCarrierAccountRequest body = fixture.Create<UnlinkCarrierAccountRequest>();
            

            var response = api.UnlinkCarrierAccountWithHttpInfo(carrierId, body, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }

        private static string AppendQualifier(string url, string operationId) {
            if ("Api.shipping.v2".Contains("vendor") && operationId.Equals("GetOrder")) url += "?qualifier=Vendor";
            if ("Api.shipping.v2".Contains("fulfillment.inbound") && operationId.Equals("GetShipment")) url += "?qualifier=FbaInbound";
            if ("Api.shipping.v2".Contains("sellerWallet") && operationId.Equals("GetAccount")) url += "?qualifier=SellerWallet";
            if ("Api.shipping.v2".Contains("sellerWallet") && operationId.Equals("GetTransaction")) url += "?qualifier=SellerWallet";
            if ("Api.shipping.v2".Contains("externalFulfillment") && operationId.Equals("GetShipment")) url += "?qualifier=ExternalFulfillment";
            if ("Api.shipping.v2".Contains("externalFulfillment") && operationId.Equals("GetShipments")) url += "?qualifier=ExternalFulfillment";
            return url;
        }
    }
}
