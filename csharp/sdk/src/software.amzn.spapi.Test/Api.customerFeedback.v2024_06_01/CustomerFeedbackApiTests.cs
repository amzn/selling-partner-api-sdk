/*
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.customerFeedback.v2024_06_01;
using software.amzn.spapi.Model.customerFeedback.v2024_06_01;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.customerFeedback.v2024_06_01
{
    [Collection("TestCollection")]
    public class CustomerFeedbackApiTests
    {
        private CustomerFeedbackApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new CustomerFeedbackApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void GetBrowseNodeReturnTopicsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("customerFeedback") + "-" + FormatOperationId("GetBrowseNodeReturnTopics") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string browseNodeId = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.GetBrowseNodeReturnTopicsWithHttpInfo(browseNodeId, marketplaceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetBrowseNodeReturnTrendsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("customerFeedback") + "-" + FormatOperationId("GetBrowseNodeReturnTrends") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string browseNodeId = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.GetBrowseNodeReturnTrendsWithHttpInfo(browseNodeId, marketplaceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetBrowseNodeReviewTopicsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("customerFeedback") + "-" + FormatOperationId("GetBrowseNodeReviewTopics") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string browseNodeId = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            
            string sortBy = fixture.Create<string>();
            

            var response = api.GetBrowseNodeReviewTopicsWithHttpInfo(browseNodeId, marketplaceId, sortBy);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetBrowseNodeReviewTrendsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("customerFeedback") + "-" + FormatOperationId("GetBrowseNodeReviewTrends") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string browseNodeId = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.GetBrowseNodeReviewTrendsWithHttpInfo(browseNodeId, marketplaceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetItemBrowseNodeTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("customerFeedback") + "-" + FormatOperationId("GetItemBrowseNode") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string asin = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.GetItemBrowseNodeWithHttpInfo(asin, marketplaceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetItemReviewTopicsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("customerFeedback") + "-" + FormatOperationId("GetItemReviewTopics") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string asin = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            
            string sortBy = fixture.Create<string>();
            

            var response = api.GetItemReviewTopicsWithHttpInfo(asin, marketplaceId, sortBy);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetItemReviewTrendsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("customerFeedback") + "-" + FormatOperationId("GetItemReviewTrends") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string asin = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.GetItemReviewTrendsWithHttpInfo(asin, marketplaceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatApiName(string apiName) {
            return apiName.ToLower();
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }
    }
}
