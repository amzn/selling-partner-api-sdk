/*
 * Selling Partner API for Product Type Definitions
 *
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).
 *
 * The version of the OpenAPI document: 2020-09-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.productTypeDefinitions.v2020_09_01;
using software.amzn.spapi.Model.productTypeDefinitions.v2020_09_01;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.productTypeDefinitions.v2020_09_01
{
    [Collection("TestCollection")]
    public class DefinitionsApiTests
    {
        private DefinitionsApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new DefinitionsApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void GetDefinitionsProductTypeTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetDefinitionsProductType") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetDefinitionsProductType"));
            httpClient.Send(request);
            
            string productType = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.GetDefinitionsProductTypeWithHttpInfo(productType, marketplaceIds, null, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void SearchDefinitionsProductTypesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("SearchDefinitionsProductTypes") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "SearchDefinitionsProductTypes"));
            httpClient.Send(request);
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.SearchDefinitionsProductTypesWithHttpInfo(marketplaceIds, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }

        private static string AppendQualifier(string url, string operationId) {
            if ("Api.productTypeDefinitions.v2020_09_01".Contains("vendor") && operationId.Equals("GetOrder")) url += "?qualifier=Vendor";
            if ("Api.productTypeDefinitions.v2020_09_01".Contains("fulfillment.inbound") && operationId.Equals("GetShipment")) url += "?qualifier=FbaInbound";
            if ("Api.productTypeDefinitions.v2020_09_01".Contains("sellerWallet") && operationId.Equals("GetAccount")) url += "?qualifier=SellerWallet";
            if ("Api.productTypeDefinitions.v2020_09_01".Contains("sellerWallet") && operationId.Equals("GetTransaction")) url += "?qualifier=SellerWallet";
            return url;
        }
    }
}
