/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.services.v1;
using software.amzn.spapi.Model.services.v1;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.services.v1
{
    [Collection("TestCollection")]
    public class ServiceApiTests
    {
        private ServiceApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new ServiceApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void AddAppointmentForServiceJobByServiceJobIdTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("AddAppointmentForServiceJobByServiceJobId") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string serviceJobId = fixture.Create<string>();
            
            AddAppointmentRequest body = fixture.Create<AddAppointmentRequest>();
            

            var response = api.AddAppointmentForServiceJobByServiceJobIdWithHttpInfo(serviceJobId, body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void AssignAppointmentResourcesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("AssignAppointmentResources") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string serviceJobId = fixture.Create<string>();
            
            string appointmentId = fixture.Create<string>();
            
            AssignAppointmentResourcesRequest body = fixture.Create<AssignAppointmentResourcesRequest>();
            

            var response = api.AssignAppointmentResourcesWithHttpInfo(serviceJobId, appointmentId, body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void CancelReservationTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("CancelReservation") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string reservationId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.CancelReservationWithHttpInfo(reservationId, marketplaceIds);

            Assert.Equal(204, (int) response.StatusCode);
            AssertValidResponsePayload(204, response.Content);
        }
        
        [Fact]
        public void CancelServiceJobByServiceJobIdTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("CancelServiceJobByServiceJobId") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string serviceJobId = fixture.Create<string>();
            
            string cancellationReasonCode = fixture.Create<string>();
            

            var response = api.CancelServiceJobByServiceJobIdWithHttpInfo(serviceJobId, cancellationReasonCode);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void CompleteServiceJobByServiceJobIdTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("CompleteServiceJobByServiceJobId") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string serviceJobId = fixture.Create<string>();
            

            var response = api.CompleteServiceJobByServiceJobIdWithHttpInfo(serviceJobId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void CreateReservationTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("CreateReservation") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            CreateReservationRequest body = fixture.Create<CreateReservationRequest>();
            

            var response = api.CreateReservationWithHttpInfo(marketplaceIds, body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void CreateServiceDocumentUploadDestinationTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("CreateServiceDocumentUploadDestination") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            ServiceUploadDocument body = fixture.Create<ServiceUploadDocument>();
            

            var response = api.CreateServiceDocumentUploadDestinationWithHttpInfo(body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetAppointmentSlotsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("GetAppointmentSlots") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string asin = fixture.Create<string>();
            
            string storeId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.GetAppointmentSlotsWithHttpInfo(asin, storeId, marketplaceIds, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetAppointmmentSlotsByJobIdTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("GetAppointmmentSlotsByJobId") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string serviceJobId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.GetAppointmmentSlotsByJobIdWithHttpInfo(serviceJobId, marketplaceIds, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetFixedSlotCapacityTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("GetFixedSlotCapacity") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string resourceId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            FixedSlotCapacityQuery body = fixture.Create<FixedSlotCapacityQuery>();
            

            var response = api.GetFixedSlotCapacityWithHttpInfo(resourceId, marketplaceIds, body, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetRangeSlotCapacityTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("GetRangeSlotCapacity") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string resourceId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            RangeSlotCapacityQuery body = fixture.Create<RangeSlotCapacityQuery>();
            

            var response = api.GetRangeSlotCapacityWithHttpInfo(resourceId, marketplaceIds, body, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetServiceJobByServiceJobIdTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("GetServiceJobByServiceJobId") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string serviceJobId = fixture.Create<string>();
            

            var response = api.GetServiceJobByServiceJobIdWithHttpInfo(serviceJobId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetServiceJobsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("GetServiceJobs") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.GetServiceJobsWithHttpInfo(marketplaceIds, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void RescheduleAppointmentForServiceJobByServiceJobIdTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("RescheduleAppointmentForServiceJobByServiceJobId") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string serviceJobId = fixture.Create<string>();
            
            string appointmentId = fixture.Create<string>();
            
            RescheduleAppointmentRequest body = fixture.Create<RescheduleAppointmentRequest>();
            

            var response = api.RescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(serviceJobId, appointmentId, body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void SetAppointmentFulfillmentDataTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("SetAppointmentFulfillmentData") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string serviceJobId = fixture.Create<string>();
            
            string appointmentId = fixture.Create<string>();
            
            SetAppointmentFulfillmentDataRequest body = fixture.Create<SetAppointmentFulfillmentDataRequest>();
            

            var response = api.SetAppointmentFulfillmentDataWithHttpInfo(serviceJobId, appointmentId, body);

            Assert.Equal(204, (int) response.StatusCode);
            AssertValidResponsePayload(204, response.Content);
        }
        
        [Fact]
        public void UpdateReservationTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("UpdateReservation") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string reservationId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            UpdateReservationRequest body = fixture.Create<UpdateReservationRequest>();
            

            var response = api.UpdateReservationWithHttpInfo(reservationId, marketplaceIds, body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void UpdateScheduleTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("service") + "-" + FormatOperationId("UpdateSchedule") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string resourceId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            UpdateScheduleRequest body = fixture.Create<UpdateScheduleRequest>();
            

            var response = api.UpdateScheduleWithHttpInfo(resourceId, marketplaceIds, body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatApiName(string apiName) {
            return Regex.Replace(apiName.ToLower(), @"\s+", String.Empty);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }
    }
}
