/*
 * Selling Partner API for Easy Ship
 *
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * The version of the OpenAPI document: 2022-03-23
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.easyship.v2022_03_23;
using software.amzn.spapi.Model.easyship.v2022_03_23;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.easyship.v2022_03_23
{
    [Collection("TestCollection")]
    public class EasyShipApiTests
    {
        private EasyShipApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new EasyShipApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void CreateScheduledPackageTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("CreateScheduledPackage") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "CreateScheduledPackage"));
            httpClient.Send(request);
            
            CreateScheduledPackageRequest createScheduledPackageRequest = fixture.Create<CreateScheduledPackageRequest>();
            

            var response = api.CreateScheduledPackageWithHttpInfo(createScheduledPackageRequest);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void CreateScheduledPackageBulkTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("CreateScheduledPackageBulk") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "CreateScheduledPackageBulk"));
            httpClient.Send(request);
            
            CreateScheduledPackagesRequest createScheduledPackagesRequest = fixture.Create<CreateScheduledPackagesRequest>();
            

            var response = api.CreateScheduledPackageBulkWithHttpInfo(createScheduledPackagesRequest);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetScheduledPackageTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetScheduledPackage") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetScheduledPackage"));
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.GetScheduledPackageWithHttpInfo(amazonOrderId, marketplaceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListHandoverSlotsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListHandoverSlots") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListHandoverSlots"));
            httpClient.Send(request);
            

            var response = api.ListHandoverSlotsWithHttpInfo(null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void UpdateScheduledPackagesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("UpdateScheduledPackages") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "UpdateScheduledPackages"));
            httpClient.Send(request);
            

            var response = api.UpdateScheduledPackagesWithHttpInfo(null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }

        private static string AppendQualifier(string url, string operationId) {
            if ("Api.easyship.v2022_03_23".Contains("vendor") && operationId.Equals("GetOrder")) url += "?qualifier=Vendor";
            if ("Api.easyship.v2022_03_23".Contains("fulfillment.inbound") && operationId.Equals("GetShipment")) url += "?qualifier=FbaInbound";
            if ("Api.easyship.v2022_03_23".Contains("sellerWallet") && operationId.Equals("GetAccount")) url += "?qualifier=SellerWallet";
            if ("Api.easyship.v2022_03_23".Contains("sellerWallet") && operationId.Equals("GetTransaction")) url += "?qualifier=SellerWallet";
            return url;
        }
    }
}
