/*
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2021-06-30
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text.RegularExpressions;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.reports.v2021_06_30;
using software.amzn.spapi.Model.reports.v2021_06_30;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.reports.v2021_06_30
{
    [Collection("TestCollection")]
    public class ReportsApiTests
    {
        private ReportsApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new ReportsApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void CancelReportTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("reports") + "-" + FormatOperationId("CancelReport") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string reportId = fixture.Create<string>();
            

            api.CancelReportWithHttpInfo(reportId);

        }
        
        [Fact]
        public void CancelReportScheduleTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("reports") + "-" + FormatOperationId("CancelReportSchedule") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string reportScheduleId = fixture.Create<string>();
            

            api.CancelReportScheduleWithHttpInfo(reportScheduleId);

        }
        
        [Fact]
        public void CreateReportTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("reports") + "-" + FormatOperationId("CreateReport") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            CreateReportSpecification body = fixture.Create<CreateReportSpecification>();
            

            var response = api.CreateReportWithHttpInfo(body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void CreateReportScheduleTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("reports") + "-" + FormatOperationId("CreateReportSchedule") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            CreateReportScheduleSpecification body = fixture.Create<CreateReportScheduleSpecification>();
            

            var response = api.CreateReportScheduleWithHttpInfo(body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void GetReportTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("reports") + "-" + FormatOperationId("GetReport") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string reportId = fixture.Create<string>();
            

            var response = api.GetReportWithHttpInfo(reportId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetReportDocumentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("reports") + "-" + FormatOperationId("GetReportDocument") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string reportDocumentId = fixture.Create<string>();
            

            var response = api.GetReportDocumentWithHttpInfo(reportDocumentId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetReportScheduleTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("reports") + "-" + FormatOperationId("GetReportSchedule") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string reportScheduleId = fixture.Create<string>();
            

            var response = api.GetReportScheduleWithHttpInfo(reportScheduleId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetReportSchedulesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("reports") + "-" + FormatOperationId("GetReportSchedules") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            List<string> reportTypes = fixture.Create<List<string>>();
            

            var response = api.GetReportSchedulesWithHttpInfo(reportTypes);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetReportsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("reports") + "-" + FormatOperationId("GetReports") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            

            var response = api.GetReportsWithHttpInfo(null, null, null, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatApiName(string apiName) {
            return Regex.Replace(apiName.ToLower(), @"\s+", String.Empty);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }
    }
}
