/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.orders.v0;
using software.amzn.spapi.Model.orders.v0;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.orders.v0
{
    [Collection("TestCollection")]
    public class OrdersV0ApiTests
    {
        private OrdersV0Api api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new OrdersV0Api.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void ConfirmShipmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("ordersV0") + "-" + FormatOperationId("ConfirmShipment") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string orderId = fixture.Create<string>();
            
            ConfirmShipmentRequest payload = fixture.Create<ConfirmShipmentRequest>();
            

            api.ConfirmShipmentWithHttpInfo(orderId, payload);

        }
        
        [Fact]
        public void GetOrderTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("ordersV0") + "-" + FormatOperationId("GetOrder") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string orderId = fixture.Create<string>();
            

            var response = api.GetOrderWithHttpInfo(orderId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetOrderAddressTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("ordersV0") + "-" + FormatOperationId("GetOrderAddress") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string orderId = fixture.Create<string>();
            

            var response = api.GetOrderAddressWithHttpInfo(orderId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetOrderBuyerInfoTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("ordersV0") + "-" + FormatOperationId("GetOrderBuyerInfo") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string orderId = fixture.Create<string>();
            

            var response = api.GetOrderBuyerInfoWithHttpInfo(orderId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetOrderItemsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("ordersV0") + "-" + FormatOperationId("GetOrderItems") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string orderId = fixture.Create<string>();
            

            var response = api.GetOrderItemsWithHttpInfo(orderId, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetOrderItemsBuyerInfoTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("ordersV0") + "-" + FormatOperationId("GetOrderItemsBuyerInfo") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string orderId = fixture.Create<string>();
            

            var response = api.GetOrderItemsBuyerInfoWithHttpInfo(orderId, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetOrderRegulatedInfoTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("ordersV0") + "-" + FormatOperationId("GetOrderRegulatedInfo") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string orderId = fixture.Create<string>();
            

            var response = api.GetOrderRegulatedInfoWithHttpInfo(orderId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetOrdersTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("ordersV0") + "-" + FormatOperationId("GetOrders") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.GetOrdersWithHttpInfo(marketplaceIds, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void UpdateVerificationStatusTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("ordersV0") + "-" + FormatOperationId("UpdateVerificationStatus") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string orderId = fixture.Create<string>();
            
            UpdateVerificationStatusRequest payload = fixture.Create<UpdateVerificationStatusRequest>();
            

            api.UpdateVerificationStatusWithHttpInfo(orderId, payload);

        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatApiName(string apiName) {
            return apiName.ToLower();
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }
    }
}
