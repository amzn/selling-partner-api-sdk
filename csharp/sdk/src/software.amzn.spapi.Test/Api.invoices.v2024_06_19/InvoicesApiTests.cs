/*
 * The Selling Partner API for Invoices.
 *
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.invoices.v2024_06_19;
using software.amzn.spapi.Model.invoices.v2024_06_19;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.invoices.v2024_06_19
{
    [Collection("TestCollection")]
    public class InvoicesApiTests
    {
        private InvoicesApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new InvoicesApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void CreateInvoicesExportTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("CreateInvoicesExport") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "CreateInvoicesExport"));
            httpClient.Send(request);
            
            ExportInvoicesRequest body = fixture.Create<ExportInvoicesRequest>();
            

            var response = api.CreateInvoicesExportWithHttpInfo(body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void GetInvoiceTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetInvoice") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetInvoice"));
            httpClient.Send(request);
            
            string marketplaceId = fixture.Create<string>();
            
            string invoiceId = fixture.Create<string>();
            

            var response = api.GetInvoiceWithHttpInfo(marketplaceId, invoiceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetInvoicesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetInvoices") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetInvoices"));
            httpClient.Send(request);
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.GetInvoicesWithHttpInfo(marketplaceId, null, null, null, null, null, null, null, null, null, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetInvoicesAttributesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetInvoicesAttributes") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetInvoicesAttributes"));
            httpClient.Send(request);
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.GetInvoicesAttributesWithHttpInfo(marketplaceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetInvoicesDocumentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetInvoicesDocument") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetInvoicesDocument"));
            httpClient.Send(request);
            
            string invoicesDocumentId = fixture.Create<string>();
            

            var response = api.GetInvoicesDocumentWithHttpInfo(invoicesDocumentId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetInvoicesExportTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetInvoicesExport") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetInvoicesExport"));
            httpClient.Send(request);
            
            string exportId = fixture.Create<string>();
            

            var response = api.GetInvoicesExportWithHttpInfo(exportId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetInvoicesExportsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetInvoicesExports") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetInvoicesExports"));
            httpClient.Send(request);
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.GetInvoicesExportsWithHttpInfo(marketplaceId, null, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }

        private static string AppendQualifier(string url, string operationId) {
            if ("Api.invoices.v2024_06_19".Contains("vendor") && operationId.Equals("GetOrder")) url += "?qualifier=Vendor";
            if ("Api.invoices.v2024_06_19".Contains("fulfillment.inbound") && operationId.Equals("GetShipment")) url += "?qualifier=FbaInbound";
            if ("Api.invoices.v2024_06_19".Contains("sellerWallet") && operationId.Equals("GetAccount")) url += "?qualifier=SellerWallet";
            if ("Api.invoices.v2024_06_19".Contains("sellerWallet") && operationId.Equals("GetTransaction")) url += "?qualifier=SellerWallet";
            return url;
        }
    }
}
