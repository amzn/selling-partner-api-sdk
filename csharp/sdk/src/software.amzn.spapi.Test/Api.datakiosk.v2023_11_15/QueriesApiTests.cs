/*
 * Selling Partner API for Data Kiosk
 *
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2023-11-15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.datakiosk.v2023_11_15;
using software.amzn.spapi.Model.datakiosk.v2023_11_15;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.datakiosk.v2023_11_15
{
    [Collection("TestCollection")]
    public class QueriesApiTests
    {
        private QueriesApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new QueriesApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void CancelQueryTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("queries") + "-" + FormatOperationId("CancelQuery") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string queryId = fixture.Create<string>();
            

            api.CancelQueryWithHttpInfo(queryId);

        }
        
        [Fact]
        public void CreateQueryTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("queries") + "-" + FormatOperationId("CreateQuery") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            CreateQuerySpecification body = fixture.Create<CreateQuerySpecification>();
            

            var response = api.CreateQueryWithHttpInfo(body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void GetDocumentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("queries") + "-" + FormatOperationId("GetDocument") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string documentId = fixture.Create<string>();
            

            var response = api.GetDocumentWithHttpInfo(documentId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetQueriesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("queries") + "-" + FormatOperationId("GetQueries") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            

            var response = api.GetQueriesWithHttpInfo(null, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetQueryTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("queries") + "-" + FormatOperationId("GetQuery") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string queryId = fixture.Create<string>();
            

            var response = api.GetQueryWithHttpInfo(queryId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatApiName(string apiName) {
            return Regex.Replace(apiName.ToLower(), @"\s+", String.Empty);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }
    }
}
