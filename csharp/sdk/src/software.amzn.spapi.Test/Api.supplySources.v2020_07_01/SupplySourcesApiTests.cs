/*
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.supplySources.v2020_07_01;
using software.amzn.spapi.Model.supplySources.v2020_07_01;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.supplySources.v2020_07_01
{
    [Collection("TestCollection")]
    public class SupplySourcesApiTests
    {
        private SupplySourcesApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new SupplySourcesApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void ArchiveSupplySourceTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ArchiveSupplySource") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ArchiveSupplySource"));
            httpClient.Send(request);
            
            string supplySourceId = fixture.Create<string>();
            

            var response = api.ArchiveSupplySourceWithHttpInfo(supplySourceId);

            Assert.Equal(204, (int) response.StatusCode);
            AssertValidResponsePayload(204, response.Content);
        }
        
        [Fact]
        public void CreateSupplySourceTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("CreateSupplySource") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "CreateSupplySource"));
            httpClient.Send(request);
            
            CreateSupplySourceRequest payload = fixture.Create<CreateSupplySourceRequest>();
            

            var response = api.CreateSupplySourceWithHttpInfo(payload);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetSupplySourceTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetSupplySource") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetSupplySource"));
            httpClient.Send(request);
            
            string supplySourceId = fixture.Create<string>();
            

            var response = api.GetSupplySourceWithHttpInfo(supplySourceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetSupplySourcesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetSupplySources") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetSupplySources"));
            httpClient.Send(request);
            

            var response = api.GetSupplySourcesWithHttpInfo(null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void UpdateSupplySourceTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("UpdateSupplySource") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "UpdateSupplySource"));
            httpClient.Send(request);
            
            string supplySourceId = fixture.Create<string>();
            

            var response = api.UpdateSupplySourceWithHttpInfo(supplySourceId, null);

            Assert.Equal(204, (int) response.StatusCode);
            AssertValidResponsePayload(204, response.Content);
        }
        
        [Fact]
        public void UpdateSupplySourceStatusTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("UpdateSupplySourceStatus") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "UpdateSupplySourceStatus"));
            httpClient.Send(request);
            
            string supplySourceId = fixture.Create<string>();
            

            var response = api.UpdateSupplySourceStatusWithHttpInfo(supplySourceId, null);

            Assert.Equal(204, (int) response.StatusCode);
            AssertValidResponsePayload(204, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }

        private static string AppendQualifier(string url, string operationId) {
            if ("Api.supplySources.v2020_07_01".Contains("vendor") && operationId.Equals("GetOrder")) url += "?qualifier=Vendor";
            if ("Api.supplySources.v2020_07_01".Contains("fulfillment.inbound") && operationId.Equals("GetShipment")) url += "?qualifier=FbaInbound";
            if ("Api.supplySources.v2020_07_01".Contains("sellerWallet") && operationId.Equals("GetAccount")) url += "?qualifier=SellerWallet";
            if ("Api.supplySources.v2020_07_01".Contains("sellerWallet") && operationId.Equals("GetTransaction")) url += "?qualifier=SellerWallet";
            if ("Api.supplySources.v2020_07_01".Contains("externalFulfillment") && operationId.Equals("GetShipment")) url += "?qualifier=ExternalFulfillment";
            if ("Api.supplySources.v2020_07_01".Contains("externalFulfillment") && operationId.Equals("GetShipments")) url += "?qualifier=ExternalFulfillment";
            return url;
        }
    }
}
