/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.fulfillment.inbound.v2024_03_20;
using software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.fulfillment.inbound.v2024_03_20
{
    [Collection("TestCollection")]
    public class FbaInboundApiTests
    {
        private FbaInboundApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new FbaInboundApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void CancelInboundPlanTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("CancelInboundPlan") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "CancelInboundPlan"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            

            var response = api.CancelInboundPlanWithHttpInfo(inboundPlanId);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void CancelSelfShipAppointmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("CancelSelfShipAppointment") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "CancelSelfShipAppointment"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            
            CancelSelfShipAppointmentRequest body = fixture.Create<CancelSelfShipAppointmentRequest>();
            

            var response = api.CancelSelfShipAppointmentWithHttpInfo(inboundPlanId, shipmentId, body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void ConfirmDeliveryWindowOptionsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ConfirmDeliveryWindowOptions") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ConfirmDeliveryWindowOptions"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            
            string deliveryWindowOptionId = fixture.Create<string>();
            

            var response = api.ConfirmDeliveryWindowOptionsWithHttpInfo(inboundPlanId, shipmentId, deliveryWindowOptionId);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void ConfirmPackingOptionTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ConfirmPackingOption") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ConfirmPackingOption"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string packingOptionId = fixture.Create<string>();
            

            var response = api.ConfirmPackingOptionWithHttpInfo(inboundPlanId, packingOptionId);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void ConfirmPlacementOptionTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ConfirmPlacementOption") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ConfirmPlacementOption"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string placementOptionId = fixture.Create<string>();
            

            var response = api.ConfirmPlacementOptionWithHttpInfo(inboundPlanId, placementOptionId);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void ConfirmShipmentContentUpdatePreviewTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ConfirmShipmentContentUpdatePreview") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ConfirmShipmentContentUpdatePreview"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            
            string contentUpdatePreviewId = fixture.Create<string>();
            

            var response = api.ConfirmShipmentContentUpdatePreviewWithHttpInfo(inboundPlanId, shipmentId, contentUpdatePreviewId);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void ConfirmTransportationOptionsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ConfirmTransportationOptions") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ConfirmTransportationOptions"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            ConfirmTransportationOptionsRequest body = fixture.Create<ConfirmTransportationOptionsRequest>();
            

            var response = api.ConfirmTransportationOptionsWithHttpInfo(inboundPlanId, body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void CreateInboundPlanTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("CreateInboundPlan") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "CreateInboundPlan"));
            httpClient.Send(request);
            
            CreateInboundPlanRequest body = fixture.Create<CreateInboundPlanRequest>();
            

            var response = api.CreateInboundPlanWithHttpInfo(body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void CreateMarketplaceItemLabelsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("CreateMarketplaceItemLabels") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "CreateMarketplaceItemLabels"));
            httpClient.Send(request);
            
            CreateMarketplaceItemLabelsRequest body = fixture.Create<CreateMarketplaceItemLabelsRequest>();
            

            var response = api.CreateMarketplaceItemLabelsWithHttpInfo(body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GenerateDeliveryWindowOptionsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GenerateDeliveryWindowOptions") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GenerateDeliveryWindowOptions"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.GenerateDeliveryWindowOptionsWithHttpInfo(inboundPlanId, shipmentId);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void GeneratePackingOptionsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GeneratePackingOptions") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GeneratePackingOptions"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            

            var response = api.GeneratePackingOptionsWithHttpInfo(inboundPlanId);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void GeneratePlacementOptionsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GeneratePlacementOptions") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GeneratePlacementOptions"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            GeneratePlacementOptionsRequest body = fixture.Create<GeneratePlacementOptionsRequest>();
            

            var response = api.GeneratePlacementOptionsWithHttpInfo(inboundPlanId, body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void GenerateSelfShipAppointmentSlotsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GenerateSelfShipAppointmentSlots") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GenerateSelfShipAppointmentSlots"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            
            GenerateSelfShipAppointmentSlotsRequest body = fixture.Create<GenerateSelfShipAppointmentSlotsRequest>();
            

            var response = api.GenerateSelfShipAppointmentSlotsWithHttpInfo(inboundPlanId, shipmentId, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void GenerateShipmentContentUpdatePreviewsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GenerateShipmentContentUpdatePreviews") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GenerateShipmentContentUpdatePreviews"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            
            GenerateShipmentContentUpdatePreviewsRequest body = fixture.Create<GenerateShipmentContentUpdatePreviewsRequest>();
            

            var response = api.GenerateShipmentContentUpdatePreviewsWithHttpInfo(inboundPlanId, shipmentId, body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void GenerateTransportationOptionsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GenerateTransportationOptions") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GenerateTransportationOptions"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            GenerateTransportationOptionsRequest body = fixture.Create<GenerateTransportationOptionsRequest>();
            

            var response = api.GenerateTransportationOptionsWithHttpInfo(inboundPlanId, body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void GetDeliveryChallanDocumentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetDeliveryChallanDocument") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetDeliveryChallanDocument"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.GetDeliveryChallanDocumentWithHttpInfo(inboundPlanId, shipmentId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetInboundOperationStatusTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetInboundOperationStatus") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetInboundOperationStatus"));
            httpClient.Send(request);
            
            string operationId = fixture.Create<string>();
            

            var response = api.GetInboundOperationStatusWithHttpInfo(operationId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetInboundPlanTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetInboundPlan") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetInboundPlan"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            

            var response = api.GetInboundPlanWithHttpInfo(inboundPlanId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetSelfShipAppointmentSlotsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetSelfShipAppointmentSlots") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetSelfShipAppointmentSlots"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.GetSelfShipAppointmentSlotsWithHttpInfo(inboundPlanId, shipmentId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetShipmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetShipment") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetShipment"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.GetShipmentWithHttpInfo(inboundPlanId, shipmentId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetShipmentContentUpdatePreviewTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetShipmentContentUpdatePreview") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetShipmentContentUpdatePreview"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            
            string contentUpdatePreviewId = fixture.Create<string>();
            

            var response = api.GetShipmentContentUpdatePreviewWithHttpInfo(inboundPlanId, shipmentId, contentUpdatePreviewId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListDeliveryWindowOptionsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListDeliveryWindowOptions") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListDeliveryWindowOptions"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.ListDeliveryWindowOptionsWithHttpInfo(inboundPlanId, shipmentId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListInboundPlanBoxesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListInboundPlanBoxes") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListInboundPlanBoxes"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            

            var response = api.ListInboundPlanBoxesWithHttpInfo(inboundPlanId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListInboundPlanItemsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListInboundPlanItems") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListInboundPlanItems"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            

            var response = api.ListInboundPlanItemsWithHttpInfo(inboundPlanId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListInboundPlanPalletsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListInboundPlanPallets") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListInboundPlanPallets"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            

            var response = api.ListInboundPlanPalletsWithHttpInfo(inboundPlanId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListInboundPlansTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListInboundPlans") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListInboundPlans"));
            httpClient.Send(request);
            

            var response = api.ListInboundPlansWithHttpInfo(null, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListItemComplianceDetailsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListItemComplianceDetails") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListItemComplianceDetails"));
            httpClient.Send(request);
            
            List<string> mskus = fixture.Create<List<string>>();
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.ListItemComplianceDetailsWithHttpInfo(mskus, marketplaceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListPackingGroupBoxesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListPackingGroupBoxes") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListPackingGroupBoxes"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string packingGroupId = fixture.Create<string>();
            

            var response = api.ListPackingGroupBoxesWithHttpInfo(inboundPlanId, packingGroupId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListPackingGroupItemsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListPackingGroupItems") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListPackingGroupItems"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string packingGroupId = fixture.Create<string>();
            

            var response = api.ListPackingGroupItemsWithHttpInfo(inboundPlanId, packingGroupId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListPackingOptionsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListPackingOptions") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListPackingOptions"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            

            var response = api.ListPackingOptionsWithHttpInfo(inboundPlanId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListPlacementOptionsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListPlacementOptions") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListPlacementOptions"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            

            var response = api.ListPlacementOptionsWithHttpInfo(inboundPlanId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListPrepDetailsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListPrepDetails") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListPrepDetails"));
            httpClient.Send(request);
            
            string marketplaceId = fixture.Create<string>();
            
            List<string> mskus = fixture.Create<List<string>>();
            

            var response = api.ListPrepDetailsWithHttpInfo(marketplaceId, mskus);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListShipmentBoxesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListShipmentBoxes") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListShipmentBoxes"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.ListShipmentBoxesWithHttpInfo(inboundPlanId, shipmentId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListShipmentContentUpdatePreviewsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListShipmentContentUpdatePreviews") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListShipmentContentUpdatePreviews"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.ListShipmentContentUpdatePreviewsWithHttpInfo(inboundPlanId, shipmentId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListShipmentItemsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListShipmentItems") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListShipmentItems"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.ListShipmentItemsWithHttpInfo(inboundPlanId, shipmentId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListShipmentPalletsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListShipmentPallets") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListShipmentPallets"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.ListShipmentPalletsWithHttpInfo(inboundPlanId, shipmentId, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListTransportationOptionsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ListTransportationOptions") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ListTransportationOptions"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            

            var response = api.ListTransportationOptionsWithHttpInfo(inboundPlanId, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ScheduleSelfShipAppointmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("ScheduleSelfShipAppointment") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "ScheduleSelfShipAppointment"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            
            string slotId = fixture.Create<string>();
            
            ScheduleSelfShipAppointmentRequest body = fixture.Create<ScheduleSelfShipAppointmentRequest>();
            

            var response = api.ScheduleSelfShipAppointmentWithHttpInfo(inboundPlanId, shipmentId, slotId, body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void SetPackingInformationTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("SetPackingInformation") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "SetPackingInformation"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            SetPackingInformationRequest body = fixture.Create<SetPackingInformationRequest>();
            

            var response = api.SetPackingInformationWithHttpInfo(inboundPlanId, body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void SetPrepDetailsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("SetPrepDetails") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "SetPrepDetails"));
            httpClient.Send(request);
            
            SetPrepDetailsRequest body = fixture.Create<SetPrepDetailsRequest>();
            

            var response = api.SetPrepDetailsWithHttpInfo(body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void UpdateInboundPlanNameTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("UpdateInboundPlanName") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "UpdateInboundPlanName"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            UpdateInboundPlanNameRequest body = fixture.Create<UpdateInboundPlanNameRequest>();
            

            api.UpdateInboundPlanNameWithHttpInfo(inboundPlanId, body);

        }
        
        [Fact]
        public void UpdateItemComplianceDetailsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("UpdateItemComplianceDetails") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "UpdateItemComplianceDetails"));
            httpClient.Send(request);
            
            string marketplaceId = fixture.Create<string>();
            
            UpdateItemComplianceDetailsRequest body = fixture.Create<UpdateItemComplianceDetailsRequest>();
            

            var response = api.UpdateItemComplianceDetailsWithHttpInfo(marketplaceId, body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void UpdateShipmentNameTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("UpdateShipmentName") + "/code/204";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "UpdateShipmentName"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            
            UpdateShipmentNameRequest body = fixture.Create<UpdateShipmentNameRequest>();
            

            api.UpdateShipmentNameWithHttpInfo(inboundPlanId, shipmentId, body);

        }
        
        [Fact]
        public void UpdateShipmentSourceAddressTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("UpdateShipmentSourceAddress") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "UpdateShipmentSourceAddress"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            
            UpdateShipmentSourceAddressRequest body = fixture.Create<UpdateShipmentSourceAddressRequest>();
            

            var response = api.UpdateShipmentSourceAddressWithHttpInfo(inboundPlanId, shipmentId, body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        
        [Fact]
        public void UpdateShipmentTrackingDetailsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("UpdateShipmentTrackingDetails") + "/code/202";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "UpdateShipmentTrackingDetails"));
            httpClient.Send(request);
            
            string inboundPlanId = fixture.Create<string>();
            
            string shipmentId = fixture.Create<string>();
            
            UpdateShipmentTrackingDetailsRequest body = fixture.Create<UpdateShipmentTrackingDetailsRequest>();
            

            var response = api.UpdateShipmentTrackingDetailsWithHttpInfo(inboundPlanId, shipmentId, body);

            Assert.Equal(202, (int) response.StatusCode);
            AssertValidResponsePayload(202, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }

        private static string AppendQualifier(string url, string operationId) {
            if ("Api.fulfillment.inbound.v2024_03_20".Contains("vendor") && operationId.Equals("GetOrder")) url += "?qualifier=Vendor";
            if ("Api.fulfillment.inbound.v2024_03_20".Contains("fulfillment.inbound") && operationId.Equals("GetShipment")) url += "?qualifier=FbaInbound";
            if ("Api.fulfillment.inbound.v2024_03_20".Contains("sellerWallet") && operationId.Equals("GetAccount")) url += "?qualifier=SellerWallet";
            if ("Api.fulfillment.inbound.v2024_03_20".Contains("sellerWallet") && operationId.Equals("GetTransaction")) url += "?qualifier=SellerWallet";
            if ("Api.fulfillment.inbound.v2024_03_20".Contains("externalFulfillment") && operationId.Equals("GetShipment")) url += "?qualifier=ExternalFulfillment";
            if ("Api.fulfillment.inbound.v2024_03_20".Contains("externalFulfillment") && operationId.Equals("GetShipments")) url += "?qualifier=ExternalFulfillment";
            return url;
        }
    }
}
