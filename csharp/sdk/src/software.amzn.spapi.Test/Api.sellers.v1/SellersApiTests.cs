/*
 * The Selling Partner API for Sellers
 *
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.sellers.v1;
using software.amzn.spapi.Model.sellers.v1;
using software.amzn.spapi.Model.awd.v2024_05_09;
using Xunit.Abstractions;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.sellers.v1
{
    [Collection("TestCollection")]
    public class SellersApiTests
    {
        private readonly ITestOutputHelper _testOutputHelper;
        private SellersApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public SellersApiTests(ITestOutputHelper testOutputHelper)
        {
            _testOutputHelper = testOutputHelper;
        }

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new SellersApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void GetAccountTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetAccount") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetAccount"));
            httpClient.Send(request);
            

            var response = api.GetAccountWithHttpInfo();

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetMarketplaceParticipationsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatOperationId("GetMarketplaceParticipations") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, AppendQualifier(url, "GetMarketplaceParticipations"));
            httpClient.Send(request);

            var response = api.GetMarketplaceParticipationsWithHttpInfo();
            
            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }

        private static string AppendQualifier(string url, string operationId) {
            if ("Api.sellers.v1".Contains("vendor") && operationId.Equals("GetOrder")) url += "?qualifier=Vendor";
            if ("Api.sellers.v1".Contains("fulfillment.inbound") && operationId.Equals("GetShipment")) url += "?qualifier=FbaInbound";
            if ("Api.sellers.v1".Contains("sellerWallet") && operationId.Equals("GetAccount")) url += "?qualifier=SellerWallet";
            if ("Api.sellers.v1".Contains("sellerWallet") && operationId.Equals("GetTransaction")) url += "?qualifier=SellerWallet";
            return url;
        }
    }
}
