/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.aplusContent.v2020_11_01;
using software.amzn.spapi.Model.aplusContent.v2020_11_01;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.aplusContent.v2020_11_01
{
    [Collection("TestCollection")]
    public class AplusContentApiTests
    {
        private AplusContentApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new AplusContentApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void CreateContentDocumentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("aplusContent") + "-" + FormatOperationId("CreateContentDocument") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string marketplaceId = fixture.Create<string>();
            
            PostContentDocumentRequest postContentDocumentRequest = fixture.Create<PostContentDocumentRequest>();
            

            var response = api.CreateContentDocumentWithHttpInfo(marketplaceId, postContentDocumentRequest);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetContentDocumentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("aplusContent") + "-" + FormatOperationId("GetContentDocument") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string contentReferenceKey = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            
            List<string> includedDataSet = fixture.Create<List<string>>();
            

            var response = api.GetContentDocumentWithHttpInfo(contentReferenceKey, marketplaceId, includedDataSet);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ListContentDocumentAsinRelationsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("aplusContent") + "-" + FormatOperationId("ListContentDocumentAsinRelations") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string contentReferenceKey = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.ListContentDocumentAsinRelationsWithHttpInfo(contentReferenceKey, marketplaceId, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void PostContentDocumentApprovalSubmissionTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("aplusContent") + "-" + FormatOperationId("PostContentDocumentApprovalSubmission") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string contentReferenceKey = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.PostContentDocumentApprovalSubmissionWithHttpInfo(contentReferenceKey, marketplaceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void PostContentDocumentAsinRelationsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("aplusContent") + "-" + FormatOperationId("PostContentDocumentAsinRelations") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string contentReferenceKey = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            
            PostContentDocumentAsinRelationsRequest postContentDocumentAsinRelationsRequest = fixture.Create<PostContentDocumentAsinRelationsRequest>();
            

            var response = api.PostContentDocumentAsinRelationsWithHttpInfo(contentReferenceKey, marketplaceId, postContentDocumentAsinRelationsRequest);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void PostContentDocumentSuspendSubmissionTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("aplusContent") + "-" + FormatOperationId("PostContentDocumentSuspendSubmission") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string contentReferenceKey = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.PostContentDocumentSuspendSubmissionWithHttpInfo(contentReferenceKey, marketplaceId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void SearchContentDocumentsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("aplusContent") + "-" + FormatOperationId("SearchContentDocuments") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string marketplaceId = fixture.Create<string>();
            

            var response = api.SearchContentDocumentsWithHttpInfo(marketplaceId, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void SearchContentPublishRecordsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("aplusContent") + "-" + FormatOperationId("SearchContentPublishRecords") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string marketplaceId = fixture.Create<string>();
            
            string asin = fixture.Create<string>();
            

            var response = api.SearchContentPublishRecordsWithHttpInfo(marketplaceId, asin, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void UpdateContentDocumentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("aplusContent") + "-" + FormatOperationId("UpdateContentDocument") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string contentReferenceKey = fixture.Create<string>();
            
            string marketplaceId = fixture.Create<string>();
            
            PostContentDocumentRequest postContentDocumentRequest = fixture.Create<PostContentDocumentRequest>();
            

            var response = api.UpdateContentDocumentWithHttpInfo(contentReferenceKey, marketplaceId, postContentDocumentRequest);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void ValidateContentDocumentAsinRelationsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("aplusContent") + "-" + FormatOperationId("ValidateContentDocumentAsinRelations") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string marketplaceId = fixture.Create<string>();
            
            PostContentDocumentRequest postContentDocumentRequest = fixture.Create<PostContentDocumentRequest>();
            

            var response = api.ValidateContentDocumentAsinRelationsWithHttpInfo(marketplaceId, postContentDocumentRequest, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatApiName(string apiName) {
            return apiName.ToLower();
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }
    }
}
