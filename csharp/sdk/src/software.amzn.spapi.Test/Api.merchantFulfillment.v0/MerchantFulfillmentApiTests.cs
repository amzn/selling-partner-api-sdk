/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.merchantFulfillment.v0;
using software.amzn.spapi.Model.merchantFulfillment.v0;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.merchantFulfillment.v0
{
    [Collection("TestCollection")]
    public class MerchantFulfillmentApiTests
    {
        private MerchantFulfillmentApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new MerchantFulfillmentApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void CancelShipmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("merchantFulfillment") + "-" + FormatOperationId("CancelShipment") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.CancelShipmentWithHttpInfo(shipmentId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void CreateShipmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("merchantFulfillment") + "-" + FormatOperationId("CreateShipment") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            CreateShipmentRequest body = fixture.Create<CreateShipmentRequest>();
            

            var response = api.CreateShipmentWithHttpInfo(body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetAdditionalSellerInputsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("merchantFulfillment") + "-" + FormatOperationId("GetAdditionalSellerInputs") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            GetAdditionalSellerInputsRequest body = fixture.Create<GetAdditionalSellerInputsRequest>();
            

            var response = api.GetAdditionalSellerInputsWithHttpInfo(body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetEligibleShipmentServicesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("merchantFulfillment") + "-" + FormatOperationId("GetEligibleShipmentServices") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            GetEligibleShipmentServicesRequest body = fixture.Create<GetEligibleShipmentServicesRequest>();
            

            var response = api.GetEligibleShipmentServicesWithHttpInfo(body);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetShipmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("merchantFulfillment") + "-" + FormatOperationId("GetShipment") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.GetShipmentWithHttpInfo(shipmentId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatApiName(string apiName) {
            return Regex.Replace(apiName.ToLower(), @"\s+", String.Empty);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }
    }
}
