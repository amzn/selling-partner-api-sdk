/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text.RegularExpressions;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.externalFulfillment.shipments.v2024_09_11;
using software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.externalFulfillment.shipments.v2024_09_11
{
    [Collection("TestCollection")]
    public class ShipmentRetrievalApiTests
    {
        private ShipmentRetrievalApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new ShipmentRetrievalApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void GetShipmentTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + ToLowerCaseAndCompress("shipmentRetrieval") + "-" + FormatOperationId("GetShipment") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string shipmentId = fixture.Create<string>();
            

            var response = api.GetShipmentWithHttpInfo(shipmentId);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetShipmentsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + ToLowerCaseAndCompress("shipmentRetrieval") + "-" + FormatOperationId("GetShipments") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string status = fixture.Create<string>();
            

            var response = api.GetShipmentsWithHttpInfo(status, null, null, null, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string ToLowerCaseAndCompress(string apiName) {
            return Regex.Replace(apiName.ToLower(), @"\s+", String.Empty);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }
    }
}
