/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text.RegularExpressions;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.listings.items.v2021_08_01;
using software.amzn.spapi.Model.listings.items.v2021_08_01;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.listings.items.v2021_08_01
{
    [Collection("TestCollection")]
    public class ListingsApiTests
    {
        private ListingsApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new ListingsApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void DeleteListingsItemTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + ToLowerCaseAndCompress("listings") + "-" + FormatOperationId("DeleteListingsItem") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string sellerId = fixture.Create<string>();
            
            string sku = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.DeleteListingsItemWithHttpInfo(sellerId, sku, marketplaceIds, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetListingsItemTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + ToLowerCaseAndCompress("listings") + "-" + FormatOperationId("GetListingsItem") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string sellerId = fixture.Create<string>();
            
            string sku = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.GetListingsItemWithHttpInfo(sellerId, sku, marketplaceIds, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void PatchListingsItemTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + ToLowerCaseAndCompress("listings") + "-" + FormatOperationId("PatchListingsItem") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string sellerId = fixture.Create<string>();
            
            string sku = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            ListingsItemPatchRequest body = fixture.Create<ListingsItemPatchRequest>();
            

            var response = api.PatchListingsItemWithHttpInfo(sellerId, sku, marketplaceIds, body, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void PutListingsItemTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + ToLowerCaseAndCompress("listings") + "-" + FormatOperationId("PutListingsItem") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string sellerId = fixture.Create<string>();
            
            string sku = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            ListingsItemPutRequest body = fixture.Create<ListingsItemPutRequest>();
            

            var response = api.PutListingsItemWithHttpInfo(sellerId, sku, marketplaceIds, body, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void SearchListingsItemsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + ToLowerCaseAndCompress("listings") + "-" + FormatOperationId("SearchListingsItems") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string sellerId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.SearchListingsItemsWithHttpInfo(sellerId, marketplaceIds, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string ToLowerCaseAndCompress(string apiName) {
            return Regex.Replace(apiName.ToLower(), @"\s+", String.Empty);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }
    }
}
