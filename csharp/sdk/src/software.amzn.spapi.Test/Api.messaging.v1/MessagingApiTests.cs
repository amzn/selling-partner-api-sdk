/*
 * Selling Partner API for Messaging
 *
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using AutoFixture;
using RestSharp;
using Xunit;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Client;
using software.amzn.spapi.Api.messaging.v1;
using software.amzn.spapi.Model.messaging.v1;
using software.amzn.spapi.Model.awd.v2024_05_09;
using HttpMethod = System.Net.Http.HttpMethod;

namespace software.amzn.spapi.Test.Api.messaging.v1
{
    [Collection("TestCollection")]
    public class MessagingApiTests
    {
        private MessagingApi api;
        private HttpClient httpClient;
        private Fixture fixture;

        public void Init()
        {
            var lwaAuthorizationCredentials = new LWAAuthorizationCredentials
            {
                ClientId = "clientId",
                ClientSecret = "clientSecret",
                RefreshToken = "refreshToken",
                Endpoint = new Uri("http://localhost:3000/auth/o2/token")
            };
            api = new MessagingApi.Builder()
                .SetLWAAuthorizationCredentials(lwaAuthorizationCredentials)
                .Build();
            api.Configuration.BasePath = "http://localhost:3000";

            httpClient = new HttpClient();
            fixture = new Fixture();
            fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                .ForEach(b => fixture.Behaviors.Remove(b));
            fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            fixture.Customize<DateOnly>(o => o.FromFactory((DateTime dt) => DateOnly.FromDateTime(dt)));
            fixture.Customize<DistributionPackageContents>(o => o.FromFactory(() => new DistributionPackageContents()));
        }

        
        [Fact]
        public void ConfirmCustomizationDetailsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("ConfirmCustomizationDetails") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            CreateConfirmCustomizationDetailsRequest body = fixture.Create<CreateConfirmCustomizationDetailsRequest>();
            

            var response = api.ConfirmCustomizationDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void CreateAmazonMotorsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("CreateAmazonMotors") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            CreateAmazonMotorsRequest body = fixture.Create<CreateAmazonMotorsRequest>();
            

            var response = api.CreateAmazonMotorsWithHttpInfo(amazonOrderId, marketplaceIds, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void CreateConfirmDeliveryDetailsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("CreateConfirmDeliveryDetails") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            CreateConfirmDeliveryDetailsRequest body = fixture.Create<CreateConfirmDeliveryDetailsRequest>();
            

            var response = api.CreateConfirmDeliveryDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void CreateConfirmOrderDetailsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("CreateConfirmOrderDetails") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            CreateConfirmOrderDetailsRequest body = fixture.Create<CreateConfirmOrderDetailsRequest>();
            

            var response = api.CreateConfirmOrderDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void CreateConfirmServiceDetailsTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("CreateConfirmServiceDetails") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            CreateConfirmServiceDetailsRequest body = fixture.Create<CreateConfirmServiceDetailsRequest>();
            

            var response = api.CreateConfirmServiceDetailsWithHttpInfo(amazonOrderId, marketplaceIds, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void CreateDigitalAccessKeyTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("CreateDigitalAccessKey") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            CreateDigitalAccessKeyRequest body = fixture.Create<CreateDigitalAccessKeyRequest>();
            

            var response = api.CreateDigitalAccessKeyWithHttpInfo(amazonOrderId, marketplaceIds, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void CreateLegalDisclosureTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("CreateLegalDisclosure") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            CreateLegalDisclosureRequest body = fixture.Create<CreateLegalDisclosureRequest>();
            

            var response = api.CreateLegalDisclosureWithHttpInfo(amazonOrderId, marketplaceIds, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void CreateUnexpectedProblemTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("CreateUnexpectedProblem") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            CreateUnexpectedProblemRequest body = fixture.Create<CreateUnexpectedProblemRequest>();
            

            var response = api.CreateUnexpectedProblemWithHttpInfo(amazonOrderId, marketplaceIds, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void CreateWarrantyTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("CreateWarranty") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            CreateWarrantyRequest body = fixture.Create<CreateWarrantyRequest>();
            

            var response = api.CreateWarrantyWithHttpInfo(amazonOrderId, marketplaceIds, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        
        [Fact]
        public void GetAttributesTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("GetAttributes") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.GetAttributesWithHttpInfo(amazonOrderId, marketplaceIds);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void GetMessagingActionsForOrderTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("GetMessagingActionsForOrder") + "/code/200";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            

            var response = api.GetMessagingActionsForOrderWithHttpInfo(amazonOrderId, marketplaceIds);

            Assert.Equal(200, (int) response.StatusCode);
            AssertValidResponsePayload(200, response.Content);
        }
        
        [Fact]
        public void SendInvoiceTest()
        {
            Init();
            var url = "http://localhost:3000/response/" + FormatApiName("messaging") + "-" + FormatOperationId("SendInvoice") + "/code/201";
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            httpClient.Send(request);
            
            string amazonOrderId = fixture.Create<string>();
            
            List<string> marketplaceIds = fixture.Create<List<string>>();
            
            InvoiceRequest body = fixture.Create<InvoiceRequest>();
            

            var response = api.SendInvoiceWithHttpInfo(amazonOrderId, marketplaceIds, body);

            Assert.Equal(201, (int) response.StatusCode);
            AssertValidResponsePayload(201, response.Content);
        }
        

        private static void AssertValidResponsePayload(int statusCode, Object body) {
            if(statusCode != 204) Assert.NotNull(body);
        }

        private static string FormatApiName(string apiName) {
            return Regex.Replace(apiName.ToLower(), @"\s+", String.Empty);
        }

        private static string FormatOperationId(string operationId) {
            operationId = string.IsNullOrEmpty(operationId) ? operationId : char.ToLower(operationId[0]) + operationId[1..];
            return operationId.Replace("_0", String.Empty);
        }
    }
}
