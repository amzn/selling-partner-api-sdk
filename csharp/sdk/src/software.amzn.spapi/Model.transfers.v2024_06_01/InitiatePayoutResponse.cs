/*
 * The Selling Partner API for Transfers.
 *
 * The Selling Partner API for Transfers enables selling partners to retrieve payment methods and initiate payouts for their seller accounts. This API supports the following marketplaces: DE, FR, IT, ES, SE, NL, PL, and BE.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.transfers.v2024_06_01
{
    /// <summary>
    /// The response schema for the &#x60;initiatePayout&#x60; operation.
    /// </summary>
    [DataContract(Name = "InitiatePayoutResponse")]
    public partial class InitiatePayoutResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiatePayoutResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InitiatePayoutResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiatePayoutResponse" /> class.
        /// </summary>
        /// <param name="payoutReferenceId">The financial event group ID for a successfully initiated payout. You can use this ID to track payout information. (required).</param>
        public InitiatePayoutResponse(string payoutReferenceId = default(string))
        {
            // to ensure "payoutReferenceId" is required (not null)
            if (payoutReferenceId == null)
            {
                throw new ArgumentNullException("payoutReferenceId is a required property for InitiatePayoutResponse and cannot be null");
            }
            this.PayoutReferenceId = payoutReferenceId;
        }

        /// <summary>
        /// The financial event group ID for a successfully initiated payout. You can use this ID to track payout information.
        /// </summary>
        /// <value>The financial event group ID for a successfully initiated payout. You can use this ID to track payout information.</value>
        [DataMember(Name = "payoutReferenceId", IsRequired = true, EmitDefaultValue = true)]
        public string PayoutReferenceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InitiatePayoutResponse {\n");
            sb.Append("  PayoutReferenceId: ").Append(PayoutReferenceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
