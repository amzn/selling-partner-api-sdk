/*
 * The Selling Partner API for Transfers.
 *
 * The Selling Partner API for Transfers enables selling partners to retrieve payment methods and initiate payouts for their seller accounts. This API supports the following marketplaces: DE, FR, IT, ES, SE, NL, PL, and BE.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.transfers.v2024_06_01
{
    /// <summary>
    /// The details of a payment method.
    /// </summary>
    [DataContract(Name = "PaymentMethodDetails")]
    public partial class PaymentMethodDetails : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PaymentMethodType
        /// </summary>
        [DataMember(Name = "paymentMethodType", EmitDefaultValue = false)]
        public PaymentMethodType? PaymentMethodType { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentType
        /// </summary>
        [DataMember(Name = "assignmentType", EmitDefaultValue = false)]
        public AssignmentType? AssignmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodDetails" /> class.
        /// </summary>
        /// <param name="accountHolderName">The name of the account holder who is registered for the payment method..</param>
        /// <param name="paymentMethodId">The payment method identifier..</param>
        /// <param name="tail">The last three or four digits of the payment method..</param>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="countryCode">The two-letter country code in ISO 3166-1 alpha-2 format. For payment methods in the &#x60;card&#x60; category, the code is for the country where the card was issued. For payment methods in the &#x60;bank account&#x60; category, the code is for the country where the account is located..</param>
        /// <param name="paymentMethodType">paymentMethodType.</param>
        /// <param name="assignmentType">assignmentType.</param>
        public PaymentMethodDetails(string accountHolderName = default(string), string paymentMethodId = default(string), string tail = default(string), ExpiryDate expiryDate = default(ExpiryDate), string countryCode = default(string), PaymentMethodType? paymentMethodType = default(PaymentMethodType?), AssignmentType? assignmentType = default(AssignmentType?))
        {
            this.AccountHolderName = accountHolderName;
            this.PaymentMethodId = paymentMethodId;
            this.Tail = tail;
            this.ExpiryDate = expiryDate;
            this.CountryCode = countryCode;
            this.PaymentMethodType = paymentMethodType;
            this.AssignmentType = assignmentType;
        }

        /// <summary>
        /// The name of the account holder who is registered for the payment method.
        /// </summary>
        /// <value>The name of the account holder who is registered for the payment method.</value>
        [DataMember(Name = "accountHolderName", EmitDefaultValue = false)]
        public string AccountHolderName { get; set; }

        /// <summary>
        /// The payment method identifier.
        /// </summary>
        /// <value>The payment method identifier.</value>
        /*
        <example>0h_TU_CUS_4058fe2a-da6b-4b82-8e48-b20ff2eb4f6d</example>
        */
        [DataMember(Name = "paymentMethodId", EmitDefaultValue = false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The last three or four digits of the payment method.
        /// </summary>
        /// <value>The last three or four digits of the payment method.</value>
        /*
        <example>321</example>
        */
        [DataMember(Name = "tail", EmitDefaultValue = false)]
        public string Tail { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name = "expiryDate", EmitDefaultValue = false)]
        public ExpiryDate ExpiryDate { get; set; }

        /// <summary>
        /// The two-letter country code in ISO 3166-1 alpha-2 format. For payment methods in the &#x60;card&#x60; category, the code is for the country where the card was issued. For payment methods in the &#x60;bank account&#x60; category, the code is for the country where the account is located.
        /// </summary>
        /// <value>The two-letter country code in ISO 3166-1 alpha-2 format. For payment methods in the &#x60;card&#x60; category, the code is for the country where the card was issued. For payment methods in the &#x60;bank account&#x60; category, the code is for the country where the account is located.</value>
        /*
        <example>US</example>
        */
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethodDetails {\n");
            sb.Append("  AccountHolderName: ").Append(AccountHolderName).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  Tail: ").Append(Tail).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("  AssignmentType: ").Append(AssignmentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
