/*
 * The Selling Partner API for Amazon External Fulfillment Return Item Processing
 *
 * You can use the Amazon External Fulfillment Return Item Processing API to retrieve, track, and process return items through Amazon's External Fulfillment returns management system.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.returns.v2024_09_11
{
    /// <summary>
    /// Metadata about the return item.
    /// </summary>
    [DataContract(Name = "ReturnMetadata")]
    public partial class ReturnMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReturnMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnMetadata" /> class.
        /// </summary>
        /// <param name="returnReason">The reason for the return. (required).</param>
        /// <param name="rmaId">The RMA ID of the return..</param>
        /// <param name="fulfillmentOrderId">The SmartConnect ID of the fulfillment order for which the return was placed..</param>
        /// <param name="invoiceInformation">invoiceInformation.</param>
        public ReturnMetadata(string returnReason = default(string), string rmaId = default(string), string fulfillmentOrderId = default(string), InvoiceInformation invoiceInformation = default(InvoiceInformation))
        {
            // to ensure "returnReason" is required (not null)
            if (returnReason == null)
            {
                throw new ArgumentNullException("returnReason is a required property for ReturnMetadata and cannot be null");
            }
            this.ReturnReason = returnReason;
            this.RmaId = rmaId;
            this.FulfillmentOrderId = fulfillmentOrderId;
            this.InvoiceInformation = invoiceInformation;
        }

        /// <summary>
        /// The reason for the return.
        /// </summary>
        /// <value>The reason for the return.</value>
        [DataMember(Name = "returnReason", IsRequired = true, EmitDefaultValue = true)]
        public string ReturnReason { get; set; }

        /// <summary>
        /// The RMA ID of the return.
        /// </summary>
        /// <value>The RMA ID of the return.</value>
        [DataMember(Name = "rmaId", EmitDefaultValue = false)]
        public string RmaId { get; set; }

        /// <summary>
        /// The SmartConnect ID of the fulfillment order for which the return was placed.
        /// </summary>
        /// <value>The SmartConnect ID of the fulfillment order for which the return was placed.</value>
        [DataMember(Name = "fulfillmentOrderId", EmitDefaultValue = false)]
        public string FulfillmentOrderId { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceInformation
        /// </summary>
        [DataMember(Name = "invoiceInformation", EmitDefaultValue = false)]
        public InvoiceInformation InvoiceInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnMetadata {\n");
            sb.Append("  ReturnReason: ").Append(ReturnReason).Append("\n");
            sb.Append("  RmaId: ").Append(RmaId).Append("\n");
            sb.Append("  FulfillmentOrderId: ").Append(FulfillmentOrderId).Append("\n");
            sb.Append("  InvoiceInformation: ").Append(InvoiceInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
