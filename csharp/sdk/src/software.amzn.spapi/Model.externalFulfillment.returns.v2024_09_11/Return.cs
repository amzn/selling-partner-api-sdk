/*
 * The Selling Partner API for Amazon External Fulfillment Return Item Processing
 *
 * You can use the Amazon External Fulfillment Return Item Processing API to retrieve, track, and process return items through Amazon's External Fulfillment returns management system.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.returns.v2024_09_11
{
    /// <summary>
    /// Information about the return item.
    /// </summary>
    [DataContract(Name = "Return")]
    public partial class Return : IValidatableObject
    {
        /// <summary>
        /// The type of return.
        /// </summary>
        /// <value>The type of return.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReturnTypeEnum
        {
            /// <summary>
            /// Enum CUSTOMER for value: CUSTOMER
            /// </summary>
            [EnumMember(Value = "CUSTOMER")]
            CUSTOMER = 1,

            /// <summary>
            /// Enum REJECT for value: REJECT
            /// </summary>
            [EnumMember(Value = "REJECT")]
            REJECT = 2
        }


        /// <summary>
        /// The type of return.
        /// </summary>
        /// <value>The type of return.</value>
        [DataMember(Name = "returnType", IsRequired = true, EmitDefaultValue = true)]
        public ReturnTypeEnum ReturnType { get; set; }
        /// <summary>
        /// The sub-type of return.
        /// </summary>
        /// <value>The sub-type of return.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReturnSubTypeEnum
        {
            /// <summary>
            /// Enum NORMAL for value: NORMAL
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL = 1,

            /// <summary>
            /// Enum REPLACEMENT for value: REPLACEMENT
            /// </summary>
            [EnumMember(Value = "REPLACEMENT")]
            REPLACEMENT = 2,

            /// <summary>
            /// Enum EXCHANGE for value: EXCHANGE
            /// </summary>
            [EnumMember(Value = "EXCHANGE")]
            EXCHANGE = 3
        }


        /// <summary>
        /// The sub-type of return.
        /// </summary>
        /// <value>The sub-type of return.</value>
        [DataMember(Name = "returnSubType", EmitDefaultValue = false)]
        public ReturnSubTypeEnum? ReturnSubType { get; set; }
        /// <summary>
        /// The current status of the return.
        /// </summary>
        /// <value>The current status of the return.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum CREATED for value: CREATED
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED = 1,

            /// <summary>
            /// Enum CARRIERNOTIFIEDTOPICKUPFROMCUSTOMER for value: CARRIER_NOTIFIED_TO_PICK_UP_FROM_CUSTOMER
            /// </summary>
            [EnumMember(Value = "CARRIER_NOTIFIED_TO_PICK_UP_FROM_CUSTOMER")]
            CARRIERNOTIFIEDTOPICKUPFROMCUSTOMER = 2,

            /// <summary>
            /// Enum CARRIEROUTFORPICKUPFROMCUSTOMER for value: CARRIER_OUT_FOR_PICK_UP_FROM_CUSTOMER
            /// </summary>
            [EnumMember(Value = "CARRIER_OUT_FOR_PICK_UP_FROM_CUSTOMER")]
            CARRIEROUTFORPICKUPFROMCUSTOMER = 3,

            /// <summary>
            /// Enum CUSTOMERCANCELLEDPICKUP for value: CUSTOMER_CANCELLED_PICK_UP
            /// </summary>
            [EnumMember(Value = "CUSTOMER_CANCELLED_PICK_UP")]
            CUSTOMERCANCELLEDPICKUP = 4,

            /// <summary>
            /// Enum CUSTOMERRESCHEDULEDPICKUP for value: CUSTOMER_RESCHEDULED_PICK_UP
            /// </summary>
            [EnumMember(Value = "CUSTOMER_RESCHEDULED_PICK_UP")]
            CUSTOMERRESCHEDULEDPICKUP = 5,

            /// <summary>
            /// Enum PICKEDFROMCUSTOMER for value: PICKED_FROM_CUSTOMER
            /// </summary>
            [EnumMember(Value = "PICKED_FROM_CUSTOMER")]
            PICKEDFROMCUSTOMER = 6,

            /// <summary>
            /// Enum INTRANSIT for value: IN_TRANSIT
            /// </summary>
            [EnumMember(Value = "IN_TRANSIT")]
            INTRANSIT = 7,

            /// <summary>
            /// Enum OUTFORDELIVERY for value: OUT_FOR_DELIVERY
            /// </summary>
            [EnumMember(Value = "OUT_FOR_DELIVERY")]
            OUTFORDELIVERY = 8,

            /// <summary>
            /// Enum DELIVERED for value: DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVERED = 9,

            /// <summary>
            /// Enum REPLANNED for value: REPLANNED
            /// </summary>
            [EnumMember(Value = "REPLANNED")]
            REPLANNED = 10,

            /// <summary>
            /// Enum CUSTOMERDROPPEDOFF for value: CUSTOMER_DROPPED_OFF
            /// </summary>
            [EnumMember(Value = "CUSTOMER_DROPPED_OFF")]
            CUSTOMERDROPPEDOFF = 11,

            /// <summary>
            /// Enum PARTIALLYPROCESSED for value: PARTIALLY_PROCESSED
            /// </summary>
            [EnumMember(Value = "PARTIALLY_PROCESSED")]
            PARTIALLYPROCESSED = 12,

            /// <summary>
            /// Enum PROCESSED for value: PROCESSED
            /// </summary>
            [EnumMember(Value = "PROCESSED")]
            PROCESSED = 13,

            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 14,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 15
        }


        /// <summary>
        /// The current status of the return.
        /// </summary>
        /// <value>The current status of the return.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// The package delivery mode. This indicates whether the return was delivered to the seller with or without a one-time password (OTP).
        /// </summary>
        /// <value>The package delivery mode. This indicates whether the return was delivered to the seller with or without a one-time password (OTP).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PackageDeliveryModeEnum
        {
            /// <summary>
            /// Enum WITHOTP for value: WITH_OTP
            /// </summary>
            [EnumMember(Value = "WITH_OTP")]
            WITHOTP = 1,

            /// <summary>
            /// Enum WITHOUTOTP for value: WITHOUT_OTP
            /// </summary>
            [EnumMember(Value = "WITHOUT_OTP")]
            WITHOUTOTP = 2
        }


        /// <summary>
        /// The package delivery mode. This indicates whether the return was delivered to the seller with or without a one-time password (OTP).
        /// </summary>
        /// <value>The package delivery mode. This indicates whether the return was delivered to the seller with or without a one-time password (OTP).</value>
        [DataMember(Name = "packageDeliveryMode", EmitDefaultValue = false)]
        public PackageDeliveryModeEnum? PackageDeliveryMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Return" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Return() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Return" /> class.
        /// </summary>
        /// <param name="id">The return item&#39;s ID. (required).</param>
        /// <param name="returnLocationId">The SmartConnect identifier for where the return item was dropped for delivery..</param>
        /// <param name="merchantSku">The seller&#39;s identifier for the SKU..</param>
        /// <param name="returnType">The type of return. (required).</param>
        /// <param name="returnSubType">The sub-type of return..</param>
        /// <param name="numberOfUnits">The total number of units in the return..</param>
        /// <param name="status">The current status of the return. (required).</param>
        /// <param name="fulfillmentLocationId">The ID of the location that fulfilled the order. (required).</param>
        /// <param name="creationDateTime">A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format..</param>
        /// <param name="lastUpdatedDateTime">A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format. (required).</param>
        /// <param name="returnMetadata">returnMetadata (required).</param>
        /// <param name="returnShippingInfo">returnShippingInfo (required).</param>
        /// <param name="marketplaceChannelDetails">marketplaceChannelDetails (required).</param>
        /// <param name="otpDetails">otpDetails.</param>
        /// <param name="packageDeliveryMode">The package delivery mode. This indicates whether the return was delivered to the seller with or without a one-time password (OTP)..</param>
        /// <param name="replanningDetails">replanningDetails.</param>
        public Return(string id = default(string), string returnLocationId = default(string), string merchantSku = default(string), ReturnTypeEnum returnType = default(ReturnTypeEnum), ReturnSubTypeEnum? returnSubType = default(ReturnSubTypeEnum?), int numberOfUnits = default(int), StatusEnum status = default(StatusEnum), string fulfillmentLocationId = default(string), string creationDateTime = default(string), string lastUpdatedDateTime = default(string), ReturnMetadata returnMetadata = default(ReturnMetadata), ReturnShippingInfo returnShippingInfo = default(ReturnShippingInfo), MarketplaceChannelDetails marketplaceChannelDetails = default(MarketplaceChannelDetails), OtpDetails otpDetails = default(OtpDetails), PackageDeliveryModeEnum? packageDeliveryMode = default(PackageDeliveryModeEnum?), ReplanningDetails replanningDetails = default(ReplanningDetails))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Return and cannot be null");
            }
            this.Id = id;
            this.ReturnType = returnType;
            this.Status = status;
            // to ensure "fulfillmentLocationId" is required (not null)
            if (fulfillmentLocationId == null)
            {
                throw new ArgumentNullException("fulfillmentLocationId is a required property for Return and cannot be null");
            }
            this.FulfillmentLocationId = fulfillmentLocationId;
            // to ensure "lastUpdatedDateTime" is required (not null)
            if (lastUpdatedDateTime == null)
            {
                throw new ArgumentNullException("lastUpdatedDateTime is a required property for Return and cannot be null");
            }
            this.LastUpdatedDateTime = lastUpdatedDateTime;
            // to ensure "returnMetadata" is required (not null)
            if (returnMetadata == null)
            {
                throw new ArgumentNullException("returnMetadata is a required property for Return and cannot be null");
            }
            this.ReturnMetadata = returnMetadata;
            // to ensure "returnShippingInfo" is required (not null)
            if (returnShippingInfo == null)
            {
                throw new ArgumentNullException("returnShippingInfo is a required property for Return and cannot be null");
            }
            this.ReturnShippingInfo = returnShippingInfo;
            // to ensure "marketplaceChannelDetails" is required (not null)
            if (marketplaceChannelDetails == null)
            {
                throw new ArgumentNullException("marketplaceChannelDetails is a required property for Return and cannot be null");
            }
            this.MarketplaceChannelDetails = marketplaceChannelDetails;
            this.ReturnLocationId = returnLocationId;
            this.MerchantSku = merchantSku;
            this.ReturnSubType = returnSubType;
            this.NumberOfUnits = numberOfUnits;
            this.CreationDateTime = creationDateTime;
            this.OtpDetails = otpDetails;
            this.PackageDeliveryMode = packageDeliveryMode;
            this.ReplanningDetails = replanningDetails;
        }

        /// <summary>
        /// The return item&#39;s ID.
        /// </summary>
        /// <value>The return item&#39;s ID.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The SmartConnect identifier for where the return item was dropped for delivery.
        /// </summary>
        /// <value>The SmartConnect identifier for where the return item was dropped for delivery.</value>
        [DataMember(Name = "returnLocationId", EmitDefaultValue = false)]
        public string ReturnLocationId { get; set; }

        /// <summary>
        /// The seller&#39;s identifier for the SKU.
        /// </summary>
        /// <value>The seller&#39;s identifier for the SKU.</value>
        [DataMember(Name = "merchantSku", EmitDefaultValue = false)]
        public string MerchantSku { get; set; }

        /// <summary>
        /// The total number of units in the return.
        /// </summary>
        /// <value>The total number of units in the return.</value>
        [DataMember(Name = "numberOfUnits", EmitDefaultValue = false)]
        public int NumberOfUnits { get; set; }

        /// <summary>
        /// The ID of the location that fulfilled the order.
        /// </summary>
        /// <value>The ID of the location that fulfilled the order.</value>
        [DataMember(Name = "fulfillmentLocationId", IsRequired = true, EmitDefaultValue = true)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
        /// </summary>
        /// <value>A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.</value>
        [DataMember(Name = "creationDateTime", EmitDefaultValue = false)]
        public string CreationDateTime { get; set; }

        /// <summary>
        /// A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
        /// </summary>
        /// <value>A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.</value>
        [DataMember(Name = "lastUpdatedDateTime", IsRequired = true, EmitDefaultValue = true)]
        public string LastUpdatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ReturnMetadata
        /// </summary>
        [DataMember(Name = "returnMetadata", IsRequired = true, EmitDefaultValue = true)]
        public ReturnMetadata ReturnMetadata { get; set; }

        /// <summary>
        /// Gets or Sets ReturnShippingInfo
        /// </summary>
        [DataMember(Name = "returnShippingInfo", IsRequired = true, EmitDefaultValue = true)]
        public ReturnShippingInfo ReturnShippingInfo { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceChannelDetails
        /// </summary>
        [DataMember(Name = "marketplaceChannelDetails", IsRequired = true, EmitDefaultValue = true)]
        public MarketplaceChannelDetails MarketplaceChannelDetails { get; set; }

        /// <summary>
        /// Gets or Sets OtpDetails
        /// </summary>
        [DataMember(Name = "otpDetails", EmitDefaultValue = false)]
        public OtpDetails OtpDetails { get; set; }

        /// <summary>
        /// Gets or Sets ReplanningDetails
        /// </summary>
        [DataMember(Name = "replanningDetails", EmitDefaultValue = false)]
        public ReplanningDetails ReplanningDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Return {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReturnLocationId: ").Append(ReturnLocationId).Append("\n");
            sb.Append("  MerchantSku: ").Append(MerchantSku).Append("\n");
            sb.Append("  ReturnType: ").Append(ReturnType).Append("\n");
            sb.Append("  ReturnSubType: ").Append(ReturnSubType).Append("\n");
            sb.Append("  NumberOfUnits: ").Append(NumberOfUnits).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
            sb.Append("  LastUpdatedDateTime: ").Append(LastUpdatedDateTime).Append("\n");
            sb.Append("  ReturnMetadata: ").Append(ReturnMetadata).Append("\n");
            sb.Append("  ReturnShippingInfo: ").Append(ReturnShippingInfo).Append("\n");
            sb.Append("  MarketplaceChannelDetails: ").Append(MarketplaceChannelDetails).Append("\n");
            sb.Append("  OtpDetails: ").Append(OtpDetails).Append("\n");
            sb.Append("  PackageDeliveryMode: ").Append(PackageDeliveryMode).Append("\n");
            sb.Append("  ReplanningDetails: ").Append(ReplanningDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfUnits (int) minimum
            if (this.NumberOfUnits < (int)1)
            {
                yield return new ValidationResult("Invalid value for NumberOfUnits, must be a value greater than or equal to 1.", new [] { "NumberOfUnits" });
            }

            yield break;
        }
    }

}
