/*
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * The version of the OpenAPI document: 2021-06-30
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.feeds.v2021_06_30
{
    /// <summary>
    /// Information required to create the feed.
    /// </summary>
    [DataContract(Name = "CreateFeedSpecification")]
    public partial class CreateFeedSpecification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeedSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateFeedSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeedSpecification" /> class.
        /// </summary>
        /// <param name="feedType">The feed type. (required).</param>
        /// <param name="marketplaceIds">A list of identifiers for marketplaces that you want the feed to be applied to. (required).</param>
        /// <param name="inputFeedDocumentId">The document identifier returned by the createFeedDocument operation. Upload the feed document contents before calling the createFeed operation. (required).</param>
        /// <param name="feedOptions">Additional options to control the feed. These vary by feed type..</param>
        public CreateFeedSpecification(string feedType = default(string), List<string> marketplaceIds = default(List<string>), string inputFeedDocumentId = default(string), Dictionary<string, string> feedOptions = default(Dictionary<string, string>))
        {
            // to ensure "feedType" is required (not null)
            if (feedType == null)
            {
                throw new ArgumentNullException("feedType is a required property for CreateFeedSpecification and cannot be null");
            }
            this.FeedType = feedType;
            // to ensure "marketplaceIds" is required (not null)
            if (marketplaceIds == null)
            {
                throw new ArgumentNullException("marketplaceIds is a required property for CreateFeedSpecification and cannot be null");
            }
            this.MarketplaceIds = marketplaceIds;
            // to ensure "inputFeedDocumentId" is required (not null)
            if (inputFeedDocumentId == null)
            {
                throw new ArgumentNullException("inputFeedDocumentId is a required property for CreateFeedSpecification and cannot be null");
            }
            this.InputFeedDocumentId = inputFeedDocumentId;
            this.FeedOptions = feedOptions;
        }

        /// <summary>
        /// The feed type.
        /// </summary>
        /// <value>The feed type.</value>
        [DataMember(Name = "feedType", IsRequired = true, EmitDefaultValue = true)]
        public string FeedType { get; set; }

        /// <summary>
        /// A list of identifiers for marketplaces that you want the feed to be applied to.
        /// </summary>
        /// <value>A list of identifiers for marketplaces that you want the feed to be applied to.</value>
        [DataMember(Name = "marketplaceIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// The document identifier returned by the createFeedDocument operation. Upload the feed document contents before calling the createFeed operation.
        /// </summary>
        /// <value>The document identifier returned by the createFeedDocument operation. Upload the feed document contents before calling the createFeed operation.</value>
        [DataMember(Name = "inputFeedDocumentId", IsRequired = true, EmitDefaultValue = true)]
        public string InputFeedDocumentId { get; set; }

        /// <summary>
        /// Additional options to control the feed. These vary by feed type.
        /// </summary>
        /// <value>Additional options to control the feed. These vary by feed type.</value>
        [DataMember(Name = "feedOptions", EmitDefaultValue = false)]
        public Dictionary<string, string> FeedOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFeedSpecification {\n");
            sb.Append("  FeedType: ").Append(FeedType).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  InputFeedDocumentId: ").Append(InputFeedDocumentId).Append("\n");
            sb.Append("  FeedOptions: ").Append(FeedOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
