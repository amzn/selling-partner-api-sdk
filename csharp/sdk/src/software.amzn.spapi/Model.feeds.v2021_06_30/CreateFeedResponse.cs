/*
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * The version of the OpenAPI document: 2021-06-30
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.feeds.v2021_06_30
{
    /// <summary>
    /// Response schema.
    /// </summary>
    [DataContract(Name = "CreateFeedResponse")]
    public partial class CreateFeedResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeedResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateFeedResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeedResponse" /> class.
        /// </summary>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID. (required).</param>
        public CreateFeedResponse(string feedId = default(string))
        {
            // to ensure "feedId" is required (not null)
            if (feedId == null)
            {
                throw new ArgumentNullException("feedId is a required property for CreateFeedResponse and cannot be null");
            }
            this.FeedId = feedId;
        }

        /// <summary>
        /// The identifier for the feed. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the feed. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "feedId", IsRequired = true, EmitDefaultValue = true)]
        public string FeedId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFeedResponse {\n");
            sb.Append("  FeedId: ").Append(FeedId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
