/*
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * The version of the OpenAPI document: 2021-06-30
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.feeds.v2021_06_30
{
    /// <summary>
    /// Information required for the feed document.
    /// </summary>
    [DataContract(Name = "FeedDocument")]
    public partial class FeedDocument : IValidatableObject
    {
        /// <summary>
        /// If the feed document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the feed when you download. Otherwise, you can download the feed directly. Refer to [Step 7. Download the feed processing report](doc:feeds-api-v2021-06-30-use-case-guide#step-7-download-the-feed-processing-report) in the use case guide, where sample code is provided.
        /// </summary>
        /// <value>If the feed document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the feed when you download. Otherwise, you can download the feed directly. Refer to [Step 7. Download the feed processing report](doc:feeds-api-v2021-06-30-use-case-guide#step-7-download-the-feed-processing-report) in the use case guide, where sample code is provided.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompressionAlgorithmEnum
        {
            /// <summary>
            /// Enum GZIP for value: GZIP
            /// </summary>
            [EnumMember(Value = "GZIP")]
            GZIP = 1
        }


        /// <summary>
        /// If the feed document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the feed when you download. Otherwise, you can download the feed directly. Refer to [Step 7. Download the feed processing report](doc:feeds-api-v2021-06-30-use-case-guide#step-7-download-the-feed-processing-report) in the use case guide, where sample code is provided.
        /// </summary>
        /// <value>If the feed document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the feed when you download. Otherwise, you can download the feed directly. Refer to [Step 7. Download the feed processing report](doc:feeds-api-v2021-06-30-use-case-guide#step-7-download-the-feed-processing-report) in the use case guide, where sample code is provided.</value>
        [DataMember(Name = "compressionAlgorithm", EmitDefaultValue = false)]
        public CompressionAlgorithmEnum? CompressionAlgorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeedDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedDocument" /> class.
        /// </summary>
        /// <param name="feedDocumentId">The identifier for the feed document. This identifier is unique only in combination with a seller ID. (required).</param>
        /// <param name="url">A presigned URL for the feed document. If &#x60;compressionAlgorithm&#x60; is not returned, you can download the feed directly from this URL. This URL expires after 5 minutes. (required).</param>
        /// <param name="compressionAlgorithm">If the feed document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the feed when you download. Otherwise, you can download the feed directly. Refer to [Step 7. Download the feed processing report](doc:feeds-api-v2021-06-30-use-case-guide#step-7-download-the-feed-processing-report) in the use case guide, where sample code is provided..</param>
        public FeedDocument(string feedDocumentId = default(string), string url = default(string), CompressionAlgorithmEnum? compressionAlgorithm = default(CompressionAlgorithmEnum?))
        {
            // to ensure "feedDocumentId" is required (not null)
            if (feedDocumentId == null)
            {
                throw new ArgumentNullException("feedDocumentId is a required property for FeedDocument and cannot be null");
            }
            this.FeedDocumentId = feedDocumentId;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for FeedDocument and cannot be null");
            }
            this.Url = url;
            this.CompressionAlgorithm = compressionAlgorithm;
        }

        /// <summary>
        /// The identifier for the feed document. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the feed document. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "feedDocumentId", IsRequired = true, EmitDefaultValue = true)]
        public string FeedDocumentId { get; set; }

        /// <summary>
        /// A presigned URL for the feed document. If &#x60;compressionAlgorithm&#x60; is not returned, you can download the feed directly from this URL. This URL expires after 5 minutes.
        /// </summary>
        /// <value>A presigned URL for the feed document. If &#x60;compressionAlgorithm&#x60; is not returned, you can download the feed directly from this URL. This URL expires after 5 minutes.</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeedDocument {\n");
            sb.Append("  FeedDocumentId: ").Append(FeedDocumentId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  CompressionAlgorithm: ").Append(CompressionAlgorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
