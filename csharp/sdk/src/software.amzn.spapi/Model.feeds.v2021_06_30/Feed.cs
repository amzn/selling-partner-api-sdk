/*
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * The version of the OpenAPI document: 2021-06-30
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.feeds.v2021_06_30
{
    /// <summary>
    /// Detailed information about the feed.
    /// </summary>
    [DataContract(Name = "Feed")]
    public partial class Feed : IValidatableObject
    {
        /// <summary>
        /// The processing status of the feed.
        /// </summary>
        /// <value>The processing status of the feed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingStatusEnum
        {
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 1,

            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 2,

            /// <summary>
            /// Enum FATAL for value: FATAL
            /// </summary>
            [EnumMember(Value = "FATAL")]
            FATAL = 3,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 4,

            /// <summary>
            /// Enum INQUEUE for value: IN_QUEUE
            /// </summary>
            [EnumMember(Value = "IN_QUEUE")]
            INQUEUE = 5
        }


        /// <summary>
        /// The processing status of the feed.
        /// </summary>
        /// <value>The processing status of the feed.</value>
        [DataMember(Name = "processingStatus", IsRequired = true, EmitDefaultValue = true)]
        public ProcessingStatusEnum ProcessingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Feed" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Feed() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Feed" /> class.
        /// </summary>
        /// <param name="feedId">The identifier for the feed. This identifier is unique only in combination with a seller ID. (required).</param>
        /// <param name="feedType">The feed type. (required).</param>
        /// <param name="marketplaceIds">A list of identifiers for the marketplaces that the feed is applied to..</param>
        /// <param name="createdTime">The date and time when the feed was created, in ISO 8601 date time format. (required).</param>
        /// <param name="processingStatus">The processing status of the feed. (required).</param>
        /// <param name="processingStartTime">The date and time when feed processing started, in ISO 8601 date time format..</param>
        /// <param name="processingEndTime">The date and time when feed processing completed, in ISO 8601 date time format..</param>
        /// <param name="resultFeedDocumentId">The identifier for the feed document. This identifier is unique only in combination with a seller ID..</param>
        public Feed(string feedId = default(string), string feedType = default(string), List<string> marketplaceIds = default(List<string>), DateTime createdTime = default(DateTime), ProcessingStatusEnum processingStatus = default(ProcessingStatusEnum), DateTime processingStartTime = default(DateTime), DateTime processingEndTime = default(DateTime), string resultFeedDocumentId = default(string))
        {
            // to ensure "feedId" is required (not null)
            if (feedId == null)
            {
                throw new ArgumentNullException("feedId is a required property for Feed and cannot be null");
            }
            this.FeedId = feedId;
            // to ensure "feedType" is required (not null)
            if (feedType == null)
            {
                throw new ArgumentNullException("feedType is a required property for Feed and cannot be null");
            }
            this.FeedType = feedType;
            this.CreatedTime = createdTime;
            this.ProcessingStatus = processingStatus;
            this.MarketplaceIds = marketplaceIds;
            this.ProcessingStartTime = processingStartTime;
            this.ProcessingEndTime = processingEndTime;
            this.ResultFeedDocumentId = resultFeedDocumentId;
        }

        /// <summary>
        /// The identifier for the feed. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the feed. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "feedId", IsRequired = true, EmitDefaultValue = true)]
        public string FeedId { get; set; }

        /// <summary>
        /// The feed type.
        /// </summary>
        /// <value>The feed type.</value>
        [DataMember(Name = "feedType", IsRequired = true, EmitDefaultValue = true)]
        public string FeedType { get; set; }

        /// <summary>
        /// A list of identifiers for the marketplaces that the feed is applied to.
        /// </summary>
        /// <value>A list of identifiers for the marketplaces that the feed is applied to.</value>
        [DataMember(Name = "marketplaceIds", EmitDefaultValue = false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// The date and time when the feed was created, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the feed was created, in ISO 8601 date time format.</value>
        [DataMember(Name = "createdTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// The date and time when feed processing started, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when feed processing started, in ISO 8601 date time format.</value>
        [DataMember(Name = "processingStartTime", EmitDefaultValue = false)]
        public DateTime ProcessingStartTime { get; set; }

        /// <summary>
        /// The date and time when feed processing completed, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when feed processing completed, in ISO 8601 date time format.</value>
        [DataMember(Name = "processingEndTime", EmitDefaultValue = false)]
        public DateTime ProcessingEndTime { get; set; }

        /// <summary>
        /// The identifier for the feed document. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the feed document. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "resultFeedDocumentId", EmitDefaultValue = false)]
        public string ResultFeedDocumentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Feed {\n");
            sb.Append("  FeedId: ").Append(FeedId).Append("\n");
            sb.Append("  FeedType: ").Append(FeedType).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  ProcessingStatus: ").Append(ProcessingStatus).Append("\n");
            sb.Append("  ProcessingStartTime: ").Append(ProcessingStartTime).Append("\n");
            sb.Append("  ProcessingEndTime: ").Append(ProcessingEndTime).Append("\n");
            sb.Append("  ResultFeedDocumentId: ").Append(ResultFeedDocumentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
