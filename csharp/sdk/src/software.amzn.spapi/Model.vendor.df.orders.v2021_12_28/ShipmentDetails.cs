/*
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.df.orders.v2021_12_28
{
    /// <summary>
    /// Shipment details required for the shipment.
    /// </summary>
    [DataContract(Name = "ShipmentDetails")]
    public partial class ShipmentDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDetails" /> class.
        /// </summary>
        /// <param name="isPriorityShipment">When true, this is a priority shipment. (required).</param>
        /// <param name="isScheduledDeliveryShipment">When true, this order is part of a scheduled delivery program..</param>
        /// <param name="isPslipRequired">When true, a packing slip is required to be sent to the customer. (required).</param>
        /// <param name="isGift">When true, the order contain a gift. Include the gift message and gift wrap information..</param>
        /// <param name="shipMethod">Ship method to be used for shipping the order. Amazon defines ship method codes indicating the shipping carrier and shipment service level. To see the full list of ship methods in use, including both the code and the friendly name, search the &#39;Help&#39; section on Vendor Central for &#39;ship methods&#39;. (required).</param>
        /// <param name="shipmentDates">shipmentDates (required).</param>
        /// <param name="messageToCustomer">Message to customer for order status. (required).</param>
        public ShipmentDetails(bool isPriorityShipment = default(bool), bool isScheduledDeliveryShipment = default(bool), bool isPslipRequired = default(bool), bool isGift = default(bool), string shipMethod = default(string), ShipmentDates shipmentDates = default(ShipmentDates), string messageToCustomer = default(string))
        {
            this.IsPriorityShipment = isPriorityShipment;
            this.IsPslipRequired = isPslipRequired;
            // to ensure "shipMethod" is required (not null)
            if (shipMethod == null)
            {
                throw new ArgumentNullException("shipMethod is a required property for ShipmentDetails and cannot be null");
            }
            this.ShipMethod = shipMethod;
            // to ensure "shipmentDates" is required (not null)
            if (shipmentDates == null)
            {
                throw new ArgumentNullException("shipmentDates is a required property for ShipmentDetails and cannot be null");
            }
            this.ShipmentDates = shipmentDates;
            // to ensure "messageToCustomer" is required (not null)
            if (messageToCustomer == null)
            {
                throw new ArgumentNullException("messageToCustomer is a required property for ShipmentDetails and cannot be null");
            }
            this.MessageToCustomer = messageToCustomer;
            this.IsScheduledDeliveryShipment = isScheduledDeliveryShipment;
            this.IsGift = isGift;
        }

        /// <summary>
        /// When true, this is a priority shipment.
        /// </summary>
        /// <value>When true, this is a priority shipment.</value>
        [DataMember(Name = "isPriorityShipment", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPriorityShipment { get; set; }

        /// <summary>
        /// When true, this order is part of a scheduled delivery program.
        /// </summary>
        /// <value>When true, this order is part of a scheduled delivery program.</value>
        [DataMember(Name = "isScheduledDeliveryShipment", EmitDefaultValue = true)]
        public bool IsScheduledDeliveryShipment { get; set; }

        /// <summary>
        /// When true, a packing slip is required to be sent to the customer.
        /// </summary>
        /// <value>When true, a packing slip is required to be sent to the customer.</value>
        [DataMember(Name = "isPslipRequired", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPslipRequired { get; set; }

        /// <summary>
        /// When true, the order contain a gift. Include the gift message and gift wrap information.
        /// </summary>
        /// <value>When true, the order contain a gift. Include the gift message and gift wrap information.</value>
        [DataMember(Name = "isGift", EmitDefaultValue = true)]
        public bool IsGift { get; set; }

        /// <summary>
        /// Ship method to be used for shipping the order. Amazon defines ship method codes indicating the shipping carrier and shipment service level. To see the full list of ship methods in use, including both the code and the friendly name, search the &#39;Help&#39; section on Vendor Central for &#39;ship methods&#39;.
        /// </summary>
        /// <value>Ship method to be used for shipping the order. Amazon defines ship method codes indicating the shipping carrier and shipment service level. To see the full list of ship methods in use, including both the code and the friendly name, search the &#39;Help&#39; section on Vendor Central for &#39;ship methods&#39;.</value>
        [DataMember(Name = "shipMethod", IsRequired = true, EmitDefaultValue = true)]
        public string ShipMethod { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentDates
        /// </summary>
        [DataMember(Name = "shipmentDates", IsRequired = true, EmitDefaultValue = true)]
        public ShipmentDates ShipmentDates { get; set; }

        /// <summary>
        /// Message to customer for order status.
        /// </summary>
        /// <value>Message to customer for order status.</value>
        [DataMember(Name = "messageToCustomer", IsRequired = true, EmitDefaultValue = true)]
        public string MessageToCustomer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentDetails {\n");
            sb.Append("  IsPriorityShipment: ").Append(IsPriorityShipment).Append("\n");
            sb.Append("  IsScheduledDeliveryShipment: ").Append(IsScheduledDeliveryShipment).Append("\n");
            sb.Append("  IsPslipRequired: ").Append(IsPslipRequired).Append("\n");
            sb.Append("  IsGift: ").Append(IsGift).Append("\n");
            sb.Append("  ShipMethod: ").Append(ShipMethod).Append("\n");
            sb.Append("  ShipmentDates: ").Append(ShipmentDates).Append("\n");
            sb.Append("  MessageToCustomer: ").Append(MessageToCustomer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
