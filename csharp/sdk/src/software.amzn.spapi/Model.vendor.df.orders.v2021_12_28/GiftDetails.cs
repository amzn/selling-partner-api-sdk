/*
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.df.orders.v2021_12_28
{
    /// <summary>
    /// Gift details for the item.
    /// </summary>
    [DataContract(Name = "GiftDetails")]
    public partial class GiftDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GiftDetails" /> class.
        /// </summary>
        /// <param name="giftMessage">Gift message to be printed in shipment..</param>
        /// <param name="giftWrapId">Gift wrap identifier for the gift wrapping, if any..</param>
        public GiftDetails(string giftMessage = default(string), string giftWrapId = default(string))
        {
            this.GiftMessage = giftMessage;
            this.GiftWrapId = giftWrapId;
        }

        /// <summary>
        /// Gift message to be printed in shipment.
        /// </summary>
        /// <value>Gift message to be printed in shipment.</value>
        [DataMember(Name = "giftMessage", EmitDefaultValue = false)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Gift wrap identifier for the gift wrapping, if any.
        /// </summary>
        /// <value>Gift wrap identifier for the gift wrapping, if any.</value>
        [DataMember(Name = "giftWrapId", EmitDefaultValue = false)]
        public string GiftWrapId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GiftDetails {\n");
            sb.Append("  GiftMessage: ").Append(GiftMessage).Append("\n");
            sb.Append("  GiftWrapId: ").Append(GiftWrapId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
