/*
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.df.orders.v2021_12_28
{
    /// <summary>
    /// Details of an order.
    /// </summary>
    [DataContract(Name = "OrderDetails")]
    public partial class OrderDetails : IValidatableObject
    {
        /// <summary>
        /// Current status of the order.
        /// </summary>
        /// <value>Current status of the order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderStatusEnum
        {
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 1,

            /// <summary>
            /// Enum SHIPPED for value: SHIPPED
            /// </summary>
            [EnumMember(Value = "SHIPPED")]
            SHIPPED = 2,

            /// <summary>
            /// Enum ACCEPTED for value: ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED = 3,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 4
        }


        /// <summary>
        /// Current status of the order.
        /// </summary>
        /// <value>Current status of the order.</value>
        [DataMember(Name = "orderStatus", EmitDefaultValue = false)]
        public OrderStatusEnum? OrderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDetails" /> class.
        /// </summary>
        /// <param name="customerOrderNumber">The customer order number. (required).</param>
        /// <param name="orderDate">The date the order was placed. This  field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed. (required).</param>
        /// <param name="orderStatus">Current status of the order..</param>
        /// <param name="shipmentDetails">shipmentDetails (required).</param>
        /// <param name="taxTotal">taxTotal.</param>
        /// <param name="sellingParty">sellingParty (required).</param>
        /// <param name="shipFromParty">shipFromParty (required).</param>
        /// <param name="shipToParty">shipToParty (required).</param>
        /// <param name="billToParty">billToParty (required).</param>
        /// <param name="items">A list of items in this purchase order. (required).</param>
        public OrderDetails(string customerOrderNumber = default(string), DateTime orderDate = default(DateTime), OrderStatusEnum? orderStatus = default(OrderStatusEnum?), ShipmentDetails shipmentDetails = default(ShipmentDetails), TaxItemDetails taxTotal = default(TaxItemDetails), PartyIdentification sellingParty = default(PartyIdentification), PartyIdentification shipFromParty = default(PartyIdentification), Address shipToParty = default(Address), PartyIdentification billToParty = default(PartyIdentification), List<OrderItem> items = default(List<OrderItem>))
        {
            // to ensure "customerOrderNumber" is required (not null)
            if (customerOrderNumber == null)
            {
                throw new ArgumentNullException("customerOrderNumber is a required property for OrderDetails and cannot be null");
            }
            this.CustomerOrderNumber = customerOrderNumber;
            this.OrderDate = orderDate;
            // to ensure "shipmentDetails" is required (not null)
            if (shipmentDetails == null)
            {
                throw new ArgumentNullException("shipmentDetails is a required property for OrderDetails and cannot be null");
            }
            this.ShipmentDetails = shipmentDetails;
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new ArgumentNullException("sellingParty is a required property for OrderDetails and cannot be null");
            }
            this.SellingParty = sellingParty;
            // to ensure "shipFromParty" is required (not null)
            if (shipFromParty == null)
            {
                throw new ArgumentNullException("shipFromParty is a required property for OrderDetails and cannot be null");
            }
            this.ShipFromParty = shipFromParty;
            // to ensure "shipToParty" is required (not null)
            if (shipToParty == null)
            {
                throw new ArgumentNullException("shipToParty is a required property for OrderDetails and cannot be null");
            }
            this.ShipToParty = shipToParty;
            // to ensure "billToParty" is required (not null)
            if (billToParty == null)
            {
                throw new ArgumentNullException("billToParty is a required property for OrderDetails and cannot be null");
            }
            this.BillToParty = billToParty;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for OrderDetails and cannot be null");
            }
            this.Items = items;
            this.OrderStatus = orderStatus;
            this.TaxTotal = taxTotal;
        }

        /// <summary>
        /// The customer order number.
        /// </summary>
        /// <value>The customer order number.</value>
        [DataMember(Name = "customerOrderNumber", IsRequired = true, EmitDefaultValue = true)]
        public string CustomerOrderNumber { get; set; }

        /// <summary>
        /// The date the order was placed. This  field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed.
        /// </summary>
        /// <value>The date the order was placed. This  field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed.</value>
        [DataMember(Name = "orderDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentDetails
        /// </summary>
        [DataMember(Name = "shipmentDetails", IsRequired = true, EmitDefaultValue = true)]
        public ShipmentDetails ShipmentDetails { get; set; }

        /// <summary>
        /// Gets or Sets TaxTotal
        /// </summary>
        [DataMember(Name = "taxTotal", EmitDefaultValue = false)]
        public TaxItemDetails TaxTotal { get; set; }

        /// <summary>
        /// Gets or Sets SellingParty
        /// </summary>
        [DataMember(Name = "sellingParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipFromParty
        /// </summary>
        [DataMember(Name = "shipFromParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipToParty
        /// </summary>
        [DataMember(Name = "shipToParty", IsRequired = true, EmitDefaultValue = true)]
        public Address ShipToParty { get; set; }

        /// <summary>
        /// Gets or Sets BillToParty
        /// </summary>
        [DataMember(Name = "billToParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification BillToParty { get; set; }

        /// <summary>
        /// A list of items in this purchase order.
        /// </summary>
        /// <value>A list of items in this purchase order.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<OrderItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderDetails {\n");
            sb.Append("  CustomerOrderNumber: ").Append(CustomerOrderNumber).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  ShipmentDetails: ").Append(ShipmentDetails).Append("\n");
            sb.Append("  TaxTotal: ").Append(TaxTotal).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  BillToParty: ").Append(BillToParty).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
