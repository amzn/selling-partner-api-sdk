/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v0
{
    /// <summary>
    /// Preparation instructions and who is responsible for the preparation.
    /// </summary>
    [DataContract(Name = "PrepDetails")]
    public partial class PrepDetails : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PrepInstruction
        /// </summary>
        [DataMember(Name = "PrepInstruction", IsRequired = true, EmitDefaultValue = true)]
        public PrepInstruction PrepInstruction { get; set; }

        /// <summary>
        /// Gets or Sets PrepOwner
        /// </summary>
        [DataMember(Name = "PrepOwner", IsRequired = true, EmitDefaultValue = true)]
        public PrepOwner PrepOwner { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrepDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepDetails" /> class.
        /// </summary>
        /// <param name="prepInstruction">prepInstruction (required).</param>
        /// <param name="prepOwner">prepOwner (required).</param>
        public PrepDetails(PrepInstruction prepInstruction = default(PrepInstruction), PrepOwner prepOwner = default(PrepOwner))
        {
            this.PrepInstruction = prepInstruction;
            this.PrepOwner = prepOwner;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepDetails {\n");
            sb.Append("  PrepInstruction: ").Append(PrepInstruction).Append("\n");
            sb.Append("  PrepOwner: ").Append(PrepOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
