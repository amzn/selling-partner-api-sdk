/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v0
{
    /// <summary>
    /// Information about the seller&#39;s inbound shipments. Returned by the listInboundShipments operation.
    /// </summary>
    [DataContract(Name = "InboundShipmentInfo")]
    public partial class InboundShipmentInfo : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ShipmentStatus
        /// </summary>
        [DataMember(Name = "ShipmentStatus", EmitDefaultValue = false)]
        public ShipmentStatus? ShipmentStatus { get; set; }

        /// <summary>
        /// Gets or Sets LabelPrepType
        /// </summary>
        [DataMember(Name = "LabelPrepType", EmitDefaultValue = false)]
        public LabelPrepType? LabelPrepType { get; set; }

        /// <summary>
        /// Gets or Sets BoxContentsSource
        /// </summary>
        [DataMember(Name = "BoxContentsSource", EmitDefaultValue = false)]
        public BoxContentsSource? BoxContentsSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InboundShipmentInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentInfo" /> class.
        /// </summary>
        /// <param name="shipmentId">The shipment identifier submitted in the request..</param>
        /// <param name="shipmentName">The name for the inbound shipment..</param>
        /// <param name="shipFromAddress">shipFromAddress (required).</param>
        /// <param name="destinationFulfillmentCenterId">An Amazon fulfillment center identifier created by Amazon..</param>
        /// <param name="shipmentStatus">shipmentStatus.</param>
        /// <param name="labelPrepType">labelPrepType.</param>
        /// <param name="areCasesRequired">Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired &#x3D; true for an inbound shipment, all items in the inbound shipment must be case packed. (required).</param>
        /// <param name="confirmedNeedByDate">Type containing date in string format.</param>
        /// <param name="boxContentsSource">boxContentsSource.</param>
        /// <param name="estimatedBoxContentsFee">estimatedBoxContentsFee.</param>
        public InboundShipmentInfo(string shipmentId = default(string), string shipmentName = default(string), Address shipFromAddress = default(Address), string destinationFulfillmentCenterId = default(string), ShipmentStatus? shipmentStatus = default(ShipmentStatus?), LabelPrepType? labelPrepType = default(LabelPrepType?), bool areCasesRequired = default(bool), DateOnly confirmedNeedByDate = default(DateOnly), BoxContentsSource? boxContentsSource = default(BoxContentsSource?), BoxContentsFeeDetails estimatedBoxContentsFee = default(BoxContentsFeeDetails))
        {
            // to ensure "shipFromAddress" is required (not null)
            if (shipFromAddress == null)
            {
                throw new ArgumentNullException("shipFromAddress is a required property for InboundShipmentInfo and cannot be null");
            }
            this.ShipFromAddress = shipFromAddress;
            this.AreCasesRequired = areCasesRequired;
            this.ShipmentId = shipmentId;
            this.ShipmentName = shipmentName;
            this.DestinationFulfillmentCenterId = destinationFulfillmentCenterId;
            this.ShipmentStatus = shipmentStatus;
            this.LabelPrepType = labelPrepType;
            this.ConfirmedNeedByDate = confirmedNeedByDate;
            this.BoxContentsSource = boxContentsSource;
            this.EstimatedBoxContentsFee = estimatedBoxContentsFee;
        }

        /// <summary>
        /// The shipment identifier submitted in the request.
        /// </summary>
        /// <value>The shipment identifier submitted in the request.</value>
        [DataMember(Name = "ShipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// The name for the inbound shipment.
        /// </summary>
        /// <value>The name for the inbound shipment.</value>
        [DataMember(Name = "ShipmentName", EmitDefaultValue = false)]
        public string ShipmentName { get; set; }

        /// <summary>
        /// Gets or Sets ShipFromAddress
        /// </summary>
        [DataMember(Name = "ShipFromAddress", IsRequired = true, EmitDefaultValue = true)]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        /// An Amazon fulfillment center identifier created by Amazon.
        /// </summary>
        /// <value>An Amazon fulfillment center identifier created by Amazon.</value>
        [DataMember(Name = "DestinationFulfillmentCenterId", EmitDefaultValue = false)]
        public string DestinationFulfillmentCenterId { get; set; }

        /// <summary>
        /// Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired &#x3D; true for an inbound shipment, all items in the inbound shipment must be case packed.
        /// </summary>
        /// <value>Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired &#x3D; true for an inbound shipment, all items in the inbound shipment must be case packed.</value>
        [DataMember(Name = "AreCasesRequired", IsRequired = true, EmitDefaultValue = true)]
        public bool AreCasesRequired { get; set; }

        /// <summary>
        /// Type containing date in string format
        /// </summary>
        /// <value>Type containing date in string format</value>
        [DataMember(Name = "ConfirmedNeedByDate", EmitDefaultValue = false)]
        public DateOnly ConfirmedNeedByDate { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedBoxContentsFee
        /// </summary>
        [DataMember(Name = "EstimatedBoxContentsFee", EmitDefaultValue = false)]
        public BoxContentsFeeDetails EstimatedBoxContentsFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboundShipmentInfo {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentName: ").Append(ShipmentName).Append("\n");
            sb.Append("  ShipFromAddress: ").Append(ShipFromAddress).Append("\n");
            sb.Append("  DestinationFulfillmentCenterId: ").Append(DestinationFulfillmentCenterId).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  LabelPrepType: ").Append(LabelPrepType).Append("\n");
            sb.Append("  AreCasesRequired: ").Append(AreCasesRequired).Append("\n");
            sb.Append("  ConfirmedNeedByDate: ").Append(ConfirmedNeedByDate).Append("\n");
            sb.Append("  BoxContentsSource: ").Append(BoxContentsSource).Append("\n");
            sb.Append("  EstimatedBoxContentsFee: ").Append(EstimatedBoxContentsFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
