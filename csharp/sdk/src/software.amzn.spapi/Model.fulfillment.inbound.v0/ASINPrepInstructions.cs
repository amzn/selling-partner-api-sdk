/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v0
{
    /// <summary>
    /// Item preparation instructions to help with item sourcing decisions.
    /// </summary>
    [DataContract(Name = "ASINPrepInstructions")]
    public partial class ASINPrepInstructions : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BarcodeInstruction
        /// </summary>
        [DataMember(Name = "BarcodeInstruction", EmitDefaultValue = false)]
        public BarcodeInstruction? BarcodeInstruction { get; set; }

        /// <summary>
        /// Gets or Sets PrepGuidance
        /// </summary>
        [DataMember(Name = "PrepGuidance", EmitDefaultValue = false)]
        public PrepGuidance? PrepGuidance { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ASINPrepInstructions" /> class.
        /// </summary>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="barcodeInstruction">barcodeInstruction.</param>
        /// <param name="prepGuidance">prepGuidance.</param>
        /// <param name="prepInstructionList">A list of preparation instructions to help with item sourcing decisions..</param>
        public ASINPrepInstructions(string aSIN = default(string), BarcodeInstruction? barcodeInstruction = default(BarcodeInstruction?), PrepGuidance? prepGuidance = default(PrepGuidance?), List<PrepInstruction> prepInstructionList = default(List<PrepInstruction>))
        {
            this.ASIN = aSIN;
            this.BarcodeInstruction = barcodeInstruction;
            this.PrepGuidance = prepGuidance;
            this.PrepInstructionList = prepInstructionList;
        }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }

        /// <summary>
        /// A list of preparation instructions to help with item sourcing decisions.
        /// </summary>
        /// <value>A list of preparation instructions to help with item sourcing decisions.</value>
        [DataMember(Name = "PrepInstructionList", EmitDefaultValue = false)]
        public List<PrepInstruction> PrepInstructionList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ASINPrepInstructions {\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  BarcodeInstruction: ").Append(BarcodeInstruction).Append("\n");
            sb.Append("  PrepGuidance: ").Append(PrepGuidance).Append("\n");
            sb.Append("  PrepInstructionList: ").Append(PrepInstructionList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
