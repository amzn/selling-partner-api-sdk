/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v0
{
    /// <summary>
    /// Result for the get prep instructions operation
    /// </summary>
    [DataContract(Name = "GetPrepInstructionsResult")]
    public partial class GetPrepInstructionsResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPrepInstructionsResult" /> class.
        /// </summary>
        /// <param name="sKUPrepInstructionsList">A list of SKU labeling requirements and item preparation instructions..</param>
        /// <param name="invalidSKUList">A list of invalid SKU values and the reason they are invalid..</param>
        /// <param name="aSINPrepInstructionsList">A list of item preparation instructions..</param>
        /// <param name="invalidASINList">A list of invalid ASIN values and the reasons they are invalid..</param>
        public GetPrepInstructionsResult(List<SKUPrepInstructions> sKUPrepInstructionsList = default(List<SKUPrepInstructions>), List<InvalidSKU> invalidSKUList = default(List<InvalidSKU>), List<ASINPrepInstructions> aSINPrepInstructionsList = default(List<ASINPrepInstructions>), List<InvalidASIN> invalidASINList = default(List<InvalidASIN>))
        {
            this.SKUPrepInstructionsList = sKUPrepInstructionsList;
            this.InvalidSKUList = invalidSKUList;
            this.ASINPrepInstructionsList = aSINPrepInstructionsList;
            this.InvalidASINList = invalidASINList;
        }

        /// <summary>
        /// A list of SKU labeling requirements and item preparation instructions.
        /// </summary>
        /// <value>A list of SKU labeling requirements and item preparation instructions.</value>
        [DataMember(Name = "SKUPrepInstructionsList", EmitDefaultValue = false)]
        public List<SKUPrepInstructions> SKUPrepInstructionsList { get; set; }

        /// <summary>
        /// A list of invalid SKU values and the reason they are invalid.
        /// </summary>
        /// <value>A list of invalid SKU values and the reason they are invalid.</value>
        [DataMember(Name = "InvalidSKUList", EmitDefaultValue = false)]
        public List<InvalidSKU> InvalidSKUList { get; set; }

        /// <summary>
        /// A list of item preparation instructions.
        /// </summary>
        /// <value>A list of item preparation instructions.</value>
        [DataMember(Name = "ASINPrepInstructionsList", EmitDefaultValue = false)]
        public List<ASINPrepInstructions> ASINPrepInstructionsList { get; set; }

        /// <summary>
        /// A list of invalid ASIN values and the reasons they are invalid.
        /// </summary>
        /// <value>A list of invalid ASIN values and the reasons they are invalid.</value>
        [DataMember(Name = "InvalidASINList", EmitDefaultValue = false)]
        public List<InvalidASIN> InvalidASINList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetPrepInstructionsResult {\n");
            sb.Append("  SKUPrepInstructionsList: ").Append(SKUPrepInstructionsList).Append("\n");
            sb.Append("  InvalidSKUList: ").Append(InvalidSKUList).Append("\n");
            sb.Append("  ASINPrepInstructionsList: ").Append(ASINPrepInstructionsList).Append("\n");
            sb.Append("  InvalidASINList: ").Append(InvalidASINList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
