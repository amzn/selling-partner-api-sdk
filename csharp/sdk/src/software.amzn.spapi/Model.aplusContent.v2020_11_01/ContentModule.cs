/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// An A+ Content module. An A+ Content document is composed of content modules. The &#x60;contentModuleType&#x60; property selects which content module types to use.
    /// </summary>
    [DataContract(Name = "ContentModule")]
    public partial class ContentModule : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ContentModuleType
        /// </summary>
        [DataMember(Name = "contentModuleType", IsRequired = true, EmitDefaultValue = true)]
        public ContentModuleType ContentModuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentModule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentModule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentModule" /> class.
        /// </summary>
        /// <param name="contentModuleType">contentModuleType (required).</param>
        /// <param name="standardCompanyLogo">standardCompanyLogo.</param>
        /// <param name="standardComparisonTable">standardComparisonTable.</param>
        /// <param name="standardFourImageText">standardFourImageText.</param>
        /// <param name="standardFourImageTextQuadrant">standardFourImageTextQuadrant.</param>
        /// <param name="standardHeaderImageText">standardHeaderImageText.</param>
        /// <param name="standardImageSidebar">standardImageSidebar.</param>
        /// <param name="standardImageTextOverlay">standardImageTextOverlay.</param>
        /// <param name="standardMultipleImageText">standardMultipleImageText.</param>
        /// <param name="standardProductDescription">standardProductDescription.</param>
        /// <param name="standardSingleImageHighlights">standardSingleImageHighlights.</param>
        /// <param name="standardSingleImageSpecsDetail">standardSingleImageSpecsDetail.</param>
        /// <param name="standardSingleSideImage">standardSingleSideImage.</param>
        /// <param name="standardTechSpecs">standardTechSpecs.</param>
        /// <param name="standardText">standardText.</param>
        /// <param name="standardThreeImageText">standardThreeImageText.</param>
        public ContentModule(ContentModuleType contentModuleType = default(ContentModuleType), StandardCompanyLogoModule standardCompanyLogo = default(StandardCompanyLogoModule), StandardComparisonTableModule standardComparisonTable = default(StandardComparisonTableModule), StandardFourImageTextModule standardFourImageText = default(StandardFourImageTextModule), StandardFourImageTextQuadrantModule standardFourImageTextQuadrant = default(StandardFourImageTextQuadrantModule), StandardHeaderImageTextModule standardHeaderImageText = default(StandardHeaderImageTextModule), StandardImageSidebarModule standardImageSidebar = default(StandardImageSidebarModule), StandardImageTextOverlayModule standardImageTextOverlay = default(StandardImageTextOverlayModule), StandardMultipleImageTextModule standardMultipleImageText = default(StandardMultipleImageTextModule), StandardProductDescriptionModule standardProductDescription = default(StandardProductDescriptionModule), StandardSingleImageHighlightsModule standardSingleImageHighlights = default(StandardSingleImageHighlightsModule), StandardSingleImageSpecsDetailModule standardSingleImageSpecsDetail = default(StandardSingleImageSpecsDetailModule), StandardSingleSideImageModule standardSingleSideImage = default(StandardSingleSideImageModule), StandardTechSpecsModule standardTechSpecs = default(StandardTechSpecsModule), StandardTextModule standardText = default(StandardTextModule), StandardThreeImageTextModule standardThreeImageText = default(StandardThreeImageTextModule))
        {
            this.ContentModuleType = contentModuleType;
            this.StandardCompanyLogo = standardCompanyLogo;
            this.StandardComparisonTable = standardComparisonTable;
            this.StandardFourImageText = standardFourImageText;
            this.StandardFourImageTextQuadrant = standardFourImageTextQuadrant;
            this.StandardHeaderImageText = standardHeaderImageText;
            this.StandardImageSidebar = standardImageSidebar;
            this.StandardImageTextOverlay = standardImageTextOverlay;
            this.StandardMultipleImageText = standardMultipleImageText;
            this.StandardProductDescription = standardProductDescription;
            this.StandardSingleImageHighlights = standardSingleImageHighlights;
            this.StandardSingleImageSpecsDetail = standardSingleImageSpecsDetail;
            this.StandardSingleSideImage = standardSingleSideImage;
            this.StandardTechSpecs = standardTechSpecs;
            this.StandardText = standardText;
            this.StandardThreeImageText = standardThreeImageText;
        }

        /// <summary>
        /// Gets or Sets StandardCompanyLogo
        /// </summary>
        [DataMember(Name = "standardCompanyLogo", EmitDefaultValue = false)]
        public StandardCompanyLogoModule StandardCompanyLogo { get; set; }

        /// <summary>
        /// Gets or Sets StandardComparisonTable
        /// </summary>
        [DataMember(Name = "standardComparisonTable", EmitDefaultValue = false)]
        public StandardComparisonTableModule StandardComparisonTable { get; set; }

        /// <summary>
        /// Gets or Sets StandardFourImageText
        /// </summary>
        [DataMember(Name = "standardFourImageText", EmitDefaultValue = false)]
        public StandardFourImageTextModule StandardFourImageText { get; set; }

        /// <summary>
        /// Gets or Sets StandardFourImageTextQuadrant
        /// </summary>
        [DataMember(Name = "standardFourImageTextQuadrant", EmitDefaultValue = false)]
        public StandardFourImageTextQuadrantModule StandardFourImageTextQuadrant { get; set; }

        /// <summary>
        /// Gets or Sets StandardHeaderImageText
        /// </summary>
        [DataMember(Name = "standardHeaderImageText", EmitDefaultValue = false)]
        public StandardHeaderImageTextModule StandardHeaderImageText { get; set; }

        /// <summary>
        /// Gets or Sets StandardImageSidebar
        /// </summary>
        [DataMember(Name = "standardImageSidebar", EmitDefaultValue = false)]
        public StandardImageSidebarModule StandardImageSidebar { get; set; }

        /// <summary>
        /// Gets or Sets StandardImageTextOverlay
        /// </summary>
        [DataMember(Name = "standardImageTextOverlay", EmitDefaultValue = false)]
        public StandardImageTextOverlayModule StandardImageTextOverlay { get; set; }

        /// <summary>
        /// Gets or Sets StandardMultipleImageText
        /// </summary>
        [DataMember(Name = "standardMultipleImageText", EmitDefaultValue = false)]
        public StandardMultipleImageTextModule StandardMultipleImageText { get; set; }

        /// <summary>
        /// Gets or Sets StandardProductDescription
        /// </summary>
        [DataMember(Name = "standardProductDescription", EmitDefaultValue = false)]
        public StandardProductDescriptionModule StandardProductDescription { get; set; }

        /// <summary>
        /// Gets or Sets StandardSingleImageHighlights
        /// </summary>
        [DataMember(Name = "standardSingleImageHighlights", EmitDefaultValue = false)]
        public StandardSingleImageHighlightsModule StandardSingleImageHighlights { get; set; }

        /// <summary>
        /// Gets or Sets StandardSingleImageSpecsDetail
        /// </summary>
        [DataMember(Name = "standardSingleImageSpecsDetail", EmitDefaultValue = false)]
        public StandardSingleImageSpecsDetailModule StandardSingleImageSpecsDetail { get; set; }

        /// <summary>
        /// Gets or Sets StandardSingleSideImage
        /// </summary>
        [DataMember(Name = "standardSingleSideImage", EmitDefaultValue = false)]
        public StandardSingleSideImageModule StandardSingleSideImage { get; set; }

        /// <summary>
        /// Gets or Sets StandardTechSpecs
        /// </summary>
        [DataMember(Name = "standardTechSpecs", EmitDefaultValue = false)]
        public StandardTechSpecsModule StandardTechSpecs { get; set; }

        /// <summary>
        /// Gets or Sets StandardText
        /// </summary>
        [DataMember(Name = "standardText", EmitDefaultValue = false)]
        public StandardTextModule StandardText { get; set; }

        /// <summary>
        /// Gets or Sets StandardThreeImageText
        /// </summary>
        [DataMember(Name = "standardThreeImageText", EmitDefaultValue = false)]
        public StandardThreeImageTextModule StandardThreeImageText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentModule {\n");
            sb.Append("  ContentModuleType: ").Append(ContentModuleType).Append("\n");
            sb.Append("  StandardCompanyLogo: ").Append(StandardCompanyLogo).Append("\n");
            sb.Append("  StandardComparisonTable: ").Append(StandardComparisonTable).Append("\n");
            sb.Append("  StandardFourImageText: ").Append(StandardFourImageText).Append("\n");
            sb.Append("  StandardFourImageTextQuadrant: ").Append(StandardFourImageTextQuadrant).Append("\n");
            sb.Append("  StandardHeaderImageText: ").Append(StandardHeaderImageText).Append("\n");
            sb.Append("  StandardImageSidebar: ").Append(StandardImageSidebar).Append("\n");
            sb.Append("  StandardImageTextOverlay: ").Append(StandardImageTextOverlay).Append("\n");
            sb.Append("  StandardMultipleImageText: ").Append(StandardMultipleImageText).Append("\n");
            sb.Append("  StandardProductDescription: ").Append(StandardProductDescription).Append("\n");
            sb.Append("  StandardSingleImageHighlights: ").Append(StandardSingleImageHighlights).Append("\n");
            sb.Append("  StandardSingleImageSpecsDetail: ").Append(StandardSingleImageSpecsDetail).Append("\n");
            sb.Append("  StandardSingleSideImage: ").Append(StandardSingleSideImage).Append("\n");
            sb.Append("  StandardTechSpecs: ").Append(StandardTechSpecs).Append("\n");
            sb.Append("  StandardText: ").Append(StandardText).Append("\n");
            sb.Append("  StandardThreeImageText: ").Append(StandardThreeImageText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
