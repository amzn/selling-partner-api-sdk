/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// Two images, two paragraphs, and two bulleted lists. One image is smaller and displayed in the sidebar.
    /// </summary>
    [DataContract(Name = "StandardImageSidebarModule")]
    public partial class StandardImageSidebarModule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardImageSidebarModule" /> class.
        /// </summary>
        /// <param name="headline">headline.</param>
        /// <param name="imageCaptionBlock">imageCaptionBlock.</param>
        /// <param name="descriptionTextBlock">descriptionTextBlock.</param>
        /// <param name="descriptionListBlock">descriptionListBlock.</param>
        /// <param name="sidebarImageTextBlock">sidebarImageTextBlock.</param>
        /// <param name="sidebarListBlock">sidebarListBlock.</param>
        public StandardImageSidebarModule(TextComponent headline = default(TextComponent), StandardImageCaptionBlock imageCaptionBlock = default(StandardImageCaptionBlock), StandardTextBlock descriptionTextBlock = default(StandardTextBlock), StandardTextListBlock descriptionListBlock = default(StandardTextListBlock), StandardImageTextBlock sidebarImageTextBlock = default(StandardImageTextBlock), StandardTextListBlock sidebarListBlock = default(StandardTextListBlock))
        {
            this.Headline = headline;
            this.ImageCaptionBlock = imageCaptionBlock;
            this.DescriptionTextBlock = descriptionTextBlock;
            this.DescriptionListBlock = descriptionListBlock;
            this.SidebarImageTextBlock = sidebarImageTextBlock;
            this.SidebarListBlock = sidebarListBlock;
        }

        /// <summary>
        /// Gets or Sets Headline
        /// </summary>
        [DataMember(Name = "headline", EmitDefaultValue = false)]
        public TextComponent Headline { get; set; }

        /// <summary>
        /// Gets or Sets ImageCaptionBlock
        /// </summary>
        [DataMember(Name = "imageCaptionBlock", EmitDefaultValue = false)]
        public StandardImageCaptionBlock ImageCaptionBlock { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionTextBlock
        /// </summary>
        [DataMember(Name = "descriptionTextBlock", EmitDefaultValue = false)]
        public StandardTextBlock DescriptionTextBlock { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionListBlock
        /// </summary>
        [DataMember(Name = "descriptionListBlock", EmitDefaultValue = false)]
        public StandardTextListBlock DescriptionListBlock { get; set; }

        /// <summary>
        /// Gets or Sets SidebarImageTextBlock
        /// </summary>
        [DataMember(Name = "sidebarImageTextBlock", EmitDefaultValue = false)]
        public StandardImageTextBlock SidebarImageTextBlock { get; set; }

        /// <summary>
        /// Gets or Sets SidebarListBlock
        /// </summary>
        [DataMember(Name = "sidebarListBlock", EmitDefaultValue = false)]
        public StandardTextListBlock SidebarListBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StandardImageSidebarModule {\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  ImageCaptionBlock: ").Append(ImageCaptionBlock).Append("\n");
            sb.Append("  DescriptionTextBlock: ").Append(DescriptionTextBlock).Append("\n");
            sb.Append("  DescriptionListBlock: ").Append(DescriptionListBlock).Append("\n");
            sb.Append("  SidebarImageTextBlock: ").Append(SidebarImageTextBlock).Append("\n");
            sb.Append("  SidebarListBlock: ").Append(SidebarListBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
