/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// A decorator that is applied to a content string value in order to create rich text.
    /// </summary>
    [DataContract(Name = "Decorator")]
    public partial class Decorator : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public DecoratorType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Decorator" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="offset">The starting value of this decorator within the content string. Use zero (&#x60;0&#x60;) for the first value..</param>
        /// <param name="length">The number of content characters to alter with this decorator. Decorators, such as line breaks, can have zero length and fit between characters..</param>
        /// <param name="depth">The relative intensity or variation of this decorator. Decorators, such as bullet-points, can have multiple indentation depths..</param>
        public Decorator(DecoratorType? type = default(DecoratorType?), int offset = default(int), int length = default(int), int depth = default(int))
        {
            this.Type = type;
            this.Offset = offset;
            this.Length = length;
            this.Depth = depth;
        }

        /// <summary>
        /// The starting value of this decorator within the content string. Use zero (&#x60;0&#x60;) for the first value.
        /// </summary>
        /// <value>The starting value of this decorator within the content string. Use zero (&#x60;0&#x60;) for the first value.</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// The number of content characters to alter with this decorator. Decorators, such as line breaks, can have zero length and fit between characters.
        /// </summary>
        /// <value>The number of content characters to alter with this decorator. Decorators, such as line breaks, can have zero length and fit between characters.</value>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public int Length { get; set; }

        /// <summary>
        /// The relative intensity or variation of this decorator. Decorators, such as bullet-points, can have multiple indentation depths.
        /// </summary>
        /// <value>The relative intensity or variation of this decorator. Decorators, such as bullet-points, can have multiple indentation depths.</value>
        [DataMember(Name = "depth", EmitDefaultValue = false)]
        public int Depth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Decorator {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Offset (int) maximum
            if (this.Offset > (int)10000)
            {
                yield return new ValidationResult("Invalid value for Offset, must be a value less than or equal to 10000.", new [] { "Offset" });
            }

            // Offset (int) minimum
            if (this.Offset < (int)0)
            {
                yield return new ValidationResult("Invalid value for Offset, must be a value greater than or equal to 0.", new [] { "Offset" });
            }

            // Length (int) maximum
            if (this.Length > (int)10000)
            {
                yield return new ValidationResult("Invalid value for Length, must be a value less than or equal to 10000.", new [] { "Length" });
            }

            // Length (int) minimum
            if (this.Length < (int)0)
            {
                yield return new ValidationResult("Invalid value for Length, must be a value greater than or equal to 0.", new [] { "Length" });
            }

            // Depth (int) maximum
            if (this.Depth > (int)100)
            {
                yield return new ValidationResult("Invalid value for Depth, must be a value less than or equal to 100.", new [] { "Depth" });
            }

            // Depth (int) minimum
            if (this.Depth < (int)0)
            {
                yield return new ValidationResult("Invalid value for Depth, must be a value greater than or equal to 0.", new [] { "Depth" });
            }

            yield break;
        }
    }

}
