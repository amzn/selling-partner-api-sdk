/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// Three standard images with text, presented across a single row.
    /// </summary>
    [DataContract(Name = "StandardThreeImageTextModule")]
    public partial class StandardThreeImageTextModule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardThreeImageTextModule" /> class.
        /// </summary>
        /// <param name="headline">headline.</param>
        /// <param name="block1">block1.</param>
        /// <param name="block2">block2.</param>
        /// <param name="block3">block3.</param>
        public StandardThreeImageTextModule(TextComponent headline = default(TextComponent), StandardImageTextBlock block1 = default(StandardImageTextBlock), StandardImageTextBlock block2 = default(StandardImageTextBlock), StandardImageTextBlock block3 = default(StandardImageTextBlock))
        {
            this.Headline = headline;
            this.Block1 = block1;
            this.Block2 = block2;
            this.Block3 = block3;
        }

        /// <summary>
        /// Gets or Sets Headline
        /// </summary>
        [DataMember(Name = "headline", EmitDefaultValue = false)]
        public TextComponent Headline { get; set; }

        /// <summary>
        /// Gets or Sets Block1
        /// </summary>
        [DataMember(Name = "block1", EmitDefaultValue = false)]
        public StandardImageTextBlock Block1 { get; set; }

        /// <summary>
        /// Gets or Sets Block2
        /// </summary>
        [DataMember(Name = "block2", EmitDefaultValue = false)]
        public StandardImageTextBlock Block2 { get; set; }

        /// <summary>
        /// Gets or Sets Block3
        /// </summary>
        [DataMember(Name = "block3", EmitDefaultValue = false)]
        public StandardImageTextBlock Block3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StandardThreeImageTextModule {\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  Block1: ").Append(Block1).Append("\n");
            sb.Append("  Block2: ").Append(Block2).Append("\n");
            sb.Append("  Block3: ").Append(Block3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
