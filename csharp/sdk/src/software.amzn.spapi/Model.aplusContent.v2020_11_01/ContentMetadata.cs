/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// The A+ Content document&#39;s metadata.
    /// </summary>
    [DataContract(Name = "ContentMetadata")]
    public partial class ContentMetadata : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public ContentStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentMetadata" /> class.
        /// </summary>
        /// <param name="name">The A+ Content document&#39;s name. (required).</param>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="badgeSet">The set of content badges. (required).</param>
        /// <param name="updateTime">The approximate age of the A+ Content document and metadata. (required).</param>
        public ContentMetadata(string name = default(string), string marketplaceId = default(string), ContentStatus status = default(ContentStatus), List<ContentBadge> badgeSet = default(List<ContentBadge>), DateTime updateTime = default(DateTime))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ContentMetadata and cannot be null");
            }
            this.Name = name;
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for ContentMetadata and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            this.Status = status;
            // to ensure "badgeSet" is required (not null)
            if (badgeSet == null)
            {
                throw new ArgumentNullException("badgeSet is a required property for ContentMetadata and cannot be null");
            }
            this.BadgeSet = badgeSet;
            this.UpdateTime = updateTime;
        }

        /// <summary>
        /// The A+ Content document&#39;s name.
        /// </summary>
        /// <value>The A+ Content document&#39;s name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
        /// </summary>
        /// <value>The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The set of content badges.
        /// </summary>
        /// <value>The set of content badges.</value>
        [DataMember(Name = "badgeSet", IsRequired = true, EmitDefaultValue = true)]
        public List<ContentBadge> BadgeSet { get; set; }

        /// <summary>
        /// The approximate age of the A+ Content document and metadata.
        /// </summary>
        /// <value>The approximate age of the A+ Content document and metadata.</value>
        [DataMember(Name = "updateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentMetadata {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BadgeSet: ").Append(BadgeSet).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // MarketplaceId (string) minLength
            if (this.MarketplaceId != null && this.MarketplaceId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for MarketplaceId, length must be greater than 1.", new [] { "MarketplaceId" });
            }

            yield break;
        }
    }

}
