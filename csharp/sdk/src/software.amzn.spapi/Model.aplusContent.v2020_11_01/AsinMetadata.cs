/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// The A+ Content ASIN with additional metadata for content management. If you don&#39;t include the &#x60;includedDataSet&#x60; parameter in a call to the &#x60;listContentDocumentAsinRelations&#x60; operation, the related ASINs are returned without metadata.
    /// </summary>
    [DataContract(Name = "AsinMetadata")]
    public partial class AsinMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsinMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AsinMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsinMetadata" /> class.
        /// </summary>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN). (required).</param>
        /// <param name="badgeSet">The set of ASIN badges..</param>
        /// <param name="parent">The Amazon Standard Identification Number (ASIN)..</param>
        /// <param name="title">The title for the ASIN in the Amazon catalog..</param>
        /// <param name="imageUrl">The default image for the ASIN in the Amazon catalog..</param>
        /// <param name="contentReferenceKeySet">A set of content reference keys..</param>
        public AsinMetadata(string asin = default(string), List<AsinBadge> badgeSet = default(List<AsinBadge>), string parent = default(string), string title = default(string), string imageUrl = default(string), List<string> contentReferenceKeySet = default(List<string>))
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new ArgumentNullException("asin is a required property for AsinMetadata and cannot be null");
            }
            this.Asin = asin;
            this.BadgeSet = badgeSet;
            this.Parent = parent;
            this.Title = title;
            this.ImageUrl = imageUrl;
            this.ContentReferenceKeySet = contentReferenceKeySet;
        }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN).
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN).</value>
        [DataMember(Name = "asin", IsRequired = true, EmitDefaultValue = true)]
        public string Asin { get; set; }

        /// <summary>
        /// The set of ASIN badges.
        /// </summary>
        /// <value>The set of ASIN badges.</value>
        [DataMember(Name = "badgeSet", EmitDefaultValue = false)]
        public List<AsinBadge> BadgeSet { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN).
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN).</value>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public string Parent { get; set; }

        /// <summary>
        /// The title for the ASIN in the Amazon catalog.
        /// </summary>
        /// <value>The title for the ASIN in the Amazon catalog.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The default image for the ASIN in the Amazon catalog.
        /// </summary>
        /// <value>The default image for the ASIN in the Amazon catalog.</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// A set of content reference keys.
        /// </summary>
        /// <value>A set of content reference keys.</value>
        [DataMember(Name = "contentReferenceKeySet", EmitDefaultValue = false)]
        public List<string> ContentReferenceKeySet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AsinMetadata {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  BadgeSet: ").Append(BadgeSet).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ContentReferenceKeySet: ").Append(ContentReferenceKeySet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Asin (string) minLength
            if (this.Asin != null && this.Asin.Length < 10)
            {
                yield return new ValidationResult("Invalid value for Asin, length must be greater than 10.", new [] { "Asin" });
            }

            // Parent (string) minLength
            if (this.Parent != null && this.Parent.Length < 10)
            {
                yield return new ValidationResult("Invalid value for Parent, length must be greater than 10.", new [] { "Parent" });
            }

            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            // ImageUrl (string) minLength
            if (this.ImageUrl != null && this.ImageUrl.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ImageUrl, length must be greater than 1.", new [] { "ImageUrl" });
            }

            yield break;
        }
    }

}
