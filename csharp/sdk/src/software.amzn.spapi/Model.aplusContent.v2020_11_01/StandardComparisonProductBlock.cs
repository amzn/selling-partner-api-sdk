/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// The A+ Content standard comparison product block.
    /// </summary>
    [DataContract(Name = "StandardComparisonProductBlock")]
    public partial class StandardComparisonProductBlock : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardComparisonProductBlock" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StandardComparisonProductBlock() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardComparisonProductBlock" /> class.
        /// </summary>
        /// <param name="position">The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module. (required).</param>
        /// <param name="image">image.</param>
        /// <param name="title">The comparison product title..</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN)..</param>
        /// <param name="highlight">When true, indicates that this content block is visually highlighted..</param>
        /// <param name="metrics">Comparison metrics for the product..</param>
        public StandardComparisonProductBlock(int position = default(int), ImageComponent image = default(ImageComponent), string title = default(string), string asin = default(string), bool highlight = default(bool), List<PlainTextItem> metrics = default(List<PlainTextItem>))
        {
            this.Position = position;
            this.Image = image;
            this.Title = title;
            this.Asin = asin;
            this.Highlight = highlight;
            this.Metrics = metrics;
        }

        /// <summary>
        /// The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.
        /// </summary>
        /// <value>The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.</value>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = true)]
        public int Position { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public ImageComponent Image { get; set; }

        /// <summary>
        /// The comparison product title.
        /// </summary>
        /// <value>The comparison product title.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN).
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN).</value>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        /// When true, indicates that this content block is visually highlighted.
        /// </summary>
        /// <value>When true, indicates that this content block is visually highlighted.</value>
        [DataMember(Name = "highlight", EmitDefaultValue = true)]
        public bool Highlight { get; set; }

        /// <summary>
        /// Comparison metrics for the product.
        /// </summary>
        /// <value>Comparison metrics for the product.</value>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public List<PlainTextItem> Metrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StandardComparisonProductBlock {\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Highlight: ").Append(Highlight).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Position (int) maximum
            if (this.Position > (int)6)
            {
                yield return new ValidationResult("Invalid value for Position, must be a value less than or equal to 6.", new [] { "Position" });
            }

            // Position (int) minimum
            if (this.Position < (int)1)
            {
                yield return new ValidationResult("Invalid value for Position, must be a value greater than or equal to 1.", new [] { "Position" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 80)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 80.", new [] { "Title" });
            }

            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            // Asin (string) minLength
            if (this.Asin != null && this.Asin.Length < 10)
            {
                yield return new ValidationResult("Invalid value for Asin, length must be greater than 10.", new [] { "Asin" });
            }

            yield break;
        }
    }

}
