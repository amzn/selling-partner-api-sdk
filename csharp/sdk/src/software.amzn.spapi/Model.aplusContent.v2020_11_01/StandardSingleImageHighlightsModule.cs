/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// A standard image with several paragraphs and a bulleted list.
    /// </summary>
    [DataContract(Name = "StandardSingleImageHighlightsModule")]
    public partial class StandardSingleImageHighlightsModule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardSingleImageHighlightsModule" /> class.
        /// </summary>
        /// <param name="image">image.</param>
        /// <param name="headline">headline.</param>
        /// <param name="textBlock1">textBlock1.</param>
        /// <param name="textBlock2">textBlock2.</param>
        /// <param name="textBlock3">textBlock3.</param>
        /// <param name="bulletedListBlock">bulletedListBlock.</param>
        public StandardSingleImageHighlightsModule(ImageComponent image = default(ImageComponent), TextComponent headline = default(TextComponent), StandardTextBlock textBlock1 = default(StandardTextBlock), StandardTextBlock textBlock2 = default(StandardTextBlock), StandardTextBlock textBlock3 = default(StandardTextBlock), StandardHeaderTextListBlock bulletedListBlock = default(StandardHeaderTextListBlock))
        {
            this.Image = image;
            this.Headline = headline;
            this.TextBlock1 = textBlock1;
            this.TextBlock2 = textBlock2;
            this.TextBlock3 = textBlock3;
            this.BulletedListBlock = bulletedListBlock;
        }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public ImageComponent Image { get; set; }

        /// <summary>
        /// Gets or Sets Headline
        /// </summary>
        [DataMember(Name = "headline", EmitDefaultValue = false)]
        public TextComponent Headline { get; set; }

        /// <summary>
        /// Gets or Sets TextBlock1
        /// </summary>
        [DataMember(Name = "textBlock1", EmitDefaultValue = false)]
        public StandardTextBlock TextBlock1 { get; set; }

        /// <summary>
        /// Gets or Sets TextBlock2
        /// </summary>
        [DataMember(Name = "textBlock2", EmitDefaultValue = false)]
        public StandardTextBlock TextBlock2 { get; set; }

        /// <summary>
        /// Gets or Sets TextBlock3
        /// </summary>
        [DataMember(Name = "textBlock3", EmitDefaultValue = false)]
        public StandardTextBlock TextBlock3 { get; set; }

        /// <summary>
        /// Gets or Sets BulletedListBlock
        /// </summary>
        [DataMember(Name = "bulletedListBlock", EmitDefaultValue = false)]
        public StandardHeaderTextListBlock BulletedListBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StandardSingleImageHighlightsModule {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  TextBlock1: ").Append(TextBlock1).Append("\n");
            sb.Append("  TextBlock2: ").Append(TextBlock2).Append("\n");
            sb.Append("  TextBlock3: ").Append(TextBlock3).Append("\n");
            sb.Append("  BulletedListBlock: ").Append(BulletedListBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
