/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// The A+ Content document. This is the enhanced content that is published to product detail pages.
    /// </summary>
    [DataContract(Name = "ContentDocument")]
    public partial class ContentDocument : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "contentType", IsRequired = true, EmitDefaultValue = true)]
        public ContentType ContentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentDocument" /> class.
        /// </summary>
        /// <param name="name">The A+ Content document name. (required).</param>
        /// <param name="contentType">contentType (required).</param>
        /// <param name="contentSubType">The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type has a subtype, and subtypes can change at any time..</param>
        /// <param name="locale">The IETF language tag, which supports the primary language subtag and one secondary language subtag. The secondary language subtag is usually a regional designation. This doesn&#39;t support subtags other than the primary and secondary subtags. **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$ (required).</param>
        /// <param name="contentModuleList">A list of A+ Content modules. (required).</param>
        public ContentDocument(string name = default(string), ContentType contentType = default(ContentType), string contentSubType = default(string), string locale = default(string), List<ContentModule> contentModuleList = default(List<ContentModule>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ContentDocument and cannot be null");
            }
            this.Name = name;
            this.ContentType = contentType;
            // to ensure "locale" is required (not null)
            if (locale == null)
            {
                throw new ArgumentNullException("locale is a required property for ContentDocument and cannot be null");
            }
            this.Locale = locale;
            // to ensure "contentModuleList" is required (not null)
            if (contentModuleList == null)
            {
                throw new ArgumentNullException("contentModuleList is a required property for ContentDocument and cannot be null");
            }
            this.ContentModuleList = contentModuleList;
            this.ContentSubType = contentSubType;
        }

        /// <summary>
        /// The A+ Content document name.
        /// </summary>
        /// <value>The A+ Content document name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type has a subtype, and subtypes can change at any time.
        /// </summary>
        /// <value>The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type has a subtype, and subtypes can change at any time.</value>
        [DataMember(Name = "contentSubType", EmitDefaultValue = false)]
        public string ContentSubType { get; set; }

        /// <summary>
        /// The IETF language tag, which supports the primary language subtag and one secondary language subtag. The secondary language subtag is usually a regional designation. This doesn&#39;t support subtags other than the primary and secondary subtags. **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
        /// </summary>
        /// <value>The IETF language tag, which supports the primary language subtag and one secondary language subtag. The secondary language subtag is usually a regional designation. This doesn&#39;t support subtags other than the primary and secondary subtags. **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$</value>
        [DataMember(Name = "locale", IsRequired = true, EmitDefaultValue = true)]
        public string Locale { get; set; }

        /// <summary>
        /// A list of A+ Content modules.
        /// </summary>
        /// <value>A list of A+ Content modules.</value>
        [DataMember(Name = "contentModuleList", IsRequired = true, EmitDefaultValue = true)]
        public List<ContentModule> ContentModuleList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentDocument {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ContentSubType: ").Append(ContentSubType).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  ContentModuleList: ").Append(ContentModuleList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // ContentSubType (string) minLength
            if (this.ContentSubType != null && this.ContentSubType.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ContentSubType, length must be greater than 1.", new [] { "ContentSubType" });
            }

            // Locale (string) minLength
            if (this.Locale != null && this.Locale.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Locale, length must be greater than 5.", new [] { "Locale" });
            }

            yield break;
        }
    }

}
