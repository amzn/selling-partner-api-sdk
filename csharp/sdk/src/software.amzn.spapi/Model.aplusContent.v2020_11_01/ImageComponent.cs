/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// A reference to an image, hosted in the A+ Content media library.
    /// </summary>
    [DataContract(Name = "ImageComponent")]
    public partial class ImageComponent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageComponent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImageComponent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageComponent" /> class.
        /// </summary>
        /// <param name="uploadDestinationId">This identifier is provided by the [Uploads API](https://developer-docs.amazon.com/sp-api/reference/welcome-to-api-references). (required).</param>
        /// <param name="imageCropSpecification">imageCropSpecification (required).</param>
        /// <param name="altText">The alternative text for the image. (required).</param>
        public ImageComponent(string uploadDestinationId = default(string), ImageCropSpecification imageCropSpecification = default(ImageCropSpecification), string altText = default(string))
        {
            // to ensure "uploadDestinationId" is required (not null)
            if (uploadDestinationId == null)
            {
                throw new ArgumentNullException("uploadDestinationId is a required property for ImageComponent and cannot be null");
            }
            this.UploadDestinationId = uploadDestinationId;
            // to ensure "imageCropSpecification" is required (not null)
            if (imageCropSpecification == null)
            {
                throw new ArgumentNullException("imageCropSpecification is a required property for ImageComponent and cannot be null");
            }
            this.ImageCropSpecification = imageCropSpecification;
            // to ensure "altText" is required (not null)
            if (altText == null)
            {
                throw new ArgumentNullException("altText is a required property for ImageComponent and cannot be null");
            }
            this.AltText = altText;
        }

        /// <summary>
        /// This identifier is provided by the [Uploads API](https://developer-docs.amazon.com/sp-api/reference/welcome-to-api-references).
        /// </summary>
        /// <value>This identifier is provided by the [Uploads API](https://developer-docs.amazon.com/sp-api/reference/welcome-to-api-references).</value>
        [DataMember(Name = "uploadDestinationId", IsRequired = true, EmitDefaultValue = true)]
        public string UploadDestinationId { get; set; }

        /// <summary>
        /// Gets or Sets ImageCropSpecification
        /// </summary>
        [DataMember(Name = "imageCropSpecification", IsRequired = true, EmitDefaultValue = true)]
        public ImageCropSpecification ImageCropSpecification { get; set; }

        /// <summary>
        /// The alternative text for the image.
        /// </summary>
        /// <value>The alternative text for the image.</value>
        [DataMember(Name = "altText", IsRequired = true, EmitDefaultValue = true)]
        public string AltText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImageComponent {\n");
            sb.Append("  UploadDestinationId: ").Append(UploadDestinationId).Append("\n");
            sb.Append("  ImageCropSpecification: ").Append(ImageCropSpecification).Append("\n");
            sb.Append("  AltText: ").Append(AltText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UploadDestinationId (string) minLength
            if (this.UploadDestinationId != null && this.UploadDestinationId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for UploadDestinationId, length must be greater than 1.", new [] { "UploadDestinationId" });
            }

            // AltText (string) maxLength
            if (this.AltText != null && this.AltText.Length > 100)
            {
                yield return new ValidationResult("Invalid value for AltText, length must be less than 100.", new [] { "AltText" });
            }

            // AltText (string) minLength
            if (this.AltText != null && this.AltText.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AltText, length must be greater than 1.", new [] { "AltText" });
            }

            yield break;
        }
    }

}
