/*
 * Selling Partner API for A+ Content Management
 *
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.aplusContent.v2020_11_01
{
    /// <summary>
    /// The top left corner of the cropped image, specified in the original image&#39;s coordinate space.
    /// </summary>
    [DataContract(Name = "ImageOffsets")]
    public partial class ImageOffsets : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageOffsets" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImageOffsets() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageOffsets" /> class.
        /// </summary>
        /// <param name="x">x (required).</param>
        /// <param name="y">y (required).</param>
        public ImageOffsets(IntegerWithUnits x = default(IntegerWithUnits), IntegerWithUnits y = default(IntegerWithUnits))
        {
            // to ensure "x" is required (not null)
            if (x == null)
            {
                throw new ArgumentNullException("x is a required property for ImageOffsets and cannot be null");
            }
            this.X = x;
            // to ensure "y" is required (not null)
            if (y == null)
            {
                throw new ArgumentNullException("y is a required property for ImageOffsets and cannot be null");
            }
            this.Y = y;
        }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name = "x", IsRequired = true, EmitDefaultValue = true)]
        public IntegerWithUnits X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name = "y", IsRequired = true, EmitDefaultValue = true)]
        public IntegerWithUnits Y { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImageOffsets {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
