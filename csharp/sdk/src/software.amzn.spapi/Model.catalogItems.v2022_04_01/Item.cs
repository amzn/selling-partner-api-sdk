/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.catalogItems.v2022_04_01
{
    /// <summary>
    /// An item in the Amazon catalog.
    /// </summary>
    [DataContract(Name = "Item")]
    public partial class Item : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Item() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="asin">The unique identifier of an item in the Amazon catalog. (required).</param>
        /// <param name="attributes">A JSON object containing structured item attribute data that is keyed by attribute name. Catalog item attributes conform to the related Amazon product type definitions that you can get from the [Product Type Definitions API](https://developer-docs.amazon.com/sp-api/docs/product-type-definitions-api-v2020-09-01-reference)..</param>
        /// <param name="classifications">An array of classifications (browse nodes) that is associated with the item in the Amazon catalog, grouped by &#x60;marketplaceId&#x60;..</param>
        /// <param name="dimensions">An array of dimensions that are associated with the item in the Amazon catalog, grouped by &#x60;marketplaceId&#x60;..</param>
        /// <param name="identifiers">Identifiers associated with the item in the Amazon catalog, such as UPC and EAN identifiers..</param>
        /// <param name="images">The images for an item in the Amazon catalog..</param>
        /// <param name="productTypes">Product types that are associated with the Amazon catalog item..</param>
        /// <param name="relationships">Relationships grouped by &#x60;marketplaceId&#x60; for an Amazon catalog item (for example, variations)..</param>
        /// <param name="salesRanks">Sales ranks of an Amazon catalog item..</param>
        /// <param name="summaries">Summaries of Amazon catalog items..</param>
        /// <param name="vendorDetails">The vendor details that are associated with an Amazon catalog item. Vendor details are only available to vendors..</param>
        public Item(string asin = default(string), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), List<ItemBrowseClassificationsByMarketplace> classifications = default(List<ItemBrowseClassificationsByMarketplace>), List<ItemDimensionsByMarketplace> dimensions = default(List<ItemDimensionsByMarketplace>), List<ItemIdentifiersByMarketplace> identifiers = default(List<ItemIdentifiersByMarketplace>), List<ItemImagesByMarketplace> images = default(List<ItemImagesByMarketplace>), List<ItemProductTypeByMarketplace> productTypes = default(List<ItemProductTypeByMarketplace>), List<ItemRelationshipsByMarketplace> relationships = default(List<ItemRelationshipsByMarketplace>), List<ItemSalesRanksByMarketplace> salesRanks = default(List<ItemSalesRanksByMarketplace>), List<ItemSummaryByMarketplace> summaries = default(List<ItemSummaryByMarketplace>), List<ItemVendorDetailsByMarketplace> vendorDetails = default(List<ItemVendorDetailsByMarketplace>))
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new ArgumentNullException("asin is a required property for Item and cannot be null");
            }
            this.Asin = asin;
            this.Attributes = attributes;
            this.Classifications = classifications;
            this.Dimensions = dimensions;
            this.Identifiers = identifiers;
            this.Images = images;
            this.ProductTypes = productTypes;
            this.Relationships = relationships;
            this.SalesRanks = salesRanks;
            this.Summaries = summaries;
            this.VendorDetails = vendorDetails;
        }

        /// <summary>
        /// The unique identifier of an item in the Amazon catalog.
        /// </summary>
        /// <value>The unique identifier of an item in the Amazon catalog.</value>
        [DataMember(Name = "asin", IsRequired = true, EmitDefaultValue = true)]
        public string Asin { get; set; }

        /// <summary>
        /// A JSON object containing structured item attribute data that is keyed by attribute name. Catalog item attributes conform to the related Amazon product type definitions that you can get from the [Product Type Definitions API](https://developer-docs.amazon.com/sp-api/docs/product-type-definitions-api-v2020-09-01-reference).
        /// </summary>
        /// <value>A JSON object containing structured item attribute data that is keyed by attribute name. Catalog item attributes conform to the related Amazon product type definitions that you can get from the [Product Type Definitions API](https://developer-docs.amazon.com/sp-api/docs/product-type-definitions-api-v2020-09-01-reference).</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// An array of classifications (browse nodes) that is associated with the item in the Amazon catalog, grouped by &#x60;marketplaceId&#x60;.
        /// </summary>
        /// <value>An array of classifications (browse nodes) that is associated with the item in the Amazon catalog, grouped by &#x60;marketplaceId&#x60;.</value>
        [DataMember(Name = "classifications", EmitDefaultValue = false)]
        public List<ItemBrowseClassificationsByMarketplace> Classifications { get; set; }

        /// <summary>
        /// An array of dimensions that are associated with the item in the Amazon catalog, grouped by &#x60;marketplaceId&#x60;.
        /// </summary>
        /// <value>An array of dimensions that are associated with the item in the Amazon catalog, grouped by &#x60;marketplaceId&#x60;.</value>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public List<ItemDimensionsByMarketplace> Dimensions { get; set; }

        /// <summary>
        /// Identifiers associated with the item in the Amazon catalog, such as UPC and EAN identifiers.
        /// </summary>
        /// <value>Identifiers associated with the item in the Amazon catalog, such as UPC and EAN identifiers.</value>
        [DataMember(Name = "identifiers", EmitDefaultValue = false)]
        public List<ItemIdentifiersByMarketplace> Identifiers { get; set; }

        /// <summary>
        /// The images for an item in the Amazon catalog.
        /// </summary>
        /// <value>The images for an item in the Amazon catalog.</value>
        [DataMember(Name = "images", EmitDefaultValue = false)]
        public List<ItemImagesByMarketplace> Images { get; set; }

        /// <summary>
        /// Product types that are associated with the Amazon catalog item.
        /// </summary>
        /// <value>Product types that are associated with the Amazon catalog item.</value>
        [DataMember(Name = "productTypes", EmitDefaultValue = false)]
        public List<ItemProductTypeByMarketplace> ProductTypes { get; set; }

        /// <summary>
        /// Relationships grouped by &#x60;marketplaceId&#x60; for an Amazon catalog item (for example, variations).
        /// </summary>
        /// <value>Relationships grouped by &#x60;marketplaceId&#x60; for an Amazon catalog item (for example, variations).</value>
        [DataMember(Name = "relationships", EmitDefaultValue = false)]
        public List<ItemRelationshipsByMarketplace> Relationships { get; set; }

        /// <summary>
        /// Sales ranks of an Amazon catalog item.
        /// </summary>
        /// <value>Sales ranks of an Amazon catalog item.</value>
        [DataMember(Name = "salesRanks", EmitDefaultValue = false)]
        public List<ItemSalesRanksByMarketplace> SalesRanks { get; set; }

        /// <summary>
        /// Summaries of Amazon catalog items.
        /// </summary>
        /// <value>Summaries of Amazon catalog items.</value>
        [DataMember(Name = "summaries", EmitDefaultValue = false)]
        public List<ItemSummaryByMarketplace> Summaries { get; set; }

        /// <summary>
        /// The vendor details that are associated with an Amazon catalog item. Vendor details are only available to vendors.
        /// </summary>
        /// <value>The vendor details that are associated with an Amazon catalog item. Vendor details are only available to vendors.</value>
        [DataMember(Name = "vendorDetails", EmitDefaultValue = false)]
        public List<ItemVendorDetailsByMarketplace> VendorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Classifications: ").Append(Classifications).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  ProductTypes: ").Append(ProductTypes).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  SalesRanks: ").Append(SalesRanks).Append("\n");
            sb.Append("  Summaries: ").Append(Summaries).Append("\n");
            sb.Append("  VendorDetails: ").Append(VendorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
