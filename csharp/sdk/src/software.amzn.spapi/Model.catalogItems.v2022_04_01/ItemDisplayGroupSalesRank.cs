/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.catalogItems.v2022_04_01
{
    /// <summary>
    /// Sales rank of an Amazon catalog item, grouped by website display group.
    /// </summary>
    [DataContract(Name = "ItemDisplayGroupSalesRank")]
    public partial class ItemDisplayGroupSalesRank : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemDisplayGroupSalesRank" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemDisplayGroupSalesRank() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemDisplayGroupSalesRank" /> class.
        /// </summary>
        /// <param name="websiteDisplayGroup">Name of the website display group that is associated with the sales rank (required).</param>
        /// <param name="title">Name of the sales rank. (required).</param>
        /// <param name="link">Corresponding Amazon retail website URL for the sales rank..</param>
        /// <param name="rank">Sales rank. (required).</param>
        public ItemDisplayGroupSalesRank(string websiteDisplayGroup = default(string), string title = default(string), string link = default(string), int rank = default(int))
        {
            // to ensure "websiteDisplayGroup" is required (not null)
            if (websiteDisplayGroup == null)
            {
                throw new ArgumentNullException("websiteDisplayGroup is a required property for ItemDisplayGroupSalesRank and cannot be null");
            }
            this.WebsiteDisplayGroup = websiteDisplayGroup;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for ItemDisplayGroupSalesRank and cannot be null");
            }
            this.Title = title;
            this.Rank = rank;
            this.Link = link;
        }

        /// <summary>
        /// Name of the website display group that is associated with the sales rank
        /// </summary>
        /// <value>Name of the website display group that is associated with the sales rank</value>
        [DataMember(Name = "websiteDisplayGroup", IsRequired = true, EmitDefaultValue = true)]
        public string WebsiteDisplayGroup { get; set; }

        /// <summary>
        /// Name of the sales rank.
        /// </summary>
        /// <value>Name of the sales rank.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Corresponding Amazon retail website URL for the sales rank.
        /// </summary>
        /// <value>Corresponding Amazon retail website URL for the sales rank.</value>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// Sales rank.
        /// </summary>
        /// <value>Sales rank.</value>
        [DataMember(Name = "rank", IsRequired = true, EmitDefaultValue = true)]
        public int Rank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemDisplayGroupSalesRank {\n");
            sb.Append("  WebsiteDisplayGroup: ").Append(WebsiteDisplayGroup).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
