/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.catalogItems.v2022_04_01
{
    /// <summary>
    /// A brand that you can use to refine your search.
    /// </summary>
    [DataContract(Name = "BrandRefinement")]
    public partial class BrandRefinement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandRefinement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandRefinement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandRefinement" /> class.
        /// </summary>
        /// <param name="numberOfResults">The estimated number of results that would be returned if you refine your search by the specified &#x60;brandName&#x60;. (required).</param>
        /// <param name="brandName">The brand name that you can use to refine your search. (required).</param>
        public BrandRefinement(int numberOfResults = default(int), string brandName = default(string))
        {
            this.NumberOfResults = numberOfResults;
            // to ensure "brandName" is required (not null)
            if (brandName == null)
            {
                throw new ArgumentNullException("brandName is a required property for BrandRefinement and cannot be null");
            }
            this.BrandName = brandName;
        }

        /// <summary>
        /// The estimated number of results that would be returned if you refine your search by the specified &#x60;brandName&#x60;.
        /// </summary>
        /// <value>The estimated number of results that would be returned if you refine your search by the specified &#x60;brandName&#x60;.</value>
        [DataMember(Name = "numberOfResults", IsRequired = true, EmitDefaultValue = true)]
        public int NumberOfResults { get; set; }

        /// <summary>
        /// The brand name that you can use to refine your search.
        /// </summary>
        /// <value>The brand name that you can use to refine your search.</value>
        [DataMember(Name = "brandName", IsRequired = true, EmitDefaultValue = true)]
        public string BrandName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrandRefinement {\n");
            sb.Append("  NumberOfResults: ").Append(NumberOfResults).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
