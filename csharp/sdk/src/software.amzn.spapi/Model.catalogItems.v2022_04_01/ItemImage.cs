/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.catalogItems.v2022_04_01
{
    /// <summary>
    /// Image for an item in the Amazon catalog.
    /// </summary>
    [DataContract(Name = "ItemImage")]
    public partial class ItemImage : IValidatableObject
    {
        /// <summary>
        /// Variant of the image, such as &#x60;MAIN&#x60; or &#x60;PT01&#x60;.
        /// </summary>
        /// <value>Variant of the image, such as &#x60;MAIN&#x60; or &#x60;PT01&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VariantEnum
        {
            /// <summary>
            /// Enum MAIN for value: MAIN
            /// </summary>
            [EnumMember(Value = "MAIN")]
            MAIN = 1,

            /// <summary>
            /// Enum PT01 for value: PT01
            /// </summary>
            [EnumMember(Value = "PT01")]
            PT01 = 2,

            /// <summary>
            /// Enum PT02 for value: PT02
            /// </summary>
            [EnumMember(Value = "PT02")]
            PT02 = 3,

            /// <summary>
            /// Enum PT03 for value: PT03
            /// </summary>
            [EnumMember(Value = "PT03")]
            PT03 = 4,

            /// <summary>
            /// Enum PT04 for value: PT04
            /// </summary>
            [EnumMember(Value = "PT04")]
            PT04 = 5,

            /// <summary>
            /// Enum PT05 for value: PT05
            /// </summary>
            [EnumMember(Value = "PT05")]
            PT05 = 6,

            /// <summary>
            /// Enum PT06 for value: PT06
            /// </summary>
            [EnumMember(Value = "PT06")]
            PT06 = 7,

            /// <summary>
            /// Enum PT07 for value: PT07
            /// </summary>
            [EnumMember(Value = "PT07")]
            PT07 = 8,

            /// <summary>
            /// Enum PT08 for value: PT08
            /// </summary>
            [EnumMember(Value = "PT08")]
            PT08 = 9,

            /// <summary>
            /// Enum SWCH for value: SWCH
            /// </summary>
            [EnumMember(Value = "SWCH")]
            SWCH = 10
        }


        /// <summary>
        /// Variant of the image, such as &#x60;MAIN&#x60; or &#x60;PT01&#x60;.
        /// </summary>
        /// <value>Variant of the image, such as &#x60;MAIN&#x60; or &#x60;PT01&#x60;.</value>
        /*
        <example>MAIN</example>
        */
        [DataMember(Name = "variant", IsRequired = true, EmitDefaultValue = true)]
        public VariantEnum Variant { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemImage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemImage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemImage" /> class.
        /// </summary>
        /// <param name="variant">Variant of the image, such as &#x60;MAIN&#x60; or &#x60;PT01&#x60;. (required).</param>
        /// <param name="link">URL for the image. (required).</param>
        /// <param name="height">Height of the image in pixels. (required).</param>
        /// <param name="width">Width of the image in pixels. (required).</param>
        public ItemImage(VariantEnum variant = default(VariantEnum), string link = default(string), int height = default(int), int width = default(int))
        {
            this.Variant = variant;
            // to ensure "link" is required (not null)
            if (link == null)
            {
                throw new ArgumentNullException("link is a required property for ItemImage and cannot be null");
            }
            this.Link = link;
            this.Height = height;
            this.Width = width;
        }

        /// <summary>
        /// URL for the image.
        /// </summary>
        /// <value>URL for the image.</value>
        [DataMember(Name = "link", IsRequired = true, EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Height of the image in pixels.
        /// </summary>
        /// <value>Height of the image in pixels.</value>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public int Height { get; set; }

        /// <summary>
        /// Width of the image in pixels.
        /// </summary>
        /// <value>Width of the image in pixels.</value>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemImage {\n");
            sb.Append("  Variant: ").Append(Variant).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
