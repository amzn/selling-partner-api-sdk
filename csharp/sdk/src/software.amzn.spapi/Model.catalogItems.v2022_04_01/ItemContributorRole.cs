/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.catalogItems.v2022_04_01
{
    /// <summary>
    /// Role of an individual contributor in the creation of an item, such as author or actor.
    /// </summary>
    [DataContract(Name = "ItemContributorRole")]
    public partial class ItemContributorRole : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemContributorRole" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemContributorRole() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemContributorRole" /> class.
        /// </summary>
        /// <param name="displayName">Display name of the role in the requested locale, such as &#x60;Author&#x60; or &#x60;Actor&#x60;..</param>
        /// <param name="value">Role value for the Amazon catalog item, such as &#x60;author&#x60; or &#x60;actor&#x60;. (required).</param>
        public ItemContributorRole(string displayName = default(string), string value = default(string))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for ItemContributorRole and cannot be null");
            }
            this.Value = value;
            this.DisplayName = displayName;
        }

        /// <summary>
        /// Display name of the role in the requested locale, such as &#x60;Author&#x60; or &#x60;Actor&#x60;.
        /// </summary>
        /// <value>Display name of the role in the requested locale, such as &#x60;Author&#x60; or &#x60;Actor&#x60;.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Role value for the Amazon catalog item, such as &#x60;author&#x60; or &#x60;actor&#x60;.
        /// </summary>
        /// <value>Role value for the Amazon catalog item, such as &#x60;author&#x60; or &#x60;actor&#x60;.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemContributorRole {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
