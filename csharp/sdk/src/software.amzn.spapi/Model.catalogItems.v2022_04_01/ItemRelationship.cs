/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.catalogItems.v2022_04_01
{
    /// <summary>
    /// Relationship details for an Amazon catalog item.
    /// </summary>
    [DataContract(Name = "ItemRelationship")]
    public partial class ItemRelationship : IValidatableObject
    {
        /// <summary>
        /// Type of relationship.
        /// </summary>
        /// <value>Type of relationship.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum VARIATION for value: VARIATION
            /// </summary>
            [EnumMember(Value = "VARIATION")]
            VARIATION = 1,

            /// <summary>
            /// Enum PACKAGEHIERARCHY for value: PACKAGE_HIERARCHY
            /// </summary>
            [EnumMember(Value = "PACKAGE_HIERARCHY")]
            PACKAGEHIERARCHY = 2
        }


        /// <summary>
        /// Type of relationship.
        /// </summary>
        /// <value>Type of relationship.</value>
        /*
        <example>VARIATION</example>
        */
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemRelationship" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemRelationship() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemRelationship" /> class.
        /// </summary>
        /// <param name="childAsins">ASINs of the related items that are children of this item..</param>
        /// <param name="parentAsins">ASINs of the related items that are parents of this item..</param>
        /// <param name="variationTheme">variationTheme.</param>
        /// <param name="type">Type of relationship. (required).</param>
        public ItemRelationship(List<string> childAsins = default(List<string>), List<string> parentAsins = default(List<string>), ItemVariationTheme variationTheme = default(ItemVariationTheme), TypeEnum type = default(TypeEnum))
        {
            this.Type = type;
            this.ChildAsins = childAsins;
            this.ParentAsins = parentAsins;
            this.VariationTheme = variationTheme;
        }

        /// <summary>
        /// ASINs of the related items that are children of this item.
        /// </summary>
        /// <value>ASINs of the related items that are children of this item.</value>
        [DataMember(Name = "childAsins", EmitDefaultValue = false)]
        public List<string> ChildAsins { get; set; }

        /// <summary>
        /// ASINs of the related items that are parents of this item.
        /// </summary>
        /// <value>ASINs of the related items that are parents of this item.</value>
        [DataMember(Name = "parentAsins", EmitDefaultValue = false)]
        public List<string> ParentAsins { get; set; }

        /// <summary>
        /// Gets or Sets VariationTheme
        /// </summary>
        [DataMember(Name = "variationTheme", EmitDefaultValue = false)]
        public ItemVariationTheme VariationTheme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemRelationship {\n");
            sb.Append("  ChildAsins: ").Append(ChildAsins).Append("\n");
            sb.Append("  ParentAsins: ").Append(ParentAsins).Append("\n");
            sb.Append("  VariationTheme: ").Append(VariationTheme).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
