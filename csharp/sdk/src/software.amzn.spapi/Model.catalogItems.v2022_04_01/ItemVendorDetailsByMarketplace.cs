/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.catalogItems.v2022_04_01
{
    /// <summary>
    /// The vendor details that are associated with an Amazon catalog item for the specified &#x60;marketplaceId&#x60;.
    /// </summary>
    [DataContract(Name = "ItemVendorDetailsByMarketplace")]
    public partial class ItemVendorDetailsByMarketplace : IValidatableObject
    {
        /// <summary>
        /// The replenishment category that is associated with an Amazon catalog item.
        /// </summary>
        /// <value>The replenishment category that is associated with an Amazon catalog item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReplenishmentCategoryEnum
        {
            /// <summary>
            /// Enum ALLOCATED for value: ALLOCATED
            /// </summary>
            [EnumMember(Value = "ALLOCATED")]
            ALLOCATED = 1,

            /// <summary>
            /// Enum BASICREPLENISHMENT for value: BASIC_REPLENISHMENT
            /// </summary>
            [EnumMember(Value = "BASIC_REPLENISHMENT")]
            BASICREPLENISHMENT = 2,

            /// <summary>
            /// Enum INSEASON for value: IN_SEASON
            /// </summary>
            [EnumMember(Value = "IN_SEASON")]
            INSEASON = 3,

            /// <summary>
            /// Enum LIMITEDREPLENISHMENT for value: LIMITED_REPLENISHMENT
            /// </summary>
            [EnumMember(Value = "LIMITED_REPLENISHMENT")]
            LIMITEDREPLENISHMENT = 4,

            /// <summary>
            /// Enum MANUFACTUREROUTOFSTOCK for value: MANUFACTURER_OUT_OF_STOCK
            /// </summary>
            [EnumMember(Value = "MANUFACTURER_OUT_OF_STOCK")]
            MANUFACTUREROUTOFSTOCK = 5,

            /// <summary>
            /// Enum NEWPRODUCT for value: NEW_PRODUCT
            /// </summary>
            [EnumMember(Value = "NEW_PRODUCT")]
            NEWPRODUCT = 6,

            /// <summary>
            /// Enum NONREPLENISHABLE for value: NON_REPLENISHABLE
            /// </summary>
            [EnumMember(Value = "NON_REPLENISHABLE")]
            NONREPLENISHABLE = 7,

            /// <summary>
            /// Enum NONSTOCKUPABLE for value: NON_STOCKUPABLE
            /// </summary>
            [EnumMember(Value = "NON_STOCKUPABLE")]
            NONSTOCKUPABLE = 8,

            /// <summary>
            /// Enum OBSOLETE for value: OBSOLETE
            /// </summary>
            [EnumMember(Value = "OBSOLETE")]
            OBSOLETE = 9,

            /// <summary>
            /// Enum PLANNEDREPLENISHMENT for value: PLANNED_REPLENISHMENT
            /// </summary>
            [EnumMember(Value = "PLANNED_REPLENISHMENT")]
            PLANNEDREPLENISHMENT = 10
        }


        /// <summary>
        /// The replenishment category that is associated with an Amazon catalog item.
        /// </summary>
        /// <value>The replenishment category that is associated with an Amazon catalog item.</value>
        [DataMember(Name = "replenishmentCategory", EmitDefaultValue = false)]
        public ReplenishmentCategoryEnum? ReplenishmentCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVendorDetailsByMarketplace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemVendorDetailsByMarketplace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVendorDetailsByMarketplace" /> class.
        /// </summary>
        /// <param name="marketplaceId">Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required).</param>
        /// <param name="brandCode">The brand code that is associated with an Amazon catalog item..</param>
        /// <param name="manufacturerCode">The manufacturer code that is associated with an Amazon catalog item..</param>
        /// <param name="manufacturerCodeParent">The parent vendor code of the manufacturer code..</param>
        /// <param name="productCategory">productCategory.</param>
        /// <param name="productGroup">The product group that is associated with an Amazon catalog item..</param>
        /// <param name="productSubcategory">productSubcategory.</param>
        /// <param name="replenishmentCategory">The replenishment category that is associated with an Amazon catalog item..</param>
        public ItemVendorDetailsByMarketplace(string marketplaceId = default(string), string brandCode = default(string), string manufacturerCode = default(string), string manufacturerCodeParent = default(string), ItemVendorDetailsCategory productCategory = default(ItemVendorDetailsCategory), string productGroup = default(string), ItemVendorDetailsCategory productSubcategory = default(ItemVendorDetailsCategory), ReplenishmentCategoryEnum? replenishmentCategory = default(ReplenishmentCategoryEnum?))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for ItemVendorDetailsByMarketplace and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            this.BrandCode = brandCode;
            this.ManufacturerCode = manufacturerCode;
            this.ManufacturerCodeParent = manufacturerCodeParent;
            this.ProductCategory = productCategory;
            this.ProductGroup = productGroup;
            this.ProductSubcategory = productSubcategory;
            this.ReplenishmentCategory = replenishmentCategory;
        }

        /// <summary>
        /// Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
        /// </summary>
        /// <value>Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The brand code that is associated with an Amazon catalog item.
        /// </summary>
        /// <value>The brand code that is associated with an Amazon catalog item.</value>
        [DataMember(Name = "brandCode", EmitDefaultValue = false)]
        public string BrandCode { get; set; }

        /// <summary>
        /// The manufacturer code that is associated with an Amazon catalog item.
        /// </summary>
        /// <value>The manufacturer code that is associated with an Amazon catalog item.</value>
        [DataMember(Name = "manufacturerCode", EmitDefaultValue = false)]
        public string ManufacturerCode { get; set; }

        /// <summary>
        /// The parent vendor code of the manufacturer code.
        /// </summary>
        /// <value>The parent vendor code of the manufacturer code.</value>
        [DataMember(Name = "manufacturerCodeParent", EmitDefaultValue = false)]
        public string ManufacturerCodeParent { get; set; }

        /// <summary>
        /// Gets or Sets ProductCategory
        /// </summary>
        [DataMember(Name = "productCategory", EmitDefaultValue = false)]
        public ItemVendorDetailsCategory ProductCategory { get; set; }

        /// <summary>
        /// The product group that is associated with an Amazon catalog item.
        /// </summary>
        /// <value>The product group that is associated with an Amazon catalog item.</value>
        [DataMember(Name = "productGroup", EmitDefaultValue = false)]
        public string ProductGroup { get; set; }

        /// <summary>
        /// Gets or Sets ProductSubcategory
        /// </summary>
        [DataMember(Name = "productSubcategory", EmitDefaultValue = false)]
        public ItemVendorDetailsCategory ProductSubcategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemVendorDetailsByMarketplace {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  BrandCode: ").Append(BrandCode).Append("\n");
            sb.Append("  ManufacturerCode: ").Append(ManufacturerCode).Append("\n");
            sb.Append("  ManufacturerCodeParent: ").Append(ManufacturerCodeParent).Append("\n");
            sb.Append("  ProductCategory: ").Append(ProductCategory).Append("\n");
            sb.Append("  ProductGroup: ").Append(ProductGroup).Append("\n");
            sb.Append("  ProductSubcategory: ").Append(ProductSubcategory).Append("\n");
            sb.Append("  ReplenishmentCategory: ").Append(ReplenishmentCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
