/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.catalogItems.v2022_04_01
{
    /// <summary>
    /// The identifier that is associated with the item in the Amazon catalog, such as a UPC or EAN identifier.
    /// </summary>
    [DataContract(Name = "ItemIdentifier")]
    public partial class ItemIdentifier : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemIdentifier" /> class.
        /// </summary>
        /// <param name="identifierType">Type of identifier, such as UPC, EAN, or ISBN. (required).</param>
        /// <param name="identifier">Identifier of the item. (required).</param>
        public ItemIdentifier(string identifierType = default(string), string identifier = default(string))
        {
            // to ensure "identifierType" is required (not null)
            if (identifierType == null)
            {
                throw new ArgumentNullException("identifierType is a required property for ItemIdentifier and cannot be null");
            }
            this.IdentifierType = identifierType;
            // to ensure "identifier" is required (not null)
            if (identifier == null)
            {
                throw new ArgumentNullException("identifier is a required property for ItemIdentifier and cannot be null");
            }
            this.Identifier = identifier;
        }

        /// <summary>
        /// Type of identifier, such as UPC, EAN, or ISBN.
        /// </summary>
        /// <value>Type of identifier, such as UPC, EAN, or ISBN.</value>
        [DataMember(Name = "identifierType", IsRequired = true, EmitDefaultValue = true)]
        public string IdentifierType { get; set; }

        /// <summary>
        /// Identifier of the item.
        /// </summary>
        /// <value>Identifier of the item.</value>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = true)]
        public string Identifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemIdentifier {\n");
            sb.Append("  IdentifierType: ").Append(IdentifierType).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
