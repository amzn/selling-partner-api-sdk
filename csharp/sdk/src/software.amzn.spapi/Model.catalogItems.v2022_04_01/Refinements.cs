/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.catalogItems.v2022_04_01
{
    /// <summary>
    /// Optional fields that you can use to refine your search results.
    /// </summary>
    [DataContract(Name = "Refinements")]
    public partial class Refinements : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Refinements" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Refinements() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Refinements" /> class.
        /// </summary>
        /// <param name="brands">A list of brands you can use to refine your search. (required).</param>
        /// <param name="classifications">A list of classifications you can use to refine your search. (required).</param>
        public Refinements(List<BrandRefinement> brands = default(List<BrandRefinement>), List<ClassificationRefinement> classifications = default(List<ClassificationRefinement>))
        {
            // to ensure "brands" is required (not null)
            if (brands == null)
            {
                throw new ArgumentNullException("brands is a required property for Refinements and cannot be null");
            }
            this.Brands = brands;
            // to ensure "classifications" is required (not null)
            if (classifications == null)
            {
                throw new ArgumentNullException("classifications is a required property for Refinements and cannot be null");
            }
            this.Classifications = classifications;
        }

        /// <summary>
        /// A list of brands you can use to refine your search.
        /// </summary>
        /// <value>A list of brands you can use to refine your search.</value>
        [DataMember(Name = "brands", IsRequired = true, EmitDefaultValue = true)]
        public List<BrandRefinement> Brands { get; set; }

        /// <summary>
        /// A list of classifications you can use to refine your search.
        /// </summary>
        /// <value>A list of classifications you can use to refine your search.</value>
        [DataMember(Name = "classifications", IsRequired = true, EmitDefaultValue = true)]
        public List<ClassificationRefinement> Classifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Refinements {\n");
            sb.Append("  Brands: ").Append(Brands).Append("\n");
            sb.Append("  Classifications: ").Append(Classifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
