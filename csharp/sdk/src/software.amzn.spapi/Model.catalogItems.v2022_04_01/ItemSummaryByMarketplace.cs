/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.catalogItems.v2022_04_01
{
    /// <summary>
    /// Information about an Amazon catalog item for the indicated &#x60;marketplaceId&#x60;.
    /// </summary>
    [DataContract(Name = "ItemSummaryByMarketplace")]
    public partial class ItemSummaryByMarketplace : IValidatableObject
    {
        /// <summary>
        /// Classification type that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>Classification type that is associated with the Amazon catalog item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ItemClassificationEnum
        {
            /// <summary>
            /// Enum BASEPRODUCT for value: BASE_PRODUCT
            /// </summary>
            [EnumMember(Value = "BASE_PRODUCT")]
            BASEPRODUCT = 1,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 2,

            /// <summary>
            /// Enum PRODUCTBUNDLE for value: PRODUCT_BUNDLE
            /// </summary>
            [EnumMember(Value = "PRODUCT_BUNDLE")]
            PRODUCTBUNDLE = 3,

            /// <summary>
            /// Enum VARIATIONPARENT for value: VARIATION_PARENT
            /// </summary>
            [EnumMember(Value = "VARIATION_PARENT")]
            VARIATIONPARENT = 4
        }


        /// <summary>
        /// Classification type that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>Classification type that is associated with the Amazon catalog item.</value>
        [DataMember(Name = "itemClassification", EmitDefaultValue = false)]
        public ItemClassificationEnum? ItemClassification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSummaryByMarketplace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemSummaryByMarketplace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSummaryByMarketplace" /> class.
        /// </summary>
        /// <param name="marketplaceId">Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required).</param>
        /// <param name="adultProduct">When &#x60;true&#x60;, the Amazon catalog item is intended for an adult audience or is sexual in nature..</param>
        /// <param name="autographed">When &#x60;true&#x60;, the Amazon catalog item is autographed..</param>
        /// <param name="brand">Name of the brand that is associated with the Amazon catalog item..</param>
        /// <param name="browseClassification">browseClassification.</param>
        /// <param name="color">The color that is associated with the Amazon catalog item..</param>
        /// <param name="contributors">Individual contributors to the creation of the item, such as the authors or actors..</param>
        /// <param name="itemClassification">Classification type that is associated with the Amazon catalog item..</param>
        /// <param name="itemName">The name that is associated with the Amazon catalog item..</param>
        /// <param name="manufacturer">The name of the manufacturer that is associated with the Amazon catalog item..</param>
        /// <param name="memorabilia">When true, the item is classified as memorabilia..</param>
        /// <param name="modelNumber">The model number that is associated with the Amazon catalog item..</param>
        /// <param name="packageQuantity">The quantity of the Amazon catalog item within one package..</param>
        /// <param name="partNumber">The part number that is associated with the Amazon catalog item..</param>
        /// <param name="releaseDate">The earliest date on which the Amazon catalog item can be shipped to customers..</param>
        /// <param name="size">The name of the size of the Amazon catalog item..</param>
        /// <param name="style">The name of the style that is associated with the Amazon catalog item..</param>
        /// <param name="tradeInEligible">When true, the Amazon catalog item is eligible for trade-in..</param>
        /// <param name="websiteDisplayGroup">The identifier of the website display group that is associated with the Amazon catalog item..</param>
        /// <param name="websiteDisplayGroupName">The display name of the website display group that is associated with the Amazon catalog item..</param>
        public ItemSummaryByMarketplace(string marketplaceId = default(string), bool adultProduct = default(bool), bool autographed = default(bool), string brand = default(string), ItemBrowseClassification browseClassification = default(ItemBrowseClassification), string color = default(string), List<ItemContributor> contributors = default(List<ItemContributor>), ItemClassificationEnum? itemClassification = default(ItemClassificationEnum?), string itemName = default(string), string manufacturer = default(string), bool memorabilia = default(bool), string modelNumber = default(string), int packageQuantity = default(int), string partNumber = default(string), DateOnly releaseDate = default(DateOnly), string size = default(string), string style = default(string), bool tradeInEligible = default(bool), string websiteDisplayGroup = default(string), string websiteDisplayGroupName = default(string))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for ItemSummaryByMarketplace and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            this.AdultProduct = adultProduct;
            this.Autographed = autographed;
            this.Brand = brand;
            this.BrowseClassification = browseClassification;
            this.Color = color;
            this.Contributors = contributors;
            this.ItemClassification = itemClassification;
            this.ItemName = itemName;
            this.Manufacturer = manufacturer;
            this.Memorabilia = memorabilia;
            this.ModelNumber = modelNumber;
            this.PackageQuantity = packageQuantity;
            this.PartNumber = partNumber;
            this.ReleaseDate = releaseDate;
            this.Size = size;
            this.Style = style;
            this.TradeInEligible = tradeInEligible;
            this.WebsiteDisplayGroup = websiteDisplayGroup;
            this.WebsiteDisplayGroupName = websiteDisplayGroupName;
        }

        /// <summary>
        /// Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
        /// </summary>
        /// <value>Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// When &#x60;true&#x60;, the Amazon catalog item is intended for an adult audience or is sexual in nature.
        /// </summary>
        /// <value>When &#x60;true&#x60;, the Amazon catalog item is intended for an adult audience or is sexual in nature.</value>
        [DataMember(Name = "adultProduct", EmitDefaultValue = true)]
        public bool AdultProduct { get; set; }

        /// <summary>
        /// When &#x60;true&#x60;, the Amazon catalog item is autographed.
        /// </summary>
        /// <value>When &#x60;true&#x60;, the Amazon catalog item is autographed.</value>
        [DataMember(Name = "autographed", EmitDefaultValue = true)]
        public bool Autographed { get; set; }

        /// <summary>
        /// Name of the brand that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>Name of the brand that is associated with the Amazon catalog item.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets BrowseClassification
        /// </summary>
        [DataMember(Name = "browseClassification", EmitDefaultValue = false)]
        public ItemBrowseClassification BrowseClassification { get; set; }

        /// <summary>
        /// The color that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>The color that is associated with the Amazon catalog item.</value>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// Individual contributors to the creation of the item, such as the authors or actors.
        /// </summary>
        /// <value>Individual contributors to the creation of the item, such as the authors or actors.</value>
        [DataMember(Name = "contributors", EmitDefaultValue = false)]
        public List<ItemContributor> Contributors { get; set; }

        /// <summary>
        /// The name that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>The name that is associated with the Amazon catalog item.</value>
        [DataMember(Name = "itemName", EmitDefaultValue = false)]
        public string ItemName { get; set; }

        /// <summary>
        /// The name of the manufacturer that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>The name of the manufacturer that is associated with the Amazon catalog item.</value>
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// When true, the item is classified as memorabilia.
        /// </summary>
        /// <value>When true, the item is classified as memorabilia.</value>
        [DataMember(Name = "memorabilia", EmitDefaultValue = true)]
        public bool Memorabilia { get; set; }

        /// <summary>
        /// The model number that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>The model number that is associated with the Amazon catalog item.</value>
        [DataMember(Name = "modelNumber", EmitDefaultValue = false)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// The quantity of the Amazon catalog item within one package.
        /// </summary>
        /// <value>The quantity of the Amazon catalog item within one package.</value>
        [DataMember(Name = "packageQuantity", EmitDefaultValue = false)]
        public int PackageQuantity { get; set; }

        /// <summary>
        /// The part number that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>The part number that is associated with the Amazon catalog item.</value>
        [DataMember(Name = "partNumber", EmitDefaultValue = false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// The earliest date on which the Amazon catalog item can be shipped to customers.
        /// </summary>
        /// <value>The earliest date on which the Amazon catalog item can be shipped to customers.</value>
        [DataMember(Name = "releaseDate", EmitDefaultValue = false)]
        public DateOnly ReleaseDate { get; set; }

        /// <summary>
        /// The name of the size of the Amazon catalog item.
        /// </summary>
        /// <value>The name of the size of the Amazon catalog item.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        /// The name of the style that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>The name of the style that is associated with the Amazon catalog item.</value>
        [DataMember(Name = "style", EmitDefaultValue = false)]
        public string Style { get; set; }

        /// <summary>
        /// When true, the Amazon catalog item is eligible for trade-in.
        /// </summary>
        /// <value>When true, the Amazon catalog item is eligible for trade-in.</value>
        [DataMember(Name = "tradeInEligible", EmitDefaultValue = true)]
        public bool TradeInEligible { get; set; }

        /// <summary>
        /// The identifier of the website display group that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>The identifier of the website display group that is associated with the Amazon catalog item.</value>
        [DataMember(Name = "websiteDisplayGroup", EmitDefaultValue = false)]
        public string WebsiteDisplayGroup { get; set; }

        /// <summary>
        /// The display name of the website display group that is associated with the Amazon catalog item.
        /// </summary>
        /// <value>The display name of the website display group that is associated with the Amazon catalog item.</value>
        [DataMember(Name = "websiteDisplayGroupName", EmitDefaultValue = false)]
        public string WebsiteDisplayGroupName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemSummaryByMarketplace {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  AdultProduct: ").Append(AdultProduct).Append("\n");
            sb.Append("  Autographed: ").Append(Autographed).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  BrowseClassification: ").Append(BrowseClassification).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Contributors: ").Append(Contributors).Append("\n");
            sb.Append("  ItemClassification: ").Append(ItemClassification).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Memorabilia: ").Append(Memorabilia).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  PackageQuantity: ").Append(PackageQuantity).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  TradeInEligible: ").Append(TradeInEligible).Append("\n");
            sb.Append("  WebsiteDisplayGroup: ").Append(WebsiteDisplayGroup).Append("\n");
            sb.Append("  WebsiteDisplayGroupName: ").Append(WebsiteDisplayGroupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
