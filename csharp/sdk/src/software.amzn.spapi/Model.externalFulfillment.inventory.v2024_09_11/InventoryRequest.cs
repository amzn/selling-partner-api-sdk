/*
 * The Selling Partner API for External Fulfillment Inventory Management
 *
 * You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.inventory.v2024_09_11
{
    /// <summary>
    /// An inventory request.
    /// </summary>
    [DataContract(Name = "InventoryRequest")]
    public partial class InventoryRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
        public HttpMethod Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InventoryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryRequest" /> class.
        /// </summary>
        /// <param name="uri">The URI associated with the individual APIs from the batch request. The user must provide the resource identifier for the operation they want to use.  (required).</param>
        /// <param name="method">method (required).</param>
        /// <param name="body">body.</param>
        public InventoryRequest(string uri = default(string), HttpMethod method = default(HttpMethod), InventoryRequestParams body = default(InventoryRequestParams))
        {
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new ArgumentNullException("uri is a required property for InventoryRequest and cannot be null");
            }
            this.Uri = uri;
            this.Method = method;
            this.Body = body;
        }

        /// <summary>
        /// The URI associated with the individual APIs from the batch request. The user must provide the resource identifier for the operation they want to use. 
        /// </summary>
        /// <value>The URI associated with the individual APIs from the batch request. The user must provide the resource identifier for the operation they want to use. </value>
        /*
        <example>inventory/update?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku1</example>
        */
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public InventoryRequestParams Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryRequest {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
