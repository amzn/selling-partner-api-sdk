/*
 * The Selling Partner API for External Fulfillment Inventory Management
 *
 * You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.inventory.v2024_09_11
{
    /// <summary>
    /// A response to an individual inventory request.
    /// </summary>
    [DataContract(Name = "InventoryResponse")]
    public partial class InventoryResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InventoryResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryResponse" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="body">body (required).</param>
        public InventoryResponse(HttpStatusLine status = default(HttpStatusLine), InventoryResponseBody body = default(InventoryResponseBody))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for InventoryResponse and cannot be null");
            }
            this.Status = status;
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new ArgumentNullException("body is a required property for InventoryResponse and cannot be null");
            }
            this.Body = body;
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public HttpStatusLine Status { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", IsRequired = true, EmitDefaultValue = true)]
        public InventoryResponseBody Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
