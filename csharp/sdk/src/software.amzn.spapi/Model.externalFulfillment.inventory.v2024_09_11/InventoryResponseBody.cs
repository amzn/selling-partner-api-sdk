/*
 * The Selling Partner API for External Fulfillment Inventory Management
 *
 * You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.inventory.v2024_09_11
{
    /// <summary>
    /// The response to an inventory request.
    /// </summary>
    [DataContract(Name = "InventoryResponseBody")]
    public partial class InventoryResponseBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryResponseBody" /> class.
        /// </summary>
        /// <param name="clientSequenceNumber">Latest sequence number for an inventory update..</param>
        /// <param name="locationId">The location where inventory is updated or retrieved..</param>
        /// <param name="skuId">The SKU ID for which inventory is updated or retrieved.</param>
        /// <param name="sellableQuantity">The number of items of the specified SKU that are available for purchase..</param>
        /// <param name="reservedQuantity">The number of items of the specified SKU created in any marketplace that are reserved for shipment and yet to be fulfilled..</param>
        /// <param name="marketplaceAttributes">marketplaceAttributes.</param>
        /// <param name="actionableErrors">Inventory operation errors that require seller action before retrying the inventory request..</param>
        public InventoryResponseBody(int clientSequenceNumber = default(int), string locationId = default(string), string skuId = default(string), int sellableQuantity = default(int), int reservedQuantity = default(int), MarketplaceAttributes marketplaceAttributes = default(MarketplaceAttributes), List<ActionableError> actionableErrors = default(List<ActionableError>))
        {
            this.ClientSequenceNumber = clientSequenceNumber;
            this.LocationId = locationId;
            this.SkuId = skuId;
            this.SellableQuantity = sellableQuantity;
            this.ReservedQuantity = reservedQuantity;
            this.MarketplaceAttributes = marketplaceAttributes;
            this.ActionableErrors = actionableErrors;
        }

        /// <summary>
        /// Latest sequence number for an inventory update.
        /// </summary>
        /// <value>Latest sequence number for an inventory update.</value>
        /*
        <example>12345678</example>
        */
        [DataMember(Name = "clientSequenceNumber", EmitDefaultValue = false)]
        public int ClientSequenceNumber { get; set; }

        /// <summary>
        /// The location where inventory is updated or retrieved.
        /// </summary>
        /// <value>The location where inventory is updated or retrieved.</value>
        /*
        <example>43cd8cd4-a944-4fa8-a584-5e3b3efdb045</example>
        */
        [DataMember(Name = "locationId", EmitDefaultValue = false)]
        public string LocationId { get; set; }

        /// <summary>
        /// The SKU ID for which inventory is updated or retrieved
        /// </summary>
        /// <value>The SKU ID for which inventory is updated or retrieved</value>
        /*
        <example>efptestsku2</example>
        */
        [DataMember(Name = "skuId", EmitDefaultValue = false)]
        public string SkuId { get; set; }

        /// <summary>
        /// The number of items of the specified SKU that are available for purchase.
        /// </summary>
        /// <value>The number of items of the specified SKU that are available for purchase.</value>
        /*
        <example>5</example>
        */
        [DataMember(Name = "sellableQuantity", EmitDefaultValue = false)]
        public int SellableQuantity { get; set; }

        /// <summary>
        /// The number of items of the specified SKU created in any marketplace that are reserved for shipment and yet to be fulfilled.
        /// </summary>
        /// <value>The number of items of the specified SKU created in any marketplace that are reserved for shipment and yet to be fulfilled.</value>
        /*
        <example>2</example>
        */
        [DataMember(Name = "reservedQuantity", EmitDefaultValue = false)]
        public int ReservedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceAttributes
        /// </summary>
        [DataMember(Name = "marketplaceAttributes", EmitDefaultValue = false)]
        public MarketplaceAttributes MarketplaceAttributes { get; set; }

        /// <summary>
        /// Inventory operation errors that require seller action before retrying the inventory request.
        /// </summary>
        /// <value>Inventory operation errors that require seller action before retrying the inventory request.</value>
        [DataMember(Name = "actionableErrors", EmitDefaultValue = false)]
        public List<ActionableError> ActionableErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryResponseBody {\n");
            sb.Append("  ClientSequenceNumber: ").Append(ClientSequenceNumber).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  SkuId: ").Append(SkuId).Append("\n");
            sb.Append("  SellableQuantity: ").Append(SellableQuantity).Append("\n");
            sb.Append("  ReservedQuantity: ").Append(ReservedQuantity).Append("\n");
            sb.Append("  MarketplaceAttributes: ").Append(MarketplaceAttributes).Append("\n");
            sb.Append("  ActionableErrors: ").Append(ActionableErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SellableQuantity (int) minimum
            if (this.SellableQuantity < (int)0)
            {
                yield return new ValidationResult("Invalid value for SellableQuantity, must be a value greater than or equal to 0.", new [] { "SellableQuantity" });
            }

            // ReservedQuantity (int) minimum
            if (this.ReservedQuantity < (int)0)
            {
                yield return new ValidationResult("Invalid value for ReservedQuantity, must be a value greater than or equal to 0.", new [] { "ReservedQuantity" });
            }

            yield break;
        }
    }

}
