/*
 * The Selling Partner API for External Fulfillment Inventory Management
 *
 * You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.inventory.v2024_09_11
{
    /// <summary>
    /// The parameters for an individual request.
    /// </summary>
    [DataContract(Name = "InventoryRequestParams")]
    public partial class InventoryRequestParams : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryRequestParams" /> class.
        /// </summary>
        /// <param name="clientSequenceNumber">The latest sequence number for the inventory update operation. You find this value in the &#x60;clientSequenceNumber&#x60; property in the response to the &#x60;batchInventory&#x60; operation..</param>
        /// <param name="quantity">The absolute inventory quantity..</param>
        /// <param name="marketplaceAttributes">marketplaceAttributes.</param>
        public InventoryRequestParams(int clientSequenceNumber = default(int), int quantity = default(int), MarketplaceAttributes marketplaceAttributes = default(MarketplaceAttributes))
        {
            this.ClientSequenceNumber = clientSequenceNumber;
            this.Quantity = quantity;
            this.MarketplaceAttributes = marketplaceAttributes;
        }

        /// <summary>
        /// The latest sequence number for the inventory update operation. You find this value in the &#x60;clientSequenceNumber&#x60; property in the response to the &#x60;batchInventory&#x60; operation.
        /// </summary>
        /// <value>The latest sequence number for the inventory update operation. You find this value in the &#x60;clientSequenceNumber&#x60; property in the response to the &#x60;batchInventory&#x60; operation.</value>
        /*
        <example>12345678</example>
        */
        [DataMember(Name = "clientSequenceNumber", EmitDefaultValue = false)]
        public int ClientSequenceNumber { get; set; }

        /// <summary>
        /// The absolute inventory quantity.
        /// </summary>
        /// <value>The absolute inventory quantity.</value>
        /*
        <example>15</example>
        */
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceAttributes
        /// </summary>
        [DataMember(Name = "marketplaceAttributes", EmitDefaultValue = false)]
        public MarketplaceAttributes MarketplaceAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryRequestParams {\n");
            sb.Append("  ClientSequenceNumber: ").Append(ClientSequenceNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  MarketplaceAttributes: ").Append(MarketplaceAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
