/*
 * The Selling Partner API for External Fulfillment Inventory Management
 *
 * You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.inventory.v2024_09_11
{
    /// <summary>
    /// The channel name and marketplace ID. This is required only when multiple channels have the same location ID.
    /// </summary>
    [DataContract(Name = "MarketplaceAttributes")]
    public partial class MarketplaceAttributes : IValidatableObject
    {
        /// <summary>
        /// The name of the fulfillment channel in which to update inventory.
        /// </summary>
        /// <value>The name of the fulfillment channel in which to update inventory.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelNameEnum
        {
            /// <summary>
            /// Enum FBA for value: FBA
            /// </summary>
            [EnumMember(Value = "FBA")]
            FBA = 1,

            /// <summary>
            /// Enum MFN for value: MFN
            /// </summary>
            [EnumMember(Value = "MFN")]
            MFN = 2,

            /// <summary>
            /// Enum DF for value: DF
            /// </summary>
            [EnumMember(Value = "DF")]
            DF = 3
        }


        /// <summary>
        /// The name of the fulfillment channel in which to update inventory.
        /// </summary>
        /// <value>The name of the fulfillment channel in which to update inventory.</value>
        /*
        <example>FBA</example>
        */
        [DataMember(Name = "channelName", EmitDefaultValue = false)]
        public ChannelNameEnum? ChannelName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceAttributes" /> class.
        /// </summary>
        /// <param name="channelName">The name of the fulfillment channel in which to update inventory..</param>
        /// <param name="marketplaceId">The marketplace ID of the marketplace where you want to update inventory..</param>
        public MarketplaceAttributes(ChannelNameEnum? channelName = default(ChannelNameEnum?), string marketplaceId = default(string))
        {
            this.ChannelName = channelName;
            this.MarketplaceId = marketplaceId;
        }

        /// <summary>
        /// The marketplace ID of the marketplace where you want to update inventory.
        /// </summary>
        /// <value>The marketplace ID of the marketplace where you want to update inventory.</value>
        /*
        <example>AXJDDKDFDKDF</example>
        */
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketplaceAttributes {\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
