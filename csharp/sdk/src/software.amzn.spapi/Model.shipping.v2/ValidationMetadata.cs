/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// ValidationMetadata Details
    /// </summary>
    [DataContract(Name = "ValidationMetadata")]
    public partial class ValidationMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationMetadata" /> class.
        /// </summary>
        /// <param name="errorMessage">errorMessage for the error..</param>
        /// <param name="validationStrategy">validationStrategy for the error..</param>
        /// <param name="value">Value..</param>
        public ValidationMetadata(string errorMessage = default(string), string validationStrategy = default(string), string value = default(string))
        {
            this.ErrorMessage = errorMessage;
            this.ValidationStrategy = validationStrategy;
            this.Value = value;
        }

        /// <summary>
        /// errorMessage for the error.
        /// </summary>
        /// <value>errorMessage for the error.</value>
        [DataMember(Name = "errorMessage", EmitDefaultValue = false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// validationStrategy for the error.
        /// </summary>
        /// <value>validationStrategy for the error.</value>
        [DataMember(Name = "validationStrategy", EmitDefaultValue = false)]
        public string ValidationStrategy { get; set; }

        /// <summary>
        /// Value.
        /// </summary>
        /// <value>Value.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidationMetadata {\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ValidationStrategy: ").Append(ValidationStrategy).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
