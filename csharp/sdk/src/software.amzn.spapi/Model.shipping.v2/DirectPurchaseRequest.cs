/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// The request schema for the directPurchaseShipment operation. When the channel type is Amazon, the shipTo address is not required and will be ignored.
    /// </summary>
    [DataContract(Name = "DirectPurchaseRequest")]
    public partial class DirectPurchaseRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPurchaseRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DirectPurchaseRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPurchaseRequest" /> class.
        /// </summary>
        /// <param name="shipTo">shipTo.</param>
        /// <param name="shipFrom">shipFrom.</param>
        /// <param name="returnTo">returnTo.</param>
        /// <param name="packages">A list of packages to be shipped through a shipping service offering..</param>
        /// <param name="channelDetails">channelDetails (required).</param>
        /// <param name="labelSpecifications">labelSpecifications.</param>
        public DirectPurchaseRequest(Address shipTo = default(Address), Address shipFrom = default(Address), Address returnTo = default(Address), List<Package> packages = default(List<Package>), ChannelDetails channelDetails = default(ChannelDetails), RequestedDocumentSpecification labelSpecifications = default(RequestedDocumentSpecification))
        {
            // to ensure "channelDetails" is required (not null)
            if (channelDetails == null)
            {
                throw new ArgumentNullException("channelDetails is a required property for DirectPurchaseRequest and cannot be null");
            }
            this.ChannelDetails = channelDetails;
            this.ShipTo = shipTo;
            this.ShipFrom = shipFrom;
            this.ReturnTo = returnTo;
            this.Packages = packages;
            this.LabelSpecifications = labelSpecifications;
        }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name = "shipTo", EmitDefaultValue = false)]
        public Address ShipTo { get; set; }

        /// <summary>
        /// Gets or Sets ShipFrom
        /// </summary>
        [DataMember(Name = "shipFrom", EmitDefaultValue = false)]
        public Address ShipFrom { get; set; }

        /// <summary>
        /// Gets or Sets ReturnTo
        /// </summary>
        [DataMember(Name = "returnTo", EmitDefaultValue = false)]
        public Address ReturnTo { get; set; }

        /// <summary>
        /// A list of packages to be shipped through a shipping service offering.
        /// </summary>
        /// <value>A list of packages to be shipped through a shipping service offering.</value>
        [DataMember(Name = "packages", EmitDefaultValue = false)]
        public List<Package> Packages { get; set; }

        /// <summary>
        /// Gets or Sets ChannelDetails
        /// </summary>
        [DataMember(Name = "channelDetails", IsRequired = true, EmitDefaultValue = true)]
        public ChannelDetails ChannelDetails { get; set; }

        /// <summary>
        /// Gets or Sets LabelSpecifications
        /// </summary>
        [DataMember(Name = "labelSpecifications", EmitDefaultValue = false)]
        public RequestedDocumentSpecification LabelSpecifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DirectPurchaseRequest {\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  ShipFrom: ").Append(ShipFrom).Append("\n");
            sb.Append("  ReturnTo: ").Append(ReturnTo).Append("\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  ChannelDetails: ").Append(ChannelDetails).Append("\n");
            sb.Append("  LabelSpecifications: ").Append(LabelSpecifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
