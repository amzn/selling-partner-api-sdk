/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// The shipper instruction.
    /// </summary>
    [DataContract(Name = "ShipperInstruction")]
    public partial class ShipperInstruction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipperInstruction" /> class.
        /// </summary>
        /// <param name="deliveryNotes">The delivery notes for the shipment.</param>
        public ShipperInstruction(string deliveryNotes = default(string))
        {
            this.DeliveryNotes = deliveryNotes;
        }

        /// <summary>
        /// The delivery notes for the shipment
        /// </summary>
        /// <value>The delivery notes for the shipment</value>
        [DataMember(Name = "deliveryNotes", EmitDefaultValue = false)]
        public string DeliveryNotes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipperInstruction {\n");
            sb.Append("  DeliveryNotes: ").Append(DeliveryNotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DeliveryNotes (string) maxLength
            if (this.DeliveryNotes != null && this.DeliveryNotes.Length > 256)
            {
                yield return new ValidationResult("Invalid value for DeliveryNotes, length must be less than 256.", new [] { "DeliveryNotes" });
            }

            yield break;
        }
    }

}
