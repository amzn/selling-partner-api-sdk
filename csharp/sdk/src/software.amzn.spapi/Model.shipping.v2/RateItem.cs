/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// Rate Item for shipping (base cost, transaction fee, confirmation, insurance, etc.) Data source definition: 
    /// </summary>
    [DataContract(Name = "RateItem")]
    public partial class RateItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RateItemID
        /// </summary>
        [DataMember(Name = "rateItemID", EmitDefaultValue = false)]
        public RateItemID? RateItemID { get; set; }

        /// <summary>
        /// Gets or Sets RateItemType
        /// </summary>
        [DataMember(Name = "rateItemType", EmitDefaultValue = false)]
        public RateItemType? RateItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RateItem" /> class.
        /// </summary>
        /// <param name="rateItemID">rateItemID.</param>
        /// <param name="rateItemType">rateItemType.</param>
        /// <param name="rateItemCharge">rateItemCharge.</param>
        /// <param name="rateItemNameLocalization">Used for the localization..</param>
        public RateItem(RateItemID? rateItemID = default(RateItemID?), RateItemType? rateItemType = default(RateItemType?), Currency rateItemCharge = default(Currency), string rateItemNameLocalization = default(string))
        {
            this.RateItemID = rateItemID;
            this.RateItemType = rateItemType;
            this.RateItemCharge = rateItemCharge;
            this.RateItemNameLocalization = rateItemNameLocalization;
        }

        /// <summary>
        /// Gets or Sets RateItemCharge
        /// </summary>
        [DataMember(Name = "rateItemCharge", EmitDefaultValue = false)]
        public Currency RateItemCharge { get; set; }

        /// <summary>
        /// Used for the localization.
        /// </summary>
        /// <value>Used for the localization.</value>
        [DataMember(Name = "rateItemNameLocalization", EmitDefaultValue = false)]
        public string RateItemNameLocalization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RateItem {\n");
            sb.Append("  RateItemID: ").Append(RateItemID).Append("\n");
            sb.Append("  RateItemType: ").Append(RateItemType).Append("\n");
            sb.Append("  RateItemCharge: ").Append(RateItemCharge).Append("\n");
            sb.Append("  RateItemNameLocalization: ").Append(RateItemNameLocalization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
