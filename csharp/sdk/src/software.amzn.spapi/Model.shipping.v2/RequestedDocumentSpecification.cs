/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// The document specifications requested. For calls to the purchaseShipment operation, the shipment purchase fails if the specified document specifications are not among those returned in the response to the getRates operation.
    /// </summary>
    [DataContract(Name = "RequestedDocumentSpecification")]
    public partial class RequestedDocumentSpecification : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", IsRequired = true, EmitDefaultValue = true)]
        public DocumentFormat Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestedDocumentSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestedDocumentSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestedDocumentSpecification" /> class.
        /// </summary>
        /// <param name="format">format (required).</param>
        /// <param name="size">size (required).</param>
        /// <param name="dpi">The dots per inch (DPI) value used in printing. This value represents a measure of the resolution of the document..</param>
        /// <param name="pageLayout">Indicates the position of the label on the paper. Should be the same value as returned in getRates response..</param>
        /// <param name="needFileJoining">When true, files should be stitched together. Otherwise, files should be returned separately. Defaults to false. (required).</param>
        /// <param name="requestedDocumentTypes">A list of the document types requested. (required).</param>
        /// <param name="requestedLabelCustomization">requestedLabelCustomization.</param>
        public RequestedDocumentSpecification(DocumentFormat format = default(DocumentFormat), DocumentSize size = default(DocumentSize), int dpi = default(int), string pageLayout = default(string), bool needFileJoining = default(bool), List<DocumentType> requestedDocumentTypes = default(List<DocumentType>), RequestedLabelCustomization requestedLabelCustomization = default(RequestedLabelCustomization))
        {
            this.Format = format;
            // to ensure "size" is required (not null)
            if (size == null)
            {
                throw new ArgumentNullException("size is a required property for RequestedDocumentSpecification and cannot be null");
            }
            this.Size = size;
            this.NeedFileJoining = needFileJoining;
            // to ensure "requestedDocumentTypes" is required (not null)
            if (requestedDocumentTypes == null)
            {
                throw new ArgumentNullException("requestedDocumentTypes is a required property for RequestedDocumentSpecification and cannot be null");
            }
            this.RequestedDocumentTypes = requestedDocumentTypes;
            this.Dpi = dpi;
            this.PageLayout = pageLayout;
            this.RequestedLabelCustomization = requestedLabelCustomization;
        }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public DocumentSize Size { get; set; }

        /// <summary>
        /// The dots per inch (DPI) value used in printing. This value represents a measure of the resolution of the document.
        /// </summary>
        /// <value>The dots per inch (DPI) value used in printing. This value represents a measure of the resolution of the document.</value>
        [DataMember(Name = "dpi", EmitDefaultValue = false)]
        public int Dpi { get; set; }

        /// <summary>
        /// Indicates the position of the label on the paper. Should be the same value as returned in getRates response.
        /// </summary>
        /// <value>Indicates the position of the label on the paper. Should be the same value as returned in getRates response.</value>
        [DataMember(Name = "pageLayout", EmitDefaultValue = false)]
        public string PageLayout { get; set; }

        /// <summary>
        /// When true, files should be stitched together. Otherwise, files should be returned separately. Defaults to false.
        /// </summary>
        /// <value>When true, files should be stitched together. Otherwise, files should be returned separately. Defaults to false.</value>
        [DataMember(Name = "needFileJoining", IsRequired = true, EmitDefaultValue = true)]
        public bool NeedFileJoining { get; set; }

        /// <summary>
        /// A list of the document types requested.
        /// </summary>
        /// <value>A list of the document types requested.</value>
        [DataMember(Name = "requestedDocumentTypes", IsRequired = true, EmitDefaultValue = true)]
        public List<DocumentType> RequestedDocumentTypes { get; set; }

        /// <summary>
        /// Gets or Sets RequestedLabelCustomization
        /// </summary>
        [DataMember(Name = "requestedLabelCustomization", EmitDefaultValue = false)]
        public RequestedLabelCustomization RequestedLabelCustomization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestedDocumentSpecification {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Dpi: ").Append(Dpi).Append("\n");
            sb.Append("  PageLayout: ").Append(PageLayout).Append("\n");
            sb.Append("  NeedFileJoining: ").Append(NeedFileJoining).Append("\n");
            sb.Append("  RequestedDocumentTypes: ").Append(RequestedDocumentTypes).Append("\n");
            sb.Append("  RequestedLabelCustomization: ").Append(RequestedLabelCustomization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
