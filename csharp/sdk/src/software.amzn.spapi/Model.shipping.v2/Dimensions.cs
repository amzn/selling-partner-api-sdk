/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// A set of measurements for a three-dimensional object.
    /// </summary>
    [DataContract(Name = "Dimensions")]
    public partial class Dimensions : IValidatableObject
    {
        /// <summary>
        /// The unit of measurement.
        /// </summary>
        /// <value>The unit of measurement.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            /// Enum INCH for value: INCH
            /// </summary>
            [EnumMember(Value = "INCH")]
            INCH = 1,

            /// <summary>
            /// Enum CENTIMETER for value: CENTIMETER
            /// </summary>
            [EnumMember(Value = "CENTIMETER")]
            CENTIMETER = 2
        }


        /// <summary>
        /// The unit of measurement.
        /// </summary>
        /// <value>The unit of measurement.</value>
        [DataMember(Name = "unit", IsRequired = true, EmitDefaultValue = true)]
        public UnitEnum Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dimensions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Dimensions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dimensions" /> class.
        /// </summary>
        /// <param name="length">The length of the package. (required).</param>
        /// <param name="width">The width of the package. (required).</param>
        /// <param name="height">The height of the package. (required).</param>
        /// <param name="unit">The unit of measurement. (required).</param>
        public Dimensions(decimal length = default(decimal), decimal width = default(decimal), decimal height = default(decimal), UnitEnum unit = default(UnitEnum))
        {
            this.Length = length;
            this.Width = width;
            this.Height = height;
            this.Unit = unit;
        }

        /// <summary>
        /// The length of the package.
        /// </summary>
        /// <value>The length of the package.</value>
        [DataMember(Name = "length", IsRequired = true, EmitDefaultValue = true)]
        public decimal Length { get; set; }

        /// <summary>
        /// The width of the package.
        /// </summary>
        /// <value>The width of the package.</value>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public decimal Width { get; set; }

        /// <summary>
        /// The height of the package.
        /// </summary>
        /// <value>The height of the package.</value>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public decimal Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Dimensions {\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
