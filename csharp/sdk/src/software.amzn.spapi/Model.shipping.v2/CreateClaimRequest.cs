/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// The request schema for the CreateClaim operation
    /// </summary>
    [DataContract(Name = "CreateClaimRequest")]
    public partial class CreateClaimRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ClaimReason
        /// </summary>
        [DataMember(Name = "claimReason", IsRequired = true, EmitDefaultValue = true)]
        public ClaimReason ClaimReason { get; set; }

        /// <summary>
        /// Gets or Sets SettlementType
        /// </summary>
        [DataMember(Name = "settlementType", IsRequired = true, EmitDefaultValue = true)]
        public SettlementType SettlementType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateClaimRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateClaimRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateClaimRequest" /> class.
        /// </summary>
        /// <param name="trackingId">The carrier generated identifier for a package in a purchased shipment. (required).</param>
        /// <param name="declaredValue">declaredValue.</param>
        /// <param name="claimReason">claimReason (required).</param>
        /// <param name="isReplacementPackageSent">Applicable for only On Amazon shipments to identify if replacement was sent.</param>
        /// <param name="proofs">A list of proof URLs for a claim. Basic URL validation will happen for each URLs present in the list.</param>
        /// <param name="settlementType">settlementType (required).</param>
        public CreateClaimRequest(string trackingId = default(string), Currency declaredValue = default(Currency), ClaimReason claimReason = default(ClaimReason), bool isReplacementPackageSent = default(bool), List<string> proofs = default(List<string>), SettlementType settlementType = default(SettlementType))
        {
            // to ensure "trackingId" is required (not null)
            if (trackingId == null)
            {
                throw new ArgumentNullException("trackingId is a required property for CreateClaimRequest and cannot be null");
            }
            this.TrackingId = trackingId;
            this.ClaimReason = claimReason;
            this.SettlementType = settlementType;
            this.DeclaredValue = declaredValue;
            this.IsReplacementPackageSent = isReplacementPackageSent;
            this.Proofs = proofs;
        }

        /// <summary>
        /// The carrier generated identifier for a package in a purchased shipment.
        /// </summary>
        /// <value>The carrier generated identifier for a package in a purchased shipment.</value>
        [DataMember(Name = "trackingId", IsRequired = true, EmitDefaultValue = true)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredValue
        /// </summary>
        [DataMember(Name = "declaredValue", EmitDefaultValue = false)]
        public Currency DeclaredValue { get; set; }

        /// <summary>
        /// Applicable for only On Amazon shipments to identify if replacement was sent
        /// </summary>
        /// <value>Applicable for only On Amazon shipments to identify if replacement was sent</value>
        [DataMember(Name = "isReplacementPackageSent", EmitDefaultValue = true)]
        public bool IsReplacementPackageSent { get; set; }

        /// <summary>
        /// A list of proof URLs for a claim. Basic URL validation will happen for each URLs present in the list
        /// </summary>
        /// <value>A list of proof URLs for a claim. Basic URL validation will happen for each URLs present in the list</value>
        [DataMember(Name = "proofs", EmitDefaultValue = false)]
        public List<string> Proofs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateClaimRequest {\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  DeclaredValue: ").Append(DeclaredValue).Append("\n");
            sb.Append("  ClaimReason: ").Append(ClaimReason).Append("\n");
            sb.Append("  IsReplacementPackageSent: ").Append(IsReplacementPackageSent).Append("\n");
            sb.Append("  Proofs: ").Append(Proofs).Append("\n");
            sb.Append("  SettlementType: ").Append(SettlementType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
