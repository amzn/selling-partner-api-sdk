/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// Benefits that are included and excluded for each shipping offer. Benefits represents services provided by Amazon (eg. CLAIMS_PROTECTED, etc.) when sellers purchase shipping through Amazon. Benefit details will be made available for any shipment placed on or after January 1st 2024 00:00 UTC.
    /// </summary>
    [DataContract(Name = "Benefits")]
    public partial class Benefits : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Benefits" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Benefits() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Benefits" /> class.
        /// </summary>
        /// <param name="includedBenefits">A list of included benefits. (required).</param>
        /// <param name="excludedBenefits">A list of excluded benefit. Refer to the ExcludeBenefit object for further documentation (required).</param>
        public Benefits(List<string> includedBenefits = default(List<string>), List<ExcludedBenefit> excludedBenefits = default(List<ExcludedBenefit>))
        {
            // to ensure "includedBenefits" is required (not null)
            if (includedBenefits == null)
            {
                throw new ArgumentNullException("includedBenefits is a required property for Benefits and cannot be null");
            }
            this.IncludedBenefits = includedBenefits;
            // to ensure "excludedBenefits" is required (not null)
            if (excludedBenefits == null)
            {
                throw new ArgumentNullException("excludedBenefits is a required property for Benefits and cannot be null");
            }
            this.ExcludedBenefits = excludedBenefits;
        }

        /// <summary>
        /// A list of included benefits.
        /// </summary>
        /// <value>A list of included benefits.</value>
        [DataMember(Name = "includedBenefits", IsRequired = true, EmitDefaultValue = true)]
        public List<string> IncludedBenefits { get; set; }

        /// <summary>
        /// A list of excluded benefit. Refer to the ExcludeBenefit object for further documentation
        /// </summary>
        /// <value>A list of excluded benefit. Refer to the ExcludeBenefit object for further documentation</value>
        [DataMember(Name = "excludedBenefits", IsRequired = true, EmitDefaultValue = true)]
        public List<ExcludedBenefit> ExcludedBenefits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Benefits {\n");
            sb.Append("  IncludedBenefits: ").Append(IncludedBenefits).Append("\n");
            sb.Append("  ExcludedBenefits: ").Append(ExcludedBenefits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
