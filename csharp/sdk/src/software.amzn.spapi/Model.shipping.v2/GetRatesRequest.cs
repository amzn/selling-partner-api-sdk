/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// The request schema for the getRates operation. When the channelType is Amazon, the shipTo address is not required and will be ignored.
    /// </summary>
    [DataContract(Name = "GetRatesRequest")]
    public partial class GetRatesRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ShipmentType
        /// </summary>
        [DataMember(Name = "shipmentType", EmitDefaultValue = false)]
        public ShipmentType? ShipmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRatesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetRatesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRatesRequest" /> class.
        /// </summary>
        /// <param name="shipTo">shipTo.</param>
        /// <param name="shipFrom">shipFrom (required).</param>
        /// <param name="returnTo">returnTo.</param>
        /// <param name="shipDate">The ship date and time (the requested pickup). This defaults to the current date and time..</param>
        /// <param name="shipperInstruction">shipperInstruction.</param>
        /// <param name="packages">A list of packages to be shipped through a shipping service offering. (required).</param>
        /// <param name="valueAddedServices">valueAddedServices.</param>
        /// <param name="taxDetails">A list of tax detail information..</param>
        /// <param name="channelDetails">channelDetails (required).</param>
        /// <param name="clientReferenceDetails">Object to pass additional information about the MCI Integrator shipperType: List of ClientReferenceDetail.</param>
        /// <param name="shipmentType">shipmentType.</param>
        /// <param name="destinationAccessPointDetails">destinationAccessPointDetails.</param>
        /// <param name="carrierAccounts">A list of CarrierAccounts.</param>
        public GetRatesRequest(Address shipTo = default(Address), Address shipFrom = default(Address), Address returnTo = default(Address), DateTime shipDate = default(DateTime), ShipperInstruction shipperInstruction = default(ShipperInstruction), List<Package> packages = default(List<Package>), ValueAddedServiceDetails valueAddedServices = default(ValueAddedServiceDetails), List<TaxDetail> taxDetails = default(List<TaxDetail>), ChannelDetails channelDetails = default(ChannelDetails), List<ClientReferenceDetail> clientReferenceDetails = default(List<ClientReferenceDetail>), ShipmentType? shipmentType = default(ShipmentType?), AccessPointDetails destinationAccessPointDetails = default(AccessPointDetails), List<CarrierAccount> carrierAccounts = default(List<CarrierAccount>))
        {
            // to ensure "shipFrom" is required (not null)
            if (shipFrom == null)
            {
                throw new ArgumentNullException("shipFrom is a required property for GetRatesRequest and cannot be null");
            }
            this.ShipFrom = shipFrom;
            // to ensure "packages" is required (not null)
            if (packages == null)
            {
                throw new ArgumentNullException("packages is a required property for GetRatesRequest and cannot be null");
            }
            this.Packages = packages;
            // to ensure "channelDetails" is required (not null)
            if (channelDetails == null)
            {
                throw new ArgumentNullException("channelDetails is a required property for GetRatesRequest and cannot be null");
            }
            this.ChannelDetails = channelDetails;
            this.ShipTo = shipTo;
            this.ReturnTo = returnTo;
            this.ShipDate = shipDate;
            this.ShipperInstruction = shipperInstruction;
            this.ValueAddedServices = valueAddedServices;
            this.TaxDetails = taxDetails;
            this.ClientReferenceDetails = clientReferenceDetails;
            this.ShipmentType = shipmentType;
            this.DestinationAccessPointDetails = destinationAccessPointDetails;
            this.CarrierAccounts = carrierAccounts;
        }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name = "shipTo", EmitDefaultValue = false)]
        public Address ShipTo { get; set; }

        /// <summary>
        /// Gets or Sets ShipFrom
        /// </summary>
        [DataMember(Name = "shipFrom", IsRequired = true, EmitDefaultValue = true)]
        public Address ShipFrom { get; set; }

        /// <summary>
        /// Gets or Sets ReturnTo
        /// </summary>
        [DataMember(Name = "returnTo", EmitDefaultValue = false)]
        public Address ReturnTo { get; set; }

        /// <summary>
        /// The ship date and time (the requested pickup). This defaults to the current date and time.
        /// </summary>
        /// <value>The ship date and time (the requested pickup). This defaults to the current date and time.</value>
        [DataMember(Name = "shipDate", EmitDefaultValue = false)]
        public DateTime ShipDate { get; set; }

        /// <summary>
        /// Gets or Sets ShipperInstruction
        /// </summary>
        [DataMember(Name = "shipperInstruction", EmitDefaultValue = false)]
        public ShipperInstruction ShipperInstruction { get; set; }

        /// <summary>
        /// A list of packages to be shipped through a shipping service offering.
        /// </summary>
        /// <value>A list of packages to be shipped through a shipping service offering.</value>
        [DataMember(Name = "packages", IsRequired = true, EmitDefaultValue = true)]
        public List<Package> Packages { get; set; }

        /// <summary>
        /// Gets or Sets ValueAddedServices
        /// </summary>
        [DataMember(Name = "valueAddedServices", EmitDefaultValue = false)]
        public ValueAddedServiceDetails ValueAddedServices { get; set; }

        /// <summary>
        /// A list of tax detail information.
        /// </summary>
        /// <value>A list of tax detail information.</value>
        [DataMember(Name = "taxDetails", EmitDefaultValue = false)]
        public List<TaxDetail> TaxDetails { get; set; }

        /// <summary>
        /// Gets or Sets ChannelDetails
        /// </summary>
        [DataMember(Name = "channelDetails", IsRequired = true, EmitDefaultValue = true)]
        public ChannelDetails ChannelDetails { get; set; }

        /// <summary>
        /// Object to pass additional information about the MCI Integrator shipperType: List of ClientReferenceDetail
        /// </summary>
        /// <value>Object to pass additional information about the MCI Integrator shipperType: List of ClientReferenceDetail</value>
        [DataMember(Name = "clientReferenceDetails", EmitDefaultValue = false)]
        public List<ClientReferenceDetail> ClientReferenceDetails { get; set; }

        /// <summary>
        /// Gets or Sets DestinationAccessPointDetails
        /// </summary>
        [DataMember(Name = "destinationAccessPointDetails", EmitDefaultValue = false)]
        public AccessPointDetails DestinationAccessPointDetails { get; set; }

        /// <summary>
        /// A list of CarrierAccounts
        /// </summary>
        /// <value>A list of CarrierAccounts</value>
        [DataMember(Name = "carrierAccounts", EmitDefaultValue = false)]
        public List<CarrierAccount> CarrierAccounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetRatesRequest {\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  ShipFrom: ").Append(ShipFrom).Append("\n");
            sb.Append("  ReturnTo: ").Append(ReturnTo).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  ShipperInstruction: ").Append(ShipperInstruction).Append("\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  ValueAddedServices: ").Append(ValueAddedServices).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  ChannelDetails: ").Append(ChannelDetails).Append("\n");
            sb.Append("  ClientReferenceDetails: ").Append(ClientReferenceDetails).Append("\n");
            sb.Append("  ShipmentType: ").Append(ShipmentType).Append("\n");
            sb.Append("  DestinationAccessPointDetails: ").Append(DestinationAccessPointDetails).Append("\n");
            sb.Append("  CarrierAccounts: ").Append(CarrierAccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
