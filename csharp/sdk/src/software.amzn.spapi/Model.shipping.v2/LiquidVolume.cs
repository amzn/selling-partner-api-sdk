/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// Liquid Volume.
    /// </summary>
    [DataContract(Name = "LiquidVolume")]
    public partial class LiquidVolume : IValidatableObject
    {
        /// <summary>
        /// The unit of measurement.
        /// </summary>
        /// <value>The unit of measurement.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            /// Enum ML for value: ML
            /// </summary>
            [EnumMember(Value = "ML")]
            ML = 1,

            /// <summary>
            /// Enum L for value: L
            /// </summary>
            [EnumMember(Value = "L")]
            L = 2,

            /// <summary>
            /// Enum FLOZ for value: FL_OZ
            /// </summary>
            [EnumMember(Value = "FL_OZ")]
            FLOZ = 3,

            /// <summary>
            /// Enum GAL for value: GAL
            /// </summary>
            [EnumMember(Value = "GAL")]
            GAL = 4,

            /// <summary>
            /// Enum PT for value: PT
            /// </summary>
            [EnumMember(Value = "PT")]
            PT = 5,

            /// <summary>
            /// Enum QT for value: QT
            /// </summary>
            [EnumMember(Value = "QT")]
            QT = 6,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 7
        }


        /// <summary>
        /// The unit of measurement.
        /// </summary>
        /// <value>The unit of measurement.</value>
        [DataMember(Name = "unit", IsRequired = true, EmitDefaultValue = true)]
        public UnitEnum Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidVolume" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LiquidVolume() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidVolume" /> class.
        /// </summary>
        /// <param name="unit">The unit of measurement. (required).</param>
        /// <param name="value">The measurement value. (required).</param>
        public LiquidVolume(UnitEnum unit = default(UnitEnum), decimal value = default(decimal))
        {
            this.Unit = unit;
            this.Value = value;
        }

        /// <summary>
        /// The measurement value.
        /// </summary>
        /// <value>The measurement value.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public decimal Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiquidVolume {\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
