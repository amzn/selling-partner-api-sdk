/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// The address.
    /// </summary>
    [DataContract(Name = "Address")]
    public partial class Address : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="name">The name of the person, business or institution at the address. (required).</param>
        /// <param name="addressLine1">The first line of the address. (required).</param>
        /// <param name="addressLine2">Additional address information, if required..</param>
        /// <param name="addressLine3">Additional address information, if required..</param>
        /// <param name="companyName">The name of the business or institution associated with the address..</param>
        /// <param name="stateOrRegion">The state, county or region where the person, business or institution is located. (required).</param>
        /// <param name="city">The city or town where the person, business or institution is located. (required).</param>
        /// <param name="countryCode">The two digit country code. Follows ISO 3166-1 alpha-2 format. (required).</param>
        /// <param name="postalCode">The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation. (required).</param>
        /// <param name="email">The email address of the contact associated with the address..</param>
        /// <param name="phoneNumber">The phone number of the person, business or institution located at that address, including the country calling code..</param>
        /// <param name="geocode">geocode.</param>
        public Address(string name = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string companyName = default(string), string stateOrRegion = default(string), string city = default(string), string countryCode = default(string), string postalCode = default(string), string email = default(string), string phoneNumber = default(string), Geocode geocode = default(Geocode))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Address and cannot be null");
            }
            this.Name = name;
            // to ensure "addressLine1" is required (not null)
            if (addressLine1 == null)
            {
                throw new ArgumentNullException("addressLine1 is a required property for Address and cannot be null");
            }
            this.AddressLine1 = addressLine1;
            // to ensure "stateOrRegion" is required (not null)
            if (stateOrRegion == null)
            {
                throw new ArgumentNullException("stateOrRegion is a required property for Address and cannot be null");
            }
            this.StateOrRegion = stateOrRegion;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for Address and cannot be null");
            }
            this.City = city;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for Address and cannot be null");
            }
            this.CountryCode = countryCode;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for Address and cannot be null");
            }
            this.PostalCode = postalCode;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.CompanyName = companyName;
            this.Email = email;
            this.PhoneNumber = phoneNumber;
            this.Geocode = geocode;
        }

        /// <summary>
        /// The name of the person, business or institution at the address.
        /// </summary>
        /// <value>The name of the person, business or institution at the address.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [DataMember(Name = "addressLine1", IsRequired = true, EmitDefaultValue = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Additional address information, if required.
        /// </summary>
        /// <value>Additional address information, if required.</value>
        [DataMember(Name = "addressLine2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Additional address information, if required.
        /// </summary>
        /// <value>Additional address information, if required.</value>
        [DataMember(Name = "addressLine3", EmitDefaultValue = false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The name of the business or institution associated with the address.
        /// </summary>
        /// <value>The name of the business or institution associated with the address.</value>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The state, county or region where the person, business or institution is located.
        /// </summary>
        /// <value>The state, county or region where the person, business or institution is located.</value>
        [DataMember(Name = "stateOrRegion", IsRequired = true, EmitDefaultValue = true)]
        public string StateOrRegion { get; set; }

        /// <summary>
        /// The city or town where the person, business or institution is located.
        /// </summary>
        /// <value>The city or town where the person, business or institution is located.</value>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// The two digit country code. Follows ISO 3166-1 alpha-2 format.
        /// </summary>
        /// <value>The two digit country code. Follows ISO 3166-1 alpha-2 format.</value>
        [DataMember(Name = "countryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
        /// </summary>
        /// <value>The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.</value>
        [DataMember(Name = "postalCode", IsRequired = true, EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The email address of the contact associated with the address.
        /// </summary>
        /// <value>The email address of the contact associated with the address.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The phone number of the person, business or institution located at that address, including the country calling code.
        /// </summary>
        /// <value>The phone number of the person, business or institution located at that address, including the country calling code.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Geocode
        /// </summary>
        [DataMember(Name = "geocode", EmitDefaultValue = false)]
        public Geocode Geocode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  StateOrRegion: ").Append(StateOrRegion).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Geocode: ").Append(Geocode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 50.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // AddressLine1 (string) maxLength
            if (this.AddressLine1 != null && this.AddressLine1.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be less than 60.", new [] { "AddressLine1" });
            }

            // AddressLine1 (string) minLength
            if (this.AddressLine1 != null && this.AddressLine1.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be greater than 1.", new [] { "AddressLine1" });
            }

            // AddressLine2 (string) maxLength
            if (this.AddressLine2 != null && this.AddressLine2.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be less than 60.", new [] { "AddressLine2" });
            }

            // AddressLine2 (string) minLength
            if (this.AddressLine2 != null && this.AddressLine2.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be greater than 1.", new [] { "AddressLine2" });
            }

            // AddressLine3 (string) maxLength
            if (this.AddressLine3 != null && this.AddressLine3.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AddressLine3, length must be less than 60.", new [] { "AddressLine3" });
            }

            // AddressLine3 (string) minLength
            if (this.AddressLine3 != null && this.AddressLine3.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AddressLine3, length must be greater than 1.", new [] { "AddressLine3" });
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 64.", new [] { "Email" });
            }

            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be less than 20.", new [] { "PhoneNumber" });
            }

            // PhoneNumber (string) minLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be greater than 1.", new [] { "PhoneNumber" });
            }

            yield break;
        }
    }

}
