/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// The payload for the getShipmentDocuments operation.
    /// </summary>
    [DataContract(Name = "GetShipmentDocumentsResult")]
    public partial class GetShipmentDocumentsResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetShipmentDocumentsResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetShipmentDocumentsResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetShipmentDocumentsResult" /> class.
        /// </summary>
        /// <param name="shipmentId">The unique shipment identifier provided by a shipping service. (required).</param>
        /// <param name="packageDocumentDetail">packageDocumentDetail (required).</param>
        /// <param name="benefits">benefits.</param>
        public GetShipmentDocumentsResult(string shipmentId = default(string), PackageDocumentDetail packageDocumentDetail = default(PackageDocumentDetail), Benefits benefits = default(Benefits))
        {
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new ArgumentNullException("shipmentId is a required property for GetShipmentDocumentsResult and cannot be null");
            }
            this.ShipmentId = shipmentId;
            // to ensure "packageDocumentDetail" is required (not null)
            if (packageDocumentDetail == null)
            {
                throw new ArgumentNullException("packageDocumentDetail is a required property for GetShipmentDocumentsResult and cannot be null");
            }
            this.PackageDocumentDetail = packageDocumentDetail;
            this.Benefits = benefits;
        }

        /// <summary>
        /// The unique shipment identifier provided by a shipping service.
        /// </summary>
        /// <value>The unique shipment identifier provided by a shipping service.</value>
        [DataMember(Name = "shipmentId", IsRequired = true, EmitDefaultValue = true)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Gets or Sets PackageDocumentDetail
        /// </summary>
        [DataMember(Name = "packageDocumentDetail", IsRequired = true, EmitDefaultValue = true)]
        public PackageDocumentDetail PackageDocumentDetail { get; set; }

        /// <summary>
        /// Gets or Sets Benefits
        /// </summary>
        [DataMember(Name = "benefits", EmitDefaultValue = false)]
        public Benefits Benefits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetShipmentDocumentsResult {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  PackageDocumentDetail: ").Append(PackageDocumentDetail).Append("\n");
            sb.Append("  Benefits: ").Append(Benefits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
