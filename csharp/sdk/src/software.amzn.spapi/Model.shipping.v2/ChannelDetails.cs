/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// Shipment source channel related information.
    /// </summary>
    [DataContract(Name = "ChannelDetails")]
    public partial class ChannelDetails : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ChannelType
        /// </summary>
        [DataMember(Name = "channelType", IsRequired = true, EmitDefaultValue = true)]
        public ChannelType ChannelType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelDetails" /> class.
        /// </summary>
        /// <param name="channelType">channelType (required).</param>
        /// <param name="amazonOrderDetails">amazonOrderDetails.</param>
        /// <param name="amazonShipmentDetails">amazonShipmentDetails.</param>
        public ChannelDetails(ChannelType channelType = default(ChannelType), AmazonOrderDetails amazonOrderDetails = default(AmazonOrderDetails), AmazonShipmentDetails amazonShipmentDetails = default(AmazonShipmentDetails))
        {
            this.ChannelType = channelType;
            this.AmazonOrderDetails = amazonOrderDetails;
            this.AmazonShipmentDetails = amazonShipmentDetails;
        }

        /// <summary>
        /// Gets or Sets AmazonOrderDetails
        /// </summary>
        [DataMember(Name = "amazonOrderDetails", EmitDefaultValue = false)]
        public AmazonOrderDetails AmazonOrderDetails { get; set; }

        /// <summary>
        /// Gets or Sets AmazonShipmentDetails
        /// </summary>
        [DataMember(Name = "amazonShipmentDetails", EmitDefaultValue = false)]
        public AmazonShipmentDetails AmazonShipmentDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelDetails {\n");
            sb.Append("  ChannelType: ").Append(ChannelType).Append("\n");
            sb.Append("  AmazonOrderDetails: ").Append(AmazonOrderDetails).Append("\n");
            sb.Append("  AmazonShipmentDetails: ").Append(AmazonShipmentDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
