/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// Detailed information for an ineligible shipping service offering.
    /// </summary>
    [DataContract(Name = "IneligibleRate")]
    public partial class IneligibleRate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IneligibleRate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IneligibleRate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IneligibleRate" /> class.
        /// </summary>
        /// <param name="serviceId">An identifier for the shipping service. (required).</param>
        /// <param name="serviceName">The name of the shipping service. (required).</param>
        /// <param name="carrierName">The carrier name for the offering. (required).</param>
        /// <param name="carrierId">The carrier identifier for the offering, provided by the carrier. (required).</param>
        /// <param name="ineligibilityReasons">A list of reasons why a shipping service offering is ineligible. (required).</param>
        public IneligibleRate(string serviceId = default(string), string serviceName = default(string), string carrierName = default(string), string carrierId = default(string), List<IneligibilityReason> ineligibilityReasons = default(List<IneligibilityReason>))
        {
            // to ensure "serviceId" is required (not null)
            if (serviceId == null)
            {
                throw new ArgumentNullException("serviceId is a required property for IneligibleRate and cannot be null");
            }
            this.ServiceId = serviceId;
            // to ensure "serviceName" is required (not null)
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName is a required property for IneligibleRate and cannot be null");
            }
            this.ServiceName = serviceName;
            // to ensure "carrierName" is required (not null)
            if (carrierName == null)
            {
                throw new ArgumentNullException("carrierName is a required property for IneligibleRate and cannot be null");
            }
            this.CarrierName = carrierName;
            // to ensure "carrierId" is required (not null)
            if (carrierId == null)
            {
                throw new ArgumentNullException("carrierId is a required property for IneligibleRate and cannot be null");
            }
            this.CarrierId = carrierId;
            // to ensure "ineligibilityReasons" is required (not null)
            if (ineligibilityReasons == null)
            {
                throw new ArgumentNullException("ineligibilityReasons is a required property for IneligibleRate and cannot be null");
            }
            this.IneligibilityReasons = ineligibilityReasons;
        }

        /// <summary>
        /// An identifier for the shipping service.
        /// </summary>
        /// <value>An identifier for the shipping service.</value>
        [DataMember(Name = "serviceId", IsRequired = true, EmitDefaultValue = true)]
        public string ServiceId { get; set; }

        /// <summary>
        /// The name of the shipping service.
        /// </summary>
        /// <value>The name of the shipping service.</value>
        [DataMember(Name = "serviceName", IsRequired = true, EmitDefaultValue = true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// The carrier name for the offering.
        /// </summary>
        /// <value>The carrier name for the offering.</value>
        [DataMember(Name = "carrierName", IsRequired = true, EmitDefaultValue = true)]
        public string CarrierName { get; set; }

        /// <summary>
        /// The carrier identifier for the offering, provided by the carrier.
        /// </summary>
        /// <value>The carrier identifier for the offering, provided by the carrier.</value>
        [DataMember(Name = "carrierId", IsRequired = true, EmitDefaultValue = true)]
        public string CarrierId { get; set; }

        /// <summary>
        /// A list of reasons why a shipping service offering is ineligible.
        /// </summary>
        /// <value>A list of reasons why a shipping service offering is ineligible.</value>
        [DataMember(Name = "ineligibilityReasons", IsRequired = true, EmitDefaultValue = true)]
        public List<IneligibilityReason> IneligibilityReasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IneligibleRate {\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  IneligibilityReasons: ").Append(IneligibilityReasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
