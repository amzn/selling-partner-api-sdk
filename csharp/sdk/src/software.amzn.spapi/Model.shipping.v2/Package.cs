/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// A package to be shipped through a shipping service offering.
    /// </summary>
    [DataContract(Name = "Package")]
    public partial class Package : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Package() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        /// <param name="dimensions">dimensions (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="insuredValue">insuredValue (required).</param>
        /// <param name="isHazmat">When true, the package contains hazardous materials. Defaults to false..</param>
        /// <param name="sellerDisplayName">The seller name displayed on the label..</param>
        /// <param name="charges">A list of charges based on the shipping service charges applied on a package..</param>
        /// <param name="packageClientReferenceId">A client provided unique identifier for a package being shipped. This value should be saved by the client to pass as a parameter to the getShipmentDocuments operation. (required).</param>
        /// <param name="items">A list of items. (required).</param>
        public Package(Dimensions dimensions = default(Dimensions), Weight weight = default(Weight), Currency insuredValue = default(Currency), bool isHazmat = default(bool), string sellerDisplayName = default(string), List<ChargeComponent> charges = default(List<ChargeComponent>), string packageClientReferenceId = default(string), List<Item> items = default(List<Item>))
        {
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new ArgumentNullException("dimensions is a required property for Package and cannot be null");
            }
            this.Dimensions = dimensions;
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new ArgumentNullException("weight is a required property for Package and cannot be null");
            }
            this.Weight = weight;
            // to ensure "insuredValue" is required (not null)
            if (insuredValue == null)
            {
                throw new ArgumentNullException("insuredValue is a required property for Package and cannot be null");
            }
            this.InsuredValue = insuredValue;
            // to ensure "packageClientReferenceId" is required (not null)
            if (packageClientReferenceId == null)
            {
                throw new ArgumentNullException("packageClientReferenceId is a required property for Package and cannot be null");
            }
            this.PackageClientReferenceId = packageClientReferenceId;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for Package and cannot be null");
            }
            this.Items = items;
            this.IsHazmat = isHazmat;
            this.SellerDisplayName = sellerDisplayName;
            this.Charges = charges;
        }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", IsRequired = true, EmitDefaultValue = true)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Gets or Sets InsuredValue
        /// </summary>
        [DataMember(Name = "insuredValue", IsRequired = true, EmitDefaultValue = true)]
        public Currency InsuredValue { get; set; }

        /// <summary>
        /// When true, the package contains hazardous materials. Defaults to false.
        /// </summary>
        /// <value>When true, the package contains hazardous materials. Defaults to false.</value>
        [DataMember(Name = "isHazmat", EmitDefaultValue = true)]
        public bool IsHazmat { get; set; }

        /// <summary>
        /// The seller name displayed on the label.
        /// </summary>
        /// <value>The seller name displayed on the label.</value>
        [DataMember(Name = "sellerDisplayName", EmitDefaultValue = false)]
        public string SellerDisplayName { get; set; }

        /// <summary>
        /// A list of charges based on the shipping service charges applied on a package.
        /// </summary>
        /// <value>A list of charges based on the shipping service charges applied on a package.</value>
        [DataMember(Name = "charges", EmitDefaultValue = false)]
        public List<ChargeComponent> Charges { get; set; }

        /// <summary>
        /// A client provided unique identifier for a package being shipped. This value should be saved by the client to pass as a parameter to the getShipmentDocuments operation.
        /// </summary>
        /// <value>A client provided unique identifier for a package being shipped. This value should be saved by the client to pass as a parameter to the getShipmentDocuments operation.</value>
        [DataMember(Name = "packageClientReferenceId", IsRequired = true, EmitDefaultValue = true)]
        public string PackageClientReferenceId { get; set; }

        /// <summary>
        /// A list of items.
        /// </summary>
        /// <value>A list of items.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<Item> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Package {\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  InsuredValue: ").Append(InsuredValue).Append("\n");
            sb.Append("  IsHazmat: ").Append(IsHazmat).Append("\n");
            sb.Append("  SellerDisplayName: ").Append(SellerDisplayName).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("  PackageClientReferenceId: ").Append(PackageClientReferenceId).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
