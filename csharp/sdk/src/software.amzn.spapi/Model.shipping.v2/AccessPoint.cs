/*
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.shipping.v2
{
    /// <summary>
    /// Access point details
    /// </summary>
    [DataContract(Name = "AccessPoint")]
    public partial class AccessPoint : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public AccessPointType? Type { get; set; }
        /// <summary>
        /// Assistance type enum for Access point i.e. STAFF_ASSISTED or SELF_ASSISTED
        /// </summary>
        /// <value>Assistance type enum for Access point i.e. STAFF_ASSISTED or SELF_ASSISTED</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssistanceTypeEnum
        {
            /// <summary>
            /// Enum STAFFASSISTED for value: STAFF_ASSISTED
            /// </summary>
            [EnumMember(Value = "STAFF_ASSISTED")]
            STAFFASSISTED = 1,

            /// <summary>
            /// Enum SELFASSISTED for value: SELF_ASSISTED
            /// </summary>
            [EnumMember(Value = "SELF_ASSISTED")]
            SELFASSISTED = 2
        }


        /// <summary>
        /// Assistance type enum for Access point i.e. STAFF_ASSISTED or SELF_ASSISTED
        /// </summary>
        /// <value>Assistance type enum for Access point i.e. STAFF_ASSISTED or SELF_ASSISTED</value>
        [DataMember(Name = "assistanceType", EmitDefaultValue = false)]
        public AssistanceTypeEnum? AssistanceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessPoint" /> class.
        /// </summary>
        /// <param name="accessPointId">Unique identifier for the access point.</param>
        /// <param name="name">Name of entity (store/hub etc) where this access point is located.</param>
        /// <param name="timezone">Timezone of access point.</param>
        /// <param name="type">type.</param>
        /// <param name="accessibilityAttributes">accessibilityAttributes.</param>
        /// <param name="address">address.</param>
        /// <param name="exceptionOperatingHours">Exception operating hours for Access Point.</param>
        /// <param name="assistanceType">Assistance type enum for Access point i.e. STAFF_ASSISTED or SELF_ASSISTED.</param>
        /// <param name="score">The score of access point, based on proximity to postal code and sorting preference. This can be used to sort access point results on shipper&#39;s end..</param>
        /// <param name="standardOperatingHours">Map of day of the week to operating hours of that day.</param>
        public AccessPoint(string accessPointId = default(string), string name = default(string), string timezone = default(string), AccessPointType? type = default(AccessPointType?), AccessibilityAttributes accessibilityAttributes = default(AccessibilityAttributes), Address address = default(Address), List<ExceptionOperatingHours> exceptionOperatingHours = default(List<ExceptionOperatingHours>), AssistanceTypeEnum? assistanceType = default(AssistanceTypeEnum?), string score = default(string), Dictionary<string, OperatingHours> standardOperatingHours = default(Dictionary<string, OperatingHours>))
        {
            this.AccessPointId = accessPointId;
            this.Name = name;
            this.Timezone = timezone;
            this.Type = type;
            this.AccessibilityAttributes = accessibilityAttributes;
            this.Address = address;
            this.ExceptionOperatingHours = exceptionOperatingHours;
            this.AssistanceType = assistanceType;
            this.Score = score;
            this.StandardOperatingHours = standardOperatingHours;
        }

        /// <summary>
        /// Unique identifier for the access point
        /// </summary>
        /// <value>Unique identifier for the access point</value>
        [DataMember(Name = "accessPointId", EmitDefaultValue = false)]
        public string AccessPointId { get; set; }

        /// <summary>
        /// Name of entity (store/hub etc) where this access point is located
        /// </summary>
        /// <value>Name of entity (store/hub etc) where this access point is located</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Timezone of access point
        /// </summary>
        /// <value>Timezone of access point</value>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets AccessibilityAttributes
        /// </summary>
        [DataMember(Name = "accessibilityAttributes", EmitDefaultValue = false)]
        public AccessibilityAttributes AccessibilityAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Exception operating hours for Access Point
        /// </summary>
        /// <value>Exception operating hours for Access Point</value>
        [DataMember(Name = "exceptionOperatingHours", EmitDefaultValue = false)]
        public List<ExceptionOperatingHours> ExceptionOperatingHours { get; set; }

        /// <summary>
        /// The score of access point, based on proximity to postal code and sorting preference. This can be used to sort access point results on shipper&#39;s end.
        /// </summary>
        /// <value>The score of access point, based on proximity to postal code and sorting preference. This can be used to sort access point results on shipper&#39;s end.</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public string Score { get; set; }

        /// <summary>
        /// Map of day of the week to operating hours of that day
        /// </summary>
        /// <value>Map of day of the week to operating hours of that day</value>
        [DataMember(Name = "standardOperatingHours", EmitDefaultValue = false)]
        public Dictionary<string, OperatingHours> StandardOperatingHours { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccessPoint {\n");
            sb.Append("  AccessPointId: ").Append(AccessPointId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AccessibilityAttributes: ").Append(AccessibilityAttributes).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ExceptionOperatingHours: ").Append(ExceptionOperatingHours).Append("\n");
            sb.Append("  AssistanceType: ").Append(AssistanceType).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  StandardOperatingHours: ").Append(StandardOperatingHours).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
