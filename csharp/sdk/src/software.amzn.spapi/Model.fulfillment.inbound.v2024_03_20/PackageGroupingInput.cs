/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Packing information for the inbound plan.
    /// </summary>
    [DataContract(Name = "PackageGroupingInput")]
    public partial class PackageGroupingInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageGroupingInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PackageGroupingInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageGroupingInput" /> class.
        /// </summary>
        /// <param name="boxes">Box level information being provided. (required).</param>
        /// <param name="packingGroupId">The ID of the &#x60;packingGroup&#x60; that packages are grouped according to. The &#x60;PackingGroupId&#x60; can only be provided before placement confirmation, and it must belong to the confirmed &#x60;PackingOption&#x60;. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request..</param>
        /// <param name="shipmentId">The ID of the shipment that packages are grouped according to. The &#x60;ShipmentId&#x60; can only be provided after placement confirmation, and the shipment must belong to the confirmed placement option. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request..</param>
        public PackageGroupingInput(List<BoxInput> boxes = default(List<BoxInput>), string packingGroupId = default(string), string shipmentId = default(string))
        {
            // to ensure "boxes" is required (not null)
            if (boxes == null)
            {
                throw new ArgumentNullException("boxes is a required property for PackageGroupingInput and cannot be null");
            }
            this.Boxes = boxes;
            this.PackingGroupId = packingGroupId;
            this.ShipmentId = shipmentId;
        }

        /// <summary>
        /// Box level information being provided.
        /// </summary>
        /// <value>Box level information being provided.</value>
        [DataMember(Name = "boxes", IsRequired = true, EmitDefaultValue = true)]
        public List<BoxInput> Boxes { get; set; }

        /// <summary>
        /// The ID of the &#x60;packingGroup&#x60; that packages are grouped according to. The &#x60;PackingGroupId&#x60; can only be provided before placement confirmation, and it must belong to the confirmed &#x60;PackingOption&#x60;. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request.
        /// </summary>
        /// <value>The ID of the &#x60;packingGroup&#x60; that packages are grouped according to. The &#x60;PackingGroupId&#x60; can only be provided before placement confirmation, and it must belong to the confirmed &#x60;PackingOption&#x60;. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request.</value>
        [DataMember(Name = "packingGroupId", EmitDefaultValue = false)]
        public string PackingGroupId { get; set; }

        /// <summary>
        /// The ID of the shipment that packages are grouped according to. The &#x60;ShipmentId&#x60; can only be provided after placement confirmation, and the shipment must belong to the confirmed placement option. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request.
        /// </summary>
        /// <value>The ID of the shipment that packages are grouped according to. The &#x60;ShipmentId&#x60; can only be provided after placement confirmation, and the shipment must belong to the confirmed placement option. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageGroupingInput {\n");
            sb.Append("  Boxes: ").Append(Boxes).Append("\n");
            sb.Append("  PackingGroupId: ").Append(PackingGroupId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PackingGroupId (string) maxLength
            if (this.PackingGroupId != null && this.PackingGroupId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for PackingGroupId, length must be less than 38.", new [] { "PackingGroupId" });
            }

            // PackingGroupId (string) minLength
            if (this.PackingGroupId != null && this.PackingGroupId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for PackingGroupId, length must be greater than 38.", new [] { "PackingGroupId" });
            }

            if (this.PackingGroupId != null) {
                // PackingGroupId (string) pattern
                Regex regexPackingGroupId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexPackingGroupId.Match(this.PackingGroupId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackingGroupId, must match a pattern of " + regexPackingGroupId, new [] { "PackingGroupId" });
                }
            }

            // ShipmentId (string) maxLength
            if (this.ShipmentId != null && this.ShipmentId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for ShipmentId, length must be less than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) minLength
            if (this.ShipmentId != null && this.ShipmentId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for ShipmentId, length must be greater than 38.", new [] { "ShipmentId" });
            }

            if (this.ShipmentId != null) {
                // ShipmentId (string) pattern
                Regex regexShipmentId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexShipmentId.Match(this.ShipmentId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, must match a pattern of " + regexShipmentId, new [] { "ShipmentId" });
                }
            }

            yield break;
        }
    }

}
