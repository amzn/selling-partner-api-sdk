/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// An MSKU and its related prep details.
    /// </summary>
    [DataContract(Name = "MskuPrepDetail")]
    public partial class MskuPrepDetail : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AllOwnersConstraint
        /// </summary>
        [DataMember(Name = "allOwnersConstraint", EmitDefaultValue = false)]
        public AllOwnersConstraint? AllOwnersConstraint { get; set; }

        /// <summary>
        /// Gets or Sets LabelOwnerConstraint
        /// </summary>
        [DataMember(Name = "labelOwnerConstraint", EmitDefaultValue = false)]
        public OwnerConstraint? LabelOwnerConstraint { get; set; }

        /// <summary>
        /// Gets or Sets PrepCategory
        /// </summary>
        [DataMember(Name = "prepCategory", IsRequired = true, EmitDefaultValue = true)]
        public PrepCategory PrepCategory { get; set; }

        /// <summary>
        /// Gets or Sets PrepOwnerConstraint
        /// </summary>
        [DataMember(Name = "prepOwnerConstraint", EmitDefaultValue = false)]
        public OwnerConstraint? PrepOwnerConstraint { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MskuPrepDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MskuPrepDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MskuPrepDetail" /> class.
        /// </summary>
        /// <param name="allOwnersConstraint">allOwnersConstraint.</param>
        /// <param name="labelOwnerConstraint">labelOwnerConstraint.</param>
        /// <param name="msku">The merchant SKU, a merchant-supplied identifier for a specific SKU. (required).</param>
        /// <param name="prepCategory">prepCategory (required).</param>
        /// <param name="prepOwnerConstraint">prepOwnerConstraint.</param>
        /// <param name="prepTypes">A list of preparation types associated with a preparation category. (required).</param>
        public MskuPrepDetail(AllOwnersConstraint? allOwnersConstraint = default(AllOwnersConstraint?), OwnerConstraint? labelOwnerConstraint = default(OwnerConstraint?), string msku = default(string), PrepCategory prepCategory = default(PrepCategory), OwnerConstraint? prepOwnerConstraint = default(OwnerConstraint?), List<PrepType> prepTypes = default(List<PrepType>))
        {
            // to ensure "msku" is required (not null)
            if (msku == null)
            {
                throw new ArgumentNullException("msku is a required property for MskuPrepDetail and cannot be null");
            }
            this.Msku = msku;
            this.PrepCategory = prepCategory;
            // to ensure "prepTypes" is required (not null)
            if (prepTypes == null)
            {
                throw new ArgumentNullException("prepTypes is a required property for MskuPrepDetail and cannot be null");
            }
            this.PrepTypes = prepTypes;
            this.AllOwnersConstraint = allOwnersConstraint;
            this.LabelOwnerConstraint = labelOwnerConstraint;
            this.PrepOwnerConstraint = prepOwnerConstraint;
        }

        /// <summary>
        /// The merchant SKU, a merchant-supplied identifier for a specific SKU.
        /// </summary>
        /// <value>The merchant SKU, a merchant-supplied identifier for a specific SKU.</value>
        [DataMember(Name = "msku", IsRequired = true, EmitDefaultValue = true)]
        public string Msku { get; set; }

        /// <summary>
        /// A list of preparation types associated with a preparation category.
        /// </summary>
        /// <value>A list of preparation types associated with a preparation category.</value>
        [DataMember(Name = "prepTypes", IsRequired = true, EmitDefaultValue = true)]
        public List<PrepType> PrepTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MskuPrepDetail {\n");
            sb.Append("  AllOwnersConstraint: ").Append(AllOwnersConstraint).Append("\n");
            sb.Append("  LabelOwnerConstraint: ").Append(LabelOwnerConstraint).Append("\n");
            sb.Append("  Msku: ").Append(Msku).Append("\n");
            sb.Append("  PrepCategory: ").Append(PrepCategory).Append("\n");
            sb.Append("  PrepOwnerConstraint: ").Append(PrepOwnerConstraint).Append("\n");
            sb.Append("  PrepTypes: ").Append(PrepTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Msku (string) maxLength
            if (this.Msku != null && this.Msku.Length > 40)
            {
                yield return new ValidationResult("Invalid value for Msku, length must be less than 40.", new [] { "Msku" });
            }

            // Msku (string) minLength
            if (this.Msku != null && this.Msku.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Msku, length must be greater than 1.", new [] { "Msku" });
            }

            yield break;
        }
    }

}
