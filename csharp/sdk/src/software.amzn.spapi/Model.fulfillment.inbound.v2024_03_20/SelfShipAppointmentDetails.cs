/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Appointment details for carrier pickup or fulfillment center appointments.
    /// </summary>
    [DataContract(Name = "SelfShipAppointmentDetails")]
    public partial class SelfShipAppointmentDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SelfShipAppointmentDetails" /> class.
        /// </summary>
        /// <param name="appointmentId">Identifier for appointment..</param>
        /// <param name="appointmentSlotTime">appointmentSlotTime.</param>
        /// <param name="appointmentStatus">Status of the appointment..</param>
        public SelfShipAppointmentDetails(decimal appointmentId = default(decimal), AppointmentSlotTime appointmentSlotTime = default(AppointmentSlotTime), string appointmentStatus = default(string))
        {
            this.AppointmentId = appointmentId;
            this.AppointmentSlotTime = appointmentSlotTime;
            this.AppointmentStatus = appointmentStatus;
        }

        /// <summary>
        /// Identifier for appointment.
        /// </summary>
        /// <value>Identifier for appointment.</value>
        [DataMember(Name = "appointmentId", EmitDefaultValue = false)]
        public decimal AppointmentId { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentSlotTime
        /// </summary>
        [DataMember(Name = "appointmentSlotTime", EmitDefaultValue = false)]
        public AppointmentSlotTime AppointmentSlotTime { get; set; }

        /// <summary>
        /// Status of the appointment.
        /// </summary>
        /// <value>Status of the appointment.</value>
        [DataMember(Name = "appointmentStatus", EmitDefaultValue = false)]
        public string AppointmentStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SelfShipAppointmentDetails {\n");
            sb.Append("  AppointmentId: ").Append(AppointmentId).Append("\n");
            sb.Append("  AppointmentSlotTime: ").Append(AppointmentSlotTime).Append("\n");
            sb.Append("  AppointmentStatus: ").Append(AppointmentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AppointmentStatus (string) maxLength
            if (this.AppointmentStatus != null && this.AppointmentStatus.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for AppointmentStatus, length must be less than 1024.", new [] { "AppointmentStatus" });
            }

            // AppointmentStatus (string) minLength
            if (this.AppointmentStatus != null && this.AppointmentStatus.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AppointmentStatus, length must be greater than 1.", new [] { "AppointmentStatus" });
            }

            yield break;
        }
    }

}
