/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// The carrier for the inbound shipment.
    /// </summary>
    [DataContract(Name = "Carrier")]
    public partial class Carrier : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Carrier" /> class.
        /// </summary>
        /// <param name="alphaCode">The carrier code. For example, USPS or DHLEX..</param>
        /// <param name="name">The name of the carrier..</param>
        public Carrier(string alphaCode = default(string), string name = default(string))
        {
            this.AlphaCode = alphaCode;
            this.Name = name;
        }

        /// <summary>
        /// The carrier code. For example, USPS or DHLEX.
        /// </summary>
        /// <value>The carrier code. For example, USPS or DHLEX.</value>
        [DataMember(Name = "alphaCode", EmitDefaultValue = false)]
        public string AlphaCode { get; set; }

        /// <summary>
        /// The name of the carrier.
        /// </summary>
        /// <value>The name of the carrier.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Carrier {\n");
            sb.Append("  AlphaCode: ").Append(AlphaCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AlphaCode (string) maxLength
            if (this.AlphaCode != null && this.AlphaCode.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for AlphaCode, length must be less than 1024.", new [] { "AlphaCode" });
            }

            // AlphaCode (string) minLength
            if (this.AlphaCode != null && this.AlphaCode.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AlphaCode, length must be greater than 1.", new [] { "AlphaCode" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 1024.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
