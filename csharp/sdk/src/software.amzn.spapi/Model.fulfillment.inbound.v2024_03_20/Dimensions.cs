/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Measurement of a package&#39;s dimensions.
    /// </summary>
    [DataContract(Name = "Dimensions")]
    public partial class Dimensions : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets UnitOfMeasurement
        /// </summary>
        [DataMember(Name = "unitOfMeasurement", IsRequired = true, EmitDefaultValue = true)]
        public UnitOfMeasurement UnitOfMeasurement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dimensions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Dimensions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dimensions" /> class.
        /// </summary>
        /// <param name="height">The height of a package. (required).</param>
        /// <param name="length">The length of a package. (required).</param>
        /// <param name="unitOfMeasurement">unitOfMeasurement (required).</param>
        /// <param name="width">The width of a package. (required).</param>
        public Dimensions(decimal height = default(decimal), decimal length = default(decimal), UnitOfMeasurement unitOfMeasurement = default(UnitOfMeasurement), decimal width = default(decimal))
        {
            this.Height = height;
            this.Length = length;
            this.UnitOfMeasurement = unitOfMeasurement;
            this.Width = width;
        }

        /// <summary>
        /// The height of a package.
        /// </summary>
        /// <value>The height of a package.</value>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public decimal Height { get; set; }

        /// <summary>
        /// The length of a package.
        /// </summary>
        /// <value>The length of a package.</value>
        [DataMember(Name = "length", IsRequired = true, EmitDefaultValue = true)]
        public decimal Length { get; set; }

        /// <summary>
        /// The width of a package.
        /// </summary>
        /// <value>The width of a package.</value>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public decimal Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Dimensions {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  UnitOfMeasurement: ").Append(UnitOfMeasurement).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Height (decimal) maximum
            if (this.Height > (decimal)1E+5)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value less than or equal to 1E+5.", new [] { "Height" });
            }

            // Height (decimal) minimum
            if (this.Height < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value greater than or equal to 0.", new [] { "Height" });
            }

            // Length (decimal) maximum
            if (this.Length > (decimal)1E+5)
            {
                yield return new ValidationResult("Invalid value for Length, must be a value less than or equal to 1E+5.", new [] { "Length" });
            }

            // Length (decimal) minimum
            if (this.Length < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Length, must be a value greater than or equal to 0.", new [] { "Length" });
            }

            // Width (decimal) maximum
            if (this.Width > (decimal)1E+5)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value less than or equal to 1E+5.", new [] { "Width" });
            }

            // Width (decimal) minimum
            if (this.Width < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value greater than or equal to 0.", new [] { "Width" });
            }

            yield break;
        }
    }

}
