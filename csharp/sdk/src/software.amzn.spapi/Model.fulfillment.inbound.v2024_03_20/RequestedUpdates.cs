/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Objects that were included in the update request.
    /// </summary>
    [DataContract(Name = "RequestedUpdates")]
    public partial class RequestedUpdates : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestedUpdates" /> class.
        /// </summary>
        /// <param name="boxes">A list of boxes that will be present in the shipment after the update..</param>
        /// <param name="items">A list of all items that will be present in the shipment after the update..</param>
        public RequestedUpdates(List<BoxUpdateInput> boxes = default(List<BoxUpdateInput>), List<ItemInput> items = default(List<ItemInput>))
        {
            this.Boxes = boxes;
            this.Items = items;
        }

        /// <summary>
        /// A list of boxes that will be present in the shipment after the update.
        /// </summary>
        /// <value>A list of boxes that will be present in the shipment after the update.</value>
        [DataMember(Name = "boxes", EmitDefaultValue = false)]
        public List<BoxUpdateInput> Boxes { get; set; }

        /// <summary>
        /// A list of all items that will be present in the shipment after the update.
        /// </summary>
        /// <value>A list of all items that will be present in the shipment after the update.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<ItemInput> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestedUpdates {\n");
            sb.Append("  Boxes: ").Append(Boxes).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
