/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// A way to configure this packing option. Some box content information sources might not be allowed. Non-standard minimum and maximum box weights might be enforced.
    /// </summary>
    [DataContract(Name = "PackingConfiguration")]
    public partial class PackingConfiguration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackingConfiguration" /> class.
        /// </summary>
        /// <param name="boxPackingMethods">The box content information sources that are allowed..</param>
        /// <param name="boxRequirements">boxRequirements.</param>
        /// <param name="shippingRequirements">A list of supported shipping requirements for this packing configuration..</param>
        public PackingConfiguration(List<BoxContentInformationSource> boxPackingMethods = default(List<BoxContentInformationSource>), BoxRequirements boxRequirements = default(BoxRequirements), List<ShippingRequirements> shippingRequirements = default(List<ShippingRequirements>))
        {
            this.BoxPackingMethods = boxPackingMethods;
            this.BoxRequirements = boxRequirements;
            this.ShippingRequirements = shippingRequirements;
        }

        /// <summary>
        /// The box content information sources that are allowed.
        /// </summary>
        /// <value>The box content information sources that are allowed.</value>
        [DataMember(Name = "boxPackingMethods", EmitDefaultValue = false)]
        public List<BoxContentInformationSource> BoxPackingMethods { get; set; }

        /// <summary>
        /// Gets or Sets BoxRequirements
        /// </summary>
        [DataMember(Name = "boxRequirements", EmitDefaultValue = false)]
        public BoxRequirements BoxRequirements { get; set; }

        /// <summary>
        /// A list of supported shipping requirements for this packing configuration.
        /// </summary>
        /// <value>A list of supported shipping requirements for this packing configuration.</value>
        [DataMember(Name = "shippingRequirements", EmitDefaultValue = false)]
        public List<ShippingRequirements> ShippingRequirements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackingConfiguration {\n");
            sb.Append("  BoxPackingMethods: ").Append(BoxPackingMethods).Append("\n");
            sb.Append("  BoxRequirements: ").Append(BoxRequirements).Append("\n");
            sb.Append("  ShippingRequirements: ").Append(ShippingRequirements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
