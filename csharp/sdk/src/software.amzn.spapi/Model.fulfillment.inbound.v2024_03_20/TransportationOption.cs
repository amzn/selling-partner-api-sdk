/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Contains information pertaining to a transportation option and the related carrier.
    /// </summary>
    [DataContract(Name = "TransportationOption")]
    public partial class TransportationOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransportationOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationOption" /> class.
        /// </summary>
        /// <param name="carrier">carrier (required).</param>
        /// <param name="carrierAppointment">carrierAppointment.</param>
        /// <param name="preconditions">Identifies a list of preconditions for confirming the transportation option. (required).</param>
        /// <param name="quote">quote.</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required).</param>
        /// <param name="shippingMode">Mode of shipment transportation that this option will provide.  Possible values: &#x60;GROUND_SMALL_PARCEL&#x60;, &#x60;FREIGHT_LTL&#x60;, &#x60;FREIGHT_FTL_PALLET&#x60;, &#x60;FREIGHT_FTL_NONPALLET&#x60;, &#x60;OCEAN_LCL&#x60;, &#x60;OCEAN_FCL&#x60;, &#x60;AIR_SMALL_PARCEL&#x60;, &#x60;AIR_SMALL_PARCEL_EXPRESS&#x60;. (required).</param>
        /// <param name="shippingSolution">Shipping program for the option. Possible values: &#x60;AMAZON_PARTNERED_CARRIER&#x60;, &#x60;USE_YOUR_OWN_CARRIER&#x60;. (required).</param>
        /// <param name="transportationOptionId">Identifier of a transportation option. A transportation option represent one option for how to send a shipment. (required).</param>
        public TransportationOption(Carrier carrier = default(Carrier), CarrierAppointment carrierAppointment = default(CarrierAppointment), List<string> preconditions = default(List<string>), Quote quote = default(Quote), string shipmentId = default(string), string shippingMode = default(string), string shippingSolution = default(string), string transportationOptionId = default(string))
        {
            // to ensure "carrier" is required (not null)
            if (carrier == null)
            {
                throw new ArgumentNullException("carrier is a required property for TransportationOption and cannot be null");
            }
            this.Carrier = carrier;
            // to ensure "preconditions" is required (not null)
            if (preconditions == null)
            {
                throw new ArgumentNullException("preconditions is a required property for TransportationOption and cannot be null");
            }
            this.Preconditions = preconditions;
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new ArgumentNullException("shipmentId is a required property for TransportationOption and cannot be null");
            }
            this.ShipmentId = shipmentId;
            // to ensure "shippingMode" is required (not null)
            if (shippingMode == null)
            {
                throw new ArgumentNullException("shippingMode is a required property for TransportationOption and cannot be null");
            }
            this.ShippingMode = shippingMode;
            // to ensure "shippingSolution" is required (not null)
            if (shippingSolution == null)
            {
                throw new ArgumentNullException("shippingSolution is a required property for TransportationOption and cannot be null");
            }
            this.ShippingSolution = shippingSolution;
            // to ensure "transportationOptionId" is required (not null)
            if (transportationOptionId == null)
            {
                throw new ArgumentNullException("transportationOptionId is a required property for TransportationOption and cannot be null");
            }
            this.TransportationOptionId = transportationOptionId;
            this.CarrierAppointment = carrierAppointment;
            this.Quote = quote;
        }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name = "carrier", IsRequired = true, EmitDefaultValue = true)]
        public Carrier Carrier { get; set; }

        /// <summary>
        /// Gets or Sets CarrierAppointment
        /// </summary>
        [DataMember(Name = "carrierAppointment", EmitDefaultValue = false)]
        public CarrierAppointment CarrierAppointment { get; set; }

        /// <summary>
        /// Identifies a list of preconditions for confirming the transportation option.
        /// </summary>
        /// <value>Identifies a list of preconditions for confirming the transportation option.</value>
        [DataMember(Name = "preconditions", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Preconditions { get; set; }

        /// <summary>
        /// Gets or Sets Quote
        /// </summary>
        [DataMember(Name = "quote", EmitDefaultValue = false)]
        public Quote Quote { get; set; }

        /// <summary>
        /// Identifier of a shipment. A shipment contains the boxes and units being inbounded.
        /// </summary>
        /// <value>Identifier of a shipment. A shipment contains the boxes and units being inbounded.</value>
        [DataMember(Name = "shipmentId", IsRequired = true, EmitDefaultValue = true)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Mode of shipment transportation that this option will provide.  Possible values: &#x60;GROUND_SMALL_PARCEL&#x60;, &#x60;FREIGHT_LTL&#x60;, &#x60;FREIGHT_FTL_PALLET&#x60;, &#x60;FREIGHT_FTL_NONPALLET&#x60;, &#x60;OCEAN_LCL&#x60;, &#x60;OCEAN_FCL&#x60;, &#x60;AIR_SMALL_PARCEL&#x60;, &#x60;AIR_SMALL_PARCEL_EXPRESS&#x60;.
        /// </summary>
        /// <value>Mode of shipment transportation that this option will provide.  Possible values: &#x60;GROUND_SMALL_PARCEL&#x60;, &#x60;FREIGHT_LTL&#x60;, &#x60;FREIGHT_FTL_PALLET&#x60;, &#x60;FREIGHT_FTL_NONPALLET&#x60;, &#x60;OCEAN_LCL&#x60;, &#x60;OCEAN_FCL&#x60;, &#x60;AIR_SMALL_PARCEL&#x60;, &#x60;AIR_SMALL_PARCEL_EXPRESS&#x60;.</value>
        [DataMember(Name = "shippingMode", IsRequired = true, EmitDefaultValue = true)]
        public string ShippingMode { get; set; }

        /// <summary>
        /// Shipping program for the option. Possible values: &#x60;AMAZON_PARTNERED_CARRIER&#x60;, &#x60;USE_YOUR_OWN_CARRIER&#x60;.
        /// </summary>
        /// <value>Shipping program for the option. Possible values: &#x60;AMAZON_PARTNERED_CARRIER&#x60;, &#x60;USE_YOUR_OWN_CARRIER&#x60;.</value>
        [DataMember(Name = "shippingSolution", IsRequired = true, EmitDefaultValue = true)]
        public string ShippingSolution { get; set; }

        /// <summary>
        /// Identifier of a transportation option. A transportation option represent one option for how to send a shipment.
        /// </summary>
        /// <value>Identifier of a transportation option. A transportation option represent one option for how to send a shipment.</value>
        [DataMember(Name = "transportationOptionId", IsRequired = true, EmitDefaultValue = true)]
        public string TransportationOptionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransportationOption {\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  CarrierAppointment: ").Append(CarrierAppointment).Append("\n");
            sb.Append("  Preconditions: ").Append(Preconditions).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShippingMode: ").Append(ShippingMode).Append("\n");
            sb.Append("  ShippingSolution: ").Append(ShippingSolution).Append("\n");
            sb.Append("  TransportationOptionId: ").Append(TransportationOptionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShipmentId (string) maxLength
            if (this.ShipmentId != null && this.ShipmentId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for ShipmentId, length must be less than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) minLength
            if (this.ShipmentId != null && this.ShipmentId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for ShipmentId, length must be greater than 38.", new [] { "ShipmentId" });
            }

            if (this.ShipmentId != null) {
                // ShipmentId (string) pattern
                Regex regexShipmentId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexShipmentId.Match(this.ShipmentId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, must match a pattern of " + regexShipmentId, new [] { "ShipmentId" });
                }
            }

            // ShippingMode (string) maxLength
            if (this.ShippingMode != null && this.ShippingMode.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for ShippingMode, length must be less than 1024.", new [] { "ShippingMode" });
            }

            // ShippingMode (string) minLength
            if (this.ShippingMode != null && this.ShippingMode.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ShippingMode, length must be greater than 1.", new [] { "ShippingMode" });
            }

            // ShippingSolution (string) maxLength
            if (this.ShippingSolution != null && this.ShippingSolution.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for ShippingSolution, length must be less than 1024.", new [] { "ShippingSolution" });
            }

            // ShippingSolution (string) minLength
            if (this.ShippingSolution != null && this.ShippingSolution.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ShippingSolution, length must be greater than 1.", new [] { "ShippingSolution" });
            }

            // TransportationOptionId (string) maxLength
            if (this.TransportationOptionId != null && this.TransportationOptionId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for TransportationOptionId, length must be less than 38.", new [] { "TransportationOptionId" });
            }

            // TransportationOptionId (string) minLength
            if (this.TransportationOptionId != null && this.TransportationOptionId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for TransportationOptionId, length must be greater than 38.", new [] { "TransportationOptionId" });
            }

            if (this.TransportationOptionId != null) {
                // TransportationOptionId (string) pattern
                Regex regexTransportationOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexTransportationOptionId.Match(this.TransportationOptionId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationOptionId, must match a pattern of " + regexTransportationOptionId, new [] { "TransportationOptionId" });
                }
            }

            yield break;
        }
    }

}
