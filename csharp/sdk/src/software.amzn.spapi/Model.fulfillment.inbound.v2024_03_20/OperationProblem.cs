/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// A problem with additional properties persisted to an operation.
    /// </summary>
    [DataContract(Name = "OperationProblem")]
    public partial class OperationProblem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationProblem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OperationProblem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationProblem" /> class.
        /// </summary>
        /// <param name="code">An error code that identifies the type of error that occurred. (required).</param>
        /// <param name="details">Additional details that can help the caller understand or fix the issue..</param>
        /// <param name="message">A message that describes the error condition. (required).</param>
        /// <param name="severity">The severity of the problem. Possible values: &#x60;WARNING&#x60;, &#x60;ERROR&#x60;. (required).</param>
        public OperationProblem(string code = default(string), string details = default(string), string message = default(string), string severity = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for OperationProblem and cannot be null");
            }
            this.Code = code;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for OperationProblem and cannot be null");
            }
            this.Message = message;
            // to ensure "severity" is required (not null)
            if (severity == null)
            {
                throw new ArgumentNullException("severity is a required property for OperationProblem and cannot be null");
            }
            this.Severity = severity;
            this.Details = details;
        }

        /// <summary>
        /// An error code that identifies the type of error that occurred.
        /// </summary>
        /// <value>An error code that identifies the type of error that occurred.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Additional details that can help the caller understand or fix the issue.
        /// </summary>
        /// <value>Additional details that can help the caller understand or fix the issue.</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// A message that describes the error condition.
        /// </summary>
        /// <value>A message that describes the error condition.</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// The severity of the problem. Possible values: &#x60;WARNING&#x60;, &#x60;ERROR&#x60;.
        /// </summary>
        /// <value>The severity of the problem. Possible values: &#x60;WARNING&#x60;, &#x60;ERROR&#x60;.</value>
        [DataMember(Name = "severity", IsRequired = true, EmitDefaultValue = true)]
        public string Severity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OperationProblem {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 256)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 256.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Details (string) maxLength
            if (this.Details != null && this.Details.Length > 8192)
            {
                yield return new ValidationResult("Invalid value for Details, length must be less than 8192.", new [] { "Details" });
            }

            // Details (string) minLength
            if (this.Details != null && this.Details.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Details, length must be greater than 0.", new [] { "Details" });
            }

            // Message (string) maxLength
            if (this.Message != null && this.Message.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for Message, length must be less than 2048.", new [] { "Message" });
            }

            // Message (string) minLength
            if (this.Message != null && this.Message.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Message, length must be greater than 1.", new [] { "Message" });
            }

            // Severity (string) maxLength
            if (this.Severity != null && this.Severity.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Severity, length must be less than 1024.", new [] { "Severity" });
            }

            // Severity (string) minLength
            if (this.Severity != null && this.Severity.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Severity, length must be greater than 1.", new [] { "Severity" });
            }

            yield break;
        }
    }

}
