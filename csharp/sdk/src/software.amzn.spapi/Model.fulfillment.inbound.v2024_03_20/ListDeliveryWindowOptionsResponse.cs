/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// The &#x60;listDeliveryWindowOptions&#x60; response.
    /// </summary>
    [DataContract(Name = "ListDeliveryWindowOptionsResponse")]
    public partial class ListDeliveryWindowOptionsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListDeliveryWindowOptionsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListDeliveryWindowOptionsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListDeliveryWindowOptionsResponse" /> class.
        /// </summary>
        /// <param name="deliveryWindowOptions">Delivery window options generated for the placement option. (required).</param>
        /// <param name="pagination">pagination.</param>
        public ListDeliveryWindowOptionsResponse(List<DeliveryWindowOption> deliveryWindowOptions = default(List<DeliveryWindowOption>), Pagination pagination = default(Pagination))
        {
            // to ensure "deliveryWindowOptions" is required (not null)
            if (deliveryWindowOptions == null)
            {
                throw new ArgumentNullException("deliveryWindowOptions is a required property for ListDeliveryWindowOptionsResponse and cannot be null");
            }
            this.DeliveryWindowOptions = deliveryWindowOptions;
            this.Pagination = pagination;
        }

        /// <summary>
        /// Delivery window options generated for the placement option.
        /// </summary>
        /// <value>Delivery window options generated for the placement option.</value>
        [DataMember(Name = "deliveryWindowOptions", IsRequired = true, EmitDefaultValue = true)]
        public List<DeliveryWindowOption> DeliveryWindowOptions { get; set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name = "pagination", EmitDefaultValue = false)]
        public Pagination Pagination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListDeliveryWindowOptionsResponse {\n");
            sb.Append("  DeliveryWindowOptions: ").Append(DeliveryWindowOptions).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
