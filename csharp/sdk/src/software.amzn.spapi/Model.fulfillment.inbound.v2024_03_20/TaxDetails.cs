/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Information used to determine the tax compliance.
    /// </summary>
    [DataContract(Name = "TaxDetails")]
    public partial class TaxDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxDetails" /> class.
        /// </summary>
        /// <param name="declaredValue">declaredValue.</param>
        /// <param name="hsnCode">Harmonized System of Nomenclature code..</param>
        /// <param name="taxRates">List of tax rates..</param>
        public TaxDetails(Currency declaredValue = default(Currency), string hsnCode = default(string), List<TaxRate> taxRates = default(List<TaxRate>))
        {
            this.DeclaredValue = declaredValue;
            this.HsnCode = hsnCode;
            this.TaxRates = taxRates;
        }

        /// <summary>
        /// Gets or Sets DeclaredValue
        /// </summary>
        [DataMember(Name = "declaredValue", EmitDefaultValue = false)]
        public Currency DeclaredValue { get; set; }

        /// <summary>
        /// Harmonized System of Nomenclature code.
        /// </summary>
        /// <value>Harmonized System of Nomenclature code.</value>
        [DataMember(Name = "hsnCode", EmitDefaultValue = false)]
        public string HsnCode { get; set; }

        /// <summary>
        /// List of tax rates.
        /// </summary>
        /// <value>List of tax rates.</value>
        [DataMember(Name = "taxRates", EmitDefaultValue = false)]
        public List<TaxRate> TaxRates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxDetails {\n");
            sb.Append("  DeclaredValue: ").Append(DeclaredValue).Append("\n");
            sb.Append("  HsnCode: ").Append(HsnCode).Append("\n");
            sb.Append("  TaxRates: ").Append(TaxRates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // HsnCode (string) maxLength
            if (this.HsnCode != null && this.HsnCode.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for HsnCode, length must be less than 1024.", new [] { "HsnCode" });
            }

            // HsnCode (string) minLength
            if (this.HsnCode != null && this.HsnCode.Length < 1)
            {
                yield return new ValidationResult("Invalid value for HsnCode, length must be greater than 1.", new [] { "HsnCode" });
            }

            yield break;
        }
    }

}
