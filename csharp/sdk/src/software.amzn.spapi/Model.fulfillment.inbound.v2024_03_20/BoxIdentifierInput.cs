/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Input information for updating a box identifier.
    /// </summary>
    [DataContract(Name = "BoxIdentifierInput")]
    public partial class BoxIdentifierInput : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ExternalContainerIdentifierType
        /// </summary>
        [DataMember(Name = "externalContainerIdentifierType", IsRequired = true, EmitDefaultValue = true)]
        public BoxIdentifierType ExternalContainerIdentifierType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxIdentifierInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BoxIdentifierInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxIdentifierInput" /> class.
        /// </summary>
        /// <param name="externalContainerIdentifier">The custom identifier for a certain box..</param>
        /// <param name="externalContainerIdentifierType">externalContainerIdentifierType (required).</param>
        /// <param name="packageId">Primary key to uniquely identify a Box Package. (required).</param>
        public BoxIdentifierInput(string externalContainerIdentifier = default(string), BoxIdentifierType externalContainerIdentifierType = default(BoxIdentifierType), string packageId = default(string))
        {
            this.ExternalContainerIdentifierType = externalContainerIdentifierType;
            // to ensure "packageId" is required (not null)
            if (packageId == null)
            {
                throw new ArgumentNullException("packageId is a required property for BoxIdentifierInput and cannot be null");
            }
            this.PackageId = packageId;
            this.ExternalContainerIdentifier = externalContainerIdentifier;
        }

        /// <summary>
        /// The custom identifier for a certain box.
        /// </summary>
        /// <value>The custom identifier for a certain box.</value>
        [DataMember(Name = "externalContainerIdentifier", EmitDefaultValue = false)]
        public string ExternalContainerIdentifier { get; set; }

        /// <summary>
        /// Primary key to uniquely identify a Box Package.
        /// </summary>
        /// <value>Primary key to uniquely identify a Box Package.</value>
        [DataMember(Name = "packageId", IsRequired = true, EmitDefaultValue = true)]
        public string PackageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BoxIdentifierInput {\n");
            sb.Append("  ExternalContainerIdentifier: ").Append(ExternalContainerIdentifier).Append("\n");
            sb.Append("  ExternalContainerIdentifierType: ").Append(ExternalContainerIdentifierType).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExternalContainerIdentifier (string) maxLength
            if (this.ExternalContainerIdentifier != null && this.ExternalContainerIdentifier.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for ExternalContainerIdentifier, length must be less than 1024.", new [] { "ExternalContainerIdentifier" });
            }

            // ExternalContainerIdentifier (string) minLength
            if (this.ExternalContainerIdentifier != null && this.ExternalContainerIdentifier.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ExternalContainerIdentifier, length must be greater than 1.", new [] { "ExternalContainerIdentifier" });
            }

            // PackageId (string) maxLength
            if (this.PackageId != null && this.PackageId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for PackageId, length must be less than 38.", new [] { "PackageId" });
            }

            // PackageId (string) minLength
            if (this.PackageId != null && this.PackageId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for PackageId, length must be greater than 38.", new [] { "PackageId" });
            }

            if (this.PackageId != null) {
                // PackageId (string) pattern
                Regex regexPackageId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexPackageId.Match(this.PackageId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, must match a pattern of " + regexPackageId, new [] { "PackageId" });
                }
            }

            yield break;
        }
    }

}
