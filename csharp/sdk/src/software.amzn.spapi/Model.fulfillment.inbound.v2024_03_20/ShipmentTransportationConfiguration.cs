/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Details needed to generate the transportation options.
    /// </summary>
    [DataContract(Name = "ShipmentTransportationConfiguration")]
    public partial class ShipmentTransportationConfiguration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentTransportationConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentTransportationConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentTransportationConfiguration" /> class.
        /// </summary>
        /// <param name="contactInformation">contactInformation.</param>
        /// <param name="freightInformation">freightInformation.</param>
        /// <param name="pallets">List of pallet configuration inputs..</param>
        /// <param name="readyToShipWindow">readyToShipWindow (required).</param>
        /// <param name="shipmentId">Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required).</param>
        public ShipmentTransportationConfiguration(ContactInformation contactInformation = default(ContactInformation), FreightInformation freightInformation = default(FreightInformation), List<PalletInput> pallets = default(List<PalletInput>), WindowInput readyToShipWindow = default(WindowInput), string shipmentId = default(string))
        {
            // to ensure "readyToShipWindow" is required (not null)
            if (readyToShipWindow == null)
            {
                throw new ArgumentNullException("readyToShipWindow is a required property for ShipmentTransportationConfiguration and cannot be null");
            }
            this.ReadyToShipWindow = readyToShipWindow;
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new ArgumentNullException("shipmentId is a required property for ShipmentTransportationConfiguration and cannot be null");
            }
            this.ShipmentId = shipmentId;
            this.ContactInformation = contactInformation;
            this.FreightInformation = freightInformation;
            this.Pallets = pallets;
        }

        /// <summary>
        /// Gets or Sets ContactInformation
        /// </summary>
        [DataMember(Name = "contactInformation", EmitDefaultValue = false)]
        public ContactInformation ContactInformation { get; set; }

        /// <summary>
        /// Gets or Sets FreightInformation
        /// </summary>
        [DataMember(Name = "freightInformation", EmitDefaultValue = false)]
        public FreightInformation FreightInformation { get; set; }

        /// <summary>
        /// List of pallet configuration inputs.
        /// </summary>
        /// <value>List of pallet configuration inputs.</value>
        [DataMember(Name = "pallets", EmitDefaultValue = false)]
        public List<PalletInput> Pallets { get; set; }

        /// <summary>
        /// Gets or Sets ReadyToShipWindow
        /// </summary>
        [DataMember(Name = "readyToShipWindow", IsRequired = true, EmitDefaultValue = true)]
        public WindowInput ReadyToShipWindow { get; set; }

        /// <summary>
        /// Identifier of a shipment. A shipment contains the boxes and units being inbounded.
        /// </summary>
        /// <value>Identifier of a shipment. A shipment contains the boxes and units being inbounded.</value>
        [DataMember(Name = "shipmentId", IsRequired = true, EmitDefaultValue = true)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentTransportationConfiguration {\n");
            sb.Append("  ContactInformation: ").Append(ContactInformation).Append("\n");
            sb.Append("  FreightInformation: ").Append(FreightInformation).Append("\n");
            sb.Append("  Pallets: ").Append(Pallets).Append("\n");
            sb.Append("  ReadyToShipWindow: ").Append(ReadyToShipWindow).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShipmentId (string) maxLength
            if (this.ShipmentId != null && this.ShipmentId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for ShipmentId, length must be less than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) minLength
            if (this.ShipmentId != null && this.ShipmentId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for ShipmentId, length must be greater than 38.", new [] { "ShipmentId" });
            }

            if (this.ShipmentId != null) {
                // ShipmentId (string) pattern
                Regex regexShipmentId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexShipmentId.Match(this.ShipmentId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, must match a pattern of " + regexShipmentId, new [] { "ShipmentId" });
                }
            }

            yield break;
        }
    }

}
