/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// The fulfillment center appointment slot for the transportation option.
    /// </summary>
    [DataContract(Name = "AppointmentSlot")]
    public partial class AppointmentSlot : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentSlot" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppointmentSlot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentSlot" /> class.
        /// </summary>
        /// <param name="slotId">An identifier to a self-ship appointment slot. (required).</param>
        /// <param name="slotTime">slotTime (required).</param>
        public AppointmentSlot(string slotId = default(string), AppointmentSlotTime slotTime = default(AppointmentSlotTime))
        {
            // to ensure "slotId" is required (not null)
            if (slotId == null)
            {
                throw new ArgumentNullException("slotId is a required property for AppointmentSlot and cannot be null");
            }
            this.SlotId = slotId;
            // to ensure "slotTime" is required (not null)
            if (slotTime == null)
            {
                throw new ArgumentNullException("slotTime is a required property for AppointmentSlot and cannot be null");
            }
            this.SlotTime = slotTime;
        }

        /// <summary>
        /// An identifier to a self-ship appointment slot.
        /// </summary>
        /// <value>An identifier to a self-ship appointment slot.</value>
        [DataMember(Name = "slotId", IsRequired = true, EmitDefaultValue = true)]
        public string SlotId { get; set; }

        /// <summary>
        /// Gets or Sets SlotTime
        /// </summary>
        [DataMember(Name = "slotTime", IsRequired = true, EmitDefaultValue = true)]
        public AppointmentSlotTime SlotTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppointmentSlot {\n");
            sb.Append("  SlotId: ").Append(SlotId).Append("\n");
            sb.Append("  SlotTime: ").Append(SlotTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SlotId (string) maxLength
            if (this.SlotId != null && this.SlotId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for SlotId, length must be less than 38.", new [] { "SlotId" });
            }

            // SlotId (string) minLength
            if (this.SlotId != null && this.SlotId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for SlotId, length must be greater than 38.", new [] { "SlotId" });
            }

            if (this.SlotId != null) {
                // SlotId (string) pattern
                Regex regexSlotId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexSlotId.Match(this.SlotId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlotId, must match a pattern of " + regexSlotId, new [] { "SlotId" });
                }
            }

            yield break;
        }
    }

}
