/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Provide units going to the warehouse.
    /// </summary>
    [DataContract(Name = "CustomPlacementInput")]
    public partial class CustomPlacementInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomPlacementInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomPlacementInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomPlacementInput" /> class.
        /// </summary>
        /// <param name="items">Items included while creating Inbound Plan. (required).</param>
        /// <param name="warehouseId">Warehouse Id. (required).</param>
        public CustomPlacementInput(List<ItemInput> items = default(List<ItemInput>), string warehouseId = default(string))
        {
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for CustomPlacementInput and cannot be null");
            }
            this.Items = items;
            // to ensure "warehouseId" is required (not null)
            if (warehouseId == null)
            {
                throw new ArgumentNullException("warehouseId is a required property for CustomPlacementInput and cannot be null");
            }
            this.WarehouseId = warehouseId;
        }

        /// <summary>
        /// Items included while creating Inbound Plan.
        /// </summary>
        /// <value>Items included while creating Inbound Plan.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<ItemInput> Items { get; set; }

        /// <summary>
        /// Warehouse Id.
        /// </summary>
        /// <value>Warehouse Id.</value>
        [DataMember(Name = "warehouseId", IsRequired = true, EmitDefaultValue = true)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomPlacementInput {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // WarehouseId (string) maxLength
            if (this.WarehouseId != null && this.WarehouseId.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for WarehouseId, length must be less than 1024.", new [] { "WarehouseId" });
            }

            // WarehouseId (string) minLength
            if (this.WarehouseId != null && this.WarehouseId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for WarehouseId, length must be greater than 1.", new [] { "WarehouseId" });
            }

            yield break;
        }
    }

}
