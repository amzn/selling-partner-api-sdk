/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// A packing option contains a set of pack groups plus additional information about the packing option, such as any discounts or fees if it&#39;s selected.
    /// </summary>
    [DataContract(Name = "PackingOption")]
    public partial class PackingOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackingOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PackingOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackingOption" /> class.
        /// </summary>
        /// <param name="discounts">Discount for the offered option. (required).</param>
        /// <param name="expiration">The time at which this packing option is no longer valid. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;..</param>
        /// <param name="fees">Fee for the offered option. (required).</param>
        /// <param name="packingGroups">Packing group IDs. (required).</param>
        /// <param name="packingOptionId">Identifier of a packing option. (required).</param>
        /// <param name="status">The status of the packing option. Possible values: &#x60;OFFERED&#x60;, &#x60;ACCEPTED&#x60;, &#x60;EXPIRED&#x60;. (required).</param>
        /// <param name="supportedConfigurations">A list of possible configurations for this option. (required).</param>
        /// <param name="supportedShippingConfigurations">**This field is deprecated**. Use the &#x60;shippingRequirements&#x60; property under &#x60;supportedConfigurations&#x60; instead. List of supported shipping modes. (required).</param>
        public PackingOption(List<Incentive> discounts = default(List<Incentive>), DateTime expiration = default(DateTime), List<Incentive> fees = default(List<Incentive>), List<string> packingGroups = default(List<string>), string packingOptionId = default(string), string status = default(string), List<PackingConfiguration> supportedConfigurations = default(List<PackingConfiguration>), List<ShippingConfiguration> supportedShippingConfigurations = default(List<ShippingConfiguration>))
        {
            // to ensure "discounts" is required (not null)
            if (discounts == null)
            {
                throw new ArgumentNullException("discounts is a required property for PackingOption and cannot be null");
            }
            this.Discounts = discounts;
            // to ensure "fees" is required (not null)
            if (fees == null)
            {
                throw new ArgumentNullException("fees is a required property for PackingOption and cannot be null");
            }
            this.Fees = fees;
            // to ensure "packingGroups" is required (not null)
            if (packingGroups == null)
            {
                throw new ArgumentNullException("packingGroups is a required property for PackingOption and cannot be null");
            }
            this.PackingGroups = packingGroups;
            // to ensure "packingOptionId" is required (not null)
            if (packingOptionId == null)
            {
                throw new ArgumentNullException("packingOptionId is a required property for PackingOption and cannot be null");
            }
            this.PackingOptionId = packingOptionId;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for PackingOption and cannot be null");
            }
            this.Status = status;
            // to ensure "supportedConfigurations" is required (not null)
            if (supportedConfigurations == null)
            {
                throw new ArgumentNullException("supportedConfigurations is a required property for PackingOption and cannot be null");
            }
            this.SupportedConfigurations = supportedConfigurations;
            // to ensure "supportedShippingConfigurations" is required (not null)
            if (supportedShippingConfigurations == null)
            {
                throw new ArgumentNullException("supportedShippingConfigurations is a required property for PackingOption and cannot be null");
            }
            this.SupportedShippingConfigurations = supportedShippingConfigurations;
            this.Expiration = expiration;
        }

        /// <summary>
        /// Discount for the offered option.
        /// </summary>
        /// <value>Discount for the offered option.</value>
        [DataMember(Name = "discounts", IsRequired = true, EmitDefaultValue = true)]
        public List<Incentive> Discounts { get; set; }

        /// <summary>
        /// The time at which this packing option is no longer valid. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.
        /// </summary>
        /// <value>The time at which this packing option is no longer valid. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.</value>
        [DataMember(Name = "expiration", EmitDefaultValue = false)]
        public DateTime Expiration { get; set; }

        /// <summary>
        /// Fee for the offered option.
        /// </summary>
        /// <value>Fee for the offered option.</value>
        [DataMember(Name = "fees", IsRequired = true, EmitDefaultValue = true)]
        public List<Incentive> Fees { get; set; }

        /// <summary>
        /// Packing group IDs.
        /// </summary>
        /// <value>Packing group IDs.</value>
        [DataMember(Name = "packingGroups", IsRequired = true, EmitDefaultValue = true)]
        public List<string> PackingGroups { get; set; }

        /// <summary>
        /// Identifier of a packing option.
        /// </summary>
        /// <value>Identifier of a packing option.</value>
        [DataMember(Name = "packingOptionId", IsRequired = true, EmitDefaultValue = true)]
        public string PackingOptionId { get; set; }

        /// <summary>
        /// The status of the packing option. Possible values: &#x60;OFFERED&#x60;, &#x60;ACCEPTED&#x60;, &#x60;EXPIRED&#x60;.
        /// </summary>
        /// <value>The status of the packing option. Possible values: &#x60;OFFERED&#x60;, &#x60;ACCEPTED&#x60;, &#x60;EXPIRED&#x60;.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// A list of possible configurations for this option.
        /// </summary>
        /// <value>A list of possible configurations for this option.</value>
        [DataMember(Name = "supportedConfigurations", IsRequired = true, EmitDefaultValue = true)]
        public List<PackingConfiguration> SupportedConfigurations { get; set; }

        /// <summary>
        /// **This field is deprecated**. Use the &#x60;shippingRequirements&#x60; property under &#x60;supportedConfigurations&#x60; instead. List of supported shipping modes.
        /// </summary>
        /// <value>**This field is deprecated**. Use the &#x60;shippingRequirements&#x60; property under &#x60;supportedConfigurations&#x60; instead. List of supported shipping modes.</value>
        [DataMember(Name = "supportedShippingConfigurations", IsRequired = true, EmitDefaultValue = true)]
        public List<ShippingConfiguration> SupportedShippingConfigurations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackingOption {\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  PackingGroups: ").Append(PackingGroups).Append("\n");
            sb.Append("  PackingOptionId: ").Append(PackingOptionId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SupportedConfigurations: ").Append(SupportedConfigurations).Append("\n");
            sb.Append("  SupportedShippingConfigurations: ").Append(SupportedShippingConfigurations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PackingOptionId (string) maxLength
            if (this.PackingOptionId != null && this.PackingOptionId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for PackingOptionId, length must be less than 38.", new [] { "PackingOptionId" });
            }

            // PackingOptionId (string) minLength
            if (this.PackingOptionId != null && this.PackingOptionId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for PackingOptionId, length must be greater than 38.", new [] { "PackingOptionId" });
            }

            if (this.PackingOptionId != null) {
                // PackingOptionId (string) pattern
                Regex regexPackingOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexPackingOptionId.Match(this.PackingOptionId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackingOptionId, must match a pattern of " + regexPackingOptionId, new [] { "PackingOptionId" });
                }
            }

            // Status (string) maxLength
            if (this.Status != null && this.Status.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Status, length must be less than 1024.", new [] { "Status" });
            }

            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            yield break;
        }
    }

}
