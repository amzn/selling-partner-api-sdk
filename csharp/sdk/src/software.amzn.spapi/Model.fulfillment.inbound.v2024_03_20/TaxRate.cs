/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Contains the type and rate of tax.
    /// </summary>
    [DataContract(Name = "TaxRate")]
    public partial class TaxRate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRate" /> class.
        /// </summary>
        /// <param name="cessRate">Rate of cess tax..</param>
        /// <param name="gstRate">Rate of gst tax..</param>
        /// <param name="taxType">Type of tax. Possible values: &#x60;CGST&#x60;, &#x60;SGST&#x60;, &#x60;IGST&#x60;, &#x60;TOTAL_TAX&#x60;..</param>
        public TaxRate(decimal cessRate = default(decimal), decimal gstRate = default(decimal), string taxType = default(string))
        {
            this.CessRate = cessRate;
            this.GstRate = gstRate;
            this.TaxType = taxType;
        }

        /// <summary>
        /// Rate of cess tax.
        /// </summary>
        /// <value>Rate of cess tax.</value>
        [DataMember(Name = "cessRate", EmitDefaultValue = false)]
        public decimal CessRate { get; set; }

        /// <summary>
        /// Rate of gst tax.
        /// </summary>
        /// <value>Rate of gst tax.</value>
        [DataMember(Name = "gstRate", EmitDefaultValue = false)]
        public decimal GstRate { get; set; }

        /// <summary>
        /// Type of tax. Possible values: &#x60;CGST&#x60;, &#x60;SGST&#x60;, &#x60;IGST&#x60;, &#x60;TOTAL_TAX&#x60;.
        /// </summary>
        /// <value>Type of tax. Possible values: &#x60;CGST&#x60;, &#x60;SGST&#x60;, &#x60;IGST&#x60;, &#x60;TOTAL_TAX&#x60;.</value>
        [DataMember(Name = "taxType", EmitDefaultValue = false)]
        public string TaxType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxRate {\n");
            sb.Append("  CessRate: ").Append(CessRate).Append("\n");
            sb.Append("  GstRate: ").Append(GstRate).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TaxType (string) maxLength
            if (this.TaxType != null && this.TaxType.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for TaxType, length must be less than 1024.", new [] { "TaxType" });
            }

            // TaxType (string) minLength
            if (this.TaxType != null && this.TaxType.Length < 1)
            {
                yield return new ValidationResult("Invalid value for TaxType, length must be greater than 1.", new [] { "TaxType" });
            }

            yield break;
        }
    }

}
