/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Preview of the changes that will be applied to the shipment.
    /// </summary>
    [DataContract(Name = "ContentUpdatePreview")]
    public partial class ContentUpdatePreview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentUpdatePreview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentUpdatePreview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentUpdatePreview" /> class.
        /// </summary>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview. (required).</param>
        /// <param name="expiration">The time at which the content update expires. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;. (required).</param>
        /// <param name="requestedUpdates">requestedUpdates (required).</param>
        /// <param name="transportationOption">transportationOption (required).</param>
        public ContentUpdatePreview(string contentUpdatePreviewId = default(string), DateTime expiration = default(DateTime), RequestedUpdates requestedUpdates = default(RequestedUpdates), TransportationOption transportationOption = default(TransportationOption))
        {
            // to ensure "contentUpdatePreviewId" is required (not null)
            if (contentUpdatePreviewId == null)
            {
                throw new ArgumentNullException("contentUpdatePreviewId is a required property for ContentUpdatePreview and cannot be null");
            }
            this.ContentUpdatePreviewId = contentUpdatePreviewId;
            this.Expiration = expiration;
            // to ensure "requestedUpdates" is required (not null)
            if (requestedUpdates == null)
            {
                throw new ArgumentNullException("requestedUpdates is a required property for ContentUpdatePreview and cannot be null");
            }
            this.RequestedUpdates = requestedUpdates;
            // to ensure "transportationOption" is required (not null)
            if (transportationOption == null)
            {
                throw new ArgumentNullException("transportationOption is a required property for ContentUpdatePreview and cannot be null");
            }
            this.TransportationOption = transportationOption;
        }

        /// <summary>
        /// Identifier of a content update preview.
        /// </summary>
        /// <value>Identifier of a content update preview.</value>
        [DataMember(Name = "contentUpdatePreviewId", IsRequired = true, EmitDefaultValue = true)]
        public string ContentUpdatePreviewId { get; set; }

        /// <summary>
        /// The time at which the content update expires. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.
        /// </summary>
        /// <value>The time at which the content update expires. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.</value>
        [DataMember(Name = "expiration", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Expiration { get; set; }

        /// <summary>
        /// Gets or Sets RequestedUpdates
        /// </summary>
        [DataMember(Name = "requestedUpdates", IsRequired = true, EmitDefaultValue = true)]
        public RequestedUpdates RequestedUpdates { get; set; }

        /// <summary>
        /// Gets or Sets TransportationOption
        /// </summary>
        [DataMember(Name = "transportationOption", IsRequired = true, EmitDefaultValue = true)]
        public TransportationOption TransportationOption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentUpdatePreview {\n");
            sb.Append("  ContentUpdatePreviewId: ").Append(ContentUpdatePreviewId).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  RequestedUpdates: ").Append(RequestedUpdates).Append("\n");
            sb.Append("  TransportationOption: ").Append(TransportationOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContentUpdatePreviewId (string) maxLength
            if (this.ContentUpdatePreviewId != null && this.ContentUpdatePreviewId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for ContentUpdatePreviewId, length must be less than 38.", new [] { "ContentUpdatePreviewId" });
            }

            // ContentUpdatePreviewId (string) minLength
            if (this.ContentUpdatePreviewId != null && this.ContentUpdatePreviewId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for ContentUpdatePreviewId, length must be greater than 38.", new [] { "ContentUpdatePreviewId" });
            }

            if (this.ContentUpdatePreviewId != null) {
                // ContentUpdatePreviewId (string) pattern
                Regex regexContentUpdatePreviewId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexContentUpdatePreviewId.Match(this.ContentUpdatePreviewId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentUpdatePreviewId, must match a pattern of " + regexContentUpdatePreviewId, new [] { "ContentUpdatePreviewId" });
                }
            }

            yield break;
        }
    }

}
