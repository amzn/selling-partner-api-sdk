/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// GetInboundOperationStatus response.
    /// </summary>
    [DataContract(Name = "InboundOperationStatus")]
    public partial class InboundOperationStatus : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OperationStatus
        /// </summary>
        [DataMember(Name = "operationStatus", IsRequired = true, EmitDefaultValue = true)]
        public OperationStatus OperationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundOperationStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InboundOperationStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundOperationStatus" /> class.
        /// </summary>
        /// <param name="operation">The name of the operation in the asynchronous API call. (required).</param>
        /// <param name="operationId">The operation ID returned by the asynchronous API call. (required).</param>
        /// <param name="operationProblems">The problems in the processing of the asynchronous operation. (required).</param>
        /// <param name="operationStatus">operationStatus (required).</param>
        public InboundOperationStatus(string operation = default(string), string operationId = default(string), List<OperationProblem> operationProblems = default(List<OperationProblem>), OperationStatus operationStatus = default(OperationStatus))
        {
            // to ensure "operation" is required (not null)
            if (operation == null)
            {
                throw new ArgumentNullException("operation is a required property for InboundOperationStatus and cannot be null");
            }
            this.Operation = operation;
            // to ensure "operationId" is required (not null)
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId is a required property for InboundOperationStatus and cannot be null");
            }
            this.OperationId = operationId;
            // to ensure "operationProblems" is required (not null)
            if (operationProblems == null)
            {
                throw new ArgumentNullException("operationProblems is a required property for InboundOperationStatus and cannot be null");
            }
            this.OperationProblems = operationProblems;
            this.OperationStatus = operationStatus;
        }

        /// <summary>
        /// The name of the operation in the asynchronous API call.
        /// </summary>
        /// <value>The name of the operation in the asynchronous API call.</value>
        [DataMember(Name = "operation", IsRequired = true, EmitDefaultValue = true)]
        public string Operation { get; set; }

        /// <summary>
        /// The operation ID returned by the asynchronous API call.
        /// </summary>
        /// <value>The operation ID returned by the asynchronous API call.</value>
        [DataMember(Name = "operationId", IsRequired = true, EmitDefaultValue = true)]
        public string OperationId { get; set; }

        /// <summary>
        /// The problems in the processing of the asynchronous operation.
        /// </summary>
        /// <value>The problems in the processing of the asynchronous operation.</value>
        [DataMember(Name = "operationProblems", IsRequired = true, EmitDefaultValue = true)]
        public List<OperationProblem> OperationProblems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboundOperationStatus {\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  OperationId: ").Append(OperationId).Append("\n");
            sb.Append("  OperationProblems: ").Append(OperationProblems).Append("\n");
            sb.Append("  OperationStatus: ").Append(OperationStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Operation (string) maxLength
            if (this.Operation != null && this.Operation.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Operation, length must be less than 1024.", new [] { "Operation" });
            }

            // Operation (string) minLength
            if (this.Operation != null && this.Operation.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Operation, length must be greater than 1.", new [] { "Operation" });
            }

            // OperationId (string) maxLength
            if (this.OperationId != null && this.OperationId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for OperationId, length must be less than 38.", new [] { "OperationId" });
            }

            // OperationId (string) minLength
            if (this.OperationId != null && this.OperationId.Length < 36)
            {
                yield return new ValidationResult("Invalid value for OperationId, length must be greater than 36.", new [] { "OperationId" });
            }

            if (this.OperationId != null) {
                // OperationId (string) pattern
                Regex regexOperationId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexOperationId.Match(this.OperationId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperationId, must match a pattern of " + regexOperationId, new [] { "OperationId" });
                }
            }

            yield break;
        }
    }

}
