/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Contains information about a box that is used in the inbound plan. The box is a container that holds multiple items.
    /// </summary>
    [DataContract(Name = "Box")]
    public partial class Box : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ContentInformationSource
        /// </summary>
        [DataMember(Name = "contentInformationSource", EmitDefaultValue = false)]
        public BoxContentInformationSource? ContentInformationSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Box" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Box() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Box" /> class.
        /// </summary>
        /// <param name="boxId">The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which is generated after transportation has been confirmed) and the index of the box..</param>
        /// <param name="contentInformationSource">contentInformationSource.</param>
        /// <param name="destinationRegion">destinationRegion.</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="externalContainerIdentifier">The external identifier for this container / box..</param>
        /// <param name="externalContainerIdentifierType">Type of the external identifier used. Can be: &#x60;AMAZON&#x60;, &#x60;SSCC&#x60;..</param>
        /// <param name="items">Items contained within the box..</param>
        /// <param name="packageId">Primary key to uniquely identify a Package (Box or Pallet). (required).</param>
        /// <param name="quantity">The number of containers where all other properties like weight or dimensions are identical..</param>
        /// <param name="templateName">Template name of the box..</param>
        /// <param name="weight">weight.</param>
        public Box(string boxId = default(string), BoxContentInformationSource? contentInformationSource = default(BoxContentInformationSource?), Region destinationRegion = default(Region), Dimensions dimensions = default(Dimensions), string externalContainerIdentifier = default(string), string externalContainerIdentifierType = default(string), List<Item> items = default(List<Item>), string packageId = default(string), int quantity = default(int), string templateName = default(string), Weight weight = default(Weight))
        {
            // to ensure "packageId" is required (not null)
            if (packageId == null)
            {
                throw new ArgumentNullException("packageId is a required property for Box and cannot be null");
            }
            this.PackageId = packageId;
            this.BoxId = boxId;
            this.ContentInformationSource = contentInformationSource;
            this.DestinationRegion = destinationRegion;
            this.Dimensions = dimensions;
            this.ExternalContainerIdentifier = externalContainerIdentifier;
            this.ExternalContainerIdentifierType = externalContainerIdentifierType;
            this.Items = items;
            this.Quantity = quantity;
            this.TemplateName = templateName;
            this.Weight = weight;
        }

        /// <summary>
        /// The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which is generated after transportation has been confirmed) and the index of the box.
        /// </summary>
        /// <value>The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which is generated after transportation has been confirmed) and the index of the box.</value>
        [DataMember(Name = "boxId", EmitDefaultValue = false)]
        public string BoxId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationRegion
        /// </summary>
        [DataMember(Name = "destinationRegion", EmitDefaultValue = false)]
        public Region DestinationRegion { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// The external identifier for this container / box.
        /// </summary>
        /// <value>The external identifier for this container / box.</value>
        [DataMember(Name = "externalContainerIdentifier", EmitDefaultValue = false)]
        public string ExternalContainerIdentifier { get; set; }

        /// <summary>
        /// Type of the external identifier used. Can be: &#x60;AMAZON&#x60;, &#x60;SSCC&#x60;.
        /// </summary>
        /// <value>Type of the external identifier used. Can be: &#x60;AMAZON&#x60;, &#x60;SSCC&#x60;.</value>
        [DataMember(Name = "externalContainerIdentifierType", EmitDefaultValue = false)]
        public string ExternalContainerIdentifierType { get; set; }

        /// <summary>
        /// Items contained within the box.
        /// </summary>
        /// <value>Items contained within the box.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<Item> Items { get; set; }

        /// <summary>
        /// Primary key to uniquely identify a Package (Box or Pallet).
        /// </summary>
        /// <value>Primary key to uniquely identify a Package (Box or Pallet).</value>
        [DataMember(Name = "packageId", IsRequired = true, EmitDefaultValue = true)]
        public string PackageId { get; set; }

        /// <summary>
        /// The number of containers where all other properties like weight or dimensions are identical.
        /// </summary>
        /// <value>The number of containers where all other properties like weight or dimensions are identical.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Template name of the box.
        /// </summary>
        /// <value>Template name of the box.</value>
        [DataMember(Name = "templateName", EmitDefaultValue = false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Box {\n");
            sb.Append("  BoxId: ").Append(BoxId).Append("\n");
            sb.Append("  ContentInformationSource: ").Append(ContentInformationSource).Append("\n");
            sb.Append("  DestinationRegion: ").Append(DestinationRegion).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  ExternalContainerIdentifier: ").Append(ExternalContainerIdentifier).Append("\n");
            sb.Append("  ExternalContainerIdentifierType: ").Append(ExternalContainerIdentifierType).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BoxId (string) maxLength
            if (this.BoxId != null && this.BoxId.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for BoxId, length must be less than 1024.", new [] { "BoxId" });
            }

            // BoxId (string) minLength
            if (this.BoxId != null && this.BoxId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for BoxId, length must be greater than 1.", new [] { "BoxId" });
            }

            // ExternalContainerIdentifier (string) maxLength
            if (this.ExternalContainerIdentifier != null && this.ExternalContainerIdentifier.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for ExternalContainerIdentifier, length must be less than 1024.", new [] { "ExternalContainerIdentifier" });
            }

            // ExternalContainerIdentifier (string) minLength
            if (this.ExternalContainerIdentifier != null && this.ExternalContainerIdentifier.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ExternalContainerIdentifier, length must be greater than 1.", new [] { "ExternalContainerIdentifier" });
            }

            // ExternalContainerIdentifierType (string) maxLength
            if (this.ExternalContainerIdentifierType != null && this.ExternalContainerIdentifierType.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for ExternalContainerIdentifierType, length must be less than 1024.", new [] { "ExternalContainerIdentifierType" });
            }

            // ExternalContainerIdentifierType (string) minLength
            if (this.ExternalContainerIdentifierType != null && this.ExternalContainerIdentifierType.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ExternalContainerIdentifierType, length must be greater than 1.", new [] { "ExternalContainerIdentifierType" });
            }

            // PackageId (string) maxLength
            if (this.PackageId != null && this.PackageId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for PackageId, length must be less than 38.", new [] { "PackageId" });
            }

            // PackageId (string) minLength
            if (this.PackageId != null && this.PackageId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for PackageId, length must be greater than 38.", new [] { "PackageId" });
            }

            if (this.PackageId != null) {
                // PackageId (string) pattern
                Regex regexPackageId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexPackageId.Match(this.PackageId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, must match a pattern of " + regexPackageId, new [] { "PackageId" });
                }
            }

            // Quantity (int) maximum
            if (this.Quantity > (int)10000)
            {
                yield return new ValidationResult("Invalid value for Quantity, must be a value less than or equal to 10000.", new [] { "Quantity" });
            }

            // Quantity (int) minimum
            if (this.Quantity < (int)1)
            {
                yield return new ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            // TemplateName (string) maxLength
            if (this.TemplateName != null && this.TemplateName.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for TemplateName, length must be less than 1024.", new [] { "TemplateName" });
            }

            // TemplateName (string) minLength
            if (this.TemplateName != null && this.TemplateName.Length < 1)
            {
                yield return new ValidationResult("Invalid value for TemplateName, length must be greater than 1.", new [] { "TemplateName" });
            }

            yield break;
        }
    }

}
