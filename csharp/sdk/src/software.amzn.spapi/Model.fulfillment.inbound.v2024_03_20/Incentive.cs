/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Contains details about cost related modifications to the placement cost.
    /// </summary>
    [DataContract(Name = "Incentive")]
    public partial class Incentive : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Incentive" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Incentive() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Incentive" /> class.
        /// </summary>
        /// <param name="description">Description of the incentive. (required).</param>
        /// <param name="target">Target of the incentive. Possible values: &#39;Placement Services&#39;, &#39;Fulfillment Fee Discount&#39;. (required).</param>
        /// <param name="type">Type of incentive. Possible values: &#x60;FEE&#x60;, &#x60;DISCOUNT&#x60;. (required).</param>
        /// <param name="value">value (required).</param>
        public Incentive(string description = default(string), string target = default(string), string type = default(string), Currency value = default(Currency))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Incentive and cannot be null");
            }
            this.Description = description;
            // to ensure "target" is required (not null)
            if (target == null)
            {
                throw new ArgumentNullException("target is a required property for Incentive and cannot be null");
            }
            this.Target = target;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Incentive and cannot be null");
            }
            this.Type = type;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for Incentive and cannot be null");
            }
            this.Value = value;
        }

        /// <summary>
        /// Description of the incentive.
        /// </summary>
        /// <value>Description of the incentive.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Target of the incentive. Possible values: &#39;Placement Services&#39;, &#39;Fulfillment Fee Discount&#39;.
        /// </summary>
        /// <value>Target of the incentive. Possible values: &#39;Placement Services&#39;, &#39;Fulfillment Fee Discount&#39;.</value>
        [DataMember(Name = "target", IsRequired = true, EmitDefaultValue = true)]
        public string Target { get; set; }

        /// <summary>
        /// Type of incentive. Possible values: &#x60;FEE&#x60;, &#x60;DISCOUNT&#x60;.
        /// </summary>
        /// <value>Type of incentive. Possible values: &#x60;FEE&#x60;, &#x60;DISCOUNT&#x60;.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public Currency Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Incentive {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // Target (string) maxLength
            if (this.Target != null && this.Target.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Target, length must be less than 1024.", new [] { "Target" });
            }

            // Target (string) minLength
            if (this.Target != null && this.Target.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Target, length must be greater than 1.", new [] { "Target" });
            }

            // Type (string) maxLength
            if (this.Type != null && this.Type.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Type, length must be less than 1024.", new [] { "Type" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            yield break;
        }
    }

}
