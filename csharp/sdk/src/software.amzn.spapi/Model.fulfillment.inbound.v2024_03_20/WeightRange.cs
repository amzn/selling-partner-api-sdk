/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// The range of weights that are allowed for a package.
    /// </summary>
    [DataContract(Name = "WeightRange")]
    public partial class WeightRange : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", IsRequired = true, EmitDefaultValue = true)]
        public UnitOfWeight Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WeightRange" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WeightRange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WeightRange" /> class.
        /// </summary>
        /// <param name="maximum">Maximum allowed weight. (required).</param>
        /// <param name="minimum">Minimum allowed weight. (required).</param>
        /// <param name="unit">unit (required).</param>
        public WeightRange(decimal maximum = default(decimal), decimal minimum = default(decimal), UnitOfWeight unit = default(UnitOfWeight))
        {
            this.Maximum = maximum;
            this.Minimum = minimum;
            this.Unit = unit;
        }

        /// <summary>
        /// Maximum allowed weight.
        /// </summary>
        /// <value>Maximum allowed weight.</value>
        [DataMember(Name = "maximum", IsRequired = true, EmitDefaultValue = true)]
        public decimal Maximum { get; set; }

        /// <summary>
        /// Minimum allowed weight.
        /// </summary>
        /// <value>Minimum allowed weight.</value>
        [DataMember(Name = "minimum", IsRequired = true, EmitDefaultValue = true)]
        public decimal Minimum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WeightRange {\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Maximum (decimal) maximum
            if (this.Maximum > (decimal)1E+5)
            {
                yield return new ValidationResult("Invalid value for Maximum, must be a value less than or equal to 1E+5.", new [] { "Maximum" });
            }

            // Maximum (decimal) minimum
            if (this.Maximum < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Maximum, must be a value greater than or equal to 0.", new [] { "Maximum" });
            }

            // Minimum (decimal) maximum
            if (this.Minimum > (decimal)1E+5)
            {
                yield return new ValidationResult("Invalid value for Minimum, must be a value less than or equal to 1E+5.", new [] { "Minimum" });
            }

            // Minimum (decimal) minimum
            if (this.Minimum < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Minimum, must be a value greater than or equal to 0.", new [] { "Minimum" });
            }

            yield break;
        }
    }

}
