/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Resource to download the requested document.
    /// </summary>
    [DataContract(Name = "DocumentDownload")]
    public partial class DocumentDownload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDownload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentDownload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDownload" /> class.
        /// </summary>
        /// <param name="downloadType">The type of download. Possible values: &#x60;URL&#x60;. (required).</param>
        /// <param name="expiration">The URI&#39;s expiration time. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;..</param>
        /// <param name="uri">Uniform resource identifier to identify where the document is located. (required).</param>
        public DocumentDownload(string downloadType = default(string), DateTime expiration = default(DateTime), string uri = default(string))
        {
            // to ensure "downloadType" is required (not null)
            if (downloadType == null)
            {
                throw new ArgumentNullException("downloadType is a required property for DocumentDownload and cannot be null");
            }
            this.DownloadType = downloadType;
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new ArgumentNullException("uri is a required property for DocumentDownload and cannot be null");
            }
            this.Uri = uri;
            this.Expiration = expiration;
        }

        /// <summary>
        /// The type of download. Possible values: &#x60;URL&#x60;.
        /// </summary>
        /// <value>The type of download. Possible values: &#x60;URL&#x60;.</value>
        [DataMember(Name = "downloadType", IsRequired = true, EmitDefaultValue = true)]
        public string DownloadType { get; set; }

        /// <summary>
        /// The URI&#39;s expiration time. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.
        /// </summary>
        /// <value>The URI&#39;s expiration time. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.</value>
        [DataMember(Name = "expiration", EmitDefaultValue = false)]
        public DateTime Expiration { get; set; }

        /// <summary>
        /// Uniform resource identifier to identify where the document is located.
        /// </summary>
        /// <value>Uniform resource identifier to identify where the document is located.</value>
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentDownload {\n");
            sb.Append("  DownloadType: ").Append(DownloadType).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
