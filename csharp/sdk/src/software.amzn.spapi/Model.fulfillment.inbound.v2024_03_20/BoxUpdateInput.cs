/*
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.inbound.v2024_03_20
{
    /// <summary>
    /// Input information for updating a box
    /// </summary>
    [DataContract(Name = "BoxUpdateInput")]
    public partial class BoxUpdateInput : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ContentInformationSource
        /// </summary>
        [DataMember(Name = "contentInformationSource", IsRequired = true, EmitDefaultValue = true)]
        public BoxContentInformationSource ContentInformationSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxUpdateInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BoxUpdateInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxUpdateInput" /> class.
        /// </summary>
        /// <param name="contentInformationSource">contentInformationSource (required).</param>
        /// <param name="dimensions">dimensions (required).</param>
        /// <param name="items">The items and their quantity in the box. This must be empty if the box &#x60;contentInformationSource&#x60; is &#x60;BARCODE_2D&#x60; or &#x60;MANUAL_PROCESS&#x60;..</param>
        /// <param name="packageId">Primary key to uniquely identify a Box Package. PackageId must be provided if the intent is to update an existing box. Adding a new box will not require providing this value. Any existing PackageIds not provided will be treated as to-be-removed.</param>
        /// <param name="quantity">The number of containers where all other properties like weight or dimensions are identical. (required).</param>
        /// <param name="weight">weight (required).</param>
        public BoxUpdateInput(BoxContentInformationSource contentInformationSource = default(BoxContentInformationSource), Dimensions dimensions = default(Dimensions), List<ItemInput> items = default(List<ItemInput>), string packageId = default(string), int quantity = default(int), Weight weight = default(Weight))
        {
            this.ContentInformationSource = contentInformationSource;
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new ArgumentNullException("dimensions is a required property for BoxUpdateInput and cannot be null");
            }
            this.Dimensions = dimensions;
            this.Quantity = quantity;
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new ArgumentNullException("weight is a required property for BoxUpdateInput and cannot be null");
            }
            this.Weight = weight;
            this.Items = items;
            this.PackageId = packageId;
        }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", IsRequired = true, EmitDefaultValue = true)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// The items and their quantity in the box. This must be empty if the box &#x60;contentInformationSource&#x60; is &#x60;BARCODE_2D&#x60; or &#x60;MANUAL_PROCESS&#x60;.
        /// </summary>
        /// <value>The items and their quantity in the box. This must be empty if the box &#x60;contentInformationSource&#x60; is &#x60;BARCODE_2D&#x60; or &#x60;MANUAL_PROCESS&#x60;.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<ItemInput> Items { get; set; }

        /// <summary>
        /// Primary key to uniquely identify a Box Package. PackageId must be provided if the intent is to update an existing box. Adding a new box will not require providing this value. Any existing PackageIds not provided will be treated as to-be-removed
        /// </summary>
        /// <value>Primary key to uniquely identify a Box Package. PackageId must be provided if the intent is to update an existing box. Adding a new box will not require providing this value. Any existing PackageIds not provided will be treated as to-be-removed</value>
        [DataMember(Name = "packageId", EmitDefaultValue = false)]
        public string PackageId { get; set; }

        /// <summary>
        /// The number of containers where all other properties like weight or dimensions are identical.
        /// </summary>
        /// <value>The number of containers where all other properties like weight or dimensions are identical.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BoxUpdateInput {\n");
            sb.Append("  ContentInformationSource: ").Append(ContentInformationSource).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PackageId (string) maxLength
            if (this.PackageId != null && this.PackageId.Length > 38)
            {
                yield return new ValidationResult("Invalid value for PackageId, length must be less than 38.", new [] { "PackageId" });
            }

            // PackageId (string) minLength
            if (this.PackageId != null && this.PackageId.Length < 38)
            {
                yield return new ValidationResult("Invalid value for PackageId, length must be greater than 38.", new [] { "PackageId" });
            }

            if (this.PackageId != null) {
                // PackageId (string) pattern
                Regex regexPackageId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
                if (!regexPackageId.Match(this.PackageId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, must match a pattern of " + regexPackageId, new [] { "PackageId" });
                }
            }

            // Quantity (int) maximum
            if (this.Quantity > (int)10000)
            {
                yield return new ValidationResult("Invalid value for Quantity, must be a value less than or equal to 10000.", new [] { "Quantity" });
            }

            // Quantity (int) minimum
            if (this.Quantity < (int)1)
            {
                yield return new ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
