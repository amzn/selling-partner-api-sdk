/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Details of the bank account involved in the transaction.
    /// </summary>
    [DataContract(Name = "TransactionAccount")]
    public partial class TransactionAccount : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BankAccountNumberFormat
        /// </summary>
        [DataMember(Name = "bankAccountNumberFormat", IsRequired = true, EmitDefaultValue = true)]
        public BankAccountNumberFormat BankAccountNumberFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionAccount" /> class.
        /// </summary>
        /// <param name="accountId">The unique identifier provided by Amazon to identify the account .</param>
        /// <param name="bankAccountHolderName">BankAccount holder&#39;s name .</param>
        /// <param name="bankName">The name of the bank  (required).</param>
        /// <param name="bankAccountNumberFormat">bankAccountNumberFormat (required).</param>
        /// <param name="bankAccountNumberTail">Last 3 digit of the bank account number .</param>
        /// <param name="bankAccountCountryCode">The two digit country code, in ISO 3166 format. This field is OPTIONAL for transactionSourceAccount object but is MANDATORY field for transactionDestinationAccount .</param>
        /// <param name="bankAccountCurrency">The currency code in ISO 4217 format  (required).</param>
        public TransactionAccount(string accountId = default(string), string bankAccountHolderName = default(string), string bankName = default(string), BankAccountNumberFormat bankAccountNumberFormat = default(BankAccountNumberFormat), string bankAccountNumberTail = default(string), string bankAccountCountryCode = default(string), string bankAccountCurrency = default(string))
        {
            // to ensure "bankName" is required (not null)
            if (bankName == null)
            {
                throw new ArgumentNullException("bankName is a required property for TransactionAccount and cannot be null");
            }
            this.BankName = bankName;
            this.BankAccountNumberFormat = bankAccountNumberFormat;
            // to ensure "bankAccountCurrency" is required (not null)
            if (bankAccountCurrency == null)
            {
                throw new ArgumentNullException("bankAccountCurrency is a required property for TransactionAccount and cannot be null");
            }
            this.BankAccountCurrency = bankAccountCurrency;
            this.AccountId = accountId;
            this.BankAccountHolderName = bankAccountHolderName;
            this.BankAccountNumberTail = bankAccountNumberTail;
            this.BankAccountCountryCode = bankAccountCountryCode;
        }

        /// <summary>
        /// The unique identifier provided by Amazon to identify the account 
        /// </summary>
        /// <value>The unique identifier provided by Amazon to identify the account </value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// BankAccount holder&#39;s name 
        /// </summary>
        /// <value>BankAccount holder&#39;s name </value>
        [DataMember(Name = "bankAccountHolderName", EmitDefaultValue = false)]
        public string BankAccountHolderName { get; set; }

        /// <summary>
        /// The name of the bank 
        /// </summary>
        /// <value>The name of the bank </value>
        [DataMember(Name = "bankName", IsRequired = true, EmitDefaultValue = true)]
        public string BankName { get; set; }

        /// <summary>
        /// Last 3 digit of the bank account number 
        /// </summary>
        /// <value>Last 3 digit of the bank account number </value>
        [DataMember(Name = "bankAccountNumberTail", EmitDefaultValue = false)]
        public string BankAccountNumberTail { get; set; }

        /// <summary>
        /// The two digit country code, in ISO 3166 format. This field is OPTIONAL for transactionSourceAccount object but is MANDATORY field for transactionDestinationAccount 
        /// </summary>
        /// <value>The two digit country code, in ISO 3166 format. This field is OPTIONAL for transactionSourceAccount object but is MANDATORY field for transactionDestinationAccount </value>
        [DataMember(Name = "bankAccountCountryCode", EmitDefaultValue = false)]
        public string BankAccountCountryCode { get; set; }

        /// <summary>
        /// The currency code in ISO 4217 format 
        /// </summary>
        /// <value>The currency code in ISO 4217 format </value>
        [DataMember(Name = "bankAccountCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string BankAccountCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  BankAccountHolderName: ").Append(BankAccountHolderName).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankAccountNumberFormat: ").Append(BankAccountNumberFormat).Append("\n");
            sb.Append("  BankAccountNumberTail: ").Append(BankAccountNumberTail).Append("\n");
            sb.Append("  BankAccountCountryCode: ").Append(BankAccountCountryCode).Append("\n");
            sb.Append("  BankAccountCurrency: ").Append(BankAccountCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
