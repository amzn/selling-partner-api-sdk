/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// If the fees is in baseAmount (sourceAccount) currency, effectiveRate &#x3D;  (baseAmount - sum(fees.feeAmount.currencyAmount)) * baseRate) / baseAmount. If the fees is in transferAmount (destinationAccount) currency, effectiveRate &#x3D;  (( baseAmount * baseRate ) -  sum(fees.feeAmount.currencyAmount )) / baseAmount 
    /// </summary>
    [DataContract(Name = "Fee")]
    public partial class Fee : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FeeType
        /// </summary>
        [DataMember(Name = "feeType", IsRequired = true, EmitDefaultValue = true)]
        public FeeType FeeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        /// <param name="feeId">Unique identifier assigned to the Fee.  (required).</param>
        /// <param name="feeType">feeType (required).</param>
        /// <param name="feeRateValue">The value of the fee in percentage format. (required).</param>
        /// <param name="feeAmount">feeAmount (required).</param>
        public Fee(string feeId = default(string), FeeType feeType = default(FeeType), string feeRateValue = default(string), Currency feeAmount = default(Currency))
        {
            // to ensure "feeId" is required (not null)
            if (feeId == null)
            {
                throw new ArgumentNullException("feeId is a required property for Fee and cannot be null");
            }
            this.FeeId = feeId;
            this.FeeType = feeType;
            // to ensure "feeRateValue" is required (not null)
            if (feeRateValue == null)
            {
                throw new ArgumentNullException("feeRateValue is a required property for Fee and cannot be null");
            }
            this.FeeRateValue = feeRateValue;
            // to ensure "feeAmount" is required (not null)
            if (feeAmount == null)
            {
                throw new ArgumentNullException("feeAmount is a required property for Fee and cannot be null");
            }
            this.FeeAmount = feeAmount;
        }

        /// <summary>
        /// Unique identifier assigned to the Fee. 
        /// </summary>
        /// <value>Unique identifier assigned to the Fee. </value>
        [DataMember(Name = "feeId", IsRequired = true, EmitDefaultValue = true)]
        public string FeeId { get; set; }

        /// <summary>
        /// The value of the fee in percentage format.
        /// </summary>
        /// <value>The value of the fee in percentage format.</value>
        [DataMember(Name = "feeRateValue", IsRequired = true, EmitDefaultValue = true)]
        public string FeeRateValue { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmount
        /// </summary>
        [DataMember(Name = "feeAmount", IsRequired = true, EmitDefaultValue = true)]
        public Currency FeeAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Fee {\n");
            sb.Append("  FeeId: ").Append(FeeId).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  FeeRateValue: ").Append(FeeRateValue).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
