/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Request body to initiate a transaction from a SW bank account to another customer defined bank account 
    /// </summary>
    [DataContract(Name = "TransactionInitiationRequest")]
    public partial class TransactionInitiationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInitiationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionInitiationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInitiationRequest" /> class.
        /// </summary>
        /// <param name="sourceAccountId">The unique identifier of the source Amazon SW bank account from where the money needs to be debited  (required).</param>
        /// <param name="destinationAccountId">Optional field to specify the unique identifier of the destination bank account where the money needs to be deposited .</param>
        /// <param name="destinationTransactionInstrument">destinationTransactionInstrument (required).</param>
        /// <param name="transactionDescription">A description of the transaction..</param>
        /// <param name="customerPaymentReference">If the payment is for VAT (Value-Added-Tax) then enter VAT identification number in this field which will be mandatory. The length constraint is 140 characters and do not allow user to enter any sensitive information other than VAT-ID..</param>
        /// <param name="destinationAccountHolderAddress">destinationAccountHolderAddress.</param>
        /// <param name="sourceAmount">sourceAmount (required).</param>
        /// <param name="transferRateDetails">transferRateDetails.</param>
        /// <param name="requestTime">The transaction initiation request time in date-time format  (required).</param>
        public TransactionInitiationRequest(string sourceAccountId = default(string), string destinationAccountId = default(string), TransactionInstrumentDetails destinationTransactionInstrument = default(TransactionInstrumentDetails), string transactionDescription = default(string), string customerPaymentReference = default(string), AccountHolderAddress destinationAccountHolderAddress = default(AccountHolderAddress), Currency sourceAmount = default(Currency), TransferRatePreview transferRateDetails = default(TransferRatePreview), DateTime requestTime = default(DateTime))
        {
            // to ensure "sourceAccountId" is required (not null)
            if (sourceAccountId == null)
            {
                throw new ArgumentNullException("sourceAccountId is a required property for TransactionInitiationRequest and cannot be null");
            }
            this.SourceAccountId = sourceAccountId;
            // to ensure "destinationTransactionInstrument" is required (not null)
            if (destinationTransactionInstrument == null)
            {
                throw new ArgumentNullException("destinationTransactionInstrument is a required property for TransactionInitiationRequest and cannot be null");
            }
            this.DestinationTransactionInstrument = destinationTransactionInstrument;
            // to ensure "sourceAmount" is required (not null)
            if (sourceAmount == null)
            {
                throw new ArgumentNullException("sourceAmount is a required property for TransactionInitiationRequest and cannot be null");
            }
            this.SourceAmount = sourceAmount;
            this.RequestTime = requestTime;
            this.DestinationAccountId = destinationAccountId;
            this.TransactionDescription = transactionDescription;
            this.CustomerPaymentReference = customerPaymentReference;
            this.DestinationAccountHolderAddress = destinationAccountHolderAddress;
            this.TransferRateDetails = transferRateDetails;
        }

        /// <summary>
        /// The unique identifier of the source Amazon SW bank account from where the money needs to be debited 
        /// </summary>
        /// <value>The unique identifier of the source Amazon SW bank account from where the money needs to be debited </value>
        /*
        <example>amzn1.account.SMUGN2EN3ZHWSRJKH2KCJPII5JEI</example>
        */
        [DataMember(Name = "sourceAccountId", IsRequired = true, EmitDefaultValue = true)]
        public string SourceAccountId { get; set; }

        /// <summary>
        /// Optional field to specify the unique identifier of the destination bank account where the money needs to be deposited 
        /// </summary>
        /// <value>Optional field to specify the unique identifier of the destination bank account where the money needs to be deposited </value>
        /*
        <example>amzn1.account.AJKBFWEJFBNH2KCJPII5FBN</example>
        */
        [DataMember(Name = "destinationAccountId", EmitDefaultValue = false)]
        public string DestinationAccountId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationTransactionInstrument
        /// </summary>
        [DataMember(Name = "destinationTransactionInstrument", IsRequired = true, EmitDefaultValue = true)]
        public TransactionInstrumentDetails DestinationTransactionInstrument { get; set; }

        /// <summary>
        /// A description of the transaction.
        /// </summary>
        /// <value>A description of the transaction.</value>
        [DataMember(Name = "transactionDescription", EmitDefaultValue = false)]
        public string TransactionDescription { get; set; }

        /// <summary>
        /// If the payment is for VAT (Value-Added-Tax) then enter VAT identification number in this field which will be mandatory. The length constraint is 140 characters and do not allow user to enter any sensitive information other than VAT-ID.
        /// </summary>
        /// <value>If the payment is for VAT (Value-Added-Tax) then enter VAT identification number in this field which will be mandatory. The length constraint is 140 characters and do not allow user to enter any sensitive information other than VAT-ID.</value>
        /*
        <example>BG999999999</example>
        */
        [DataMember(Name = "customerPaymentReference", EmitDefaultValue = false)]
        public string CustomerPaymentReference { get; set; }

        /// <summary>
        /// Gets or Sets DestinationAccountHolderAddress
        /// </summary>
        [DataMember(Name = "destinationAccountHolderAddress", EmitDefaultValue = false)]
        public AccountHolderAddress DestinationAccountHolderAddress { get; set; }

        /// <summary>
        /// Gets or Sets SourceAmount
        /// </summary>
        [DataMember(Name = "sourceAmount", IsRequired = true, EmitDefaultValue = true)]
        public Currency SourceAmount { get; set; }

        /// <summary>
        /// Gets or Sets TransferRateDetails
        /// </summary>
        [DataMember(Name = "transferRateDetails", EmitDefaultValue = false)]
        public TransferRatePreview TransferRateDetails { get; set; }

        /// <summary>
        /// The transaction initiation request time in date-time format 
        /// </summary>
        /// <value>The transaction initiation request time in date-time format </value>
        /*
        <example>2024-03-26T02:32:59.787Z</example>
        */
        [DataMember(Name = "requestTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime RequestTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionInitiationRequest {\n");
            sb.Append("  SourceAccountId: ").Append(SourceAccountId).Append("\n");
            sb.Append("  DestinationAccountId: ").Append(DestinationAccountId).Append("\n");
            sb.Append("  DestinationTransactionInstrument: ").Append(DestinationTransactionInstrument).Append("\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("  CustomerPaymentReference: ").Append(CustomerPaymentReference).Append("\n");
            sb.Append("  DestinationAccountHolderAddress: ").Append(DestinationAccountHolderAddress).Append("\n");
            sb.Append("  SourceAmount: ").Append(SourceAmount).Append("\n");
            sb.Append("  TransferRateDetails: ").Append(TransferRateDetails).Append("\n");
            sb.Append("  RequestTime: ").Append(RequestTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
