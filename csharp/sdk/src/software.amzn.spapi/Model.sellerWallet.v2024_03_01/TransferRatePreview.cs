/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// The fees and foreign exchange rates that apply to the transaction.  If the fees are in terms of the &#x60;baseAmount&#x60; (source account) currency, then the effective rate is equal to **1 - (fees * &#x60;baseRate&#x60; / &#x60;baseAmount&#x60;)**.  If the fees are in terms of the &#x60;transferAmount&#x60; (destination account) currency, then the effective rate is equal to **&#x60;baseRate&#x60; - (fees / &#x60;baseAmount&#x60;)**.  In the preceding expressions, **fees** is equal to the sum of all &#x60;feeAmount.currencyAmount&#x60; values in the &#x60;fees&#x60; array.
    /// </summary>
    [DataContract(Name = "TransferRatePreview")]
    public partial class TransferRatePreview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferRatePreview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferRatePreview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferRatePreview" /> class.
        /// </summary>
        /// <param name="baseAmount">baseAmount (required).</param>
        /// <param name="fxRateDetails">fxRateDetails (required).</param>
        /// <param name="transferAmount">transferAmount (required).</param>
        /// <param name="fees">List of fees  (required).</param>
        public TransferRatePreview(Currency baseAmount = default(Currency), FxRateDetails fxRateDetails = default(FxRateDetails), Currency transferAmount = default(Currency), List<Fee> fees = default(List<Fee>))
        {
            // to ensure "baseAmount" is required (not null)
            if (baseAmount == null)
            {
                throw new ArgumentNullException("baseAmount is a required property for TransferRatePreview and cannot be null");
            }
            this.BaseAmount = baseAmount;
            // to ensure "fxRateDetails" is required (not null)
            if (fxRateDetails == null)
            {
                throw new ArgumentNullException("fxRateDetails is a required property for TransferRatePreview and cannot be null");
            }
            this.FxRateDetails = fxRateDetails;
            // to ensure "transferAmount" is required (not null)
            if (transferAmount == null)
            {
                throw new ArgumentNullException("transferAmount is a required property for TransferRatePreview and cannot be null");
            }
            this.TransferAmount = transferAmount;
            // to ensure "fees" is required (not null)
            if (fees == null)
            {
                throw new ArgumentNullException("fees is a required property for TransferRatePreview and cannot be null");
            }
            this.Fees = fees;
        }

        /// <summary>
        /// Gets or Sets BaseAmount
        /// </summary>
        [DataMember(Name = "baseAmount", IsRequired = true, EmitDefaultValue = true)]
        public Currency BaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets FxRateDetails
        /// </summary>
        [DataMember(Name = "fxRateDetails", IsRequired = true, EmitDefaultValue = true)]
        public FxRateDetails FxRateDetails { get; set; }

        /// <summary>
        /// Gets or Sets TransferAmount
        /// </summary>
        [DataMember(Name = "transferAmount", IsRequired = true, EmitDefaultValue = true)]
        public Currency TransferAmount { get; set; }

        /// <summary>
        /// List of fees 
        /// </summary>
        /// <value>List of fees </value>
        [DataMember(Name = "fees", IsRequired = true, EmitDefaultValue = true)]
        public List<Fee> Fees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferRatePreview {\n");
            sb.Append("  BaseAmount: ").Append(BaseAmount).Append("\n");
            sb.Append("  FxRateDetails: ").Append(FxRateDetails).Append("\n");
            sb.Append("  TransferAmount: ").Append(TransferAmount).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
