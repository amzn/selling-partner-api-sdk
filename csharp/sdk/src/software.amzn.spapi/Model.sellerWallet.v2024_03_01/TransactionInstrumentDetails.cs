/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Request body to create transaction instrument, Amazon performs validation and screening (anti-money laundering measuers) on all the transaction instruments before executing a transaction thus it requires transaction instrument holder&#39;s contact details as well 
    /// </summary>
    [DataContract(Name = "TransactionInstrumentDetails")]
    public partial class TransactionInstrumentDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInstrumentDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionInstrumentDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInstrumentDetails" /> class.
        /// </summary>
        /// <param name="bankAccount">bankAccount (required).</param>
        /// <param name="bankAccountNumber">This field would be used to populate the bank account number of the destination payment method. The field is intentionally not included in any other Schemas since Amazon internal systems will never receive it in unencrypted format, so field won&#39;t be part of the request signature  (required).</param>
        /// <param name="accountHolderName">The bank account holder&#39;s name (expected to be an Amazon customer).  **Note:** This field is encrypted before Amazon receives it, so should not be used to generate &#x60;destAccountDigitalSignature&#x60;, and should not be included in the request signature. (required).</param>
        public TransactionInstrumentDetails(BankAccount bankAccount = default(BankAccount), string bankAccountNumber = default(string), string accountHolderName = default(string))
        {
            // to ensure "bankAccount" is required (not null)
            if (bankAccount == null)
            {
                throw new ArgumentNullException("bankAccount is a required property for TransactionInstrumentDetails and cannot be null");
            }
            this.BankAccount = bankAccount;
            // to ensure "bankAccountNumber" is required (not null)
            if (bankAccountNumber == null)
            {
                throw new ArgumentNullException("bankAccountNumber is a required property for TransactionInstrumentDetails and cannot be null");
            }
            this.BankAccountNumber = bankAccountNumber;
            // to ensure "accountHolderName" is required (not null)
            if (accountHolderName == null)
            {
                throw new ArgumentNullException("accountHolderName is a required property for TransactionInstrumentDetails and cannot be null");
            }
            this.AccountHolderName = accountHolderName;
        }

        /// <summary>
        /// Gets or Sets BankAccount
        /// </summary>
        [DataMember(Name = "bankAccount", IsRequired = true, EmitDefaultValue = true)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// This field would be used to populate the bank account number of the destination payment method. The field is intentionally not included in any other Schemas since Amazon internal systems will never receive it in unencrypted format, so field won&#39;t be part of the request signature 
        /// </summary>
        /// <value>This field would be used to populate the bank account number of the destination payment method. The field is intentionally not included in any other Schemas since Amazon internal systems will never receive it in unencrypted format, so field won&#39;t be part of the request signature </value>
        /*
        <example>GB29RBOS60161331926819</example>
        */
        [DataMember(Name = "bankAccountNumber", IsRequired = true, EmitDefaultValue = true)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// The bank account holder&#39;s name (expected to be an Amazon customer).  **Note:** This field is encrypted before Amazon receives it, so should not be used to generate &#x60;destAccountDigitalSignature&#x60;, and should not be included in the request signature.
        /// </summary>
        /// <value>The bank account holder&#39;s name (expected to be an Amazon customer).  **Note:** This field is encrypted before Amazon receives it, so should not be used to generate &#x60;destAccountDigitalSignature&#x60;, and should not be included in the request signature.</value>
        /*
        <example>John Doe</example>
        */
        [DataMember(Name = "accountHolderName", IsRequired = true, EmitDefaultValue = true)]
        public string AccountHolderName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionInstrumentDetails {\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  AccountHolderName: ").Append(AccountHolderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
