/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Details of an Amazon SW bank account, used to hold money earned by a SW customer by selling items. NOTE: Not including account_links, short cut links to the account balance and transactions -&gt; since not mandatory 
    /// </summary>
    [DataContract(Name = "BankAccount")]
    public partial class BankAccount : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BankAccountNumberFormat
        /// </summary>
        [DataMember(Name = "bankAccountNumberFormat", IsRequired = true, EmitDefaultValue = true)]
        public BankAccountNumberFormat BankAccountNumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountOwnershipType
        /// </summary>
        [DataMember(Name = "bankAccountOwnershipType", IsRequired = true, EmitDefaultValue = true)]
        public BankAccountOwnershipType BankAccountOwnershipType { get; set; }

        /// <summary>
        /// Gets or Sets BankNumberFormat
        /// </summary>
        [DataMember(Name = "bankNumberFormat", IsRequired = true, EmitDefaultValue = true)]
        public BankNumberFormat BankNumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountHolderStatus
        /// </summary>
        [DataMember(Name = "bankAccountHolderStatus", EmitDefaultValue = false)]
        public BankAccountHolderStatus? BankAccountHolderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccount" /> class.
        /// </summary>
        /// <param name="accountId">The unique identifier provided by Amazon to identify the account .</param>
        /// <param name="accountHolderName">BankAccount holder&#39;s name (expected to be Amazon customer) .</param>
        /// <param name="bankAccountNumberFormat">bankAccountNumberFormat (required).</param>
        /// <param name="bankName">The name of the bank, for all Amazon Seller Wallet account the value will be Amazon Seller Wallet .</param>
        /// <param name="bankAccountOwnershipType">bankAccountOwnershipType (required).</param>
        /// <param name="routingNumber">Routing number for automated clearing house transfers, for all Amazon Seller Wallet account the value will be denoted by nine cosecutive 0&#39;s,   (required).</param>
        /// <param name="bankNumberFormat">bankNumberFormat (required).</param>
        /// <param name="accountCountryCode">The two digit country code, in ISO 3166 format.  (required).</param>
        /// <param name="accountCurrency">BankAccount currency code in ISO 4217 format  (required).</param>
        /// <param name="bankAccountNumberTail">Last 3 digit of the bank account number, for all Amazon Seller Wallet account the value will be three consecutive 0&#39;s  (required).</param>
        /// <param name="bankAccountHolderStatus">bankAccountHolderStatus.</param>
        public BankAccount(string accountId = default(string), string accountHolderName = default(string), BankAccountNumberFormat bankAccountNumberFormat = default(BankAccountNumberFormat), string bankName = default(string), BankAccountOwnershipType bankAccountOwnershipType = default(BankAccountOwnershipType), string routingNumber = default(string), BankNumberFormat bankNumberFormat = default(BankNumberFormat), string accountCountryCode = default(string), string accountCurrency = default(string), string bankAccountNumberTail = default(string), BankAccountHolderStatus? bankAccountHolderStatus = default(BankAccountHolderStatus?))
        {
            this.BankAccountNumberFormat = bankAccountNumberFormat;
            this.BankAccountOwnershipType = bankAccountOwnershipType;
            // to ensure "routingNumber" is required (not null)
            if (routingNumber == null)
            {
                throw new ArgumentNullException("routingNumber is a required property for BankAccount and cannot be null");
            }
            this.RoutingNumber = routingNumber;
            this.BankNumberFormat = bankNumberFormat;
            // to ensure "accountCountryCode" is required (not null)
            if (accountCountryCode == null)
            {
                throw new ArgumentNullException("accountCountryCode is a required property for BankAccount and cannot be null");
            }
            this.AccountCountryCode = accountCountryCode;
            // to ensure "accountCurrency" is required (not null)
            if (accountCurrency == null)
            {
                throw new ArgumentNullException("accountCurrency is a required property for BankAccount and cannot be null");
            }
            this.AccountCurrency = accountCurrency;
            // to ensure "bankAccountNumberTail" is required (not null)
            if (bankAccountNumberTail == null)
            {
                throw new ArgumentNullException("bankAccountNumberTail is a required property for BankAccount and cannot be null");
            }
            this.BankAccountNumberTail = bankAccountNumberTail;
            this.AccountId = accountId;
            this.AccountHolderName = accountHolderName;
            this.BankName = bankName;
            this.BankAccountHolderStatus = bankAccountHolderStatus;
        }

        /// <summary>
        /// The unique identifier provided by Amazon to identify the account 
        /// </summary>
        /// <value>The unique identifier provided by Amazon to identify the account </value>
        /*
        <example>amzn1.account.AGUGL2EM3ZHYSRJWH2UCRPIM5JFQ</example>
        */
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// BankAccount holder&#39;s name (expected to be Amazon customer) 
        /// </summary>
        /// <value>BankAccount holder&#39;s name (expected to be Amazon customer) </value>
        /*
        <example>John Doe</example>
        */
        [DataMember(Name = "accountHolderName", EmitDefaultValue = false)]
        public string AccountHolderName { get; set; }

        /// <summary>
        /// The name of the bank, for all Amazon Seller Wallet account the value will be Amazon Seller Wallet 
        /// </summary>
        /// <value>The name of the bank, for all Amazon Seller Wallet account the value will be Amazon Seller Wallet </value>
        /*
        <example>Bank Of America</example>
        */
        [DataMember(Name = "bankName", EmitDefaultValue = false)]
        public string BankName { get; set; }

        /// <summary>
        /// Routing number for automated clearing house transfers, for all Amazon Seller Wallet account the value will be denoted by nine cosecutive 0&#39;s,  
        /// </summary>
        /// <value>Routing number for automated clearing house transfers, for all Amazon Seller Wallet account the value will be denoted by nine cosecutive 0&#39;s,  </value>
        /*
        <example>026009593</example>
        */
        [DataMember(Name = "routingNumber", IsRequired = true, EmitDefaultValue = true)]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// The two digit country code, in ISO 3166 format. 
        /// </summary>
        /// <value>The two digit country code, in ISO 3166 format. </value>
        /*
        <example>US</example>
        */
        [DataMember(Name = "accountCountryCode", IsRequired = true, EmitDefaultValue = true)]
        public string AccountCountryCode { get; set; }

        /// <summary>
        /// BankAccount currency code in ISO 4217 format 
        /// </summary>
        /// <value>BankAccount currency code in ISO 4217 format </value>
        /*
        <example>USD</example>
        */
        [DataMember(Name = "accountCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string AccountCurrency { get; set; }

        /// <summary>
        /// Last 3 digit of the bank account number, for all Amazon Seller Wallet account the value will be three consecutive 0&#39;s 
        /// </summary>
        /// <value>Last 3 digit of the bank account number, for all Amazon Seller Wallet account the value will be three consecutive 0&#39;s </value>
        /*
        <example>666</example>
        */
        [DataMember(Name = "bankAccountNumberTail", IsRequired = true, EmitDefaultValue = true)]
        public string BankAccountNumberTail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountHolderName: ").Append(AccountHolderName).Append("\n");
            sb.Append("  BankAccountNumberFormat: ").Append(BankAccountNumberFormat).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankAccountOwnershipType: ").Append(BankAccountOwnershipType).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  BankNumberFormat: ").Append(BankNumberFormat).Append("\n");
            sb.Append("  AccountCountryCode: ").Append(AccountCountryCode).Append("\n");
            sb.Append("  AccountCurrency: ").Append(AccountCurrency).Append("\n");
            sb.Append("  BankAccountNumberTail: ").Append(BankAccountNumberTail).Append("\n");
            sb.Append("  BankAccountHolderStatus: ").Append(BankAccountHolderStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
