/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Parameters containing information required for initiating a schedule transfer 
    /// </summary>
    [DataContract(Name = "TransferScheduleInformation")]
    public partial class TransferScheduleInformation : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ScheduleType
        /// </summary>
        [DataMember(Name = "scheduleType", EmitDefaultValue = false)]
        public ScheduleTransferType? ScheduleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleInformation" /> class.
        /// </summary>
        /// <param name="scheduleStartDate">Field to specify start date of the scheduled transfer .</param>
        /// <param name="scheduleEndDate">Field to specify end date of the scheduled transfer .</param>
        /// <param name="scheduleExpression">scheduleExpression.</param>
        /// <param name="scheduleType">scheduleType.</param>
        public TransferScheduleInformation(DateTime scheduleStartDate = default(DateTime), DateTime scheduleEndDate = default(DateTime), ScheduleExpression scheduleExpression = default(ScheduleExpression), ScheduleTransferType? scheduleType = default(ScheduleTransferType?))
        {
            this.ScheduleStartDate = scheduleStartDate;
            this.ScheduleEndDate = scheduleEndDate;
            this.ScheduleExpression = scheduleExpression;
            this.ScheduleType = scheduleType;
        }

        /// <summary>
        /// Field to specify start date of the scheduled transfer 
        /// </summary>
        /// <value>Field to specify start date of the scheduled transfer </value>
        /*
        <example>2024-03-01T00:00Z</example>
        */
        [DataMember(Name = "scheduleStartDate", EmitDefaultValue = false)]
        public DateTime ScheduleStartDate { get; set; }

        /// <summary>
        /// Field to specify end date of the scheduled transfer 
        /// </summary>
        /// <value>Field to specify end date of the scheduled transfer </value>
        /*
        <example>2027-03-01T00:00Z</example>
        */
        [DataMember(Name = "scheduleEndDate", EmitDefaultValue = false)]
        public DateTime ScheduleEndDate { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleExpression
        /// </summary>
        [DataMember(Name = "scheduleExpression", EmitDefaultValue = false)]
        public ScheduleExpression ScheduleExpression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferScheduleInformation {\n");
            sb.Append("  ScheduleStartDate: ").Append(ScheduleStartDate).Append("\n");
            sb.Append("  ScheduleEndDate: ").Append(ScheduleEndDate).Append("\n");
            sb.Append("  ScheduleExpression: ").Append(ScheduleExpression).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
