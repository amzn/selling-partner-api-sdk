/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Specifies the balance amount in the Amazon SW bank account
    /// </summary>
    [DataContract(Name = "Balance")]
    public partial class Balance : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BalanceType
        /// </summary>
        [DataMember(Name = "balanceType", EmitDefaultValue = false)]
        public BalanceType? BalanceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Balance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Balance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Balance" /> class.
        /// </summary>
        /// <param name="accountId">The unique identifier provided by Amazon to identify the account  (required).</param>
        /// <param name="balanceType">balanceType.</param>
        /// <param name="balanceAmount">A decimal number such as amount or FX rate. (required).</param>
        /// <param name="balanceCurrency">The Amazon SW bank account currency code in ISO 4217 format  (required).</param>
        /// <param name="lastUpdateDate">The last update date on the account balance  (required).</param>
        public Balance(string accountId = default(string), BalanceType? balanceType = default(BalanceType?), decimal balanceAmount = default(decimal), string balanceCurrency = default(string), DateTime lastUpdateDate = default(DateTime))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for Balance and cannot be null");
            }
            this.AccountId = accountId;
            this.BalanceAmount = balanceAmount;
            // to ensure "balanceCurrency" is required (not null)
            if (balanceCurrency == null)
            {
                throw new ArgumentNullException("balanceCurrency is a required property for Balance and cannot be null");
            }
            this.BalanceCurrency = balanceCurrency;
            this.LastUpdateDate = lastUpdateDate;
            this.BalanceType = balanceType;
        }

        /// <summary>
        /// The unique identifier provided by Amazon to identify the account 
        /// </summary>
        /// <value>The unique identifier provided by Amazon to identify the account </value>
        /*
        <example>amzn1.account.AGUGL2EM3ZHYSRJWH2UCRPIM5JFQ</example>
        */
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// A decimal number such as amount or FX rate.
        /// </summary>
        /// <value>A decimal number such as amount or FX rate.</value>
        [DataMember(Name = "balanceAmount", IsRequired = true, EmitDefaultValue = true)]
        public decimal BalanceAmount { get; set; }

        /// <summary>
        /// The Amazon SW bank account currency code in ISO 4217 format 
        /// </summary>
        /// <value>The Amazon SW bank account currency code in ISO 4217 format </value>
        /*
        <example>USD</example>
        */
        [DataMember(Name = "balanceCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string BalanceCurrency { get; set; }

        /// <summary>
        /// The last update date on the account balance 
        /// </summary>
        /// <value>The last update date on the account balance </value>
        [DataMember(Name = "lastUpdateDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastUpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Balance {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  BalanceType: ").Append(BalanceType).Append("\n");
            sb.Append("  BalanceAmount: ").Append(BalanceAmount).Append("\n");
            sb.Append("  BalanceCurrency: ").Append(BalanceCurrency).Append("\n");
            sb.Append("  LastUpdateDate: ").Append(LastUpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
