/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Request body to initiate a scheduled transfer from a SW bank account to another customer defined bank account 
    /// </summary>
    [DataContract(Name = "TransferScheduleRequest")]
    public partial class TransferScheduleRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name = "transactionType", IsRequired = true, EmitDefaultValue = true)]
        public TransactionType TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets TransferScheduleStatus
        /// </summary>
        [DataMember(Name = "transferScheduleStatus", EmitDefaultValue = false)]
        public TransferScheduleStatus? TransferScheduleStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferScheduleRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferScheduleRequest" /> class.
        /// </summary>
        /// <param name="sourceAccountId">The unique identifier of the source Amazon SW bank account from where the money needs to be debited  (required).</param>
        /// <param name="sourceCurrencyCode">Represents 3 letter currency code in ISO 4217 standard format of the source payment method country  (required).</param>
        /// <param name="destinationAccountId">Optional field to specify the unique identifier of the destination bank account where the money needs to be deposited  (required).</param>
        /// <param name="destinationTransactionInstrument">destinationTransactionInstrument (required).</param>
        /// <param name="transactionType">transactionType (required).</param>
        /// <param name="transferScheduleInformation">transferScheduleInformation (required).</param>
        /// <param name="paymentPreference">paymentPreference (required).</param>
        /// <param name="transferScheduleStatus">transferScheduleStatus.</param>
        public TransferScheduleRequest(string sourceAccountId = default(string), string sourceCurrencyCode = default(string), string destinationAccountId = default(string), TransactionInstrumentDetails destinationTransactionInstrument = default(TransactionInstrumentDetails), TransactionType transactionType = default(TransactionType), TransferScheduleInformation transferScheduleInformation = default(TransferScheduleInformation), PaymentPreference paymentPreference = default(PaymentPreference), TransferScheduleStatus? transferScheduleStatus = default(TransferScheduleStatus?))
        {
            // to ensure "sourceAccountId" is required (not null)
            if (sourceAccountId == null)
            {
                throw new ArgumentNullException("sourceAccountId is a required property for TransferScheduleRequest and cannot be null");
            }
            this.SourceAccountId = sourceAccountId;
            // to ensure "sourceCurrencyCode" is required (not null)
            if (sourceCurrencyCode == null)
            {
                throw new ArgumentNullException("sourceCurrencyCode is a required property for TransferScheduleRequest and cannot be null");
            }
            this.SourceCurrencyCode = sourceCurrencyCode;
            // to ensure "destinationAccountId" is required (not null)
            if (destinationAccountId == null)
            {
                throw new ArgumentNullException("destinationAccountId is a required property for TransferScheduleRequest and cannot be null");
            }
            this.DestinationAccountId = destinationAccountId;
            // to ensure "destinationTransactionInstrument" is required (not null)
            if (destinationTransactionInstrument == null)
            {
                throw new ArgumentNullException("destinationTransactionInstrument is a required property for TransferScheduleRequest and cannot be null");
            }
            this.DestinationTransactionInstrument = destinationTransactionInstrument;
            this.TransactionType = transactionType;
            // to ensure "transferScheduleInformation" is required (not null)
            if (transferScheduleInformation == null)
            {
                throw new ArgumentNullException("transferScheduleInformation is a required property for TransferScheduleRequest and cannot be null");
            }
            this.TransferScheduleInformation = transferScheduleInformation;
            // to ensure "paymentPreference" is required (not null)
            if (paymentPreference == null)
            {
                throw new ArgumentNullException("paymentPreference is a required property for TransferScheduleRequest and cannot be null");
            }
            this.PaymentPreference = paymentPreference;
            this.TransferScheduleStatus = transferScheduleStatus;
        }

        /// <summary>
        /// The unique identifier of the source Amazon SW bank account from where the money needs to be debited 
        /// </summary>
        /// <value>The unique identifier of the source Amazon SW bank account from where the money needs to be debited </value>
        /*
        <example>amzn1.account.SMUGN2EN3ZHWSRJKH2KCJPII5JEI</example>
        */
        [DataMember(Name = "sourceAccountId", IsRequired = true, EmitDefaultValue = true)]
        public string SourceAccountId { get; set; }

        /// <summary>
        /// Represents 3 letter currency code in ISO 4217 standard format of the source payment method country 
        /// </summary>
        /// <value>Represents 3 letter currency code in ISO 4217 standard format of the source payment method country </value>
        /*
        <example>GBP</example>
        */
        [DataMember(Name = "sourceCurrencyCode", IsRequired = true, EmitDefaultValue = true)]
        public string SourceCurrencyCode { get; set; }

        /// <summary>
        /// Optional field to specify the unique identifier of the destination bank account where the money needs to be deposited 
        /// </summary>
        /// <value>Optional field to specify the unique identifier of the destination bank account where the money needs to be deposited </value>
        /*
        <example>amzn1.account.AJKBFWEJFBNH2KCJPII5FBN</example>
        */
        [DataMember(Name = "destinationAccountId", IsRequired = true, EmitDefaultValue = true)]
        public string DestinationAccountId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationTransactionInstrument
        /// </summary>
        [DataMember(Name = "destinationTransactionInstrument", IsRequired = true, EmitDefaultValue = true)]
        public TransactionInstrumentDetails DestinationTransactionInstrument { get; set; }

        /// <summary>
        /// Gets or Sets TransferScheduleInformation
        /// </summary>
        [DataMember(Name = "transferScheduleInformation", IsRequired = true, EmitDefaultValue = true)]
        public TransferScheduleInformation TransferScheduleInformation { get; set; }

        /// <summary>
        /// Gets or Sets PaymentPreference
        /// </summary>
        [DataMember(Name = "paymentPreference", IsRequired = true, EmitDefaultValue = true)]
        public PaymentPreference PaymentPreference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferScheduleRequest {\n");
            sb.Append("  SourceAccountId: ").Append(SourceAccountId).Append("\n");
            sb.Append("  SourceCurrencyCode: ").Append(SourceCurrencyCode).Append("\n");
            sb.Append("  DestinationAccountId: ").Append(DestinationAccountId).Append("\n");
            sb.Append("  DestinationTransactionInstrument: ").Append(DestinationTransactionInstrument).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransferScheduleInformation: ").Append(TransferScheduleInformation).Append("\n");
            sb.Append("  PaymentPreference: ").Append(PaymentPreference).Append("\n");
            sb.Append("  TransferScheduleStatus: ").Append(TransferScheduleStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
