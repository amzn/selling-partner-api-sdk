/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Transfer schedule details and related historical details.
    /// </summary>
    [DataContract(Name = "TransferSchedule")]
    public partial class TransferSchedule : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name = "transactionType", IsRequired = true, EmitDefaultValue = true)]
        public TransactionType TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets TransferScheduleStatus
        /// </summary>
        [DataMember(Name = "transferScheduleStatus", IsRequired = true, EmitDefaultValue = true)]
        public TransferScheduleStatus TransferScheduleStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferSchedule" /> class.
        /// </summary>
        /// <param name="transferScheduleId">The unique identifier provided by Amazon to the scheduled transfer  (required).</param>
        /// <param name="transactionType">transactionType (required).</param>
        /// <param name="transactionSourceAccount">transactionSourceAccount.</param>
        /// <param name="transactionDestinationAccount">transactionDestinationAccount (required).</param>
        /// <param name="transferScheduleStatus">transferScheduleStatus (required).</param>
        /// <param name="transferScheduleInformation">transferScheduleInformation (required).</param>
        /// <param name="paymentPreference">paymentPreference.</param>
        /// <param name="transferScheduleFailures">Collection that holds Transfer Schedules that has been cancelled or failed due to certain reasons.  (required).</param>
        public TransferSchedule(string transferScheduleId = default(string), TransactionType transactionType = default(TransactionType), TransactionAccount transactionSourceAccount = default(TransactionAccount), TransactionAccount transactionDestinationAccount = default(TransactionAccount), TransferScheduleStatus transferScheduleStatus = default(TransferScheduleStatus), TransferScheduleInformation transferScheduleInformation = default(TransferScheduleInformation), PaymentPreference paymentPreference = default(PaymentPreference), List<TransferScheduleFailures> transferScheduleFailures = default(List<TransferScheduleFailures>))
        {
            // to ensure "transferScheduleId" is required (not null)
            if (transferScheduleId == null)
            {
                throw new ArgumentNullException("transferScheduleId is a required property for TransferSchedule and cannot be null");
            }
            this.TransferScheduleId = transferScheduleId;
            this.TransactionType = transactionType;
            // to ensure "transactionDestinationAccount" is required (not null)
            if (transactionDestinationAccount == null)
            {
                throw new ArgumentNullException("transactionDestinationAccount is a required property for TransferSchedule and cannot be null");
            }
            this.TransactionDestinationAccount = transactionDestinationAccount;
            this.TransferScheduleStatus = transferScheduleStatus;
            // to ensure "transferScheduleInformation" is required (not null)
            if (transferScheduleInformation == null)
            {
                throw new ArgumentNullException("transferScheduleInformation is a required property for TransferSchedule and cannot be null");
            }
            this.TransferScheduleInformation = transferScheduleInformation;
            // to ensure "transferScheduleFailures" is required (not null)
            if (transferScheduleFailures == null)
            {
                throw new ArgumentNullException("transferScheduleFailures is a required property for TransferSchedule and cannot be null");
            }
            this.TransferScheduleFailures = transferScheduleFailures;
            this.TransactionSourceAccount = transactionSourceAccount;
            this.PaymentPreference = paymentPreference;
        }

        /// <summary>
        /// The unique identifier provided by Amazon to the scheduled transfer 
        /// </summary>
        /// <value>The unique identifier provided by Amazon to the scheduled transfer </value>
        [DataMember(Name = "transferScheduleId", IsRequired = true, EmitDefaultValue = true)]
        public string TransferScheduleId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionSourceAccount
        /// </summary>
        [DataMember(Name = "transactionSourceAccount", EmitDefaultValue = false)]
        public TransactionAccount TransactionSourceAccount { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDestinationAccount
        /// </summary>
        [DataMember(Name = "transactionDestinationAccount", IsRequired = true, EmitDefaultValue = true)]
        public TransactionAccount TransactionDestinationAccount { get; set; }

        /// <summary>
        /// Gets or Sets TransferScheduleInformation
        /// </summary>
        [DataMember(Name = "transferScheduleInformation", IsRequired = true, EmitDefaultValue = true)]
        public TransferScheduleInformation TransferScheduleInformation { get; set; }

        /// <summary>
        /// Gets or Sets PaymentPreference
        /// </summary>
        [DataMember(Name = "paymentPreference", EmitDefaultValue = false)]
        public PaymentPreference PaymentPreference { get; set; }

        /// <summary>
        /// Collection that holds Transfer Schedules that has been cancelled or failed due to certain reasons. 
        /// </summary>
        /// <value>Collection that holds Transfer Schedules that has been cancelled or failed due to certain reasons. </value>
        [DataMember(Name = "transferScheduleFailures", IsRequired = true, EmitDefaultValue = true)]
        public List<TransferScheduleFailures> TransferScheduleFailures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferSchedule {\n");
            sb.Append("  TransferScheduleId: ").Append(TransferScheduleId).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransactionSourceAccount: ").Append(TransactionSourceAccount).Append("\n");
            sb.Append("  TransactionDestinationAccount: ").Append(TransactionDestinationAccount).Append("\n");
            sb.Append("  TransferScheduleStatus: ").Append(TransferScheduleStatus).Append("\n");
            sb.Append("  TransferScheduleInformation: ").Append(TransferScheduleInformation).Append("\n");
            sb.Append("  PaymentPreference: ").Append(PaymentPreference).Append("\n");
            sb.Append("  TransferScheduleFailures: ").Append(TransferScheduleFailures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
