/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Parameters containing information of the expression that defines when the schedule runs. The following formats are supported. 
    /// </summary>
    [DataContract(Name = "ScheduleExpression")]
    public partial class ScheduleExpression : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ScheduleExpressionType
        /// </summary>
        [DataMember(Name = "scheduleExpressionType", IsRequired = true, EmitDefaultValue = true)]
        public ScheduleExpressionType ScheduleExpressionType { get; set; }

        /// <summary>
        /// Gets or Sets RecurringFrequency
        /// </summary>
        [DataMember(Name = "recurringFrequency", EmitDefaultValue = false)]
        public RecurringFrequency? RecurringFrequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleExpression" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScheduleExpression() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleExpression" /> class.
        /// </summary>
        /// <param name="scheduleExpressionType">scheduleExpressionType (required).</param>
        /// <param name="recurringFrequency">recurringFrequency.</param>
        public ScheduleExpression(ScheduleExpressionType scheduleExpressionType = default(ScheduleExpressionType), RecurringFrequency? recurringFrequency = default(RecurringFrequency?))
        {
            this.ScheduleExpressionType = scheduleExpressionType;
            this.RecurringFrequency = recurringFrequency;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleExpression {\n");
            sb.Append("  ScheduleExpressionType: ").Append(ScheduleExpressionType).Append("\n");
            sb.Append("  RecurringFrequency: ").Append(RecurringFrequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
