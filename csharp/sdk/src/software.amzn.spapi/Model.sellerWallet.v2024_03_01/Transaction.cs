/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// The current transaction status and related historical details.
    /// </summary>
    [DataContract(Name = "Transaction")]
    public partial class Transaction : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name = "transactionType", IsRequired = true, EmitDefaultValue = true)]
        public TransactionType TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets TransactionStatus
        /// </summary>
        [DataMember(Name = "transactionStatus", IsRequired = true, EmitDefaultValue = true)]
        public TransactionStatus TransactionStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Transaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="transactionId">The unique identifier provided by Amazon to the transaction  (required).</param>
        /// <param name="transactionType">transactionType (required).</param>
        /// <param name="transactionStatus">transactionStatus (required).</param>
        /// <param name="transactionRequestDate">The date when the transaction was initiated. (required).</param>
        /// <param name="expectedCompletionDate">Expected completion date of a transaction, for existing active Payees (Trusted Beneficiaries) it will be 24 hours but for new destination bank accounts the value could go up to 5 days .</param>
        /// <param name="transactionActualCompletionDate">Transaction completion date .</param>
        /// <param name="lastUpdateDate">The last update date on the transaction  (required).</param>
        /// <param name="requesterName">Amazon SW customer who requested the transaction .</param>
        /// <param name="transactionRequesterSource">The transaction initiation source. This value is either the Amazon portal or PISP name that the customer used to start the transaction. (required).</param>
        /// <param name="transactionDescription">A description of the transaction that the requester provides when they initiate the transaction. (required).</param>
        /// <param name="transactionSourceAccount">transactionSourceAccount (required).</param>
        /// <param name="transactionDestinationAccount">transactionDestinationAccount (required).</param>
        /// <param name="transactionRequestAmount">transactionRequestAmount (required).</param>
        /// <param name="transferRateDetails">transferRateDetails (required).</param>
        /// <param name="transactionFinalAmount">transactionFinalAmount.</param>
        /// <param name="transactionFailureReason">Description in case the transaction fails before completion .</param>
        public Transaction(string transactionId = default(string), TransactionType transactionType = default(TransactionType), TransactionStatus transactionStatus = default(TransactionStatus), DateTime transactionRequestDate = default(DateTime), DateTime expectedCompletionDate = default(DateTime), DateTime transactionActualCompletionDate = default(DateTime), DateTime lastUpdateDate = default(DateTime), string requesterName = default(string), string transactionRequesterSource = default(string), string transactionDescription = default(string), TransactionAccount transactionSourceAccount = default(TransactionAccount), TransactionAccount transactionDestinationAccount = default(TransactionAccount), Currency transactionRequestAmount = default(Currency), TransferRatePreview transferRateDetails = default(TransferRatePreview), Currency transactionFinalAmount = default(Currency), string transactionFailureReason = default(string))
        {
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new ArgumentNullException("transactionId is a required property for Transaction and cannot be null");
            }
            this.TransactionId = transactionId;
            this.TransactionType = transactionType;
            this.TransactionStatus = transactionStatus;
            this.TransactionRequestDate = transactionRequestDate;
            this.LastUpdateDate = lastUpdateDate;
            // to ensure "transactionRequesterSource" is required (not null)
            if (transactionRequesterSource == null)
            {
                throw new ArgumentNullException("transactionRequesterSource is a required property for Transaction and cannot be null");
            }
            this.TransactionRequesterSource = transactionRequesterSource;
            // to ensure "transactionDescription" is required (not null)
            if (transactionDescription == null)
            {
                throw new ArgumentNullException("transactionDescription is a required property for Transaction and cannot be null");
            }
            this.TransactionDescription = transactionDescription;
            // to ensure "transactionSourceAccount" is required (not null)
            if (transactionSourceAccount == null)
            {
                throw new ArgumentNullException("transactionSourceAccount is a required property for Transaction and cannot be null");
            }
            this.TransactionSourceAccount = transactionSourceAccount;
            // to ensure "transactionDestinationAccount" is required (not null)
            if (transactionDestinationAccount == null)
            {
                throw new ArgumentNullException("transactionDestinationAccount is a required property for Transaction and cannot be null");
            }
            this.TransactionDestinationAccount = transactionDestinationAccount;
            // to ensure "transactionRequestAmount" is required (not null)
            if (transactionRequestAmount == null)
            {
                throw new ArgumentNullException("transactionRequestAmount is a required property for Transaction and cannot be null");
            }
            this.TransactionRequestAmount = transactionRequestAmount;
            // to ensure "transferRateDetails" is required (not null)
            if (transferRateDetails == null)
            {
                throw new ArgumentNullException("transferRateDetails is a required property for Transaction and cannot be null");
            }
            this.TransferRateDetails = transferRateDetails;
            this.ExpectedCompletionDate = expectedCompletionDate;
            this.TransactionActualCompletionDate = transactionActualCompletionDate;
            this.RequesterName = requesterName;
            this.TransactionFinalAmount = transactionFinalAmount;
            this.TransactionFailureReason = transactionFailureReason;
        }

        /// <summary>
        /// The unique identifier provided by Amazon to the transaction 
        /// </summary>
        /// <value>The unique identifier provided by Amazon to the transaction </value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// The date when the transaction was initiated.
        /// </summary>
        /// <value>The date when the transaction was initiated.</value>
        [DataMember(Name = "transactionRequestDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime TransactionRequestDate { get; set; }

        /// <summary>
        /// Expected completion date of a transaction, for existing active Payees (Trusted Beneficiaries) it will be 24 hours but for new destination bank accounts the value could go up to 5 days 
        /// </summary>
        /// <value>Expected completion date of a transaction, for existing active Payees (Trusted Beneficiaries) it will be 24 hours but for new destination bank accounts the value could go up to 5 days </value>
        /*
        <example>2023-09-26T02:32:59.787Z</example>
        */
        [DataMember(Name = "expectedCompletionDate", EmitDefaultValue = false)]
        public DateTime ExpectedCompletionDate { get; set; }

        /// <summary>
        /// Transaction completion date 
        /// </summary>
        /// <value>Transaction completion date </value>
        [DataMember(Name = "transactionActualCompletionDate", EmitDefaultValue = false)]
        public DateTime TransactionActualCompletionDate { get; set; }

        /// <summary>
        /// The last update date on the transaction 
        /// </summary>
        /// <value>The last update date on the transaction </value>
        [DataMember(Name = "lastUpdateDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastUpdateDate { get; set; }

        /// <summary>
        /// Amazon SW customer who requested the transaction 
        /// </summary>
        /// <value>Amazon SW customer who requested the transaction </value>
        /*
        <example>TPPOrgId</example>
        */
        [DataMember(Name = "requesterName", EmitDefaultValue = false)]
        public string RequesterName { get; set; }

        /// <summary>
        /// The transaction initiation source. This value is either the Amazon portal or PISP name that the customer used to start the transaction.
        /// </summary>
        /// <value>The transaction initiation source. This value is either the Amazon portal or PISP name that the customer used to start the transaction.</value>
        [DataMember(Name = "transactionRequesterSource", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionRequesterSource { get; set; }

        /// <summary>
        /// A description of the transaction that the requester provides when they initiate the transaction.
        /// </summary>
        /// <value>A description of the transaction that the requester provides when they initiate the transaction.</value>
        [DataMember(Name = "transactionDescription", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionDescription { get; set; }

        /// <summary>
        /// Gets or Sets TransactionSourceAccount
        /// </summary>
        [DataMember(Name = "transactionSourceAccount", IsRequired = true, EmitDefaultValue = true)]
        public TransactionAccount TransactionSourceAccount { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDestinationAccount
        /// </summary>
        [DataMember(Name = "transactionDestinationAccount", IsRequired = true, EmitDefaultValue = true)]
        public TransactionAccount TransactionDestinationAccount { get; set; }

        /// <summary>
        /// Gets or Sets TransactionRequestAmount
        /// </summary>
        [DataMember(Name = "transactionRequestAmount", IsRequired = true, EmitDefaultValue = true)]
        public Currency TransactionRequestAmount { get; set; }

        /// <summary>
        /// Gets or Sets TransferRateDetails
        /// </summary>
        [DataMember(Name = "transferRateDetails", IsRequired = true, EmitDefaultValue = true)]
        public TransferRatePreview TransferRateDetails { get; set; }

        /// <summary>
        /// Gets or Sets TransactionFinalAmount
        /// </summary>
        [DataMember(Name = "transactionFinalAmount", EmitDefaultValue = false)]
        public Currency TransactionFinalAmount { get; set; }

        /// <summary>
        /// Description in case the transaction fails before completion 
        /// </summary>
        /// <value>Description in case the transaction fails before completion </value>
        /*
        <example>Insufficient Balance</example>
        */
        [DataMember(Name = "transactionFailureReason", EmitDefaultValue = false)]
        public string TransactionFailureReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  TransactionRequestDate: ").Append(TransactionRequestDate).Append("\n");
            sb.Append("  ExpectedCompletionDate: ").Append(ExpectedCompletionDate).Append("\n");
            sb.Append("  TransactionActualCompletionDate: ").Append(TransactionActualCompletionDate).Append("\n");
            sb.Append("  LastUpdateDate: ").Append(LastUpdateDate).Append("\n");
            sb.Append("  RequesterName: ").Append(RequesterName).Append("\n");
            sb.Append("  TransactionRequesterSource: ").Append(TransactionRequesterSource).Append("\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("  TransactionSourceAccount: ").Append(TransactionSourceAccount).Append("\n");
            sb.Append("  TransactionDestinationAccount: ").Append(TransactionDestinationAccount).Append("\n");
            sb.Append("  TransactionRequestAmount: ").Append(TransactionRequestAmount).Append("\n");
            sb.Append("  TransferRateDetails: ").Append(TransferRateDetails).Append("\n");
            sb.Append("  TransactionFinalAmount: ").Append(TransactionFinalAmount).Append("\n");
            sb.Append("  TransactionFailureReason: ").Append(TransactionFailureReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
