/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Foreign exchange rate details displayed when transfer preview is requested. 
    /// </summary>
    [DataContract(Name = "FxRateDetails")]
    public partial class FxRateDetails : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RateDirection
        /// </summary>
        [DataMember(Name = "rateDirection", IsRequired = true, EmitDefaultValue = true)]
        public RateDirection RateDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxRateDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FxRateDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxRateDetails" /> class.
        /// </summary>
        /// <param name="fxRateId">Unique identifier assigned to the fees/foreign exchange Rate of a transaction.  (required).</param>
        /// <param name="baseRate">A decimal number such as amount or FX rate. (required).</param>
        /// <param name="effectiveFxRate">A decimal number such as amount or FX rate. (required).</param>
        /// <param name="rateDirection">rateDirection (required).</param>
        public FxRateDetails(string fxRateId = default(string), decimal baseRate = default(decimal), decimal effectiveFxRate = default(decimal), RateDirection rateDirection = default(RateDirection))
        {
            // to ensure "fxRateId" is required (not null)
            if (fxRateId == null)
            {
                throw new ArgumentNullException("fxRateId is a required property for FxRateDetails and cannot be null");
            }
            this.FxRateId = fxRateId;
            this.BaseRate = baseRate;
            this.EffectiveFxRate = effectiveFxRate;
            this.RateDirection = rateDirection;
        }

        /// <summary>
        /// Unique identifier assigned to the fees/foreign exchange Rate of a transaction. 
        /// </summary>
        /// <value>Unique identifier assigned to the fees/foreign exchange Rate of a transaction. </value>
        [DataMember(Name = "fxRateId", IsRequired = true, EmitDefaultValue = true)]
        public string FxRateId { get; set; }

        /// <summary>
        /// A decimal number such as amount or FX rate.
        /// </summary>
        /// <value>A decimal number such as amount or FX rate.</value>
        [DataMember(Name = "baseRate", IsRequired = true, EmitDefaultValue = true)]
        public decimal BaseRate { get; set; }

        /// <summary>
        /// A decimal number such as amount or FX rate.
        /// </summary>
        /// <value>A decimal number such as amount or FX rate.</value>
        [DataMember(Name = "effectiveFxRate", IsRequired = true, EmitDefaultValue = true)]
        public decimal EffectiveFxRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FxRateDetails {\n");
            sb.Append("  FxRateId: ").Append(FxRateId).Append("\n");
            sb.Append("  BaseRate: ").Append(BaseRate).Append("\n");
            sb.Append("  EffectiveFxRate: ").Append(EffectiveFxRate).Append("\n");
            sb.Append("  RateDirection: ").Append(RateDirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
