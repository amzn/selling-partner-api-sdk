/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// The transaction response and historical details related to it.
    /// </summary>
    [DataContract(Name = "CreateTransactionResponse")]
    public partial class CreateTransactionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTransactionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionResponse" /> class.
        /// </summary>
        /// <param name="transaction">transaction (required).</param>
        /// <param name="callBackURL">The callback URL for the transaction which the user have to click to approve/consent the transaction (required).</param>
        public CreateTransactionResponse(Transaction transaction = default(Transaction), string callBackURL = default(string))
        {
            // to ensure "transaction" is required (not null)
            if (transaction == null)
            {
                throw new ArgumentNullException("transaction is a required property for CreateTransactionResponse and cannot be null");
            }
            this.Transaction = transaction;
            // to ensure "callBackURL" is required (not null)
            if (callBackURL == null)
            {
                throw new ArgumentNullException("callBackURL is a required property for CreateTransactionResponse and cannot be null");
            }
            this.CallBackURL = callBackURL;
        }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", IsRequired = true, EmitDefaultValue = true)]
        public Transaction Transaction { get; set; }

        /// <summary>
        /// The callback URL for the transaction which the user have to click to approve/consent the transaction
        /// </summary>
        /// <value>The callback URL for the transaction which the user have to click to approve/consent the transaction</value>
        /*
        <example>https://www.example.com/callback/transaction_id/</example>
        */
        [DataMember(Name = "callBackURL", IsRequired = true, EmitDefaultValue = true)]
        public string CallBackURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransactionResponse {\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  CallBackURL: ").Append(CallBackURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
