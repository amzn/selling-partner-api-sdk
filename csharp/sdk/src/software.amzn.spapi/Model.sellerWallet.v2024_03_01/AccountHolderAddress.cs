/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Address for bank account verification of the Payee. For example, this can be a person or business mailing address 
    /// </summary>
    [DataContract(Name = "AccountHolderAddress")]
    public partial class AccountHolderAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountHolderAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountHolderAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountHolderAddress" /> class.
        /// </summary>
        /// <param name="addressLine1">Address Line 1 of the public address  (required).</param>
        /// <param name="addressLine2">Address Line 2 of the public address .</param>
        /// <param name="city">City name of the public address  (required).</param>
        /// <param name="state">State name of the public address. This is the state or region for China-based addresses. (required).</param>
        /// <param name="postalCode">Postal code of the public address  (required).</param>
        /// <param name="country">Country name of the public address .</param>
        /// <param name="countryCode">The two digit country code, in ISO 3166 format.  (required).</param>
        public AccountHolderAddress(string addressLine1 = default(string), string addressLine2 = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string country = default(string), string countryCode = default(string))
        {
            // to ensure "addressLine1" is required (not null)
            if (addressLine1 == null)
            {
                throw new ArgumentNullException("addressLine1 is a required property for AccountHolderAddress and cannot be null");
            }
            this.AddressLine1 = addressLine1;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for AccountHolderAddress and cannot be null");
            }
            this.City = city;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for AccountHolderAddress and cannot be null");
            }
            this.State = state;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for AccountHolderAddress and cannot be null");
            }
            this.PostalCode = postalCode;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for AccountHolderAddress and cannot be null");
            }
            this.CountryCode = countryCode;
            this.AddressLine2 = addressLine2;
            this.Country = country;
        }

        /// <summary>
        /// Address Line 1 of the public address 
        /// </summary>
        /// <value>Address Line 1 of the public address </value>
        /*
        <example>678 JFK Street</example>
        */
        [DataMember(Name = "addressLine1", IsRequired = true, EmitDefaultValue = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Address Line 2 of the public address 
        /// </summary>
        /// <value>Address Line 2 of the public address </value>
        /*
        <example>Unit 415</example>
        */
        [DataMember(Name = "addressLine2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// City name of the public address 
        /// </summary>
        /// <value>City name of the public address </value>
        /*
        <example>Seattle</example>
        */
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// State name of the public address. This is the state or region for China-based addresses.
        /// </summary>
        /// <value>State name of the public address. This is the state or region for China-based addresses.</value>
        /*
        <example>WA</example>
        */
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Postal code of the public address 
        /// </summary>
        /// <value>Postal code of the public address </value>
        /*
        <example>98109</example>
        */
        [DataMember(Name = "postalCode", IsRequired = true, EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Country name of the public address 
        /// </summary>
        /// <value>Country name of the public address </value>
        /*
        <example>United States</example>
        */
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// The two digit country code, in ISO 3166 format. 
        /// </summary>
        /// <value>The two digit country code, in ISO 3166 format. </value>
        /*
        <example>US</example>
        */
        [DataMember(Name = "countryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountHolderAddress {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
