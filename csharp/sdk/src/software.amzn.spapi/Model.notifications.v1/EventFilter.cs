/*
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.notifications.v1
{
    /// <summary>
    /// A &#x60;notificationType&#x60; specific filter. This object contains all of the currently available filters and properties that you can use to define a &#x60;notificationType&#x60; specific filter.
    /// </summary>
    [DataContract(Name = "EventFilter")]
    public partial class EventFilter : IValidatableObject
    {
        /// <summary>
        /// An &#x60;eventFilterType&#x60; value that is supported by the specific &#x60;notificationType&#x60;. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an &#x60;eventFilterType&#x60; is supported.
        /// </summary>
        /// <value>An &#x60;eventFilterType&#x60; value that is supported by the specific &#x60;notificationType&#x60;. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an &#x60;eventFilterType&#x60; is supported.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventFilterTypeEnum
        {
            /// <summary>
            /// Enum ANYOFFERCHANGED for value: ANY_OFFER_CHANGED
            /// </summary>
            [EnumMember(Value = "ANY_OFFER_CHANGED")]
            ANYOFFERCHANGED = 1,

            /// <summary>
            /// Enum ORDERCHANGE for value: ORDER_CHANGE
            /// </summary>
            [EnumMember(Value = "ORDER_CHANGE")]
            ORDERCHANGE = 2
        }


        /// <summary>
        /// An &#x60;eventFilterType&#x60; value that is supported by the specific &#x60;notificationType&#x60;. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an &#x60;eventFilterType&#x60; is supported.
        /// </summary>
        /// <value>An &#x60;eventFilterType&#x60; value that is supported by the specific &#x60;notificationType&#x60;. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an &#x60;eventFilterType&#x60; is supported.</value>
        [DataMember(Name = "eventFilterType", IsRequired = true, EmitDefaultValue = true)]
        public EventFilterTypeEnum EventFilterType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventFilter" /> class.
        /// </summary>
        /// <param name="aggregationSettings">aggregationSettings.</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list..</param>
        /// <param name="orderChangeTypes">A list of order change types to subscribe to (for example: &#x60;BuyerRequestedChange&#x60;). To receive notifications of all change types, do not provide this list..</param>
        /// <param name="eventFilterType">An &#x60;eventFilterType&#x60; value that is supported by the specific &#x60;notificationType&#x60;. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an &#x60;eventFilterType&#x60; is supported. (required).</param>
        public EventFilter(AggregationSettings aggregationSettings = default(AggregationSettings), List<string> marketplaceIds = default(List<string>), List<OrderChangeTypeEnum> orderChangeTypes = default(List<OrderChangeTypeEnum>), EventFilterTypeEnum eventFilterType = default(EventFilterTypeEnum))
        {
            this.EventFilterType = eventFilterType;
            this.AggregationSettings = aggregationSettings;
            this.MarketplaceIds = marketplaceIds;
            this.OrderChangeTypes = orderChangeTypes;
        }

        /// <summary>
        /// Gets or Sets AggregationSettings
        /// </summary>
        [DataMember(Name = "aggregationSettings", EmitDefaultValue = false)]
        public AggregationSettings AggregationSettings { get; set; }

        /// <summary>
        /// A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.
        /// </summary>
        /// <value>A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.</value>
        [DataMember(Name = "marketplaceIds", EmitDefaultValue = false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// A list of order change types to subscribe to (for example: &#x60;BuyerRequestedChange&#x60;). To receive notifications of all change types, do not provide this list.
        /// </summary>
        /// <value>A list of order change types to subscribe to (for example: &#x60;BuyerRequestedChange&#x60;). To receive notifications of all change types, do not provide this list.</value>
        [DataMember(Name = "orderChangeTypes", EmitDefaultValue = false)]
        public List<OrderChangeTypeEnum> OrderChangeTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventFilter {\n");
            sb.Append("  AggregationSettings: ").Append(AggregationSettings).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  OrderChangeTypes: ").Append(OrderChangeTypes).Append("\n");
            sb.Append("  EventFilterType: ").Append(EventFilterType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
