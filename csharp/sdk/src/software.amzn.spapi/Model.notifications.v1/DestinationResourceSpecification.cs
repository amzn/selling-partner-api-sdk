/*
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.notifications.v1
{
    /// <summary>
    /// The information required to create a destination resource. Applications should use one resource type (sqs or eventBridge) per destination.
    /// </summary>
    [DataContract(Name = "DestinationResourceSpecification")]
    public partial class DestinationResourceSpecification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationResourceSpecification" /> class.
        /// </summary>
        /// <param name="sqs">sqs.</param>
        /// <param name="eventBridge">eventBridge.</param>
        public DestinationResourceSpecification(SqsResource sqs = default(SqsResource), EventBridgeResourceSpecification eventBridge = default(EventBridgeResourceSpecification))
        {
            this.Sqs = sqs;
            this.EventBridge = eventBridge;
        }

        /// <summary>
        /// Gets or Sets Sqs
        /// </summary>
        [DataMember(Name = "sqs", EmitDefaultValue = false)]
        public SqsResource Sqs { get; set; }

        /// <summary>
        /// Gets or Sets EventBridge
        /// </summary>
        [DataMember(Name = "eventBridge", EmitDefaultValue = false)]
        public EventBridgeResourceSpecification EventBridge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinationResourceSpecification {\n");
            sb.Append("  Sqs: ").Append(Sqs).Append("\n");
            sb.Append("  EventBridge: ").Append(EventBridge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
