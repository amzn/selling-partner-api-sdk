/*
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.notifications.v1
{
    /// <summary>
    /// The request schema for the &#x60;createDestination&#x60; operation.
    /// </summary>
    [DataContract(Name = "CreateDestinationRequest")]
    public partial class CreateDestinationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDestinationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateDestinationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDestinationRequest" /> class.
        /// </summary>
        /// <param name="resourceSpecification">resourceSpecification (required).</param>
        /// <param name="name">A developer-defined name to help identify this destination. (required).</param>
        public CreateDestinationRequest(DestinationResourceSpecification resourceSpecification = default(DestinationResourceSpecification), string name = default(string))
        {
            // to ensure "resourceSpecification" is required (not null)
            if (resourceSpecification == null)
            {
                throw new ArgumentNullException("resourceSpecification is a required property for CreateDestinationRequest and cannot be null");
            }
            this.ResourceSpecification = resourceSpecification;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateDestinationRequest and cannot be null");
            }
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets ResourceSpecification
        /// </summary>
        [DataMember(Name = "resourceSpecification", IsRequired = true, EmitDefaultValue = true)]
        public DestinationResourceSpecification ResourceSpecification { get; set; }

        /// <summary>
        /// A developer-defined name to help identify this destination.
        /// </summary>
        /// <value>A developer-defined name to help identify this destination.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDestinationRequest {\n");
            sb.Append("  ResourceSpecification: ").Append(ResourceSpecification).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
