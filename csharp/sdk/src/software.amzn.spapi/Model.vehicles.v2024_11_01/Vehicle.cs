/*
 * The Selling Partner API for Automotive.
 *
 * The Selling Partner API for Automotive provides programmatic access to information needed by selling partners to provide compatibility information about their listed products.
 *
 * The version of the OpenAPI document: 2024-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vehicles.v2024_11_01
{
    /// <summary>
    /// Combinations of attributes and unique identifier that represents a vehicle in vehicle list.
    /// </summary>
    [DataContract(Name = "Vehicle")]
    public partial class Vehicle : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public VehicleStatusInCatalog? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Vehicle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="make">Vehicle Brand. (required).</param>
        /// <param name="model">Specific model of a vehicle. (required).</param>
        /// <param name="variantName">Name of the vehicle variant..</param>
        /// <param name="bodyStyle">Body style of vehicle (example: Hatchback, Cabriolet)..</param>
        /// <param name="driveType">Drive type of vehicle(example: Rear wheel drive)..</param>
        /// <param name="energy">Energy Source for the vehicle(example: Petrol).</param>
        /// <param name="engineOutput">Engine output of vehicle..</param>
        /// <param name="manufacturingStartDate">manufacturingStartDate.</param>
        /// <param name="manufacturingStopDate">manufacturingStopDate.</param>
        /// <param name="lastProcessedDate">The date on which the vehicle was last updated, in ISO-8601 date/time format..</param>
        /// <param name="status">status.</param>
        /// <param name="identifiers">Identifiers that can be used to identify the vehicle uniquely (required).</param>
        public Vehicle(string make = default(string), string model = default(string), string variantName = default(string), string bodyStyle = default(string), string driveType = default(string), string energy = default(string), List<EngineOutput> engineOutput = default(List<EngineOutput>), MonthAndYear manufacturingStartDate = default(MonthAndYear), MonthAndYear manufacturingStopDate = default(MonthAndYear), string lastProcessedDate = default(string), VehicleStatusInCatalog? status = default(VehicleStatusInCatalog?), List<VehicleIdentifiers> identifiers = default(List<VehicleIdentifiers>))
        {
            // to ensure "make" is required (not null)
            if (make == null)
            {
                throw new ArgumentNullException("make is a required property for Vehicle and cannot be null");
            }
            this.Make = make;
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for Vehicle and cannot be null");
            }
            this.Model = model;
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new ArgumentNullException("identifiers is a required property for Vehicle and cannot be null");
            }
            this.Identifiers = identifiers;
            this.VariantName = variantName;
            this.BodyStyle = bodyStyle;
            this.DriveType = driveType;
            this.Energy = energy;
            this.EngineOutput = engineOutput;
            this.ManufacturingStartDate = manufacturingStartDate;
            this.ManufacturingStopDate = manufacturingStopDate;
            this.LastProcessedDate = lastProcessedDate;
            this.Status = status;
        }

        /// <summary>
        /// Vehicle Brand.
        /// </summary>
        /// <value>Vehicle Brand.</value>
        [DataMember(Name = "make", IsRequired = true, EmitDefaultValue = true)]
        public string Make { get; set; }

        /// <summary>
        /// Specific model of a vehicle.
        /// </summary>
        /// <value>Specific model of a vehicle.</value>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// Name of the vehicle variant.
        /// </summary>
        /// <value>Name of the vehicle variant.</value>
        [DataMember(Name = "variantName", EmitDefaultValue = false)]
        public string VariantName { get; set; }

        /// <summary>
        /// Body style of vehicle (example: Hatchback, Cabriolet).
        /// </summary>
        /// <value>Body style of vehicle (example: Hatchback, Cabriolet).</value>
        [DataMember(Name = "bodyStyle", EmitDefaultValue = false)]
        public string BodyStyle { get; set; }

        /// <summary>
        /// Drive type of vehicle(example: Rear wheel drive).
        /// </summary>
        /// <value>Drive type of vehicle(example: Rear wheel drive).</value>
        [DataMember(Name = "driveType", EmitDefaultValue = false)]
        public string DriveType { get; set; }

        /// <summary>
        /// Energy Source for the vehicle(example: Petrol)
        /// </summary>
        /// <value>Energy Source for the vehicle(example: Petrol)</value>
        [DataMember(Name = "energy", EmitDefaultValue = false)]
        public string Energy { get; set; }

        /// <summary>
        /// Engine output of vehicle.
        /// </summary>
        /// <value>Engine output of vehicle.</value>
        [DataMember(Name = "engineOutput", EmitDefaultValue = false)]
        public List<EngineOutput> EngineOutput { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturingStartDate
        /// </summary>
        [DataMember(Name = "manufacturingStartDate", EmitDefaultValue = false)]
        public MonthAndYear ManufacturingStartDate { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturingStopDate
        /// </summary>
        [DataMember(Name = "manufacturingStopDate", EmitDefaultValue = false)]
        public MonthAndYear ManufacturingStopDate { get; set; }

        /// <summary>
        /// The date on which the vehicle was last updated, in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date on which the vehicle was last updated, in ISO-8601 date/time format.</value>
        [DataMember(Name = "lastProcessedDate", EmitDefaultValue = false)]
        public string LastProcessedDate { get; set; }

        /// <summary>
        /// Identifiers that can be used to identify the vehicle uniquely
        /// </summary>
        /// <value>Identifiers that can be used to identify the vehicle uniquely</value>
        [DataMember(Name = "identifiers", IsRequired = true, EmitDefaultValue = true)]
        public List<VehicleIdentifiers> Identifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  VariantName: ").Append(VariantName).Append("\n");
            sb.Append("  BodyStyle: ").Append(BodyStyle).Append("\n");
            sb.Append("  DriveType: ").Append(DriveType).Append("\n");
            sb.Append("  Energy: ").Append(Energy).Append("\n");
            sb.Append("  EngineOutput: ").Append(EngineOutput).Append("\n");
            sb.Append("  ManufacturingStartDate: ").Append(ManufacturingStartDate).Append("\n");
            sb.Append("  ManufacturingStopDate: ").Append(ManufacturingStopDate).Append("\n");
            sb.Append("  LastProcessedDate: ").Append(LastProcessedDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
