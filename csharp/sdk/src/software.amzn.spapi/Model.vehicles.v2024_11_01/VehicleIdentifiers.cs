/*
 * The Selling Partner API for Automotive.
 *
 * The Selling Partner API for Automotive provides programmatic access to information needed by selling partners to provide compatibility information about their listed products.
 *
 * The version of the OpenAPI document: 2024-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vehicles.v2024_11_01
{
    /// <summary>
    /// Combination of vehicle standard and id that can uniquely identify a vehicle from Amazon&#39;s catalog.
    /// </summary>
    [DataContract(Name = "VehicleIdentifiers")]
    public partial class VehicleIdentifiers : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Standard
        /// </summary>
        [DataMember(Name = "standard", IsRequired = true, EmitDefaultValue = true)]
        public VehicleStandard Standard { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleIdentifiers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VehicleIdentifiers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleIdentifiers" /> class.
        /// </summary>
        /// <param name="standard">standard (required).</param>
        /// <param name="value">Id that can uniquely identify a vehicle based the vehicle identification standard. (required).</param>
        public VehicleIdentifiers(VehicleStandard standard = default(VehicleStandard), string value = default(string))
        {
            this.Standard = standard;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for VehicleIdentifiers and cannot be null");
            }
            this.Value = value;
        }

        /// <summary>
        /// Id that can uniquely identify a vehicle based the vehicle identification standard.
        /// </summary>
        /// <value>Id that can uniquely identify a vehicle based the vehicle identification standard.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleIdentifiers {\n");
            sb.Append("  Standard: ").Append(Standard).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
