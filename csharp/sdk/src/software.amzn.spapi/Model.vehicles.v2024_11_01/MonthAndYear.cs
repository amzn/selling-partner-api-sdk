/*
 * The Selling Partner API for Automotive.
 *
 * The Selling Partner API for Automotive provides programmatic access to information needed by selling partners to provide compatibility information about their listed products.
 *
 * The version of the OpenAPI document: 2024-11-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vehicles.v2024_11_01
{
    /// <summary>
    /// Represents a month in a specific year.
    /// </summary>
    [DataContract(Name = "MonthAndYear")]
    public partial class MonthAndYear : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonthAndYear" /> class.
        /// </summary>
        /// <param name="year">Year in YYYY format.</param>
        /// <param name="month">Month in MM format.</param>
        public MonthAndYear(decimal year = default(decimal), decimal month = default(decimal))
        {
            this.Year = year;
            this.Month = month;
        }

        /// <summary>
        /// Year in YYYY format
        /// </summary>
        /// <value>Year in YYYY format</value>
        /*
        <example>2004</example>
        */
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public decimal Year { get; set; }

        /// <summary>
        /// Month in MM format
        /// </summary>
        /// <value>Month in MM format</value>
        /*
        <example>11</example>
        */
        [DataMember(Name = "month", EmitDefaultValue = false)]
        public decimal Month { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonthAndYear {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
