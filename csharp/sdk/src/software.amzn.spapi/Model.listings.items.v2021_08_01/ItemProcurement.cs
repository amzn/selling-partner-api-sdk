/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.listings.items.v2021_08_01
{
    /// <summary>
    /// The vendor procurement information for the listings item.
    /// </summary>
    [DataContract(Name = "ItemProcurement")]
    public partial class ItemProcurement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemProcurement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemProcurement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemProcurement" /> class.
        /// </summary>
        /// <param name="costPrice">costPrice (required).</param>
        public ItemProcurement(Money costPrice = default(Money))
        {
            // to ensure "costPrice" is required (not null)
            if (costPrice == null)
            {
                throw new ArgumentNullException("costPrice is a required property for ItemProcurement and cannot be null");
            }
            this.CostPrice = costPrice;
        }

        /// <summary>
        /// Gets or Sets CostPrice
        /// </summary>
        [DataMember(Name = "costPrice", IsRequired = true, EmitDefaultValue = true)]
        public Money CostPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemProcurement {\n");
            sb.Append("  CostPrice: ").Append(CostPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
