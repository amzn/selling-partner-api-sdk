/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.listings.items.v2021_08_01
{
    /// <summary>
    /// The fulfillment availability details for the listings item.
    /// </summary>
    [DataContract(Name = "FulfillmentAvailability")]
    public partial class FulfillmentAvailability : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentAvailability" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentAvailability() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentAvailability" /> class.
        /// </summary>
        /// <param name="fulfillmentChannelCode">Designates which fulfillment network is used. (required).</param>
        /// <param name="quantity">The quantity of the item you are making available for sale..</param>
        public FulfillmentAvailability(string fulfillmentChannelCode = default(string), int quantity = default(int))
        {
            // to ensure "fulfillmentChannelCode" is required (not null)
            if (fulfillmentChannelCode == null)
            {
                throw new ArgumentNullException("fulfillmentChannelCode is a required property for FulfillmentAvailability and cannot be null");
            }
            this.FulfillmentChannelCode = fulfillmentChannelCode;
            this.Quantity = quantity;
        }

        /// <summary>
        /// Designates which fulfillment network is used.
        /// </summary>
        /// <value>Designates which fulfillment network is used.</value>
        [DataMember(Name = "fulfillmentChannelCode", IsRequired = true, EmitDefaultValue = true)]
        public string FulfillmentChannelCode { get; set; }

        /// <summary>
        /// The quantity of the item you are making available for sale.
        /// </summary>
        /// <value>The quantity of the item you are making available for sale.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentAvailability {\n");
            sb.Append("  FulfillmentChannelCode: ").Append(FulfillmentChannelCode).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Quantity (int) minimum
            if (this.Quantity < (int)0)
            {
                yield return new ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 0.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
