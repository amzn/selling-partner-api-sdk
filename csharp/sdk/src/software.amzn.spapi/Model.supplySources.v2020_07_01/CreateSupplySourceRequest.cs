/*
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.supplySources.v2020_07_01
{
    /// <summary>
    /// A request to create a supply source.
    /// </summary>
    [DataContract(Name = "CreateSupplySourceRequest")]
    public partial class CreateSupplySourceRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSupplySourceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSupplySourceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSupplySourceRequest" /> class.
        /// </summary>
        /// <param name="supplySourceCode">The seller-provided unique supply source code. (required).</param>
        /// <param name="alias">The custom alias for this supply source (required).</param>
        /// <param name="address">address (required).</param>
        public CreateSupplySourceRequest(string supplySourceCode = default(string), string alias = default(string), Address address = default(Address))
        {
            // to ensure "supplySourceCode" is required (not null)
            if (supplySourceCode == null)
            {
                throw new ArgumentNullException("supplySourceCode is a required property for CreateSupplySourceRequest and cannot be null");
            }
            this.SupplySourceCode = supplySourceCode;
            // to ensure "alias" is required (not null)
            if (alias == null)
            {
                throw new ArgumentNullException("alias is a required property for CreateSupplySourceRequest and cannot be null");
            }
            this.Alias = alias;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for CreateSupplySourceRequest and cannot be null");
            }
            this.Address = address;
        }

        /// <summary>
        /// The seller-provided unique supply source code.
        /// </summary>
        /// <value>The seller-provided unique supply source code.</value>
        [DataMember(Name = "supplySourceCode", IsRequired = true, EmitDefaultValue = true)]
        public string SupplySourceCode { get; set; }

        /// <summary>
        /// The custom alias for this supply source
        /// </summary>
        /// <value>The custom alias for this supply source</value>
        [DataMember(Name = "alias", IsRequired = true, EmitDefaultValue = true)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public Address Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSupplySourceRequest {\n");
            sb.Append("  SupplySourceCode: ").Append(SupplySourceCode).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
