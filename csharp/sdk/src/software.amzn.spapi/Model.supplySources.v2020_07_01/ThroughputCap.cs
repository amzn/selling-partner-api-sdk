/*
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.supplySources.v2020_07_01
{
    /// <summary>
    /// The throughput capacity
    /// </summary>
    [DataContract(Name = "ThroughputCap")]
    public partial class ThroughputCap : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TimeUnit
        /// </summary>
        [DataMember(Name = "timeUnit", EmitDefaultValue = false)]
        public TimeUnit? TimeUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThroughputCap" /> class.
        /// </summary>
        /// <param name="value">An unsigned integer that can be only positive or zero..</param>
        /// <param name="timeUnit">timeUnit.</param>
        public ThroughputCap(int value = default(int), TimeUnit? timeUnit = default(TimeUnit?))
        {
            this.Value = value;
            this.TimeUnit = timeUnit;
        }

        /// <summary>
        /// An unsigned integer that can be only positive or zero.
        /// </summary>
        /// <value>An unsigned integer that can be only positive or zero.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public int Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThroughputCap {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  TimeUnit: ").Append(TimeUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (int) minimum
            if (this.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for Value, must be a value greater than or equal to 0.", new [] { "Value" });
            }

            yield break;
        }
    }

}
