/*
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.supplySources.v2020_07_01
{
    /// <summary>
    /// The result of creating a new supply source.
    /// </summary>
    [DataContract(Name = "CreateSupplySourceResponse")]
    public partial class CreateSupplySourceResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSupplySourceResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSupplySourceResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSupplySourceResponse" /> class.
        /// </summary>
        /// <param name="supplySourceId">An Amazon generated unique supply source ID. (required).</param>
        /// <param name="supplySourceCode">The seller-provided unique supply source code. (required).</param>
        public CreateSupplySourceResponse(string supplySourceId = default(string), string supplySourceCode = default(string))
        {
            // to ensure "supplySourceId" is required (not null)
            if (supplySourceId == null)
            {
                throw new ArgumentNullException("supplySourceId is a required property for CreateSupplySourceResponse and cannot be null");
            }
            this.SupplySourceId = supplySourceId;
            // to ensure "supplySourceCode" is required (not null)
            if (supplySourceCode == null)
            {
                throw new ArgumentNullException("supplySourceCode is a required property for CreateSupplySourceResponse and cannot be null");
            }
            this.SupplySourceCode = supplySourceCode;
        }

        /// <summary>
        /// An Amazon generated unique supply source ID.
        /// </summary>
        /// <value>An Amazon generated unique supply source ID.</value>
        [DataMember(Name = "supplySourceId", IsRequired = true, EmitDefaultValue = true)]
        public string SupplySourceId { get; set; }

        /// <summary>
        /// The seller-provided unique supply source code.
        /// </summary>
        /// <value>The seller-provided unique supply source code.</value>
        [DataMember(Name = "supplySourceCode", IsRequired = true, EmitDefaultValue = true)]
        public string SupplySourceCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSupplySourceResponse {\n");
            sb.Append("  SupplySourceId: ").Append(SupplySourceId).Append("\n");
            sb.Append("  SupplySourceCode: ").Append(SupplySourceCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
