/*
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.supplySources.v2020_07_01
{
    /// <summary>
    /// Includes configuration and timezone of a supply source.
    /// </summary>
    [DataContract(Name = "SupplySourceConfiguration")]
    public partial class SupplySourceConfiguration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupplySourceConfiguration" /> class.
        /// </summary>
        /// <param name="operationalConfiguration">operationalConfiguration.</param>
        /// <param name="timezone">Please see RFC 6557, should be a canonical time zone ID as listed here: https://www.joda.org/joda-time/timezones.html..</param>
        public SupplySourceConfiguration(OperationalConfiguration operationalConfiguration = default(OperationalConfiguration), string timezone = default(string))
        {
            this.OperationalConfiguration = operationalConfiguration;
            this.Timezone = timezone;
        }

        /// <summary>
        /// Gets or Sets OperationalConfiguration
        /// </summary>
        [DataMember(Name = "operationalConfiguration", EmitDefaultValue = false)]
        public OperationalConfiguration OperationalConfiguration { get; set; }

        /// <summary>
        /// Please see RFC 6557, should be a canonical time zone ID as listed here: https://www.joda.org/joda-time/timezones.html.
        /// </summary>
        /// <value>Please see RFC 6557, should be a canonical time zone ID as listed here: https://www.joda.org/joda-time/timezones.html.</value>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupplySourceConfiguration {\n");
            sb.Append("  OperationalConfiguration: ").Append(OperationalConfiguration).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
