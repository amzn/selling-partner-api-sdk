/*
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.supplySources.v2020_07_01
{
    /// <summary>
    /// The in-store pickup configuration of a supply source.
    /// </summary>
    [DataContract(Name = "InStorePickupConfiguration")]
    public partial class InStorePickupConfiguration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InStorePickupConfiguration" /> class.
        /// </summary>
        /// <param name="isSupported">When true, in-store pickup is supported by the supply source (default: &#x60;isSupported&#x60; value in &#x60;PickupChannel&#x60;)..</param>
        /// <param name="parkingConfiguration">parkingConfiguration.</param>
        public InStorePickupConfiguration(bool isSupported = default(bool), ParkingConfiguration parkingConfiguration = default(ParkingConfiguration))
        {
            this.IsSupported = isSupported;
            this.ParkingConfiguration = parkingConfiguration;
        }

        /// <summary>
        /// When true, in-store pickup is supported by the supply source (default: &#x60;isSupported&#x60; value in &#x60;PickupChannel&#x60;).
        /// </summary>
        /// <value>When true, in-store pickup is supported by the supply source (default: &#x60;isSupported&#x60; value in &#x60;PickupChannel&#x60;).</value>
        [DataMember(Name = "isSupported", EmitDefaultValue = true)]
        public bool IsSupported { get; set; }

        /// <summary>
        /// Gets or Sets ParkingConfiguration
        /// </summary>
        [DataMember(Name = "parkingConfiguration", EmitDefaultValue = false)]
        public ParkingConfiguration ParkingConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InStorePickupConfiguration {\n");
            sb.Append("  IsSupported: ").Append(IsSupported).Append("\n");
            sb.Append("  ParkingConfiguration: ").Append(ParkingConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
