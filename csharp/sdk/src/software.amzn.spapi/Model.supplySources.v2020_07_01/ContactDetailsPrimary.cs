/*
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.supplySources.v2020_07_01
{
    /// <summary>
    /// ContactDetailsPrimary
    /// </summary>
    [DataContract(Name = "ContactDetails_primary")]
    public partial class ContactDetailsPrimary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactDetailsPrimary" /> class.
        /// </summary>
        /// <param name="email">The email address to which email messages are delivered..</param>
        /// <param name="phone">The phone number of the person, business or institution..</param>
        public ContactDetailsPrimary(string email = default(string), string phone = default(string))
        {
            this.Email = email;
            this.Phone = phone;
        }

        /// <summary>
        /// The email address to which email messages are delivered.
        /// </summary>
        /// <value>The email address to which email messages are delivered.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The phone number of the person, business or institution.
        /// </summary>
        /// <value>The phone number of the person, business or institution.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactDetailsPrimary {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Email != null) {
                // Email (string) pattern
                Regex regexEmail = new Regex(@"^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$", RegexOptions.CultureInvariant);
                if (!regexEmail.Match(this.Email).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, must match a pattern of " + regexEmail, new [] { "Email" });
                }
            }

            yield break;
        }
    }

}
