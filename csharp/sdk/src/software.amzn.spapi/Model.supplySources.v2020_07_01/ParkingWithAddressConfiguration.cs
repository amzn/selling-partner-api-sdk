/*
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.supplySources.v2020_07_01
{
    /// <summary>
    /// The parking configuration with the address.
    /// </summary>
    [DataContract(Name = "ParkingWithAddressConfiguration")]
    public partial class ParkingWithAddressConfiguration : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ParkingCostType
        /// </summary>
        [DataMember(Name = "parkingCostType", EmitDefaultValue = false)]
        public ParkingCostType? ParkingCostType { get; set; }

        /// <summary>
        /// Gets or Sets ParkingSpotIdentificationType
        /// </summary>
        [DataMember(Name = "parkingSpotIdentificationType", EmitDefaultValue = false)]
        public ParkingSpotIdentificationType? ParkingSpotIdentificationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParkingWithAddressConfiguration" /> class.
        /// </summary>
        /// <param name="parkingCostType">parkingCostType.</param>
        /// <param name="parkingSpotIdentificationType">parkingSpotIdentificationType.</param>
        /// <param name="numberOfParkingSpots">An unsigned integer that can be only positive or zero..</param>
        /// <param name="address">address.</param>
        public ParkingWithAddressConfiguration(ParkingCostType? parkingCostType = default(ParkingCostType?), ParkingSpotIdentificationType? parkingSpotIdentificationType = default(ParkingSpotIdentificationType?), int numberOfParkingSpots = default(int), Address address = default(Address))
        {
            this.ParkingCostType = parkingCostType;
            this.ParkingSpotIdentificationType = parkingSpotIdentificationType;
            this.NumberOfParkingSpots = numberOfParkingSpots;
            this.Address = address;
        }

        /// <summary>
        /// An unsigned integer that can be only positive or zero.
        /// </summary>
        /// <value>An unsigned integer that can be only positive or zero.</value>
        [DataMember(Name = "numberOfParkingSpots", EmitDefaultValue = false)]
        public int NumberOfParkingSpots { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParkingWithAddressConfiguration {\n");
            sb.Append("  ParkingCostType: ").Append(ParkingCostType).Append("\n");
            sb.Append("  ParkingSpotIdentificationType: ").Append(ParkingSpotIdentificationType).Append("\n");
            sb.Append("  NumberOfParkingSpots: ").Append(NumberOfParkingSpots).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfParkingSpots (int) minimum
            if (this.NumberOfParkingSpots < (int)0)
            {
                yield return new ValidationResult("Invalid value for NumberOfParkingSpots, must be a value greater than or equal to 0.", new [] { "NumberOfParkingSpots" });
            }

            yield break;
        }
    }

}
