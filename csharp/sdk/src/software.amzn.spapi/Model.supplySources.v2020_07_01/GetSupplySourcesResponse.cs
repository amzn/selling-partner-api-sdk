/*
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.supplySources.v2020_07_01
{
    /// <summary>
    /// The paginated list of supply sources.
    /// </summary>
    [DataContract(Name = "GetSupplySourcesResponse")]
    public partial class GetSupplySourcesResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSupplySourcesResponse" /> class.
        /// </summary>
        /// <param name="supplySources">The list of &#x60;SupplySource&#x60;s..</param>
        /// <param name="nextPageToken">If present, use this pagination token to retrieve the next page of supply sources..</param>
        public GetSupplySourcesResponse(List<SupplySourceListInner> supplySources = default(List<SupplySourceListInner>), string nextPageToken = default(string))
        {
            this.SupplySources = supplySources;
            this.NextPageToken = nextPageToken;
        }

        /// <summary>
        /// The list of &#x60;SupplySource&#x60;s.
        /// </summary>
        /// <value>The list of &#x60;SupplySource&#x60;s.</value>
        [DataMember(Name = "supplySources", EmitDefaultValue = false)]
        public List<SupplySourceListInner> SupplySources { get; set; }

        /// <summary>
        /// If present, use this pagination token to retrieve the next page of supply sources.
        /// </summary>
        /// <value>If present, use this pagination token to retrieve the next page of supply sources.</value>
        [DataMember(Name = "nextPageToken", EmitDefaultValue = false)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSupplySourcesResponse {\n");
            sb.Append("  SupplySources: ").Append(SupplySources).Append("\n");
            sb.Append("  NextPageToken: ").Append(NextPageToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
