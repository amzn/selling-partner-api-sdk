/*
 * The Selling Partner API for Invoices.
 *
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.invoices.v2024_06_19
{
    /// <summary>
    /// Provides detailed information about an invoice.
    /// </summary>
    [DataContract(Name = "Invoice")]
    public partial class Invoice : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="date">The date and time the invoice is issued. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format..</param>
        /// <param name="errorCode">If the invoice is in an error state, this attribute displays the error code..</param>
        /// <param name="externalInvoiceId">The invoice identifier that is used by an external party. This is typically the government agency that authorized the invoice..</param>
        /// <param name="govResponse">The response message from the government authority when there is an error during invoice issuance..</param>
        /// <param name="id">The invoice identifier..</param>
        /// <param name="invoiceType">The classification of the invoice type. This varies across marketplaces. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options..</param>
        /// <param name="series">Use this identifier in conjunction with &#x60;externalInvoiceId&#x60; to identify invoices from the same seller..</param>
        /// <param name="status">The invoice status classification. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options..</param>
        /// <param name="transactionIds">List with identifiers for the transactions associated to the invoice..</param>
        /// <param name="transactionType">Classification of the transaction that originated this invoice. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options..</param>
        public Invoice(DateTime date = default(DateTime), string errorCode = default(string), string externalInvoiceId = default(string), string govResponse = default(string), string id = default(string), string invoiceType = default(string), string series = default(string), string status = default(string), List<TransactionIdentifier> transactionIds = default(List<TransactionIdentifier>), string transactionType = default(string))
        {
            this.Date = date;
            this.ErrorCode = errorCode;
            this.ExternalInvoiceId = externalInvoiceId;
            this.GovResponse = govResponse;
            this.Id = id;
            this.InvoiceType = invoiceType;
            this.Series = series;
            this.Status = status;
            this.TransactionIds = transactionIds;
            this.TransactionType = transactionType;
        }

        /// <summary>
        /// The date and time the invoice is issued. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
        /// </summary>
        /// <value>The date and time the invoice is issued. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// If the invoice is in an error state, this attribute displays the error code.
        /// </summary>
        /// <value>If the invoice is in an error state, this attribute displays the error code.</value>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// The invoice identifier that is used by an external party. This is typically the government agency that authorized the invoice.
        /// </summary>
        /// <value>The invoice identifier that is used by an external party. This is typically the government agency that authorized the invoice.</value>
        [DataMember(Name = "externalInvoiceId", EmitDefaultValue = false)]
        public string ExternalInvoiceId { get; set; }

        /// <summary>
        /// The response message from the government authority when there is an error during invoice issuance.
        /// </summary>
        /// <value>The response message from the government authority when there is an error during invoice issuance.</value>
        [DataMember(Name = "govResponse", EmitDefaultValue = false)]
        public string GovResponse { get; set; }

        /// <summary>
        /// The invoice identifier.
        /// </summary>
        /// <value>The invoice identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The classification of the invoice type. This varies across marketplaces. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options.
        /// </summary>
        /// <value>The classification of the invoice type. This varies across marketplaces. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options.</value>
        [DataMember(Name = "invoiceType", EmitDefaultValue = false)]
        public string InvoiceType { get; set; }

        /// <summary>
        /// Use this identifier in conjunction with &#x60;externalInvoiceId&#x60; to identify invoices from the same seller.
        /// </summary>
        /// <value>Use this identifier in conjunction with &#x60;externalInvoiceId&#x60; to identify invoices from the same seller.</value>
        [DataMember(Name = "series", EmitDefaultValue = false)]
        public string Series { get; set; }

        /// <summary>
        /// The invoice status classification. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.
        /// </summary>
        /// <value>The invoice status classification. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// List with identifiers for the transactions associated to the invoice.
        /// </summary>
        /// <value>List with identifiers for the transactions associated to the invoice.</value>
        [DataMember(Name = "transactionIds", EmitDefaultValue = false)]
        public List<TransactionIdentifier> TransactionIds { get; set; }

        /// <summary>
        /// Classification of the transaction that originated this invoice. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options.
        /// </summary>
        /// <value>Classification of the transaction that originated this invoice. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options.</value>
        [DataMember(Name = "transactionType", EmitDefaultValue = false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ExternalInvoiceId: ").Append(ExternalInvoiceId).Append("\n");
            sb.Append("  GovResponse: ").Append(GovResponse).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransactionIds: ").Append(TransactionIds).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
