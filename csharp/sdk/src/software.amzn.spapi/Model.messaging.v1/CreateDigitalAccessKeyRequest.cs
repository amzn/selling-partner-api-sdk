/*
 * Selling Partner API for Messaging
 *
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.messaging.v1
{
    /// <summary>
    /// The request schema for the &#x60;createDigitalAccessKey&#x60; operation.
    /// </summary>
    [DataContract(Name = "CreateDigitalAccessKeyRequest")]
    public partial class CreateDigitalAccessKeyRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDigitalAccessKeyRequest" /> class.
        /// </summary>
        /// <param name="text">The text that is sent to the buyer. Only links that are related to the digital access key are allowed. Do not include HTML or email addresses. The text must be written in the buyer&#39;s preferred language, which you can retrieve from the &#x60;GetAttributes&#x60; operation..</param>
        /// <param name="attachments">Attachments that you want to include in the message to the buyer..</param>
        public CreateDigitalAccessKeyRequest(string text = default(string), List<Attachment> attachments = default(List<Attachment>))
        {
            this.Text = text;
            this.Attachments = attachments;
        }

        /// <summary>
        /// The text that is sent to the buyer. Only links that are related to the digital access key are allowed. Do not include HTML or email addresses. The text must be written in the buyer&#39;s preferred language, which you can retrieve from the &#x60;GetAttributes&#x60; operation.
        /// </summary>
        /// <value>The text that is sent to the buyer. Only links that are related to the digital access key are allowed. Do not include HTML or email addresses. The text must be written in the buyer&#39;s preferred language, which you can retrieve from the &#x60;GetAttributes&#x60; operation.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Attachments that you want to include in the message to the buyer.
        /// </summary>
        /// <value>Attachments that you want to include in the message to the buyer.</value>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDigitalAccessKeyRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Text (string) maxLength
            if (this.Text != null && this.Text.Length > 400)
            {
                yield return new ValidationResult("Invalid value for Text, length must be less than 400.", new [] { "Text" });
            }

            // Text (string) minLength
            if (this.Text != null && this.Text.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Text, length must be greater than 1.", new [] { "Text" });
            }

            yield break;
        }
    }

}
