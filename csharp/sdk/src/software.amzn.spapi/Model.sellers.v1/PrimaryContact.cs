/*
 * The Selling Partner API for Sellers
 *
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellers.v1
{
    /// <summary>
    /// Information about the seller&#39;s primary contact.
    /// </summary>
    [DataContract(Name = "PrimaryContact")]
    public partial class PrimaryContact : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrimaryContact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrimaryContact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrimaryContact" /> class.
        /// </summary>
        /// <param name="name">The full name of the seller&#39;s primary contact. (required).</param>
        /// <param name="address">address (required).</param>
        /// <param name="nonLatinName">The non-Latin script version of the primary contact&#39;s name, if applicable..</param>
        public PrimaryContact(string name = default(string), Address address = default(Address), string nonLatinName = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PrimaryContact and cannot be null");
            }
            this.Name = name;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for PrimaryContact and cannot be null");
            }
            this.Address = address;
            this.NonLatinName = nonLatinName;
        }

        /// <summary>
        /// The full name of the seller&#39;s primary contact.
        /// </summary>
        /// <value>The full name of the seller&#39;s primary contact.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public Address Address { get; set; }

        /// <summary>
        /// The non-Latin script version of the primary contact&#39;s name, if applicable.
        /// </summary>
        /// <value>The non-Latin script version of the primary contact&#39;s name, if applicable.</value>
        [DataMember(Name = "nonLatinName", EmitDefaultValue = false)]
        public string NonLatinName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrimaryContact {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  NonLatinName: ").Append(NonLatinName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
