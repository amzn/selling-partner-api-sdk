/*
 * The Selling Partner API for Sellers
 *
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellers.v1
{
    /// <summary>
    /// MarketplaceParticipation
    /// </summary>
    [DataContract(Name = "MarketplaceParticipation")]
    public partial class MarketplaceParticipation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceParticipation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarketplaceParticipation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceParticipation" /> class.
        /// </summary>
        /// <param name="marketplace">marketplace (required).</param>
        /// <param name="participation">participation (required).</param>
        /// <param name="storeName">The name of the seller&#39;s store as displayed in the marketplace. (required).</param>
        public MarketplaceParticipation(Marketplace marketplace = default(Marketplace), Participation participation = default(Participation), string storeName = default(string))
        {
            // to ensure "marketplace" is required (not null)
            if (marketplace == null)
            {
                throw new ArgumentNullException("marketplace is a required property for MarketplaceParticipation and cannot be null");
            }
            this.Marketplace = marketplace;
            // to ensure "participation" is required (not null)
            if (participation == null)
            {
                throw new ArgumentNullException("participation is a required property for MarketplaceParticipation and cannot be null");
            }
            this.Participation = participation;
            // to ensure "storeName" is required (not null)
            if (storeName == null)
            {
                throw new ArgumentNullException("storeName is a required property for MarketplaceParticipation and cannot be null");
            }
            this.StoreName = storeName;
        }

        /// <summary>
        /// Gets or Sets Marketplace
        /// </summary>
        [DataMember(Name = "marketplace", IsRequired = true, EmitDefaultValue = true)]
        public Marketplace Marketplace { get; set; }

        /// <summary>
        /// Gets or Sets Participation
        /// </summary>
        [DataMember(Name = "participation", IsRequired = true, EmitDefaultValue = true)]
        public Participation Participation { get; set; }

        /// <summary>
        /// The name of the seller&#39;s store as displayed in the marketplace.
        /// </summary>
        /// <value>The name of the seller&#39;s store as displayed in the marketplace.</value>
        [DataMember(Name = "storeName", IsRequired = true, EmitDefaultValue = true)]
        public string StoreName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketplaceParticipation {\n");
            sb.Append("  Marketplace: ").Append(Marketplace).Append("\n");
            sb.Append("  Participation: ").Append(Participation).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
