/*
 * The Selling Partner API for Sellers
 *
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sellers.v1
{
    /// <summary>
    /// Information that is specific to a seller in a marketplace.
    /// </summary>
    [DataContract(Name = "Participation")]
    public partial class Participation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Participation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Participation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Participation" /> class.
        /// </summary>
        /// <param name="isParticipating">If &#x60;true&#x60;, the seller participates in the marketplace. Otherwise &#x60;false&#x60;. (required).</param>
        /// <param name="hasSuspendedListings">Specifies if the seller has suspended listings. &#x60;true&#x60; if the seller Listing Status is set to Inactive, otherwise &#x60;false&#x60;. (required).</param>
        public Participation(bool isParticipating = default(bool), bool hasSuspendedListings = default(bool))
        {
            this.IsParticipating = isParticipating;
            this.HasSuspendedListings = hasSuspendedListings;
        }

        /// <summary>
        /// If &#x60;true&#x60;, the seller participates in the marketplace. Otherwise &#x60;false&#x60;.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the seller participates in the marketplace. Otherwise &#x60;false&#x60;.</value>
        [DataMember(Name = "isParticipating", IsRequired = true, EmitDefaultValue = true)]
        public bool IsParticipating { get; set; }

        /// <summary>
        /// Specifies if the seller has suspended listings. &#x60;true&#x60; if the seller Listing Status is set to Inactive, otherwise &#x60;false&#x60;.
        /// </summary>
        /// <value>Specifies if the seller has suspended listings. &#x60;true&#x60; if the seller Listing Status is set to Inactive, otherwise &#x60;false&#x60;.</value>
        [DataMember(Name = "hasSuspendedListings", IsRequired = true, EmitDefaultValue = true)]
        public bool HasSuspendedListings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Participation {\n");
            sb.Append("  IsParticipating: ").Append(IsParticipating).Append("\n");
            sb.Append("  HasSuspendedListings: ").Append(HasSuspendedListings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
