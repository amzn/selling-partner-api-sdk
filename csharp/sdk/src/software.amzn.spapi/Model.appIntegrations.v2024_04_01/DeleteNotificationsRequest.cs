/*
 * The Selling Partner API for third party application integrations.
 *
 * With the AppIntegrations API v2024-04-01, you can send notifications to Amazon Selling Partners and display the notifications in Seller Central.
 *
 * The version of the OpenAPI document: 2024-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.appIntegrations.v2024_04_01
{
    /// <summary>
    /// The request for the &#x60;deleteNotifications&#x60; operation.
    /// </summary>
    [DataContract(Name = "DeleteNotificationsRequest")]
    public partial class DeleteNotificationsRequest : IValidatableObject
    {
        /// <summary>
        /// The unique identifier that maps each notification status to a reason code.
        /// </summary>
        /// <value>The unique identifier that maps each notification status to a reason code.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeletionReasonEnum
        {
            /// <summary>
            /// Enum CONTENT for value: INCORRECT_CONTENT
            /// </summary>
            [EnumMember(Value = "INCORRECT_CONTENT")]
            CONTENT = 1,

            /// <summary>
            /// Enum RECIPIENT for value: INCORRECT_RECIPIENT
            /// </summary>
            [EnumMember(Value = "INCORRECT_RECIPIENT")]
            RECIPIENT = 2
        }


        /// <summary>
        /// The unique identifier that maps each notification status to a reason code.
        /// </summary>
        /// <value>The unique identifier that maps each notification status to a reason code.</value>
        [DataMember(Name = "deletionReason", IsRequired = true, EmitDefaultValue = true)]
        public DeletionReasonEnum DeletionReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteNotificationsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeleteNotificationsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteNotificationsRequest" /> class.
        /// </summary>
        /// <param name="templateId">The unique identifier of the notification template you used to onboard your application. (required).</param>
        /// <param name="deletionReason">The unique identifier that maps each notification status to a reason code. (required).</param>
        public DeleteNotificationsRequest(string templateId = default(string), DeletionReasonEnum deletionReason = default(DeletionReasonEnum))
        {
            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new ArgumentNullException("templateId is a required property for DeleteNotificationsRequest and cannot be null");
            }
            this.TemplateId = templateId;
            this.DeletionReason = deletionReason;
        }

        /// <summary>
        /// The unique identifier of the notification template you used to onboard your application.
        /// </summary>
        /// <value>The unique identifier of the notification template you used to onboard your application.</value>
        [DataMember(Name = "templateId", IsRequired = true, EmitDefaultValue = true)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeleteNotificationsRequest {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  DeletionReason: ").Append(DeletionReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
