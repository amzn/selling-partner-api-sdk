/*
 * The Selling Partner API for third party application integrations.
 *
 * With the AppIntegrations API v2024-04-01, you can send notifications to Amazon Selling Partners and display the notifications in Seller Central.
 *
 * The version of the OpenAPI document: 2024-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.appIntegrations.v2024_04_01
{
    /// <summary>
    /// The request for the &#x60;recordActionFeedback&#x60; operation.
    /// </summary>
    [DataContract(Name = "RecordActionFeedbackRequest")]
    public partial class RecordActionFeedbackRequest : IValidatableObject
    {
        /// <summary>
        /// The unique identifier for each notification status.
        /// </summary>
        /// <value>The unique identifier for each notification status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FeedbackActionCodeEnum
        {
            /// <summary>
            /// Enum SELLERACTIONCOMPLETED for value: SELLER_ACTION_COMPLETED
            /// </summary>
            [EnumMember(Value = "SELLER_ACTION_COMPLETED")]
            SELLERACTIONCOMPLETED = 1
        }


        /// <summary>
        /// The unique identifier for each notification status.
        /// </summary>
        /// <value>The unique identifier for each notification status.</value>
        [DataMember(Name = "feedbackActionCode", IsRequired = true, EmitDefaultValue = true)]
        public FeedbackActionCodeEnum FeedbackActionCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordActionFeedbackRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecordActionFeedbackRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordActionFeedbackRequest" /> class.
        /// </summary>
        /// <param name="feedbackActionCode">The unique identifier for each notification status. (required).</param>
        public RecordActionFeedbackRequest(FeedbackActionCodeEnum feedbackActionCode = default(FeedbackActionCodeEnum))
        {
            this.FeedbackActionCode = feedbackActionCode;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordActionFeedbackRequest {\n");
            sb.Append("  FeedbackActionCode: ").Append(FeedbackActionCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
