/*
 * The Selling Partner API for third party application integrations.
 *
 * With the AppIntegrations API v2024-04-01, you can send notifications to Amazon Selling Partners and display the notifications in Seller Central.
 *
 * The version of the OpenAPI document: 2024-04-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.appIntegrations.v2024_04_01
{
    /// <summary>
    /// The response for the &#x60;createNotification&#x60; operation.
    /// </summary>
    [DataContract(Name = "CreateNotificationResponse")]
    public partial class CreateNotificationResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNotificationResponse" /> class.
        /// </summary>
        /// <param name="notificationId">The unique identifier assigned to each notification..</param>
        public CreateNotificationResponse(string notificationId = default(string))
        {
            this.NotificationId = notificationId;
        }

        /// <summary>
        /// The unique identifier assigned to each notification.
        /// </summary>
        /// <value>The unique identifier assigned to each notification.</value>
        [DataMember(Name = "notificationId", EmitDefaultValue = false)]
        public string NotificationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateNotificationResponse {\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
