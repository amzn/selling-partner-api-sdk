/*
 * Selling Partner API for Easy Ship
 *
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * The version of the OpenAPI document: 2022-03-23
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.easyship.v2022_03_23
{
    /// <summary>
    /// The response schema for the &#x60;listHandoverSlots&#x60; operation.
    /// </summary>
    [DataContract(Name = "ListHandoverSlotsResponse")]
    public partial class ListHandoverSlotsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListHandoverSlotsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListHandoverSlotsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListHandoverSlotsResponse" /> class.
        /// </summary>
        /// <param name="amazonOrderId">An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship. (required).</param>
        /// <param name="timeSlots">A list of time slots. (required).</param>
        public ListHandoverSlotsResponse(string amazonOrderId = default(string), List<TimeSlot> timeSlots = default(List<TimeSlot>))
        {
            // to ensure "amazonOrderId" is required (not null)
            if (amazonOrderId == null)
            {
                throw new ArgumentNullException("amazonOrderId is a required property for ListHandoverSlotsResponse and cannot be null");
            }
            this.AmazonOrderId = amazonOrderId;
            // to ensure "timeSlots" is required (not null)
            if (timeSlots == null)
            {
                throw new ArgumentNullException("timeSlots is a required property for ListHandoverSlotsResponse and cannot be null");
            }
            this.TimeSlots = timeSlots;
        }

        /// <summary>
        /// An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.
        /// </summary>
        /// <value>An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.</value>
        [DataMember(Name = "amazonOrderId", IsRequired = true, EmitDefaultValue = true)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// A list of time slots.
        /// </summary>
        /// <value>A list of time slots.</value>
        [DataMember(Name = "timeSlots", IsRequired = true, EmitDefaultValue = true)]
        public List<TimeSlot> TimeSlots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListHandoverSlotsResponse {\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  TimeSlots: ").Append(TimeSlots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
