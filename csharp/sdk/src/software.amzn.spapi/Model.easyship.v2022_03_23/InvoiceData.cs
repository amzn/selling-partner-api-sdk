/*
 * Selling Partner API for Easy Ship
 *
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * The version of the OpenAPI document: 2022-03-23
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.easyship.v2022_03_23
{
    /// <summary>
    /// Invoice number and date.
    /// </summary>
    [DataContract(Name = "InvoiceData")]
    public partial class InvoiceData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceData" /> class.
        /// </summary>
        /// <param name="invoiceNumber">A string of up to 255 characters. (required).</param>
        /// <param name="invoiceDate">A datetime value in ISO 8601 format..</param>
        public InvoiceData(string invoiceNumber = default(string), DateTime invoiceDate = default(DateTime))
        {
            // to ensure "invoiceNumber" is required (not null)
            if (invoiceNumber == null)
            {
                throw new ArgumentNullException("invoiceNumber is a required property for InvoiceData and cannot be null");
            }
            this.InvoiceNumber = invoiceNumber;
            this.InvoiceDate = invoiceDate;
        }

        /// <summary>
        /// A string of up to 255 characters.
        /// </summary>
        /// <value>A string of up to 255 characters.</value>
        [DataMember(Name = "invoiceNumber", IsRequired = true, EmitDefaultValue = true)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// A datetime value in ISO 8601 format.
        /// </summary>
        /// <value>A datetime value in ISO 8601 format.</value>
        [DataMember(Name = "invoiceDate", EmitDefaultValue = false)]
        public DateTime InvoiceDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceData {\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InvoiceNumber (string) maxLength
            if (this.InvoiceNumber != null && this.InvoiceNumber.Length > 255)
            {
                yield return new ValidationResult("Invalid value for InvoiceNumber, length must be less than 255.", new [] { "InvoiceNumber" });
            }

            // InvoiceNumber (string) minLength
            if (this.InvoiceNumber != null && this.InvoiceNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for InvoiceNumber, length must be greater than 1.", new [] { "InvoiceNumber" });
            }

            yield break;
        }
    }

}
