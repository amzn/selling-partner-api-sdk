/*
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.invoices.v1
{
    /// <summary>
    /// Represents an invoice or credit note document with details about the transaction, parties involved, and line items.
    /// </summary>
    [DataContract(Name = "Invoice")]
    public partial class Invoice : IValidatableObject
    {
        /// <summary>
        /// Identifies the type of invoice.
        /// </summary>
        /// <value>Identifies the type of invoice.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InvoiceTypeEnum
        {
            /// <summary>
            /// Enum Invoice for value: Invoice
            /// </summary>
            [EnumMember(Value = "Invoice")]
            Invoice = 1,

            /// <summary>
            /// Enum CreditNote for value: CreditNote
            /// </summary>
            [EnumMember(Value = "CreditNote")]
            CreditNote = 2
        }


        /// <summary>
        /// Identifies the type of invoice.
        /// </summary>
        /// <value>Identifies the type of invoice.</value>
        [DataMember(Name = "invoiceType", IsRequired = true, EmitDefaultValue = true)]
        public InvoiceTypeEnum InvoiceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Invoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="invoiceType">Identifies the type of invoice. (required).</param>
        /// <param name="id">Unique number relating to the charges defined in this document. This will be invoice number if the document type is Invoice or CreditNote number if the document type is Credit Note. Failure to provide this reference will result in a rejection. (required).</param>
        /// <param name="referenceNumber">An additional unique reference number used for regulatory or other purposes..</param>
        /// <param name="date">Defines a date and time according to ISO8601. (required).</param>
        /// <param name="remitToParty">remitToParty (required).</param>
        /// <param name="shipToParty">shipToParty.</param>
        /// <param name="shipFromParty">shipFromParty.</param>
        /// <param name="billToParty">billToParty.</param>
        /// <param name="paymentTerms">paymentTerms.</param>
        /// <param name="invoiceTotal">invoiceTotal (required).</param>
        /// <param name="taxDetails">Total tax amount details for all line items..</param>
        /// <param name="additionalDetails">Additional details provided by the selling party, for tax related or other purposes..</param>
        /// <param name="chargeDetails">Total charge amount details for all line items..</param>
        /// <param name="allowanceDetails">Total allowance amount details for all line items..</param>
        /// <param name="items">The list of invoice items..</param>
        public Invoice(InvoiceTypeEnum invoiceType = default(InvoiceTypeEnum), string id = default(string), string referenceNumber = default(string), DateTime date = default(DateTime), PartyIdentification remitToParty = default(PartyIdentification), PartyIdentification shipToParty = default(PartyIdentification), PartyIdentification shipFromParty = default(PartyIdentification), PartyIdentification billToParty = default(PartyIdentification), PaymentTerms paymentTerms = default(PaymentTerms), Money invoiceTotal = default(Money), List<TaxDetails> taxDetails = default(List<TaxDetails>), List<AdditionalDetails> additionalDetails = default(List<AdditionalDetails>), List<ChargeDetails> chargeDetails = default(List<ChargeDetails>), List<AllowanceDetails> allowanceDetails = default(List<AllowanceDetails>), List<InvoiceItem> items = default(List<InvoiceItem>))
        {
            this.InvoiceType = invoiceType;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Invoice and cannot be null");
            }
            this.Id = id;
            this.Date = date;
            // to ensure "remitToParty" is required (not null)
            if (remitToParty == null)
            {
                throw new ArgumentNullException("remitToParty is a required property for Invoice and cannot be null");
            }
            this.RemitToParty = remitToParty;
            // to ensure "invoiceTotal" is required (not null)
            if (invoiceTotal == null)
            {
                throw new ArgumentNullException("invoiceTotal is a required property for Invoice and cannot be null");
            }
            this.InvoiceTotal = invoiceTotal;
            this.ReferenceNumber = referenceNumber;
            this.ShipToParty = shipToParty;
            this.ShipFromParty = shipFromParty;
            this.BillToParty = billToParty;
            this.PaymentTerms = paymentTerms;
            this.TaxDetails = taxDetails;
            this.AdditionalDetails = additionalDetails;
            this.ChargeDetails = chargeDetails;
            this.AllowanceDetails = allowanceDetails;
            this.Items = items;
        }

        /// <summary>
        /// Unique number relating to the charges defined in this document. This will be invoice number if the document type is Invoice or CreditNote number if the document type is Credit Note. Failure to provide this reference will result in a rejection.
        /// </summary>
        /// <value>Unique number relating to the charges defined in this document. This will be invoice number if the document type is Invoice or CreditNote number if the document type is Credit Note. Failure to provide this reference will result in a rejection.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// An additional unique reference number used for regulatory or other purposes.
        /// </summary>
        /// <value>An additional unique reference number used for regulatory or other purposes.</value>
        [DataMember(Name = "referenceNumber", EmitDefaultValue = false)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Defines a date and time according to ISO8601.
        /// </summary>
        /// <value>Defines a date and time according to ISO8601.</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets RemitToParty
        /// </summary>
        [DataMember(Name = "remitToParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification RemitToParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipToParty
        /// </summary>
        [DataMember(Name = "shipToParty", EmitDefaultValue = false)]
        public PartyIdentification ShipToParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipFromParty
        /// </summary>
        [DataMember(Name = "shipFromParty", EmitDefaultValue = false)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Gets or Sets BillToParty
        /// </summary>
        [DataMember(Name = "billToParty", EmitDefaultValue = false)]
        public PartyIdentification BillToParty { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerms
        /// </summary>
        [DataMember(Name = "paymentTerms", EmitDefaultValue = false)]
        public PaymentTerms PaymentTerms { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTotal
        /// </summary>
        [DataMember(Name = "invoiceTotal", IsRequired = true, EmitDefaultValue = true)]
        public Money InvoiceTotal { get; set; }

        /// <summary>
        /// Total tax amount details for all line items.
        /// </summary>
        /// <value>Total tax amount details for all line items.</value>
        [DataMember(Name = "taxDetails", EmitDefaultValue = false)]
        public List<TaxDetails> TaxDetails { get; set; }

        /// <summary>
        /// Additional details provided by the selling party, for tax related or other purposes.
        /// </summary>
        /// <value>Additional details provided by the selling party, for tax related or other purposes.</value>
        [DataMember(Name = "additionalDetails", EmitDefaultValue = false)]
        public List<AdditionalDetails> AdditionalDetails { get; set; }

        /// <summary>
        /// Total charge amount details for all line items.
        /// </summary>
        /// <value>Total charge amount details for all line items.</value>
        [DataMember(Name = "chargeDetails", EmitDefaultValue = false)]
        public List<ChargeDetails> ChargeDetails { get; set; }

        /// <summary>
        /// Total allowance amount details for all line items.
        /// </summary>
        /// <value>Total allowance amount details for all line items.</value>
        [DataMember(Name = "allowanceDetails", EmitDefaultValue = false)]
        public List<AllowanceDetails> AllowanceDetails { get; set; }

        /// <summary>
        /// The list of invoice items.
        /// </summary>
        /// <value>The list of invoice items.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<InvoiceItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  RemitToParty: ").Append(RemitToParty).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  BillToParty: ").Append(BillToParty).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  InvoiceTotal: ").Append(InvoiceTotal).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
            sb.Append("  ChargeDetails: ").Append(ChargeDetails).Append("\n");
            sb.Append("  AllowanceDetails: ").Append(AllowanceDetails).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
