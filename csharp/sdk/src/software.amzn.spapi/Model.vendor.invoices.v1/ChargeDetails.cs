/*
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.invoices.v1
{
    /// <summary>
    /// Monetary and tax details of the charge.
    /// </summary>
    [DataContract(Name = "ChargeDetails")]
    public partial class ChargeDetails : IValidatableObject
    {
        /// <summary>
        /// Type of the charge applied.
        /// </summary>
        /// <value>Type of the charge applied.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Freight for value: Freight
            /// </summary>
            [EnumMember(Value = "Freight")]
            Freight = 1,

            /// <summary>
            /// Enum Packing for value: Packing
            /// </summary>
            [EnumMember(Value = "Packing")]
            Packing = 2,

            /// <summary>
            /// Enum Duty for value: Duty
            /// </summary>
            [EnumMember(Value = "Duty")]
            Duty = 3,

            /// <summary>
            /// Enum Service for value: Service
            /// </summary>
            [EnumMember(Value = "Service")]
            Service = 4,

            /// <summary>
            /// Enum SmallOrder for value: SmallOrder
            /// </summary>
            [EnumMember(Value = "SmallOrder")]
            SmallOrder = 5,

            /// <summary>
            /// Enum InsurancePlacementCost for value: InsurancePlacementCost
            /// </summary>
            [EnumMember(Value = "InsurancePlacementCost")]
            InsurancePlacementCost = 6,

            /// <summary>
            /// Enum InsuranceFee for value: InsuranceFee
            /// </summary>
            [EnumMember(Value = "InsuranceFee")]
            InsuranceFee = 7,

            /// <summary>
            /// Enum SpecialHandlingService for value: SpecialHandlingService
            /// </summary>
            [EnumMember(Value = "SpecialHandlingService")]
            SpecialHandlingService = 8,

            /// <summary>
            /// Enum CollectionAndRecyclingService for value: CollectionAndRecyclingService
            /// </summary>
            [EnumMember(Value = "CollectionAndRecyclingService")]
            CollectionAndRecyclingService = 9,

            /// <summary>
            /// Enum EnvironmentalProtectionService for value: EnvironmentalProtectionService
            /// </summary>
            [EnumMember(Value = "EnvironmentalProtectionService")]
            EnvironmentalProtectionService = 10,

            /// <summary>
            /// Enum TaxCollectedAtSource for value: TaxCollectedAtSource
            /// </summary>
            [EnumMember(Value = "TaxCollectedAtSource")]
            TaxCollectedAtSource = 11
        }


        /// <summary>
        /// Type of the charge applied.
        /// </summary>
        /// <value>Type of the charge applied.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargeDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeDetails" /> class.
        /// </summary>
        /// <param name="type">Type of the charge applied. (required).</param>
        /// <param name="description">Description of the charge..</param>
        /// <param name="chargeAmount">chargeAmount (required).</param>
        /// <param name="taxDetails">Tax amount details applied on this charge..</param>
        public ChargeDetails(TypeEnum type = default(TypeEnum), string description = default(string), Money chargeAmount = default(Money), List<TaxDetails> taxDetails = default(List<TaxDetails>))
        {
            this.Type = type;
            // to ensure "chargeAmount" is required (not null)
            if (chargeAmount == null)
            {
                throw new ArgumentNullException("chargeAmount is a required property for ChargeDetails and cannot be null");
            }
            this.ChargeAmount = chargeAmount;
            this.Description = description;
            this.TaxDetails = taxDetails;
        }

        /// <summary>
        /// Description of the charge.
        /// </summary>
        /// <value>Description of the charge.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ChargeAmount
        /// </summary>
        [DataMember(Name = "chargeAmount", IsRequired = true, EmitDefaultValue = true)]
        public Money ChargeAmount { get; set; }

        /// <summary>
        /// Tax amount details applied on this charge.
        /// </summary>
        /// <value>Tax amount details applied on this charge.</value>
        [DataMember(Name = "taxDetails", EmitDefaultValue = false)]
        public List<TaxDetails> TaxDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargeDetails {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ChargeAmount: ").Append(ChargeAmount).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
