/*
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.invoices.v1
{
    /// <summary>
    /// Terms of the payment for the invoice. The basis of the payment terms is the invoice date.
    /// </summary>
    [DataContract(Name = "PaymentTerms")]
    public partial class PaymentTerms : IValidatableObject
    {
        /// <summary>
        /// The payment term type for the invoice.
        /// </summary>
        /// <value>The payment term type for the invoice.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Basic for value: Basic
            /// </summary>
            [EnumMember(Value = "Basic")]
            Basic = 1,

            /// <summary>
            /// Enum EndOfMonth for value: EndOfMonth
            /// </summary>
            [EnumMember(Value = "EndOfMonth")]
            EndOfMonth = 2,

            /// <summary>
            /// Enum FixedDate for value: FixedDate
            /// </summary>
            [EnumMember(Value = "FixedDate")]
            FixedDate = 3,

            /// <summary>
            /// Enum Proximo for value: Proximo
            /// </summary>
            [EnumMember(Value = "Proximo")]
            Proximo = 4,

            /// <summary>
            /// Enum PaymentDueUponReceiptOfInvoice for value: PaymentDueUponReceiptOfInvoice
            /// </summary>
            [EnumMember(Value = "PaymentDueUponReceiptOfInvoice")]
            PaymentDueUponReceiptOfInvoice = 5,

            /// <summary>
            /// Enum LetterofCredit for value: LetterofCredit
            /// </summary>
            [EnumMember(Value = "LetterofCredit")]
            LetterofCredit = 6
        }


        /// <summary>
        /// The payment term type for the invoice.
        /// </summary>
        /// <value>The payment term type for the invoice.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTerms" /> class.
        /// </summary>
        /// <param name="type">The payment term type for the invoice..</param>
        /// <param name="discountPercent">A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. &lt;br&gt;**Pattern** : &#x60;^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$&#x60;..</param>
        /// <param name="discountDueDays">The number of calendar days from the Base date (Invoice date) until the discount is no longer valid..</param>
        /// <param name="netDueDays">The number of calendar days from the base date (invoice date) until the total amount on the invoice is due..</param>
        public PaymentTerms(TypeEnum? type = default(TypeEnum?), string discountPercent = default(string), decimal discountDueDays = default(decimal), decimal netDueDays = default(decimal))
        {
            this.Type = type;
            this.DiscountPercent = discountPercent;
            this.DiscountDueDays = discountDueDays;
            this.NetDueDays = netDueDays;
        }

        /// <summary>
        /// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. &lt;br&gt;**Pattern** : &#x60;^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$&#x60;.
        /// </summary>
        /// <value>A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. &lt;br&gt;**Pattern** : &#x60;^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$&#x60;.</value>
        [DataMember(Name = "discountPercent", EmitDefaultValue = false)]
        public string DiscountPercent { get; set; }

        /// <summary>
        /// The number of calendar days from the Base date (Invoice date) until the discount is no longer valid.
        /// </summary>
        /// <value>The number of calendar days from the Base date (Invoice date) until the discount is no longer valid.</value>
        [DataMember(Name = "discountDueDays", EmitDefaultValue = false)]
        public decimal DiscountDueDays { get; set; }

        /// <summary>
        /// The number of calendar days from the base date (invoice date) until the total amount on the invoice is due.
        /// </summary>
        /// <value>The number of calendar days from the base date (invoice date) until the total amount on the invoice is due.</value>
        [DataMember(Name = "netDueDays", EmitDefaultValue = false)]
        public decimal NetDueDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentTerms {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  DiscountDueDays: ").Append(DiscountDueDays).Append("\n");
            sb.Append("  NetDueDays: ").Append(NetDueDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
