/*
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.invoices.v1
{
    /// <summary>
    /// Monetary and tax details of the allowance.
    /// </summary>
    [DataContract(Name = "AllowanceDetails")]
    public partial class AllowanceDetails : IValidatableObject
    {
        /// <summary>
        /// Type of the allowance applied.
        /// </summary>
        /// <value>Type of the allowance applied.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Discount for value: Discount
            /// </summary>
            [EnumMember(Value = "Discount")]
            Discount = 1,

            /// <summary>
            /// Enum DiscountIncentive for value: DiscountIncentive
            /// </summary>
            [EnumMember(Value = "DiscountIncentive")]
            DiscountIncentive = 2,

            /// <summary>
            /// Enum Defective for value: Defective
            /// </summary>
            [EnumMember(Value = "Defective")]
            Defective = 3,

            /// <summary>
            /// Enum Promotional for value: Promotional
            /// </summary>
            [EnumMember(Value = "Promotional")]
            Promotional = 4,

            /// <summary>
            /// Enum UnsaleableMerchandise for value: UnsaleableMerchandise
            /// </summary>
            [EnumMember(Value = "UnsaleableMerchandise")]
            UnsaleableMerchandise = 5,

            /// <summary>
            /// Enum Special for value: Special
            /// </summary>
            [EnumMember(Value = "Special")]
            Special = 6
        }


        /// <summary>
        /// Type of the allowance applied.
        /// </summary>
        /// <value>Type of the allowance applied.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AllowanceDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AllowanceDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AllowanceDetails" /> class.
        /// </summary>
        /// <param name="type">Type of the allowance applied. (required).</param>
        /// <param name="description">Description of the allowance..</param>
        /// <param name="allowanceAmount">allowanceAmount (required).</param>
        /// <param name="taxDetails">Tax amount details applied on this allowance..</param>
        public AllowanceDetails(TypeEnum type = default(TypeEnum), string description = default(string), Money allowanceAmount = default(Money), List<TaxDetails> taxDetails = default(List<TaxDetails>))
        {
            this.Type = type;
            // to ensure "allowanceAmount" is required (not null)
            if (allowanceAmount == null)
            {
                throw new ArgumentNullException("allowanceAmount is a required property for AllowanceDetails and cannot be null");
            }
            this.AllowanceAmount = allowanceAmount;
            this.Description = description;
            this.TaxDetails = taxDetails;
        }

        /// <summary>
        /// Description of the allowance.
        /// </summary>
        /// <value>Description of the allowance.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AllowanceAmount
        /// </summary>
        [DataMember(Name = "allowanceAmount", IsRequired = true, EmitDefaultValue = true)]
        public Money AllowanceAmount { get; set; }

        /// <summary>
        /// Tax amount details applied on this allowance.
        /// </summary>
        /// <value>Tax amount details applied on this allowance.</value>
        [DataMember(Name = "taxDetails", EmitDefaultValue = false)]
        public List<TaxDetails> TaxDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AllowanceDetails {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AllowanceAmount: ").Append(AllowanceAmount).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
