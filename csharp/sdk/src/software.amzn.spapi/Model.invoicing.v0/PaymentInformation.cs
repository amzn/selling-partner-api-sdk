/*
 * Selling Partner API for Shipment Invoicing
 *
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.invoicing.v0
{
    /// <summary>
    /// Payment transaction information
    /// </summary>
    [DataContract(Name = "PaymentInformation")]
    public partial class PaymentInformation : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "PaymentMethod", EmitDefaultValue = false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInformation" /> class.
        /// </summary>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="acquirerId">Government ID of acquirer.</param>
        /// <param name="cardBrand">Credit card brand (if payment method is CreditCard).</param>
        /// <param name="paymentValue">paymentValue.</param>
        /// <param name="authorizationCode">Authorization code for this payment.</param>
        public PaymentInformation(PaymentMethodEnum? paymentMethod = default(PaymentMethodEnum?), string acquirerId = default(string), string cardBrand = default(string), Money paymentValue = default(Money), string authorizationCode = default(string))
        {
            this.PaymentMethod = paymentMethod;
            this.AcquirerId = acquirerId;
            this.CardBrand = cardBrand;
            this.PaymentValue = paymentValue;
            this.AuthorizationCode = authorizationCode;
        }

        /// <summary>
        /// Government ID of acquirer
        /// </summary>
        /// <value>Government ID of acquirer</value>
        [DataMember(Name = "AcquirerId", EmitDefaultValue = false)]
        public string AcquirerId { get; set; }

        /// <summary>
        /// Credit card brand (if payment method is CreditCard)
        /// </summary>
        /// <value>Credit card brand (if payment method is CreditCard)</value>
        [DataMember(Name = "CardBrand", EmitDefaultValue = false)]
        public string CardBrand { get; set; }

        /// <summary>
        /// Gets or Sets PaymentValue
        /// </summary>
        [DataMember(Name = "PaymentValue", EmitDefaultValue = false)]
        public Money PaymentValue { get; set; }

        /// <summary>
        /// Authorization code for this payment
        /// </summary>
        /// <value>Authorization code for this payment</value>
        [DataMember(Name = "AuthorizationCode", EmitDefaultValue = false)]
        public string AuthorizationCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentInformation {\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  AcquirerId: ").Append(AcquirerId).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("  PaymentValue: ").Append(PaymentValue).Append("\n");
            sb.Append("  AuthorizationCode: ").Append(AuthorizationCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
