/*
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fba.inventory.v1
{
    /// <summary>
    /// Inventory summary for a specific item.
    /// </summary>
    [DataContract(Name = "InventorySummary")]
    public partial class InventorySummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventorySummary" /> class.
        /// </summary>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of an item..</param>
        /// <param name="fnSku">Amazon&#39;s fulfillment network SKU identifier..</param>
        /// <param name="sellerSku">The seller SKU of the item..</param>
        /// <param name="condition">The condition of the item as described by the seller (for example, New Item)..</param>
        /// <param name="inventoryDetails">inventoryDetails.</param>
        /// <param name="lastUpdatedTime">The date and time that any quantity was last updated..</param>
        /// <param name="productName">The localized language product title of the item within the specific marketplace..</param>
        /// <param name="totalQuantity">The total number of units in an inbound shipment or in Amazon fulfillment centers..</param>
        /// <param name="stores">A list of seller-enrolled stores that apply to this seller SKU..</param>
        public InventorySummary(string asin = default(string), string fnSku = default(string), string sellerSku = default(string), string condition = default(string), InventoryDetails inventoryDetails = default(InventoryDetails), DateTime lastUpdatedTime = default(DateTime), string productName = default(string), int totalQuantity = default(int), List<string> stores = default(List<string>))
        {
            this.Asin = asin;
            this.FnSku = fnSku;
            this.SellerSku = sellerSku;
            this.Condition = condition;
            this.InventoryDetails = inventoryDetails;
            this.LastUpdatedTime = lastUpdatedTime;
            this.ProductName = productName;
            this.TotalQuantity = totalQuantity;
            this.Stores = stores;
        }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of an item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of an item.</value>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        /// Amazon&#39;s fulfillment network SKU identifier.
        /// </summary>
        /// <value>Amazon&#39;s fulfillment network SKU identifier.</value>
        [DataMember(Name = "fnSku", EmitDefaultValue = false)]
        public string FnSku { get; set; }

        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name = "sellerSku", EmitDefaultValue = false)]
        public string SellerSku { get; set; }

        /// <summary>
        /// The condition of the item as described by the seller (for example, New Item).
        /// </summary>
        /// <value>The condition of the item as described by the seller (for example, New Item).</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public string Condition { get; set; }

        /// <summary>
        /// Gets or Sets InventoryDetails
        /// </summary>
        [DataMember(Name = "inventoryDetails", EmitDefaultValue = false)]
        public InventoryDetails InventoryDetails { get; set; }

        /// <summary>
        /// The date and time that any quantity was last updated.
        /// </summary>
        /// <value>The date and time that any quantity was last updated.</value>
        [DataMember(Name = "lastUpdatedTime", EmitDefaultValue = false)]
        public DateTime LastUpdatedTime { get; set; }

        /// <summary>
        /// The localized language product title of the item within the specific marketplace.
        /// </summary>
        /// <value>The localized language product title of the item within the specific marketplace.</value>
        [DataMember(Name = "productName", EmitDefaultValue = false)]
        public string ProductName { get; set; }

        /// <summary>
        /// The total number of units in an inbound shipment or in Amazon fulfillment centers.
        /// </summary>
        /// <value>The total number of units in an inbound shipment or in Amazon fulfillment centers.</value>
        [DataMember(Name = "totalQuantity", EmitDefaultValue = false)]
        public int TotalQuantity { get; set; }

        /// <summary>
        /// A list of seller-enrolled stores that apply to this seller SKU.
        /// </summary>
        /// <value>A list of seller-enrolled stores that apply to this seller SKU.</value>
        [DataMember(Name = "stores", EmitDefaultValue = false)]
        public List<string> Stores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventorySummary {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  FnSku: ").Append(FnSku).Append("\n");
            sb.Append("  SellerSku: ").Append(SellerSku).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  InventoryDetails: ").Append(InventoryDetails).Append("\n");
            sb.Append("  LastUpdatedTime: ").Append(LastUpdatedTime).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  TotalQuantity: ").Append(TotalQuantity).Append("\n");
            sb.Append("  Stores: ").Append(Stores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
