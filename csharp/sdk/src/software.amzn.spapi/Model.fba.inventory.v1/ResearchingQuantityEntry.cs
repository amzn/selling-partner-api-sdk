/*
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fba.inventory.v1
{
    /// <summary>
    /// The misplaced or warehouse damaged inventory that is actively being confirmed at our fulfillment centers.
    /// </summary>
    [DataContract(Name = "ResearchingQuantityEntry")]
    public partial class ResearchingQuantityEntry : IValidatableObject
    {
        /// <summary>
        /// The duration of the research.
        /// </summary>
        /// <value>The duration of the research.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum ResearchingQuantityInShortTerm for value: researchingQuantityInShortTerm
            /// </summary>
            [EnumMember(Value = "researchingQuantityInShortTerm")]
            ResearchingQuantityInShortTerm = 1,

            /// <summary>
            /// Enum ResearchingQuantityInMidTerm for value: researchingQuantityInMidTerm
            /// </summary>
            [EnumMember(Value = "researchingQuantityInMidTerm")]
            ResearchingQuantityInMidTerm = 2,

            /// <summary>
            /// Enum ResearchingQuantityInLongTerm for value: researchingQuantityInLongTerm
            /// </summary>
            [EnumMember(Value = "researchingQuantityInLongTerm")]
            ResearchingQuantityInLongTerm = 3
        }


        /// <summary>
        /// The duration of the research.
        /// </summary>
        /// <value>The duration of the research.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public NameEnum Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResearchingQuantityEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResearchingQuantityEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResearchingQuantityEntry" /> class.
        /// </summary>
        /// <param name="name">The duration of the research. (required).</param>
        /// <param name="quantity">The number of units. (required).</param>
        public ResearchingQuantityEntry(NameEnum name = default(NameEnum), int quantity = default(int))
        {
            this.Name = name;
            this.Quantity = quantity;
        }

        /// <summary>
        /// The number of units.
        /// </summary>
        /// <value>The number of units.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResearchingQuantityEntry {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
