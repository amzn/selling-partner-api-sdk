/*
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fba.inventory.v1
{
    /// <summary>
    /// The quantity of reserved inventory.
    /// </summary>
    [DataContract(Name = "ReservedQuantity")]
    public partial class ReservedQuantity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReservedQuantity" /> class.
        /// </summary>
        /// <param name="totalReservedQuantity">The total number of units in Amazon&#39;s fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes..</param>
        /// <param name="pendingCustomerOrderQuantity">The number of units reserved for customer orders..</param>
        /// <param name="pendingTransshipmentQuantity">The number of units being transferred from one fulfillment center to another..</param>
        /// <param name="fcProcessingQuantity">The number of units that have been sidelined at the fulfillment center for additional processing..</param>
        public ReservedQuantity(int totalReservedQuantity = default(int), int pendingCustomerOrderQuantity = default(int), int pendingTransshipmentQuantity = default(int), int fcProcessingQuantity = default(int))
        {
            this.TotalReservedQuantity = totalReservedQuantity;
            this.PendingCustomerOrderQuantity = pendingCustomerOrderQuantity;
            this.PendingTransshipmentQuantity = pendingTransshipmentQuantity;
            this.FcProcessingQuantity = fcProcessingQuantity;
        }

        /// <summary>
        /// The total number of units in Amazon&#39;s fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.
        /// </summary>
        /// <value>The total number of units in Amazon&#39;s fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.</value>
        [DataMember(Name = "totalReservedQuantity", EmitDefaultValue = false)]
        public int TotalReservedQuantity { get; set; }

        /// <summary>
        /// The number of units reserved for customer orders.
        /// </summary>
        /// <value>The number of units reserved for customer orders.</value>
        [DataMember(Name = "pendingCustomerOrderQuantity", EmitDefaultValue = false)]
        public int PendingCustomerOrderQuantity { get; set; }

        /// <summary>
        /// The number of units being transferred from one fulfillment center to another.
        /// </summary>
        /// <value>The number of units being transferred from one fulfillment center to another.</value>
        [DataMember(Name = "pendingTransshipmentQuantity", EmitDefaultValue = false)]
        public int PendingTransshipmentQuantity { get; set; }

        /// <summary>
        /// The number of units that have been sidelined at the fulfillment center for additional processing.
        /// </summary>
        /// <value>The number of units that have been sidelined at the fulfillment center for additional processing.</value>
        [DataMember(Name = "fcProcessingQuantity", EmitDefaultValue = false)]
        public int FcProcessingQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReservedQuantity {\n");
            sb.Append("  TotalReservedQuantity: ").Append(TotalReservedQuantity).Append("\n");
            sb.Append("  PendingCustomerOrderQuantity: ").Append(PendingCustomerOrderQuantity).Append("\n");
            sb.Append("  PendingTransshipmentQuantity: ").Append(PendingTransshipmentQuantity).Append("\n");
            sb.Append("  FcProcessingQuantity: ").Append(FcProcessingQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
