/*
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fba.inventory.v1
{
    /// <summary>
    /// The quantity of unfulfillable inventory.
    /// </summary>
    [DataContract(Name = "UnfulfillableQuantity")]
    public partial class UnfulfillableQuantity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnfulfillableQuantity" /> class.
        /// </summary>
        /// <param name="totalUnfulfillableQuantity">The total number of units in Amazon&#39;s fulfillment network in unsellable condition..</param>
        /// <param name="customerDamagedQuantity">The number of units in customer damaged disposition..</param>
        /// <param name="warehouseDamagedQuantity">The number of units in warehouse damaged disposition..</param>
        /// <param name="distributorDamagedQuantity">The number of units in distributor damaged disposition..</param>
        /// <param name="carrierDamagedQuantity">The number of units in carrier damaged disposition..</param>
        /// <param name="defectiveQuantity">The number of units in defective disposition..</param>
        /// <param name="expiredQuantity">The number of units in expired disposition..</param>
        public UnfulfillableQuantity(int totalUnfulfillableQuantity = default(int), int customerDamagedQuantity = default(int), int warehouseDamagedQuantity = default(int), int distributorDamagedQuantity = default(int), int carrierDamagedQuantity = default(int), int defectiveQuantity = default(int), int expiredQuantity = default(int))
        {
            this.TotalUnfulfillableQuantity = totalUnfulfillableQuantity;
            this.CustomerDamagedQuantity = customerDamagedQuantity;
            this.WarehouseDamagedQuantity = warehouseDamagedQuantity;
            this.DistributorDamagedQuantity = distributorDamagedQuantity;
            this.CarrierDamagedQuantity = carrierDamagedQuantity;
            this.DefectiveQuantity = defectiveQuantity;
            this.ExpiredQuantity = expiredQuantity;
        }

        /// <summary>
        /// The total number of units in Amazon&#39;s fulfillment network in unsellable condition.
        /// </summary>
        /// <value>The total number of units in Amazon&#39;s fulfillment network in unsellable condition.</value>
        [DataMember(Name = "totalUnfulfillableQuantity", EmitDefaultValue = false)]
        public int TotalUnfulfillableQuantity { get; set; }

        /// <summary>
        /// The number of units in customer damaged disposition.
        /// </summary>
        /// <value>The number of units in customer damaged disposition.</value>
        [DataMember(Name = "customerDamagedQuantity", EmitDefaultValue = false)]
        public int CustomerDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in warehouse damaged disposition.
        /// </summary>
        /// <value>The number of units in warehouse damaged disposition.</value>
        [DataMember(Name = "warehouseDamagedQuantity", EmitDefaultValue = false)]
        public int WarehouseDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in distributor damaged disposition.
        /// </summary>
        /// <value>The number of units in distributor damaged disposition.</value>
        [DataMember(Name = "distributorDamagedQuantity", EmitDefaultValue = false)]
        public int DistributorDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in carrier damaged disposition.
        /// </summary>
        /// <value>The number of units in carrier damaged disposition.</value>
        [DataMember(Name = "carrierDamagedQuantity", EmitDefaultValue = false)]
        public int CarrierDamagedQuantity { get; set; }

        /// <summary>
        /// The number of units in defective disposition.
        /// </summary>
        /// <value>The number of units in defective disposition.</value>
        [DataMember(Name = "defectiveQuantity", EmitDefaultValue = false)]
        public int DefectiveQuantity { get; set; }

        /// <summary>
        /// The number of units in expired disposition.
        /// </summary>
        /// <value>The number of units in expired disposition.</value>
        [DataMember(Name = "expiredQuantity", EmitDefaultValue = false)]
        public int ExpiredQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnfulfillableQuantity {\n");
            sb.Append("  TotalUnfulfillableQuantity: ").Append(TotalUnfulfillableQuantity).Append("\n");
            sb.Append("  CustomerDamagedQuantity: ").Append(CustomerDamagedQuantity).Append("\n");
            sb.Append("  WarehouseDamagedQuantity: ").Append(WarehouseDamagedQuantity).Append("\n");
            sb.Append("  DistributorDamagedQuantity: ").Append(DistributorDamagedQuantity).Append("\n");
            sb.Append("  CarrierDamagedQuantity: ").Append(CarrierDamagedQuantity).Append("\n");
            sb.Append("  DefectiveQuantity: ").Append(DefectiveQuantity).Append("\n");
            sb.Append("  ExpiredQuantity: ").Append(ExpiredQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
