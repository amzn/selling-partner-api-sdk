/*
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2021-06-30
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.reports.v2021_06_30
{
    /// <summary>
    /// Detailed information about the report.
    /// </summary>
    [DataContract(Name = "Report")]
    public partial class Report : IValidatableObject
    {
        /// <summary>
        /// The processing status of the report.
        /// </summary>
        /// <value>The processing status of the report.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingStatusEnum
        {
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 1,

            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 2,

            /// <summary>
            /// Enum FATAL for value: FATAL
            /// </summary>
            [EnumMember(Value = "FATAL")]
            FATAL = 3,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 4,

            /// <summary>
            /// Enum INQUEUE for value: IN_QUEUE
            /// </summary>
            [EnumMember(Value = "IN_QUEUE")]
            INQUEUE = 5
        }


        /// <summary>
        /// The processing status of the report.
        /// </summary>
        /// <value>The processing status of the report.</value>
        [DataMember(Name = "processingStatus", IsRequired = true, EmitDefaultValue = true)]
        public ProcessingStatusEnum ProcessingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Report" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Report() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Report" /> class.
        /// </summary>
        /// <param name="marketplaceIds">A list of marketplace identifiers for the report..</param>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID. (required).</param>
        /// <param name="reportType">The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. (required).</param>
        /// <param name="dataStartTime">The start of a date and time range used for selecting the data to report..</param>
        /// <param name="dataEndTime">The end of a date and time range used for selecting the data to report..</param>
        /// <param name="reportScheduleId">The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID..</param>
        /// <param name="createdTime">The date and time when the report was created. (required).</param>
        /// <param name="processingStatus">The processing status of the report. (required).</param>
        /// <param name="processingStartTime">The date and time when the report processing started, in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; date time format..</param>
        /// <param name="processingEndTime">The date and time when the report processing completed, in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; date time format..</param>
        /// <param name="reportDocumentId">The identifier for the report document. Pass this into the &#x60;getReportDocument&#x60; operation to get the information you will need to retrieve the report document&#39;s contents..</param>
        public Report(List<string> marketplaceIds = default(List<string>), string reportId = default(string), string reportType = default(string), DateTime dataStartTime = default(DateTime), DateTime dataEndTime = default(DateTime), string reportScheduleId = default(string), DateTime createdTime = default(DateTime), ProcessingStatusEnum processingStatus = default(ProcessingStatusEnum), DateTime processingStartTime = default(DateTime), DateTime processingEndTime = default(DateTime), string reportDocumentId = default(string))
        {
            // to ensure "reportId" is required (not null)
            if (reportId == null)
            {
                throw new ArgumentNullException("reportId is a required property for Report and cannot be null");
            }
            this.ReportId = reportId;
            // to ensure "reportType" is required (not null)
            if (reportType == null)
            {
                throw new ArgumentNullException("reportType is a required property for Report and cannot be null");
            }
            this.ReportType = reportType;
            this.CreatedTime = createdTime;
            this.ProcessingStatus = processingStatus;
            this.MarketplaceIds = marketplaceIds;
            this.DataStartTime = dataStartTime;
            this.DataEndTime = dataEndTime;
            this.ReportScheduleId = reportScheduleId;
            this.ProcessingStartTime = processingStartTime;
            this.ProcessingEndTime = processingEndTime;
            this.ReportDocumentId = reportDocumentId;
        }

        /// <summary>
        /// A list of marketplace identifiers for the report.
        /// </summary>
        /// <value>A list of marketplace identifiers for the report.</value>
        [DataMember(Name = "marketplaceIds", EmitDefaultValue = false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// The identifier for the report. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the report. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "reportId", IsRequired = true, EmitDefaultValue = true)]
        public string ReportId { get; set; }

        /// <summary>
        /// The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
        /// </summary>
        /// <value>The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.</value>
        [DataMember(Name = "reportType", IsRequired = true, EmitDefaultValue = true)]
        public string ReportType { get; set; }

        /// <summary>
        /// The start of a date and time range used for selecting the data to report.
        /// </summary>
        /// <value>The start of a date and time range used for selecting the data to report.</value>
        [DataMember(Name = "dataStartTime", EmitDefaultValue = false)]
        public DateTime DataStartTime { get; set; }

        /// <summary>
        /// The end of a date and time range used for selecting the data to report.
        /// </summary>
        /// <value>The end of a date and time range used for selecting the data to report.</value>
        [DataMember(Name = "dataEndTime", EmitDefaultValue = false)]
        public DateTime DataEndTime { get; set; }

        /// <summary>
        /// The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "reportScheduleId", EmitDefaultValue = false)]
        public string ReportScheduleId { get; set; }

        /// <summary>
        /// The date and time when the report was created.
        /// </summary>
        /// <value>The date and time when the report was created.</value>
        [DataMember(Name = "createdTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// The date and time when the report processing started, in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; date time format.
        /// </summary>
        /// <value>The date and time when the report processing started, in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; date time format.</value>
        [DataMember(Name = "processingStartTime", EmitDefaultValue = false)]
        public DateTime ProcessingStartTime { get; set; }

        /// <summary>
        /// The date and time when the report processing completed, in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; date time format.
        /// </summary>
        /// <value>The date and time when the report processing completed, in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; date time format.</value>
        [DataMember(Name = "processingEndTime", EmitDefaultValue = false)]
        public DateTime ProcessingEndTime { get; set; }

        /// <summary>
        /// The identifier for the report document. Pass this into the &#x60;getReportDocument&#x60; operation to get the information you will need to retrieve the report document&#39;s contents.
        /// </summary>
        /// <value>The identifier for the report document. Pass this into the &#x60;getReportDocument&#x60; operation to get the information you will need to retrieve the report document&#39;s contents.</value>
        [DataMember(Name = "reportDocumentId", EmitDefaultValue = false)]
        public string ReportDocumentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Report {\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  DataStartTime: ").Append(DataStartTime).Append("\n");
            sb.Append("  DataEndTime: ").Append(DataEndTime).Append("\n");
            sb.Append("  ReportScheduleId: ").Append(ReportScheduleId).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  ProcessingStatus: ").Append(ProcessingStatus).Append("\n");
            sb.Append("  ProcessingStartTime: ").Append(ProcessingStartTime).Append("\n");
            sb.Append("  ProcessingEndTime: ").Append(ProcessingEndTime).Append("\n");
            sb.Append("  ReportDocumentId: ").Append(ReportDocumentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
