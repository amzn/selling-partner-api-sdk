/*
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2021-06-30
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.reports.v2021_06_30
{
    /// <summary>
    /// Detailed information about a report schedule.
    /// </summary>
    [DataContract(Name = "ReportSchedule")]
    public partial class ReportSchedule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportSchedule" /> class.
        /// </summary>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID. (required).</param>
        /// <param name="reportType">The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. (required).</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise..</param>
        /// <param name="reportOptions">Additional information passed to reports. This varies by report type..</param>
        /// <param name="period">An &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; period value that indicates how often a report should be created. (required).</param>
        /// <param name="nextReportCreationTime">The date and time when the schedule will create its next report, in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; date time format..</param>
        public ReportSchedule(string reportScheduleId = default(string), string reportType = default(string), List<string> marketplaceIds = default(List<string>), Dictionary<string, string> reportOptions = default(Dictionary<string, string>), string period = default(string), DateTime nextReportCreationTime = default(DateTime))
        {
            // to ensure "reportScheduleId" is required (not null)
            if (reportScheduleId == null)
            {
                throw new ArgumentNullException("reportScheduleId is a required property for ReportSchedule and cannot be null");
            }
            this.ReportScheduleId = reportScheduleId;
            // to ensure "reportType" is required (not null)
            if (reportType == null)
            {
                throw new ArgumentNullException("reportType is a required property for ReportSchedule and cannot be null");
            }
            this.ReportType = reportType;
            // to ensure "period" is required (not null)
            if (period == null)
            {
                throw new ArgumentNullException("period is a required property for ReportSchedule and cannot be null");
            }
            this.Period = period;
            this.MarketplaceIds = marketplaceIds;
            this.ReportOptions = reportOptions;
            this.NextReportCreationTime = nextReportCreationTime;
        }

        /// <summary>
        /// The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name = "reportScheduleId", IsRequired = true, EmitDefaultValue = true)]
        public string ReportScheduleId { get; set; }

        /// <summary>
        /// The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
        /// </summary>
        /// <value>The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.</value>
        [DataMember(Name = "reportType", IsRequired = true, EmitDefaultValue = true)]
        public string ReportType { get; set; }

        /// <summary>
        /// A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
        /// </summary>
        /// <value>A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.</value>
        [DataMember(Name = "marketplaceIds", EmitDefaultValue = false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// Additional information passed to reports. This varies by report type.
        /// </summary>
        /// <value>Additional information passed to reports. This varies by report type.</value>
        [DataMember(Name = "reportOptions", EmitDefaultValue = false)]
        public Dictionary<string, string> ReportOptions { get; set; }

        /// <summary>
        /// An &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; period value that indicates how often a report should be created.
        /// </summary>
        /// <value>An &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; period value that indicates how often a report should be created.</value>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = true)]
        public string Period { get; set; }

        /// <summary>
        /// The date and time when the schedule will create its next report, in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; date time format.
        /// </summary>
        /// <value>The date and time when the schedule will create its next report, in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; date time format.</value>
        [DataMember(Name = "nextReportCreationTime", EmitDefaultValue = false)]
        public DateTime NextReportCreationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportSchedule {\n");
            sb.Append("  ReportScheduleId: ").Append(ReportScheduleId).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  ReportOptions: ").Append(ReportOptions).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  NextReportCreationTime: ").Append(NextReportCreationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
