/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// The number of offer listings with the specified condition.
    /// </summary>
    [DataContract(Name = "OfferListingCountType")]
    public partial class OfferListingCountType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferListingCountType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferListingCountType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferListingCountType" /> class.
        /// </summary>
        /// <param name="count">The number of offer listings. (required).</param>
        /// <param name="condition">The condition of the item. (required).</param>
        public OfferListingCountType(int count = default(int), string condition = default(string))
        {
            this.Count = count;
            // to ensure "condition" is required (not null)
            if (condition == null)
            {
                throw new ArgumentNullException("condition is a required property for OfferListingCountType and cannot be null");
            }
            this.Condition = condition;
        }

        /// <summary>
        /// The number of offer listings.
        /// </summary>
        /// <value>The number of offer listings.</value>
        [DataMember(Name = "Count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// The condition of the item.
        /// </summary>
        /// <value>The condition of the item.</value>
        [DataMember(Name = "condition", IsRequired = true, EmitDefaultValue = true)]
        public string Condition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferListingCountType {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
