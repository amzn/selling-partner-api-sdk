/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// Schema for an individual buybox price.
    /// </summary>
    [DataContract(Name = "BuyBoxPriceType")]
    public partial class BuyBoxPriceType : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OfferType
        /// </summary>
        [DataMember(Name = "offerType", EmitDefaultValue = false)]
        public OfferCustomerType? OfferType { get; set; }

        /// <summary>
        /// Gets or Sets QuantityDiscountType
        /// </summary>
        [DataMember(Name = "quantityDiscountType", EmitDefaultValue = false)]
        public QuantityDiscountType? QuantityDiscountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyBoxPriceType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuyBoxPriceType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyBoxPriceType" /> class.
        /// </summary>
        /// <param name="condition">Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club. (required).</param>
        /// <param name="offerType">offerType.</param>
        /// <param name="quantityTier">Indicates at what quantity this price becomes active..</param>
        /// <param name="quantityDiscountType">quantityDiscountType.</param>
        /// <param name="landedPrice">landedPrice (required).</param>
        /// <param name="listingPrice">listingPrice (required).</param>
        /// <param name="shipping">shipping (required).</param>
        /// <param name="points">points.</param>
        /// <param name="sellerId">The seller identifier for the offer..</param>
        public BuyBoxPriceType(string condition = default(string), OfferCustomerType? offerType = default(OfferCustomerType?), int quantityTier = default(int), QuantityDiscountType? quantityDiscountType = default(QuantityDiscountType?), MoneyType landedPrice = default(MoneyType), MoneyType listingPrice = default(MoneyType), MoneyType shipping = default(MoneyType), Points points = default(Points), string sellerId = default(string))
        {
            // to ensure "condition" is required (not null)
            if (condition == null)
            {
                throw new ArgumentNullException("condition is a required property for BuyBoxPriceType and cannot be null");
            }
            this.Condition = condition;
            // to ensure "landedPrice" is required (not null)
            if (landedPrice == null)
            {
                throw new ArgumentNullException("landedPrice is a required property for BuyBoxPriceType and cannot be null");
            }
            this.LandedPrice = landedPrice;
            // to ensure "listingPrice" is required (not null)
            if (listingPrice == null)
            {
                throw new ArgumentNullException("listingPrice is a required property for BuyBoxPriceType and cannot be null");
            }
            this.ListingPrice = listingPrice;
            // to ensure "shipping" is required (not null)
            if (shipping == null)
            {
                throw new ArgumentNullException("shipping is a required property for BuyBoxPriceType and cannot be null");
            }
            this.Shipping = shipping;
            this.OfferType = offerType;
            this.QuantityTier = quantityTier;
            this.QuantityDiscountType = quantityDiscountType;
            this.Points = points;
            this.SellerId = sellerId;
        }

        /// <summary>
        /// Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        /// <value>Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.</value>
        [DataMember(Name = "condition", IsRequired = true, EmitDefaultValue = true)]
        public string Condition { get; set; }

        /// <summary>
        /// Indicates at what quantity this price becomes active.
        /// </summary>
        /// <value>Indicates at what quantity this price becomes active.</value>
        [DataMember(Name = "quantityTier", EmitDefaultValue = false)]
        public int QuantityTier { get; set; }

        /// <summary>
        /// Gets or Sets LandedPrice
        /// </summary>
        [DataMember(Name = "LandedPrice", IsRequired = true, EmitDefaultValue = true)]
        public MoneyType LandedPrice { get; set; }

        /// <summary>
        /// Gets or Sets ListingPrice
        /// </summary>
        [DataMember(Name = "ListingPrice", IsRequired = true, EmitDefaultValue = true)]
        public MoneyType ListingPrice { get; set; }

        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name = "Shipping", IsRequired = true, EmitDefaultValue = true)]
        public MoneyType Shipping { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "Points", EmitDefaultValue = false)]
        public Points Points { get; set; }

        /// <summary>
        /// The seller identifier for the offer.
        /// </summary>
        /// <value>The seller identifier for the offer.</value>
        [DataMember(Name = "sellerId", EmitDefaultValue = false)]
        public string SellerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuyBoxPriceType {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  OfferType: ").Append(OfferType).Append("\n");
            sb.Append("  QuantityTier: ").Append(QuantityTier).Append("\n");
            sb.Append("  QuantityDiscountType: ").Append(QuantityDiscountType).Append("\n");
            sb.Append("  LandedPrice: ").Append(LandedPrice).Append("\n");
            sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
