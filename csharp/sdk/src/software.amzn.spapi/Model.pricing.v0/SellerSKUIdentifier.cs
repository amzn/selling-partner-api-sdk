/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// Schema to identify an item by MarketPlaceId, SellerId, and SellerSKU.
    /// </summary>
    [DataContract(Name = "SellerSKUIdentifier")]
    public partial class SellerSKUIdentifier : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SellerSKUIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SellerSKUIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SellerSKUIdentifier" /> class.
        /// </summary>
        /// <param name="marketplaceId">A marketplace identifier. (required).</param>
        /// <param name="sellerId">The seller identifier submitted for the operation. (required).</param>
        /// <param name="sellerSKU">The seller stock keeping unit (SKU) of the item. (required).</param>
        public SellerSKUIdentifier(string marketplaceId = default(string), string sellerId = default(string), string sellerSKU = default(string))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for SellerSKUIdentifier and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            // to ensure "sellerId" is required (not null)
            if (sellerId == null)
            {
                throw new ArgumentNullException("sellerId is a required property for SellerSKUIdentifier and cannot be null");
            }
            this.SellerId = sellerId;
            // to ensure "sellerSKU" is required (not null)
            if (sellerSKU == null)
            {
                throw new ArgumentNullException("sellerSKU is a required property for SellerSKUIdentifier and cannot be null");
            }
            this.SellerSKU = sellerSKU;
        }

        /// <summary>
        /// A marketplace identifier.
        /// </summary>
        /// <value>A marketplace identifier.</value>
        [DataMember(Name = "MarketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The seller identifier submitted for the operation.
        /// </summary>
        /// <value>The seller identifier submitted for the operation.</value>
        [DataMember(Name = "SellerId", IsRequired = true, EmitDefaultValue = true)]
        public string SellerId { get; set; }

        /// <summary>
        /// The seller stock keeping unit (SKU) of the item.
        /// </summary>
        /// <value>The seller stock keeping unit (SKU) of the item.</value>
        [DataMember(Name = "SellerSKU", IsRequired = true, EmitDefaultValue = true)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SellerSKUIdentifier {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
