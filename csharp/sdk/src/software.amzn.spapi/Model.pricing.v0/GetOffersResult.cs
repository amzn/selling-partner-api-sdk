/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// The payload for the getListingOffers and getItemOffers operations.
    /// </summary>
    [DataContract(Name = "GetOffersResult")]
    public partial class GetOffersResult : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ItemCondition
        /// </summary>
        [DataMember(Name = "ItemCondition", IsRequired = true, EmitDefaultValue = true)]
        public ConditionType ItemCondition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOffersResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetOffersResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOffersResult" /> class.
        /// </summary>
        /// <param name="marketplaceID">A marketplace identifier. (required).</param>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="sKU">The stock keeping unit (SKU) of the item..</param>
        /// <param name="itemCondition">itemCondition (required).</param>
        /// <param name="status">The status of the operation. (required).</param>
        /// <param name="identifier">identifier (required).</param>
        /// <param name="summary">summary (required).</param>
        /// <param name="offers">A list of offer details. The list is the same length as the TotalOfferCount in the Summary or 20, whichever is less. (required).</param>
        public GetOffersResult(string marketplaceID = default(string), string aSIN = default(string), string sKU = default(string), ConditionType itemCondition = default(ConditionType), string status = default(string), ItemIdentifier identifier = default(ItemIdentifier), Summary summary = default(Summary), List<OfferDetail> offers = default(List<OfferDetail>))
        {
            // to ensure "marketplaceID" is required (not null)
            if (marketplaceID == null)
            {
                throw new ArgumentNullException("marketplaceID is a required property for GetOffersResult and cannot be null");
            }
            this.MarketplaceID = marketplaceID;
            this.ItemCondition = itemCondition;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for GetOffersResult and cannot be null");
            }
            this.Status = status;
            // to ensure "identifier" is required (not null)
            if (identifier == null)
            {
                throw new ArgumentNullException("identifier is a required property for GetOffersResult and cannot be null");
            }
            this.Identifier = identifier;
            // to ensure "summary" is required (not null)
            if (summary == null)
            {
                throw new ArgumentNullException("summary is a required property for GetOffersResult and cannot be null");
            }
            this.Summary = summary;
            // to ensure "offers" is required (not null)
            if (offers == null)
            {
                throw new ArgumentNullException("offers is a required property for GetOffersResult and cannot be null");
            }
            this.Offers = offers;
            this.ASIN = aSIN;
            this.SKU = sKU;
        }

        /// <summary>
        /// A marketplace identifier.
        /// </summary>
        /// <value>A marketplace identifier.</value>
        [DataMember(Name = "MarketplaceID", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceID { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }

        /// <summary>
        /// The stock keeping unit (SKU) of the item.
        /// </summary>
        /// <value>The stock keeping unit (SKU) of the item.</value>
        [DataMember(Name = "SKU", EmitDefaultValue = false)]
        public string SKU { get; set; }

        /// <summary>
        /// The status of the operation.
        /// </summary>
        /// <value>The status of the operation.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name = "Identifier", IsRequired = true, EmitDefaultValue = true)]
        public ItemIdentifier Identifier { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name = "Summary", IsRequired = true, EmitDefaultValue = true)]
        public Summary Summary { get; set; }

        /// <summary>
        /// A list of offer details. The list is the same length as the TotalOfferCount in the Summary or 20, whichever is less.
        /// </summary>
        /// <value>A list of offer details. The list is the same length as the TotalOfferCount in the Summary or 20, whichever is less.</value>
        [DataMember(Name = "Offers", IsRequired = true, EmitDefaultValue = true)]
        public List<OfferDetail> Offers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetOffersResult {\n");
            sb.Append("  MarketplaceID: ").Append(MarketplaceID).Append("\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  SKU: ").Append(SKU).Append("\n");
            sb.Append("  ItemCondition: ").Append(ItemCondition).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
