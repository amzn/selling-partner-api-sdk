/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// The total number of offers for the specified condition and fulfillment channel.
    /// </summary>
    [DataContract(Name = "OfferCountType")]
    public partial class OfferCountType : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FulfillmentChannel
        /// </summary>
        [DataMember(Name = "fulfillmentChannel", EmitDefaultValue = false)]
        public FulfillmentChannelType? FulfillmentChannel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferCountType" /> class.
        /// </summary>
        /// <param name="condition">Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club..</param>
        /// <param name="fulfillmentChannel">fulfillmentChannel.</param>
        /// <param name="offerCount">The number of offers in a fulfillment channel that meet a specific condition..</param>
        public OfferCountType(string condition = default(string), FulfillmentChannelType? fulfillmentChannel = default(FulfillmentChannelType?), int offerCount = default(int))
        {
            this.Condition = condition;
            this.FulfillmentChannel = fulfillmentChannel;
            this.OfferCount = offerCount;
        }

        /// <summary>
        /// Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        /// <value>Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public string Condition { get; set; }

        /// <summary>
        /// The number of offers in a fulfillment channel that meet a specific condition.
        /// </summary>
        /// <value>The number of offers in a fulfillment channel that meet a specific condition.</value>
        [DataMember(Name = "OfferCount", EmitDefaultValue = false)]
        public int OfferCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferCountType {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  FulfillmentChannel: ").Append(FulfillmentChannel).Append("\n");
            sb.Append("  OfferCount: ").Append(OfferCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
