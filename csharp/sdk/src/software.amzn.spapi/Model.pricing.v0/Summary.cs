/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// Contains price information about the product, including the LowestPrices and BuyBoxPrices, the ListPrice, the SuggestedLowerPricePlusShipping, and NumberOfOffers and NumberOfBuyBoxEligibleOffers.
    /// </summary>
    [DataContract(Name = "Summary")]
    public partial class Summary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Summary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Summary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Summary" /> class.
        /// </summary>
        /// <param name="totalOfferCount">The number of unique offers contained in NumberOfOffers. (required).</param>
        /// <param name="numberOfOffers">A list that contains the total number of offers information for given conditions and fulfillment channels..</param>
        /// <param name="lowestPrices">A list of the lowest prices..</param>
        /// <param name="buyBoxPrices">A list of the Buy Box prices..</param>
        /// <param name="listPrice">listPrice.</param>
        /// <param name="competitivePriceThreshold">competitivePriceThreshold.</param>
        /// <param name="suggestedLowerPricePlusShipping">suggestedLowerPricePlusShipping.</param>
        /// <param name="salesRankings">A list of sales rank information for the item, by category..</param>
        /// <param name="buyBoxEligibleOffers">A list that contains the total number of offers that are eligible for the Buy Box for the given conditions and fulfillment channels..</param>
        /// <param name="offersAvailableTime">When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for processing..</param>
        public Summary(int totalOfferCount = default(int), List<OfferCountType> numberOfOffers = default(List<OfferCountType>), List<LowestPriceType> lowestPrices = default(List<LowestPriceType>), List<BuyBoxPriceType> buyBoxPrices = default(List<BuyBoxPriceType>), MoneyType listPrice = default(MoneyType), MoneyType competitivePriceThreshold = default(MoneyType), MoneyType suggestedLowerPricePlusShipping = default(MoneyType), List<SalesRankType> salesRankings = default(List<SalesRankType>), List<OfferCountType> buyBoxEligibleOffers = default(List<OfferCountType>), DateTime offersAvailableTime = default(DateTime))
        {
            this.TotalOfferCount = totalOfferCount;
            this.NumberOfOffers = numberOfOffers;
            this.LowestPrices = lowestPrices;
            this.BuyBoxPrices = buyBoxPrices;
            this.ListPrice = listPrice;
            this.CompetitivePriceThreshold = competitivePriceThreshold;
            this.SuggestedLowerPricePlusShipping = suggestedLowerPricePlusShipping;
            this.SalesRankings = salesRankings;
            this.BuyBoxEligibleOffers = buyBoxEligibleOffers;
            this.OffersAvailableTime = offersAvailableTime;
        }

        /// <summary>
        /// The number of unique offers contained in NumberOfOffers.
        /// </summary>
        /// <value>The number of unique offers contained in NumberOfOffers.</value>
        [DataMember(Name = "TotalOfferCount", IsRequired = true, EmitDefaultValue = true)]
        public int TotalOfferCount { get; set; }

        /// <summary>
        /// A list that contains the total number of offers information for given conditions and fulfillment channels.
        /// </summary>
        /// <value>A list that contains the total number of offers information for given conditions and fulfillment channels.</value>
        [DataMember(Name = "NumberOfOffers", EmitDefaultValue = false)]
        public List<OfferCountType> NumberOfOffers { get; set; }

        /// <summary>
        /// A list of the lowest prices.
        /// </summary>
        /// <value>A list of the lowest prices.</value>
        [DataMember(Name = "LowestPrices", EmitDefaultValue = false)]
        public List<LowestPriceType> LowestPrices { get; set; }

        /// <summary>
        /// A list of the Buy Box prices.
        /// </summary>
        /// <value>A list of the Buy Box prices.</value>
        [DataMember(Name = "BuyBoxPrices", EmitDefaultValue = false)]
        public List<BuyBoxPriceType> BuyBoxPrices { get; set; }

        /// <summary>
        /// Gets or Sets ListPrice
        /// </summary>
        [DataMember(Name = "ListPrice", EmitDefaultValue = false)]
        public MoneyType ListPrice { get; set; }

        /// <summary>
        /// Gets or Sets CompetitivePriceThreshold
        /// </summary>
        [DataMember(Name = "CompetitivePriceThreshold", EmitDefaultValue = false)]
        public MoneyType CompetitivePriceThreshold { get; set; }

        /// <summary>
        /// Gets or Sets SuggestedLowerPricePlusShipping
        /// </summary>
        [DataMember(Name = "SuggestedLowerPricePlusShipping", EmitDefaultValue = false)]
        public MoneyType SuggestedLowerPricePlusShipping { get; set; }

        /// <summary>
        /// A list of sales rank information for the item, by category.
        /// </summary>
        /// <value>A list of sales rank information for the item, by category.</value>
        [DataMember(Name = "SalesRankings", EmitDefaultValue = false)]
        public List<SalesRankType> SalesRankings { get; set; }

        /// <summary>
        /// A list that contains the total number of offers that are eligible for the Buy Box for the given conditions and fulfillment channels.
        /// </summary>
        /// <value>A list that contains the total number of offers that are eligible for the Buy Box for the given conditions and fulfillment channels.</value>
        [DataMember(Name = "BuyBoxEligibleOffers", EmitDefaultValue = false)]
        public List<OfferCountType> BuyBoxEligibleOffers { get; set; }

        /// <summary>
        /// When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for processing.
        /// </summary>
        /// <value>When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for processing.</value>
        [DataMember(Name = "OffersAvailableTime", EmitDefaultValue = false)]
        public DateTime OffersAvailableTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Summary {\n");
            sb.Append("  TotalOfferCount: ").Append(TotalOfferCount).Append("\n");
            sb.Append("  NumberOfOffers: ").Append(NumberOfOffers).Append("\n");
            sb.Append("  LowestPrices: ").Append(LowestPrices).Append("\n");
            sb.Append("  BuyBoxPrices: ").Append(BuyBoxPrices).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  CompetitivePriceThreshold: ").Append(CompetitivePriceThreshold).Append("\n");
            sb.Append("  SuggestedLowerPricePlusShipping: ").Append(SuggestedLowerPricePlusShipping).Append("\n");
            sb.Append("  SalesRankings: ").Append(SalesRankings).Append("\n");
            sb.Append("  BuyBoxEligibleOffers: ").Append(BuyBoxEligibleOffers).Append("\n");
            sb.Append("  OffersAvailableTime: ").Append(OffersAvailableTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
