/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// Contains pricing information that includes special pricing when buying in bulk.
    /// </summary>
    [DataContract(Name = "QuantityDiscountPriceType")]
    public partial class QuantityDiscountPriceType : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets QuantityDiscountType
        /// </summary>
        [DataMember(Name = "quantityDiscountType", IsRequired = true, EmitDefaultValue = true)]
        public QuantityDiscountType QuantityDiscountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuantityDiscountPriceType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuantityDiscountPriceType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuantityDiscountPriceType" /> class.
        /// </summary>
        /// <param name="quantityTier">Indicates at what quantity this price becomes active. (required).</param>
        /// <param name="quantityDiscountType">quantityDiscountType (required).</param>
        /// <param name="listingPrice">listingPrice (required).</param>
        public QuantityDiscountPriceType(int quantityTier = default(int), QuantityDiscountType quantityDiscountType = default(QuantityDiscountType), MoneyType listingPrice = default(MoneyType))
        {
            this.QuantityTier = quantityTier;
            this.QuantityDiscountType = quantityDiscountType;
            // to ensure "listingPrice" is required (not null)
            if (listingPrice == null)
            {
                throw new ArgumentNullException("listingPrice is a required property for QuantityDiscountPriceType and cannot be null");
            }
            this.ListingPrice = listingPrice;
        }

        /// <summary>
        /// Indicates at what quantity this price becomes active.
        /// </summary>
        /// <value>Indicates at what quantity this price becomes active.</value>
        [DataMember(Name = "quantityTier", IsRequired = true, EmitDefaultValue = true)]
        public int QuantityTier { get; set; }

        /// <summary>
        /// Gets or Sets ListingPrice
        /// </summary>
        [DataMember(Name = "listingPrice", IsRequired = true, EmitDefaultValue = true)]
        public MoneyType ListingPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuantityDiscountPriceType {\n");
            sb.Append("  QuantityTier: ").Append(QuantityTier).Append("\n");
            sb.Append("  QuantityDiscountType: ").Append(QuantityDiscountType).Append("\n");
            sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
