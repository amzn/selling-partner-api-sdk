/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// The time range in which an item will likely be shipped once an order has been placed.
    /// </summary>
    [DataContract(Name = "DetailedShippingTimeType")]
    public partial class DetailedShippingTimeType : IValidatableObject
    {
        /// <summary>
        /// Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known, the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.
        /// </summary>
        /// <value>Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known, the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityTypeEnum
        {
            /// <summary>
            /// Enum NOW for value: NOW
            /// </summary>
            [EnumMember(Value = "NOW")]
            NOW = 1,

            /// <summary>
            /// Enum FUTUREWITHOUTDATE for value: FUTURE_WITHOUT_DATE
            /// </summary>
            [EnumMember(Value = "FUTURE_WITHOUT_DATE")]
            FUTUREWITHOUTDATE = 2,

            /// <summary>
            /// Enum FUTUREWITHDATE for value: FUTURE_WITH_DATE
            /// </summary>
            [EnumMember(Value = "FUTURE_WITH_DATE")]
            FUTUREWITHDATE = 3
        }


        /// <summary>
        /// Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known, the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.
        /// </summary>
        /// <value>Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known, the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.</value>
        [DataMember(Name = "availabilityType", EmitDefaultValue = false)]
        public AvailabilityTypeEnum? AvailabilityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedShippingTimeType" /> class.
        /// </summary>
        /// <param name="minimumHours">The minimum time, in hours, that the item will likely be shipped after the order has been placed..</param>
        /// <param name="maximumHours">The maximum time, in hours, that the item will likely be shipped after the order has been placed..</param>
        /// <param name="availableDate">The date when the item will be available for shipping. Only displayed for items that are not currently available for shipping..</param>
        /// <param name="availabilityType">Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known, the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE..</param>
        public DetailedShippingTimeType(long minimumHours = default(long), long maximumHours = default(long), string availableDate = default(string), AvailabilityTypeEnum? availabilityType = default(AvailabilityTypeEnum?))
        {
            this.MinimumHours = minimumHours;
            this.MaximumHours = maximumHours;
            this.AvailableDate = availableDate;
            this.AvailabilityType = availabilityType;
        }

        /// <summary>
        /// The minimum time, in hours, that the item will likely be shipped after the order has been placed.
        /// </summary>
        /// <value>The minimum time, in hours, that the item will likely be shipped after the order has been placed.</value>
        [DataMember(Name = "minimumHours", EmitDefaultValue = false)]
        public long MinimumHours { get; set; }

        /// <summary>
        /// The maximum time, in hours, that the item will likely be shipped after the order has been placed.
        /// </summary>
        /// <value>The maximum time, in hours, that the item will likely be shipped after the order has been placed.</value>
        [DataMember(Name = "maximumHours", EmitDefaultValue = false)]
        public long MaximumHours { get; set; }

        /// <summary>
        /// The date when the item will be available for shipping. Only displayed for items that are not currently available for shipping.
        /// </summary>
        /// <value>The date when the item will be available for shipping. Only displayed for items that are not currently available for shipping.</value>
        [DataMember(Name = "availableDate", EmitDefaultValue = false)]
        public string AvailableDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailedShippingTimeType {\n");
            sb.Append("  MinimumHours: ").Append(MinimumHours).Append("\n");
            sb.Append("  MaximumHours: ").Append(MaximumHours).Append("\n");
            sb.Append("  AvailableDate: ").Append(AvailableDate).Append("\n");
            sb.Append("  AvailabilityType: ").Append(AvailabilityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
