/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// Schema for an individual offer. Object in &#x60;OfferDetailList&#x60;.
    /// </summary>
    [DataContract(Name = "OfferDetail")]
    public partial class OfferDetail : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OfferType
        /// </summary>
        [DataMember(Name = "offerType", EmitDefaultValue = false)]
        public OfferCustomerType? OfferType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferDetail" /> class.
        /// </summary>
        /// <param name="myOffer">When true, this is the seller&#39;s offer..</param>
        /// <param name="offerType">offerType.</param>
        /// <param name="subCondition">The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other. (required).</param>
        /// <param name="sellerId">The seller identifier for the offer..</param>
        /// <param name="conditionNotes">Information about the condition of the item..</param>
        /// <param name="sellerFeedbackRating">sellerFeedbackRating.</param>
        /// <param name="shippingTime">shippingTime (required).</param>
        /// <param name="listingPrice">listingPrice (required).</param>
        /// <param name="quantityDiscountPrices">List of &#x60;QuantityDiscountPrice&#x60; that contains item&#39;s pricing information when buy in bulk..</param>
        /// <param name="points">points.</param>
        /// <param name="shipping">shipping (required).</param>
        /// <param name="shipsFrom">shipsFrom.</param>
        /// <param name="isFulfilledByAmazon">When true, the offer is fulfilled by Amazon. (required).</param>
        /// <param name="primeInformation">primeInformation.</param>
        /// <param name="isBuyBoxWinner">When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN, one that is eligible for Prime and one that is not eligible for Prime..</param>
        /// <param name="isFeaturedMerchant">When true, the seller of the item is eligible to win the Buy Box..</param>
        public OfferDetail(bool myOffer = default(bool), OfferCustomerType? offerType = default(OfferCustomerType?), string subCondition = default(string), string sellerId = default(string), string conditionNotes = default(string), SellerFeedbackType sellerFeedbackRating = default(SellerFeedbackType), DetailedShippingTimeType shippingTime = default(DetailedShippingTimeType), MoneyType listingPrice = default(MoneyType), List<QuantityDiscountPriceType> quantityDiscountPrices = default(List<QuantityDiscountPriceType>), Points points = default(Points), MoneyType shipping = default(MoneyType), ShipsFromType shipsFrom = default(ShipsFromType), bool isFulfilledByAmazon = default(bool), PrimeInformationType primeInformation = default(PrimeInformationType), bool isBuyBoxWinner = default(bool), bool isFeaturedMerchant = default(bool))
        {
            // to ensure "subCondition" is required (not null)
            if (subCondition == null)
            {
                throw new ArgumentNullException("subCondition is a required property for OfferDetail and cannot be null");
            }
            this.SubCondition = subCondition;
            // to ensure "shippingTime" is required (not null)
            if (shippingTime == null)
            {
                throw new ArgumentNullException("shippingTime is a required property for OfferDetail and cannot be null");
            }
            this.ShippingTime = shippingTime;
            // to ensure "listingPrice" is required (not null)
            if (listingPrice == null)
            {
                throw new ArgumentNullException("listingPrice is a required property for OfferDetail and cannot be null");
            }
            this.ListingPrice = listingPrice;
            // to ensure "shipping" is required (not null)
            if (shipping == null)
            {
                throw new ArgumentNullException("shipping is a required property for OfferDetail and cannot be null");
            }
            this.Shipping = shipping;
            this.IsFulfilledByAmazon = isFulfilledByAmazon;
            this.MyOffer = myOffer;
            this.OfferType = offerType;
            this.SellerId = sellerId;
            this.ConditionNotes = conditionNotes;
            this.SellerFeedbackRating = sellerFeedbackRating;
            this.QuantityDiscountPrices = quantityDiscountPrices;
            this.Points = points;
            this.ShipsFrom = shipsFrom;
            this.PrimeInformation = primeInformation;
            this.IsBuyBoxWinner = isBuyBoxWinner;
            this.IsFeaturedMerchant = isFeaturedMerchant;
        }

        /// <summary>
        /// When true, this is the seller&#39;s offer.
        /// </summary>
        /// <value>When true, this is the seller&#39;s offer.</value>
        [DataMember(Name = "MyOffer", EmitDefaultValue = true)]
        public bool MyOffer { get; set; }

        /// <summary>
        /// The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
        /// </summary>
        /// <value>The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.</value>
        [DataMember(Name = "SubCondition", IsRequired = true, EmitDefaultValue = true)]
        public string SubCondition { get; set; }

        /// <summary>
        /// The seller identifier for the offer.
        /// </summary>
        /// <value>The seller identifier for the offer.</value>
        [DataMember(Name = "SellerId", EmitDefaultValue = false)]
        public string SellerId { get; set; }

        /// <summary>
        /// Information about the condition of the item.
        /// </summary>
        /// <value>Information about the condition of the item.</value>
        [DataMember(Name = "ConditionNotes", EmitDefaultValue = false)]
        public string ConditionNotes { get; set; }

        /// <summary>
        /// Gets or Sets SellerFeedbackRating
        /// </summary>
        [DataMember(Name = "SellerFeedbackRating", EmitDefaultValue = false)]
        public SellerFeedbackType SellerFeedbackRating { get; set; }

        /// <summary>
        /// Gets or Sets ShippingTime
        /// </summary>
        [DataMember(Name = "ShippingTime", IsRequired = true, EmitDefaultValue = true)]
        public DetailedShippingTimeType ShippingTime { get; set; }

        /// <summary>
        /// Gets or Sets ListingPrice
        /// </summary>
        [DataMember(Name = "ListingPrice", IsRequired = true, EmitDefaultValue = true)]
        public MoneyType ListingPrice { get; set; }

        /// <summary>
        /// List of &#x60;QuantityDiscountPrice&#x60; that contains item&#39;s pricing information when buy in bulk.
        /// </summary>
        /// <value>List of &#x60;QuantityDiscountPrice&#x60; that contains item&#39;s pricing information when buy in bulk.</value>
        [DataMember(Name = "quantityDiscountPrices", EmitDefaultValue = false)]
        public List<QuantityDiscountPriceType> QuantityDiscountPrices { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "Points", EmitDefaultValue = false)]
        public Points Points { get; set; }

        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name = "Shipping", IsRequired = true, EmitDefaultValue = true)]
        public MoneyType Shipping { get; set; }

        /// <summary>
        /// Gets or Sets ShipsFrom
        /// </summary>
        [DataMember(Name = "ShipsFrom", EmitDefaultValue = false)]
        public ShipsFromType ShipsFrom { get; set; }

        /// <summary>
        /// When true, the offer is fulfilled by Amazon.
        /// </summary>
        /// <value>When true, the offer is fulfilled by Amazon.</value>
        [DataMember(Name = "IsFulfilledByAmazon", IsRequired = true, EmitDefaultValue = true)]
        public bool IsFulfilledByAmazon { get; set; }

        /// <summary>
        /// Gets or Sets PrimeInformation
        /// </summary>
        [DataMember(Name = "PrimeInformation", EmitDefaultValue = false)]
        public PrimeInformationType PrimeInformation { get; set; }

        /// <summary>
        /// When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN, one that is eligible for Prime and one that is not eligible for Prime.
        /// </summary>
        /// <value>When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN, one that is eligible for Prime and one that is not eligible for Prime.</value>
        [DataMember(Name = "IsBuyBoxWinner", EmitDefaultValue = true)]
        public bool IsBuyBoxWinner { get; set; }

        /// <summary>
        /// When true, the seller of the item is eligible to win the Buy Box.
        /// </summary>
        /// <value>When true, the seller of the item is eligible to win the Buy Box.</value>
        [DataMember(Name = "IsFeaturedMerchant", EmitDefaultValue = true)]
        public bool IsFeaturedMerchant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferDetail {\n");
            sb.Append("  MyOffer: ").Append(MyOffer).Append("\n");
            sb.Append("  OfferType: ").Append(OfferType).Append("\n");
            sb.Append("  SubCondition: ").Append(SubCondition).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  ConditionNotes: ").Append(ConditionNotes).Append("\n");
            sb.Append("  SellerFeedbackRating: ").Append(SellerFeedbackRating).Append("\n");
            sb.Append("  ShippingTime: ").Append(ShippingTime).Append("\n");
            sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
            sb.Append("  QuantityDiscountPrices: ").Append(QuantityDiscountPrices).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  ShipsFrom: ").Append(ShipsFrom).Append("\n");
            sb.Append("  IsFulfilledByAmazon: ").Append(IsFulfilledByAmazon).Append("\n");
            sb.Append("  PrimeInformation: ").Append(PrimeInformation).Append("\n");
            sb.Append("  IsBuyBoxWinner: ").Append(IsBuyBoxWinner).Append("\n");
            sb.Append("  IsFeaturedMerchant: ").Append(IsFeaturedMerchant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
