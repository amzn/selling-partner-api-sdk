/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// Schema for competitive pricing information
    /// </summary>
    [DataContract(Name = "CompetitivePriceType")]
    public partial class CompetitivePriceType : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OfferType
        /// </summary>
        [DataMember(Name = "offerType", EmitDefaultValue = false)]
        public OfferCustomerType? OfferType { get; set; }

        /// <summary>
        /// Gets or Sets QuantityDiscountType
        /// </summary>
        [DataMember(Name = "quantityDiscountType", EmitDefaultValue = false)]
        public QuantityDiscountType? QuantityDiscountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitivePriceType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompetitivePriceType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitivePriceType" /> class.
        /// </summary>
        /// <param name="competitivePriceId">The pricing model for each price that is returned.  Possible values:  * 1 - New Buy Box Price. * 2 - Used Buy Box Price. (required).</param>
        /// <param name="price">price (required).</param>
        /// <param name="condition">Indicates the condition of the item whose pricing information is returned. Possible values are: New, Used, Collectible, Refurbished, or Club..</param>
        /// <param name="subcondition">Indicates the subcondition of the item whose pricing information is returned. Possible values are: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other..</param>
        /// <param name="offerType">offerType.</param>
        /// <param name="quantityTier">Indicates at what quantity this price becomes active..</param>
        /// <param name="quantityDiscountType">quantityDiscountType.</param>
        /// <param name="sellerId">The seller identifier for the offer..</param>
        /// <param name="belongsToRequester"> Indicates whether or not the pricing information is for an offer listing that belongs to the requester. The requester is the seller associated with the SellerId that was submitted with the request. Possible values are: true and false..</param>
        public CompetitivePriceType(string competitivePriceId = default(string), PriceType price = default(PriceType), string condition = default(string), string subcondition = default(string), OfferCustomerType? offerType = default(OfferCustomerType?), int quantityTier = default(int), QuantityDiscountType? quantityDiscountType = default(QuantityDiscountType?), string sellerId = default(string), bool belongsToRequester = default(bool))
        {
            // to ensure "competitivePriceId" is required (not null)
            if (competitivePriceId == null)
            {
                throw new ArgumentNullException("competitivePriceId is a required property for CompetitivePriceType and cannot be null");
            }
            this.CompetitivePriceId = competitivePriceId;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for CompetitivePriceType and cannot be null");
            }
            this.Price = price;
            this.Condition = condition;
            this.Subcondition = subcondition;
            this.OfferType = offerType;
            this.QuantityTier = quantityTier;
            this.QuantityDiscountType = quantityDiscountType;
            this.SellerId = sellerId;
            this.BelongsToRequester = belongsToRequester;
        }

        /// <summary>
        /// The pricing model for each price that is returned.  Possible values:  * 1 - New Buy Box Price. * 2 - Used Buy Box Price.
        /// </summary>
        /// <value>The pricing model for each price that is returned.  Possible values:  * 1 - New Buy Box Price. * 2 - Used Buy Box Price.</value>
        [DataMember(Name = "CompetitivePriceId", IsRequired = true, EmitDefaultValue = true)]
        public string CompetitivePriceId { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "Price", IsRequired = true, EmitDefaultValue = true)]
        public PriceType Price { get; set; }

        /// <summary>
        /// Indicates the condition of the item whose pricing information is returned. Possible values are: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        /// <value>Indicates the condition of the item whose pricing information is returned. Possible values are: New, Used, Collectible, Refurbished, or Club.</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public string Condition { get; set; }

        /// <summary>
        /// Indicates the subcondition of the item whose pricing information is returned. Possible values are: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
        /// </summary>
        /// <value>Indicates the subcondition of the item whose pricing information is returned. Possible values are: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.</value>
        [DataMember(Name = "subcondition", EmitDefaultValue = false)]
        public string Subcondition { get; set; }

        /// <summary>
        /// Indicates at what quantity this price becomes active.
        /// </summary>
        /// <value>Indicates at what quantity this price becomes active.</value>
        [DataMember(Name = "quantityTier", EmitDefaultValue = false)]
        public int QuantityTier { get; set; }

        /// <summary>
        /// The seller identifier for the offer.
        /// </summary>
        /// <value>The seller identifier for the offer.</value>
        [DataMember(Name = "sellerId", EmitDefaultValue = false)]
        public string SellerId { get; set; }

        /// <summary>
        ///  Indicates whether or not the pricing information is for an offer listing that belongs to the requester. The requester is the seller associated with the SellerId that was submitted with the request. Possible values are: true and false.
        /// </summary>
        /// <value> Indicates whether or not the pricing information is for an offer listing that belongs to the requester. The requester is the seller associated with the SellerId that was submitted with the request. Possible values are: true and false.</value>
        [DataMember(Name = "belongsToRequester", EmitDefaultValue = true)]
        public bool BelongsToRequester { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompetitivePriceType {\n");
            sb.Append("  CompetitivePriceId: ").Append(CompetitivePriceId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Subcondition: ").Append(Subcondition).Append("\n");
            sb.Append("  OfferType: ").Append(OfferType).Append("\n");
            sb.Append("  QuantityTier: ").Append(QuantityTier).Append("\n");
            sb.Append("  QuantityDiscountType: ").Append(QuantityDiscountType).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  BelongsToRequester: ").Append(BelongsToRequester).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
