/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// An item.
    /// </summary>
    [DataContract(Name = "Product")]
    public partial class Product : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="identifiers">identifiers (required).</param>
        /// <param name="attributeSets">A list of product attributes if they are applicable to the product that is returned..</param>
        /// <param name="relationships">A list that contains product variation information, if applicable..</param>
        /// <param name="competitivePricing">competitivePricing.</param>
        /// <param name="salesRankings">A list of sales rank information for the item, by category..</param>
        /// <param name="offers">A list of offers..</param>
        public Product(IdentifierType identifiers = default(IdentifierType), List<Object> attributeSets = default(List<Object>), List<Object> relationships = default(List<Object>), CompetitivePricingType competitivePricing = default(CompetitivePricingType), List<SalesRankType> salesRankings = default(List<SalesRankType>), List<OfferType> offers = default(List<OfferType>))
        {
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new ArgumentNullException("identifiers is a required property for Product and cannot be null");
            }
            this.Identifiers = identifiers;
            this.AttributeSets = attributeSets;
            this.Relationships = relationships;
            this.CompetitivePricing = competitivePricing;
            this.SalesRankings = salesRankings;
            this.Offers = offers;
        }

        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name = "Identifiers", IsRequired = true, EmitDefaultValue = true)]
        public IdentifierType Identifiers { get; set; }

        /// <summary>
        /// A list of product attributes if they are applicable to the product that is returned.
        /// </summary>
        /// <value>A list of product attributes if they are applicable to the product that is returned.</value>
        [DataMember(Name = "AttributeSets", EmitDefaultValue = false)]
        public List<Object> AttributeSets { get; set; }

        /// <summary>
        /// A list that contains product variation information, if applicable.
        /// </summary>
        /// <value>A list that contains product variation information, if applicable.</value>
        [DataMember(Name = "Relationships", EmitDefaultValue = false)]
        public List<Object> Relationships { get; set; }

        /// <summary>
        /// Gets or Sets CompetitivePricing
        /// </summary>
        [DataMember(Name = "CompetitivePricing", EmitDefaultValue = false)]
        public CompetitivePricingType CompetitivePricing { get; set; }

        /// <summary>
        /// A list of sales rank information for the item, by category.
        /// </summary>
        /// <value>A list of sales rank information for the item, by category.</value>
        [DataMember(Name = "SalesRankings", EmitDefaultValue = false)]
        public List<SalesRankType> SalesRankings { get; set; }

        /// <summary>
        /// A list of offers.
        /// </summary>
        /// <value>A list of offers.</value>
        [DataMember(Name = "Offers", EmitDefaultValue = false)]
        public List<OfferType> Offers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  AttributeSets: ").Append(AttributeSets).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  CompetitivePricing: ").Append(CompetitivePricing).Append("\n");
            sb.Append("  SalesRankings: ").Append(SalesRankings).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
