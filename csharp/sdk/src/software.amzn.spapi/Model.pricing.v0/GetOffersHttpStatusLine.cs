/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v0
{
    /// <summary>
    /// The HTTP status line associated with the response.  For more information, consult [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html).
    /// </summary>
    [DataContract(Name = "GetOffersHttpStatusLine")]
    public partial class GetOffersHttpStatusLine : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOffersHttpStatusLine" /> class.
        /// </summary>
        /// <param name="statusCode">The HTTP response Status Code..</param>
        /// <param name="reasonPhrase">The HTTP response Reason-Phase..</param>
        public GetOffersHttpStatusLine(int statusCode = default(int), string reasonPhrase = default(string))
        {
            this.StatusCode = statusCode;
            this.ReasonPhrase = reasonPhrase;
        }

        /// <summary>
        /// The HTTP response Status Code.
        /// </summary>
        /// <value>The HTTP response Status Code.</value>
        [DataMember(Name = "statusCode", EmitDefaultValue = false)]
        public int StatusCode { get; set; }

        /// <summary>
        /// The HTTP response Reason-Phase.
        /// </summary>
        /// <value>The HTTP response Reason-Phase.</value>
        [DataMember(Name = "reasonPhrase", EmitDefaultValue = false)]
        public string ReasonPhrase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetOffersHttpStatusLine {\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  ReasonPhrase: ").Append(ReasonPhrase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StatusCode (int) maximum
            if (this.StatusCode > (int)599)
            {
                yield return new ValidationResult("Invalid value for StatusCode, must be a value less than or equal to 599.", new [] { "StatusCode" });
            }

            // StatusCode (int) minimum
            if (this.StatusCode < (int)100)
            {
                yield return new ValidationResult("Invalid value for StatusCode, must be a value greater than or equal to 100.", new [] { "StatusCode" });
            }

            yield break;
        }
    }

}
