/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// The delivery status of the package.
    /// </summary>
    [DataContract(Name = "PackageDeliveryStatus")]
    public partial class PackageDeliveryStatus : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public PackageStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets SubStatus
        /// </summary>
        [DataMember(Name = "subStatus", EmitDefaultValue = false)]
        public PackageSubStatus? SubStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageDeliveryStatus" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="subStatus">subStatus.</param>
        /// <param name="reason">The reason for the sub-status..</param>
        public PackageDeliveryStatus(PackageStatus? status = default(PackageStatus?), PackageSubStatus? subStatus = default(PackageSubStatus?), string reason = default(string))
        {
            this.Status = status;
            this.SubStatus = subStatus;
            this.Reason = reason;
        }

        /// <summary>
        /// The reason for the sub-status.
        /// </summary>
        /// <value>The reason for the sub-status.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageDeliveryStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubStatus: ").Append(SubStatus).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Reason (string) maxLength
            if (this.Reason != null && this.Reason.Length > 128)
            {
                yield return new ValidationResult("Invalid value for Reason, length must be less than 128.", new [] { "Reason" });
            }

            yield break;
        }
    }

}
