/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// A package that is created to ship one or more of a shipment&#39;s line items.
    /// </summary>
    [DataContract(Name = "Package")]
    public partial class Package : IValidatableObject
    {
        /// <summary>
        /// The current status of the package.
        /// </summary>
        /// <value>The current status of the package.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum CREATED for value: CREATED
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED = 1,

            /// <summary>
            /// Enum PICKUPSLOTRETRIEVED for value: PICKUP_SLOT_RETRIEVED
            /// </summary>
            [EnumMember(Value = "PICKUP_SLOT_RETRIEVED")]
            PICKUPSLOTRETRIEVED = 2,

            /// <summary>
            /// Enum INVOICEGENERATED for value: INVOICE_GENERATED
            /// </summary>
            [EnumMember(Value = "INVOICE_GENERATED")]
            INVOICEGENERATED = 3,

            /// <summary>
            /// Enum SHIPLABELGENERATED for value: SHIPLABEL_GENERATED
            /// </summary>
            [EnumMember(Value = "SHIPLABEL_GENERATED")]
            SHIPLABELGENERATED = 4,

            /// <summary>
            /// Enum SHIPPED for value: SHIPPED
            /// </summary>
            [EnumMember(Value = "SHIPPED")]
            SHIPPED = 5,

            /// <summary>
            /// Enum DELIVERED for value: DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVERED = 6,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 7
        }


        /// <summary>
        /// The current status of the package.
        /// </summary>
        /// <value>The current status of the package.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Whether the package requires standard handling or extra care.
        /// </summary>
        /// <value>Whether the package requires standard handling or extra care.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PackageHandlingRequirementsEnum
        {
            /// <summary>
            /// Enum NORMAL for value: NORMAL
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL = 1,

            /// <summary>
            /// Enum FRAGILE for value: FRAGILE
            /// </summary>
            [EnumMember(Value = "FRAGILE")]
            FRAGILE = 2
        }


        /// <summary>
        /// Whether the package requires standard handling or extra care.
        /// </summary>
        /// <value>Whether the package requires standard handling or extra care.</value>
        /*
        <example>FRAGILE</example>
        */
        [DataMember(Name = "packageHandlingRequirements", EmitDefaultValue = false)]
        public PackageHandlingRequirementsEnum? PackageHandlingRequirements { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Package() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        /// <param name="id">An ID that uniquely identifies a package within a shipment. (required).</param>
        /// <param name="dimensions">dimensions (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="hazmatLabels">The optional list of HAZMAT labels applied to the package..</param>
        /// <param name="packageLineItems">The list of line items in a package. (required).</param>
        /// <param name="status">The current status of the package..</param>
        /// <param name="packageHandlingRequirements">Whether the package requires standard handling or extra care..</param>
        public Package(string id = default(string), PackageDimensions dimensions = default(PackageDimensions), Weight weight = default(Weight), List<string> hazmatLabels = default(List<string>), List<PackageLineItem> packageLineItems = default(List<PackageLineItem>), StatusEnum? status = default(StatusEnum?), PackageHandlingRequirementsEnum? packageHandlingRequirements = default(PackageHandlingRequirementsEnum?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Package and cannot be null");
            }
            this.Id = id;
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new ArgumentNullException("dimensions is a required property for Package and cannot be null");
            }
            this.Dimensions = dimensions;
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new ArgumentNullException("weight is a required property for Package and cannot be null");
            }
            this.Weight = weight;
            // to ensure "packageLineItems" is required (not null)
            if (packageLineItems == null)
            {
                throw new ArgumentNullException("packageLineItems is a required property for Package and cannot be null");
            }
            this.PackageLineItems = packageLineItems;
            this.HazmatLabels = hazmatLabels;
            this.Status = status;
            this.PackageHandlingRequirements = packageHandlingRequirements;
        }

        /// <summary>
        /// An ID that uniquely identifies a package within a shipment.
        /// </summary>
        /// <value>An ID that uniquely identifies a package within a shipment.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", IsRequired = true, EmitDefaultValue = true)]
        public PackageDimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public Weight Weight { get; set; }

        /// <summary>
        /// The optional list of HAZMAT labels applied to the package.
        /// </summary>
        /// <value>The optional list of HAZMAT labels applied to the package.</value>
        [DataMember(Name = "hazmatLabels", EmitDefaultValue = false)]
        public List<string> HazmatLabels { get; set; }

        /// <summary>
        /// The list of line items in a package.
        /// </summary>
        /// <value>The list of line items in a package.</value>
        [DataMember(Name = "packageLineItems", IsRequired = true, EmitDefaultValue = true)]
        public List<PackageLineItem> PackageLineItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Package {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  HazmatLabels: ").Append(HazmatLabels).Append("\n");
            sb.Append("  PackageLineItems: ").Append(PackageLineItems).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PackageHandlingRequirements: ").Append(PackageHandlingRequirements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
