/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Information about a line item in a shipment.
    /// </summary>
    [DataContract(Name = "ShipmentLineItem")]
    public partial class ShipmentLineItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PieceType
        /// </summary>
        [DataMember(Name = "pieceType", EmitDefaultValue = false)]
        public PieceType? PieceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentLineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentLineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentLineItem" /> class.
        /// </summary>
        /// <param name="shipmentLineItemId">An identifier for a shipment&#39;s line item. This identifier is guaranteed to be unique within the scope of its containing shipment. (required).</param>
        /// <param name="merchantSku">The seller SKU of a product (catalog item). A unique number assigned by the seller when listing an item. (required).</param>
        /// <param name="numberOfUnits">The number of items of the SKU in this line item. (required).</param>
        /// <param name="serialNumbers">The serial numbers for each item in this line item..</param>
        /// <param name="pieceType">pieceType.</param>
        /// <param name="hazmatLabels">A list of HAZMAT label identifiers that must be applied to the packages for this line item..</param>
        /// <param name="giftAttributes">giftAttributes.</param>
        /// <param name="charges">The charges associated with the shipment. (required).</param>
        /// <param name="cancellations">A list of cancellations for the given line item.  **Note:** Currently, SmartConnect does not support partial cancellation of a shipment or its line items. This list will contain a single value with all the cancellation details..</param>
        /// <param name="hsnCode">The HSN code of SKU in this line item..</param>
        /// <param name="recommendedCountryOfOrigin">A two-letter country code, as defined by the ISO-3166 alpha-2 standard..</param>
        /// <param name="countryOfOrigin">A two-letter country code, as defined by the ISO-3166 alpha-2 standard..</param>
        /// <param name="recommendedCurrencyCode">The three digit currency code of the currency recommended by the marketplace, in ISO 4217 format..</param>
        /// <param name="itemValue">itemValue.</param>
        /// <param name="complianceAttributes">complianceAttributes (required).</param>
        /// <param name="customAttributes">A list of custom passthrough attributes. For details on these attributes, reach out to your respective program teams at Amazon..</param>
        public ShipmentLineItem(string shipmentLineItemId = default(string), string merchantSku = default(string), int numberOfUnits = default(int), List<string> serialNumbers = default(List<string>), PieceType? pieceType = default(PieceType?), List<string> hazmatLabels = default(List<string>), GiftAttributes giftAttributes = default(GiftAttributes), List<Charge> charges = default(List<Charge>), List<Cancellation> cancellations = default(List<Cancellation>), string hsnCode = default(string), string recommendedCountryOfOrigin = default(string), string countryOfOrigin = default(string), string recommendedCurrencyCode = default(string), Amount itemValue = default(Amount), ComplianceAttributes complianceAttributes = default(ComplianceAttributes), List<CustomAttribute> customAttributes = default(List<CustomAttribute>))
        {
            // to ensure "shipmentLineItemId" is required (not null)
            if (shipmentLineItemId == null)
            {
                throw new ArgumentNullException("shipmentLineItemId is a required property for ShipmentLineItem and cannot be null");
            }
            this.ShipmentLineItemId = shipmentLineItemId;
            // to ensure "merchantSku" is required (not null)
            if (merchantSku == null)
            {
                throw new ArgumentNullException("merchantSku is a required property for ShipmentLineItem and cannot be null");
            }
            this.MerchantSku = merchantSku;
            this.NumberOfUnits = numberOfUnits;
            // to ensure "charges" is required (not null)
            if (charges == null)
            {
                throw new ArgumentNullException("charges is a required property for ShipmentLineItem and cannot be null");
            }
            this.Charges = charges;
            // to ensure "complianceAttributes" is required (not null)
            if (complianceAttributes == null)
            {
                throw new ArgumentNullException("complianceAttributes is a required property for ShipmentLineItem and cannot be null");
            }
            this.ComplianceAttributes = complianceAttributes;
            this.SerialNumbers = serialNumbers;
            this.PieceType = pieceType;
            this.HazmatLabels = hazmatLabels;
            this.GiftAttributes = giftAttributes;
            this.Cancellations = cancellations;
            this.HsnCode = hsnCode;
            this.RecommendedCountryOfOrigin = recommendedCountryOfOrigin;
            this.CountryOfOrigin = countryOfOrigin;
            this.RecommendedCurrencyCode = recommendedCurrencyCode;
            this.ItemValue = itemValue;
            this.CustomAttributes = customAttributes;
        }

        /// <summary>
        /// An identifier for a shipment&#39;s line item. This identifier is guaranteed to be unique within the scope of its containing shipment.
        /// </summary>
        /// <value>An identifier for a shipment&#39;s line item. This identifier is guaranteed to be unique within the scope of its containing shipment.</value>
        [DataMember(Name = "shipmentLineItemId", IsRequired = true, EmitDefaultValue = true)]
        public string ShipmentLineItemId { get; set; }

        /// <summary>
        /// The seller SKU of a product (catalog item). A unique number assigned by the seller when listing an item.
        /// </summary>
        /// <value>The seller SKU of a product (catalog item). A unique number assigned by the seller when listing an item.</value>
        [DataMember(Name = "merchantSku", IsRequired = true, EmitDefaultValue = true)]
        public string MerchantSku { get; set; }

        /// <summary>
        /// The number of items of the SKU in this line item.
        /// </summary>
        /// <value>The number of items of the SKU in this line item.</value>
        [DataMember(Name = "numberOfUnits", IsRequired = true, EmitDefaultValue = true)]
        public int NumberOfUnits { get; set; }

        /// <summary>
        /// The serial numbers for each item in this line item.
        /// </summary>
        /// <value>The serial numbers for each item in this line item.</value>
        [DataMember(Name = "serialNumbers", EmitDefaultValue = false)]
        public List<string> SerialNumbers { get; set; }

        /// <summary>
        /// A list of HAZMAT label identifiers that must be applied to the packages for this line item.
        /// </summary>
        /// <value>A list of HAZMAT label identifiers that must be applied to the packages for this line item.</value>
        [DataMember(Name = "hazmatLabels", EmitDefaultValue = false)]
        public List<string> HazmatLabels { get; set; }

        /// <summary>
        /// Gets or Sets GiftAttributes
        /// </summary>
        [DataMember(Name = "giftAttributes", EmitDefaultValue = false)]
        public GiftAttributes GiftAttributes { get; set; }

        /// <summary>
        /// The charges associated with the shipment.
        /// </summary>
        /// <value>The charges associated with the shipment.</value>
        [DataMember(Name = "charges", IsRequired = true, EmitDefaultValue = true)]
        public List<Charge> Charges { get; set; }

        /// <summary>
        /// A list of cancellations for the given line item.  **Note:** Currently, SmartConnect does not support partial cancellation of a shipment or its line items. This list will contain a single value with all the cancellation details.
        /// </summary>
        /// <value>A list of cancellations for the given line item.  **Note:** Currently, SmartConnect does not support partial cancellation of a shipment or its line items. This list will contain a single value with all the cancellation details.</value>
        [DataMember(Name = "cancellations", EmitDefaultValue = false)]
        public List<Cancellation> Cancellations { get; set; }

        /// <summary>
        /// The HSN code of SKU in this line item.
        /// </summary>
        /// <value>The HSN code of SKU in this line item.</value>
        [DataMember(Name = "hsnCode", EmitDefaultValue = false)]
        public string HsnCode { get; set; }

        /// <summary>
        /// A two-letter country code, as defined by the ISO-3166 alpha-2 standard.
        /// </summary>
        /// <value>A two-letter country code, as defined by the ISO-3166 alpha-2 standard.</value>
        [DataMember(Name = "recommendedCountryOfOrigin", EmitDefaultValue = false)]
        public string RecommendedCountryOfOrigin { get; set; }

        /// <summary>
        /// A two-letter country code, as defined by the ISO-3166 alpha-2 standard.
        /// </summary>
        /// <value>A two-letter country code, as defined by the ISO-3166 alpha-2 standard.</value>
        [DataMember(Name = "countryOfOrigin", EmitDefaultValue = false)]
        public string CountryOfOrigin { get; set; }

        /// <summary>
        /// The three digit currency code of the currency recommended by the marketplace, in ISO 4217 format.
        /// </summary>
        /// <value>The three digit currency code of the currency recommended by the marketplace, in ISO 4217 format.</value>
        [DataMember(Name = "recommendedCurrencyCode", EmitDefaultValue = false)]
        public string RecommendedCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ItemValue
        /// </summary>
        [DataMember(Name = "itemValue", EmitDefaultValue = false)]
        public Amount ItemValue { get; set; }

        /// <summary>
        /// Gets or Sets ComplianceAttributes
        /// </summary>
        [DataMember(Name = "complianceAttributes", IsRequired = true, EmitDefaultValue = true)]
        public ComplianceAttributes ComplianceAttributes { get; set; }

        /// <summary>
        /// A list of custom passthrough attributes. For details on these attributes, reach out to your respective program teams at Amazon.
        /// </summary>
        /// <value>A list of custom passthrough attributes. For details on these attributes, reach out to your respective program teams at Amazon.</value>
        [DataMember(Name = "customAttributes", EmitDefaultValue = false)]
        public List<CustomAttribute> CustomAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentLineItem {\n");
            sb.Append("  ShipmentLineItemId: ").Append(ShipmentLineItemId).Append("\n");
            sb.Append("  MerchantSku: ").Append(MerchantSku).Append("\n");
            sb.Append("  NumberOfUnits: ").Append(NumberOfUnits).Append("\n");
            sb.Append("  SerialNumbers: ").Append(SerialNumbers).Append("\n");
            sb.Append("  PieceType: ").Append(PieceType).Append("\n");
            sb.Append("  HazmatLabels: ").Append(HazmatLabels).Append("\n");
            sb.Append("  GiftAttributes: ").Append(GiftAttributes).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("  Cancellations: ").Append(Cancellations).Append("\n");
            sb.Append("  HsnCode: ").Append(HsnCode).Append("\n");
            sb.Append("  RecommendedCountryOfOrigin: ").Append(RecommendedCountryOfOrigin).Append("\n");
            sb.Append("  CountryOfOrigin: ").Append(CountryOfOrigin).Append("\n");
            sb.Append("  RecommendedCurrencyCode: ").Append(RecommendedCurrencyCode).Append("\n");
            sb.Append("  ItemValue: ").Append(ItemValue).Append("\n");
            sb.Append("  ComplianceAttributes: ").Append(ComplianceAttributes).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfUnits (int) minimum
            if (this.NumberOfUnits < (int)1)
            {
                yield return new ValidationResult("Invalid value for NumberOfUnits, must be a value greater than or equal to 1.", new [] { "NumberOfUnits" });
            }

            yield break;
        }
    }

}
