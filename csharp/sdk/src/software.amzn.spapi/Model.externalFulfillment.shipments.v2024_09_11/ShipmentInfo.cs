/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// High-level details of the shipment.
    /// </summary>
    [DataContract(Name = "ShipmentInfo")]
    public partial class ShipmentInfo : IValidatableObject
    {
        /// <summary>
        /// The type of shipment.
        /// </summary>
        /// <value>The type of shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShipmentTypeEnum
        {
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 1,

            /// <summary>
            /// Enum EXCHANGE for value: EXCHANGE
            /// </summary>
            [EnumMember(Value = "EXCHANGE")]
            EXCHANGE = 2,

            /// <summary>
            /// Enum REPLACEMENT for value: REPLACEMENT
            /// </summary>
            [EnumMember(Value = "REPLACEMENT")]
            REPLACEMENT = 3
        }


        /// <summary>
        /// The type of shipment.
        /// </summary>
        /// <value>The type of shipment.</value>
        /*
        <example>NEW</example>
        */
        [DataMember(Name = "shipmentType", IsRequired = true, EmitDefaultValue = true)]
        public ShipmentTypeEnum ShipmentType { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", IsRequired = true, EmitDefaultValue = true)]
        public Priority Priority { get; set; }
        /// <summary>
        /// The source of the order operation.
        /// </summary>
        /// <value>The source of the order operation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingSourceEnum
        {
            /// <summary>
            /// Enum EXTERNALPLATFORM for value: EXTERNAL_PLATFORM
            /// </summary>
            [EnumMember(Value = "EXTERNAL_PLATFORM")]
            EXTERNALPLATFORM = 1,

            /// <summary>
            /// Enum INTERNALPLATFORM for value: INTERNAL_PLATFORM
            /// </summary>
            [EnumMember(Value = "INTERNAL_PLATFORM")]
            INTERNALPLATFORM = 2
        }


        /// <summary>
        /// The source of the order operation.
        /// </summary>
        /// <value>The source of the order operation.</value>
        [DataMember(Name = "processingSource", EmitDefaultValue = false)]
        public ProcessingSourceEnum? ProcessingSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentInfo" /> class.
        /// </summary>
        /// <param name="shipmentType">The type of shipment. (required).</param>
        /// <param name="originalShipmentInfo">originalShipmentInfo.</param>
        /// <param name="numberOfUnits">Total number of units in the shipment. (required).</param>
        /// <param name="priority">priority (required).</param>
        /// <param name="buyerOrderId">The buyer&#39;s order ID. (required).</param>
        /// <param name="orderStatesEligibleForRejection">A list of order statuses for which the marketplace allows order rejection (seller cancellation). If the order has a status that does not belong to this list, then seller cancellation is not possible..</param>
        /// <param name="orderPlacedTimestamp">The timestamp of when the order was placed, in UTC.</param>
        /// <param name="processingSource">The source of the order operation..</param>
        public ShipmentInfo(ShipmentTypeEnum shipmentType = default(ShipmentTypeEnum), ReplacedShipmentInfo originalShipmentInfo = default(ReplacedShipmentInfo), int numberOfUnits = default(int), Priority priority = default(Priority), string buyerOrderId = default(string), List<string> orderStatesEligibleForRejection = default(List<string>), string orderPlacedTimestamp = default(string), ProcessingSourceEnum? processingSource = default(ProcessingSourceEnum?))
        {
            this.ShipmentType = shipmentType;
            this.NumberOfUnits = numberOfUnits;
            this.Priority = priority;
            // to ensure "buyerOrderId" is required (not null)
            if (buyerOrderId == null)
            {
                throw new ArgumentNullException("buyerOrderId is a required property for ShipmentInfo and cannot be null");
            }
            this.BuyerOrderId = buyerOrderId;
            this.OriginalShipmentInfo = originalShipmentInfo;
            this.OrderStatesEligibleForRejection = orderStatesEligibleForRejection;
            this.OrderPlacedTimestamp = orderPlacedTimestamp;
            this.ProcessingSource = processingSource;
        }

        /// <summary>
        /// Gets or Sets OriginalShipmentInfo
        /// </summary>
        [DataMember(Name = "originalShipmentInfo", EmitDefaultValue = false)]
        public ReplacedShipmentInfo OriginalShipmentInfo { get; set; }

        /// <summary>
        /// Total number of units in the shipment.
        /// </summary>
        /// <value>Total number of units in the shipment.</value>
        [DataMember(Name = "numberOfUnits", IsRequired = true, EmitDefaultValue = true)]
        public int NumberOfUnits { get; set; }

        /// <summary>
        /// The buyer&#39;s order ID.
        /// </summary>
        /// <value>The buyer&#39;s order ID.</value>
        [DataMember(Name = "buyerOrderId", IsRequired = true, EmitDefaultValue = true)]
        public string BuyerOrderId { get; set; }

        /// <summary>
        /// A list of order statuses for which the marketplace allows order rejection (seller cancellation). If the order has a status that does not belong to this list, then seller cancellation is not possible.
        /// </summary>
        /// <value>A list of order statuses for which the marketplace allows order rejection (seller cancellation). If the order has a status that does not belong to this list, then seller cancellation is not possible.</value>
        [DataMember(Name = "orderStatesEligibleForRejection", EmitDefaultValue = false)]
        public List<string> OrderStatesEligibleForRejection { get; set; }

        /// <summary>
        /// The timestamp of when the order was placed, in UTC
        /// </summary>
        /// <value>The timestamp of when the order was placed, in UTC</value>
        [DataMember(Name = "orderPlacedTimestamp", EmitDefaultValue = false)]
        public string OrderPlacedTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentInfo {\n");
            sb.Append("  ShipmentType: ").Append(ShipmentType).Append("\n");
            sb.Append("  OriginalShipmentInfo: ").Append(OriginalShipmentInfo).Append("\n");
            sb.Append("  NumberOfUnits: ").Append(NumberOfUnits).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  BuyerOrderId: ").Append(BuyerOrderId).Append("\n");
            sb.Append("  OrderStatesEligibleForRejection: ").Append(OrderStatesEligibleForRejection).Append("\n");
            sb.Append("  OrderPlacedTimestamp: ").Append(OrderPlacedTimestamp).Append("\n");
            sb.Append("  ProcessingSource: ").Append(ProcessingSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfUnits (int) minimum
            if (this.NumberOfUnits < (int)1)
            {
                yield return new ValidationResult("Invalid value for NumberOfUnits, must be a value greater than or equal to 1.", new [] { "NumberOfUnits" });
            }

            yield break;
        }
    }

}
