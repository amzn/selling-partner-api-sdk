/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Information about any gift wrapping that is needed for this line item.
    /// </summary>
    [DataContract(Name = "GiftAttributes")]
    public partial class GiftAttributes : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets GiftWrapRequirement
        /// </summary>
        [DataMember(Name = "giftWrapRequirement", IsRequired = true, EmitDefaultValue = true)]
        public RequirementLevel GiftWrapRequirement { get; set; }

        /// <summary>
        /// Gets or Sets GiftMessagePresence
        /// </summary>
        [DataMember(Name = "giftMessagePresence", IsRequired = true, EmitDefaultValue = true)]
        public PresenceStatus GiftMessagePresence { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GiftAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GiftAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GiftAttributes" /> class.
        /// </summary>
        /// <param name="giftWrapRequirement">giftWrapRequirement (required).</param>
        /// <param name="giftWrapLabel">The label to be printed on the wrapped gift..</param>
        /// <param name="giftMessagePresence">giftMessagePresence (required).</param>
        /// <param name="giftMessage">giftMessage.</param>
        public GiftAttributes(RequirementLevel giftWrapRequirement = default(RequirementLevel), string giftWrapLabel = default(string), PresenceStatus giftMessagePresence = default(PresenceStatus), Document giftMessage = default(Document))
        {
            this.GiftWrapRequirement = giftWrapRequirement;
            this.GiftMessagePresence = giftMessagePresence;
            this.GiftWrapLabel = giftWrapLabel;
            this.GiftMessage = giftMessage;
        }

        /// <summary>
        /// The label to be printed on the wrapped gift.
        /// </summary>
        /// <value>The label to be printed on the wrapped gift.</value>
        [DataMember(Name = "giftWrapLabel", EmitDefaultValue = false)]
        public string GiftWrapLabel { get; set; }

        /// <summary>
        /// Gets or Sets GiftMessage
        /// </summary>
        [DataMember(Name = "giftMessage", EmitDefaultValue = false)]
        public Document GiftMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GiftAttributes {\n");
            sb.Append("  GiftWrapRequirement: ").Append(GiftWrapRequirement).Append("\n");
            sb.Append("  GiftWrapLabel: ").Append(GiftWrapLabel).Append("\n");
            sb.Append("  GiftMessagePresence: ").Append(GiftMessagePresence).Append("\n");
            sb.Append("  GiftMessage: ").Append(GiftMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
