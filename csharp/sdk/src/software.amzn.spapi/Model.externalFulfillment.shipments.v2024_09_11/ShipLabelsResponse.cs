/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// The response to the &#x60;generateShipLabels&#x60; operation.
    /// </summary>
    [DataContract(Name = "ShipLabelsResponse")]
    public partial class ShipLabelsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipLabelsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipLabelsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipLabelsResponse" /> class.
        /// </summary>
        /// <param name="packageShipLabelList">A list of label documents for each package specified in the request. In case of partial failures when generating labels, the &#x60;isErrored&#x60; and &#x60;errorDetails&#x60; attributes detail the cause of failure. (required).</param>
        public ShipLabelsResponse(List<PackageShipLabel> packageShipLabelList = default(List<PackageShipLabel>))
        {
            // to ensure "packageShipLabelList" is required (not null)
            if (packageShipLabelList == null)
            {
                throw new ArgumentNullException("packageShipLabelList is a required property for ShipLabelsResponse and cannot be null");
            }
            this.PackageShipLabelList = packageShipLabelList;
        }

        /// <summary>
        /// A list of label documents for each package specified in the request. In case of partial failures when generating labels, the &#x60;isErrored&#x60; and &#x60;errorDetails&#x60; attributes detail the cause of failure.
        /// </summary>
        /// <value>A list of label documents for each package specified in the request. In case of partial failures when generating labels, the &#x60;isErrored&#x60; and &#x60;errorDetails&#x60; attributes detail the cause of failure.</value>
        [DataMember(Name = "packageShipLabelList", IsRequired = true, EmitDefaultValue = true)]
        public List<PackageShipLabel> PackageShipLabelList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipLabelsResponse {\n");
            sb.Append("  PackageShipLabelList: ").Append(PackageShipLabelList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
