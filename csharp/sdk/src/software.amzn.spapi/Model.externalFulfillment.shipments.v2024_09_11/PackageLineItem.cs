/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// A line item in a package.
    /// </summary>
    [DataContract(Name = "PackageLineItem")]
    public partial class PackageLineItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageLineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PackageLineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageLineItem" /> class.
        /// </summary>
        /// <param name="packageLineItemId">The line item ID. (required).</param>
        /// <param name="quantity">The number of items of a particular line item of a shipment that are packed into the package. (required).</param>
        /// <param name="serialNumbers">The list of serial numbers of items in the package, if required to be provided..</param>
        /// <param name="pieces">The number of pieces of a multi-piece item that are in this package. This is applicable only for items that are shipped in multiple pieces..</param>
        /// <param name="countryOfOrigin">A two-letter country code, as defined by the ISO-3166 alpha-2 standard..</param>
        /// <param name="itemValue">itemValue.</param>
        public PackageLineItem(string packageLineItemId = default(string), int quantity = default(int), List<string> serialNumbers = default(List<string>), int pieces = default(int), string countryOfOrigin = default(string), Amount itemValue = default(Amount))
        {
            // to ensure "packageLineItemId" is required (not null)
            if (packageLineItemId == null)
            {
                throw new ArgumentNullException("packageLineItemId is a required property for PackageLineItem and cannot be null");
            }
            this.PackageLineItemId = packageLineItemId;
            this.Quantity = quantity;
            this.SerialNumbers = serialNumbers;
            this.Pieces = pieces;
            this.CountryOfOrigin = countryOfOrigin;
            this.ItemValue = itemValue;
        }

        /// <summary>
        /// The line item ID.
        /// </summary>
        /// <value>The line item ID.</value>
        [DataMember(Name = "packageLineItemId", IsRequired = true, EmitDefaultValue = true)]
        public string PackageLineItemId { get; set; }

        /// <summary>
        /// The number of items of a particular line item of a shipment that are packed into the package.
        /// </summary>
        /// <value>The number of items of a particular line item of a shipment that are packed into the package.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// The list of serial numbers of items in the package, if required to be provided.
        /// </summary>
        /// <value>The list of serial numbers of items in the package, if required to be provided.</value>
        [DataMember(Name = "serialNumbers", EmitDefaultValue = false)]
        public List<string> SerialNumbers { get; set; }

        /// <summary>
        /// The number of pieces of a multi-piece item that are in this package. This is applicable only for items that are shipped in multiple pieces.
        /// </summary>
        /// <value>The number of pieces of a multi-piece item that are in this package. This is applicable only for items that are shipped in multiple pieces.</value>
        [DataMember(Name = "pieces", EmitDefaultValue = false)]
        public int Pieces { get; set; }

        /// <summary>
        /// A two-letter country code, as defined by the ISO-3166 alpha-2 standard.
        /// </summary>
        /// <value>A two-letter country code, as defined by the ISO-3166 alpha-2 standard.</value>
        [DataMember(Name = "countryOfOrigin", EmitDefaultValue = false)]
        public string CountryOfOrigin { get; set; }

        /// <summary>
        /// Gets or Sets ItemValue
        /// </summary>
        [DataMember(Name = "itemValue", EmitDefaultValue = false)]
        public Amount ItemValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageLineItem {\n");
            sb.Append("  PackageLineItemId: ").Append(PackageLineItemId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SerialNumbers: ").Append(SerialNumbers).Append("\n");
            sb.Append("  Pieces: ").Append(Pieces).Append("\n");
            sb.Append("  CountryOfOrigin: ").Append(CountryOfOrigin).Append("\n");
            sb.Append("  ItemValue: ").Append(ItemValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Pieces (int) minimum
            if (this.Pieces < (int)1)
            {
                yield return new ValidationResult("Invalid value for Pieces, must be a value greater than or equal to 1.", new [] { "Pieces" });
            }

            yield break;
        }
    }

}
