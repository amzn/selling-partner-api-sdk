/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// A shipment item&#39;s cancellation details.
    /// </summary>
    [DataContract(Name = "Cancellation")]
    public partial class Cancellation : IValidatableObject
    {
        /// <summary>
        /// The type of cancellation of the item in the shipment.
        /// </summary>
        /// <value>The type of cancellation of the item in the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CancellationTypeEnum
        {
            /// <summary>
            /// Enum SELLERREJECTED for value: SELLER_REJECTED
            /// </summary>
            [EnumMember(Value = "SELLER_REJECTED")]
            SELLERREJECTED = 1,

            /// <summary>
            /// Enum MARKETPLACECANCELLED for value: MARKETPLACE_CANCELLED
            /// </summary>
            [EnumMember(Value = "MARKETPLACE_CANCELLED")]
            MARKETPLACECANCELLED = 2,

            /// <summary>
            /// Enum SYSTEMCANCELLED for value: SYSTEM_CANCELLED
            /// </summary>
            [EnumMember(Value = "SYSTEM_CANCELLED")]
            SYSTEMCANCELLED = 3
        }


        /// <summary>
        /// The type of cancellation of the item in the shipment.
        /// </summary>
        /// <value>The type of cancellation of the item in the shipment.</value>
        /*
        <example>MARKETPLACE_CANCELLED</example>
        */
        [DataMember(Name = "cancellationType", IsRequired = true, EmitDefaultValue = true)]
        public CancellationTypeEnum CancellationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cancellation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cancellation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cancellation" /> class.
        /// </summary>
        /// <param name="cancelledQuantity">The number of items of this particular item which have been cancelled. (required).</param>
        /// <param name="cancelledTimestamp">A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format. (required).</param>
        /// <param name="cancellationType">The type of cancellation of the item in the shipment. (required).</param>
        /// <param name="cancellationReason">The reason for the cancellation of the shipment..</param>
        public Cancellation(int cancelledQuantity = default(int), string cancelledTimestamp = default(string), CancellationTypeEnum cancellationType = default(CancellationTypeEnum), string cancellationReason = default(string))
        {
            this.CancelledQuantity = cancelledQuantity;
            // to ensure "cancelledTimestamp" is required (not null)
            if (cancelledTimestamp == null)
            {
                throw new ArgumentNullException("cancelledTimestamp is a required property for Cancellation and cannot be null");
            }
            this.CancelledTimestamp = cancelledTimestamp;
            this.CancellationType = cancellationType;
            this.CancellationReason = cancellationReason;
        }

        /// <summary>
        /// The number of items of this particular item which have been cancelled.
        /// </summary>
        /// <value>The number of items of this particular item which have been cancelled.</value>
        [DataMember(Name = "cancelledQuantity", IsRequired = true, EmitDefaultValue = true)]
        public int CancelledQuantity { get; set; }

        /// <summary>
        /// A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
        /// </summary>
        /// <value>A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.</value>
        [DataMember(Name = "cancelledTimestamp", IsRequired = true, EmitDefaultValue = true)]
        public string CancelledTimestamp { get; set; }

        /// <summary>
        /// The reason for the cancellation of the shipment.
        /// </summary>
        /// <value>The reason for the cancellation of the shipment.</value>
        [DataMember(Name = "cancellationReason", EmitDefaultValue = false)]
        public string CancellationReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cancellation {\n");
            sb.Append("  CancelledQuantity: ").Append(CancelledQuantity).Append("\n");
            sb.Append("  CancelledTimestamp: ").Append(CancelledTimestamp).Append("\n");
            sb.Append("  CancellationType: ").Append(CancellationType).Append("\n");
            sb.Append("  CancellationReason: ").Append(CancellationReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CancelledQuantity (int) minimum
            if (this.CancelledQuantity < (int)1)
            {
                yield return new ValidationResult("Invalid value for CancelledQuantity, must be a value greater than or equal to 1.", new [] { "CancelledQuantity" });
            }

            yield break;
        }
    }

}
