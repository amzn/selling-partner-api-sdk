/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// All necessary compliance attributes specific to the line item.
    /// </summary>
    [DataContract(Name = "ComplianceAttributes")]
    public partial class ComplianceAttributes : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets HazmatLabelsRequirement
        /// </summary>
        [DataMember(Name = "hazmatLabelsRequirement", IsRequired = true, EmitDefaultValue = true)]
        public RequirementLevel HazmatLabelsRequirement { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumberRequirement
        /// </summary>
        [DataMember(Name = "serialNumberRequirement", IsRequired = true, EmitDefaultValue = true)]
        public RequirementLevel SerialNumberRequirement { get; set; }

        /// <summary>
        /// Gets or Sets CountryOfOriginRequirement
        /// </summary>
        [DataMember(Name = "countryOfOriginRequirement", IsRequired = true, EmitDefaultValue = true)]
        public RequirementLevel CountryOfOriginRequirement { get; set; }

        /// <summary>
        /// Gets or Sets ItemValueRequirement
        /// </summary>
        [DataMember(Name = "itemValueRequirement", IsRequired = true, EmitDefaultValue = true)]
        public RequirementLevel ItemValueRequirement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComplianceAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceAttributes" /> class.
        /// </summary>
        /// <param name="hazmatLabelsRequirement">hazmatLabelsRequirement (required).</param>
        /// <param name="serialNumberRequirement">serialNumberRequirement (required).</param>
        /// <param name="countryOfOriginRequirement">countryOfOriginRequirement (required).</param>
        /// <param name="itemValueRequirement">itemValueRequirement (required).</param>
        public ComplianceAttributes(RequirementLevel hazmatLabelsRequirement = default(RequirementLevel), RequirementLevel serialNumberRequirement = default(RequirementLevel), RequirementLevel countryOfOriginRequirement = default(RequirementLevel), RequirementLevel itemValueRequirement = default(RequirementLevel))
        {
            this.HazmatLabelsRequirement = hazmatLabelsRequirement;
            this.SerialNumberRequirement = serialNumberRequirement;
            this.CountryOfOriginRequirement = countryOfOriginRequirement;
            this.ItemValueRequirement = itemValueRequirement;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComplianceAttributes {\n");
            sb.Append("  HazmatLabelsRequirement: ").Append(HazmatLabelsRequirement).Append("\n");
            sb.Append("  SerialNumberRequirement: ").Append(SerialNumberRequirement).Append("\n");
            sb.Append("  CountryOfOriginRequirement: ").Append(CountryOfOriginRequirement).Append("\n");
            sb.Append("  ItemValueRequirement: ").Append(ItemValueRequirement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
