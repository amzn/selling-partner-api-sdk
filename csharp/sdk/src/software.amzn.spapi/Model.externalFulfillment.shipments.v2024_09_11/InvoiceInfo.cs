/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Information about the shipment&#39;s invoice.
    /// </summary>
    [DataContract(Name = "InvoiceInfo")]
    public partial class InvoiceInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceInfo" /> class.
        /// </summary>
        /// <param name="invoiceId">The unique ID of the invoice that corresponds to the shipment. (required).</param>
        /// <param name="creationDateTime">A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format. (required).</param>
        public InvoiceInfo(string invoiceId = default(string), string creationDateTime = default(string))
        {
            // to ensure "invoiceId" is required (not null)
            if (invoiceId == null)
            {
                throw new ArgumentNullException("invoiceId is a required property for InvoiceInfo and cannot be null");
            }
            this.InvoiceId = invoiceId;
            // to ensure "creationDateTime" is required (not null)
            if (creationDateTime == null)
            {
                throw new ArgumentNullException("creationDateTime is a required property for InvoiceInfo and cannot be null");
            }
            this.CreationDateTime = creationDateTime;
        }

        /// <summary>
        /// The unique ID of the invoice that corresponds to the shipment.
        /// </summary>
        /// <value>The unique ID of the invoice that corresponds to the shipment.</value>
        [DataMember(Name = "invoiceId", IsRequired = true, EmitDefaultValue = true)]
        public string InvoiceId { get; set; }

        /// <summary>
        /// A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
        /// </summary>
        /// <value>A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.</value>
        [DataMember(Name = "creationDateTime", IsRequired = true, EmitDefaultValue = true)]
        public string CreationDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceInfo {\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
