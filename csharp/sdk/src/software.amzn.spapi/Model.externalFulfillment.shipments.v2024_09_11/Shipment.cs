/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Information about a shipment.
    /// </summary>
    [DataContract(Name = "Shipment")]
    public partial class Shipment : IValidatableObject
    {
        /// <summary>
        /// The current status of the shipment.
        /// </summary>
        /// <value>The current status of the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum CREATED for value: CREATED
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED = 1,

            /// <summary>
            /// Enum ACCEPTED for value: ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED = 2,

            /// <summary>
            /// Enum CONFIRMED for value: CONFIRMED
            /// </summary>
            [EnumMember(Value = "CONFIRMED")]
            CONFIRMED = 3,

            /// <summary>
            /// Enum PACKAGECREATED for value: PACKAGE_CREATED
            /// </summary>
            [EnumMember(Value = "PACKAGE_CREATED")]
            PACKAGECREATED = 4,

            /// <summary>
            /// Enum PICKUPSLOTRETRIEVED for value: PICKUP_SLOT_RETRIEVED
            /// </summary>
            [EnumMember(Value = "PICKUP_SLOT_RETRIEVED")]
            PICKUPSLOTRETRIEVED = 5,

            /// <summary>
            /// Enum INVOICEGENERATED for value: INVOICE_GENERATED
            /// </summary>
            [EnumMember(Value = "INVOICE_GENERATED")]
            INVOICEGENERATED = 6,

            /// <summary>
            /// Enum SHIPLABELGENERATED for value: SHIPLABEL_GENERATED
            /// </summary>
            [EnumMember(Value = "SHIPLABEL_GENERATED")]
            SHIPLABELGENERATED = 7,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 8,

            /// <summary>
            /// Enum SHIPPED for value: SHIPPED
            /// </summary>
            [EnumMember(Value = "SHIPPED")]
            SHIPPED = 9,

            /// <summary>
            /// Enum DELIVERED for value: DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVERED = 10
        }


        /// <summary>
        /// The current status of the shipment.
        /// </summary>
        /// <value>The current status of the shipment.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// The sub status of the shipment.
        /// </summary>
        /// <value>The sub status of the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubStatusEnum
        {
            /// <summary>
            /// Enum PENDINGSCHEDULE for value: PENDING_SCHEDULE
            /// </summary>
            [EnumMember(Value = "PENDING_SCHEDULE")]
            PENDINGSCHEDULE = 1,

            /// <summary>
            /// Enum PENDINGPICKUP for value: PENDING_PICKUP
            /// </summary>
            [EnumMember(Value = "PENDING_PICKUP")]
            PENDINGPICKUP = 2,

            /// <summary>
            /// Enum PENDINGDROPOFF for value: PENDING_DROP_OFF
            /// </summary>
            [EnumMember(Value = "PENDING_DROP_OFF")]
            PENDINGDROPOFF = 3,

            /// <summary>
            /// Enum LABELCANCELED for value: LABEL_CANCELED
            /// </summary>
            [EnumMember(Value = "LABEL_CANCELED")]
            LABELCANCELED = 4,

            /// <summary>
            /// Enum PICKEDUP for value: PICKED_UP
            /// </summary>
            [EnumMember(Value = "PICKED_UP")]
            PICKEDUP = 5,

            /// <summary>
            /// Enum DROPPEDOFF for value: DROPPED_OFF
            /// </summary>
            [EnumMember(Value = "DROPPED_OFF")]
            DROPPEDOFF = 6,

            /// <summary>
            /// Enum ATORIGINFC for value: AT_ORIGIN_FC
            /// </summary>
            [EnumMember(Value = "AT_ORIGIN_FC")]
            ATORIGINFC = 7,

            /// <summary>
            /// Enum ATDESTINATIONFC for value: AT_DESTINATION_FC
            /// </summary>
            [EnumMember(Value = "AT_DESTINATION_FC")]
            ATDESTINATIONFC = 8,

            /// <summary>
            /// Enum DELIVERED for value: DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVERED = 9,

            /// <summary>
            /// Enum NOTDELIVERED for value: NOT_DELIVERED
            /// </summary>
            [EnumMember(Value = "NOT_DELIVERED")]
            NOTDELIVERED = 10,

            /// <summary>
            /// Enum UNDELIVERABLE for value: UNDELIVERABLE
            /// </summary>
            [EnumMember(Value = "UNDELIVERABLE")]
            UNDELIVERABLE = 11,

            /// <summary>
            /// Enum LOST for value: LOST
            /// </summary>
            [EnumMember(Value = "LOST")]
            LOST = 12,

            /// <summary>
            /// Enum OUTFORDELIVERY for value: OUT_FOR_DELIVERY
            /// </summary>
            [EnumMember(Value = "OUT_FOR_DELIVERY")]
            OUTFORDELIVERY = 13,

            /// <summary>
            /// Enum DAMAGED for value: DAMAGED
            /// </summary>
            [EnumMember(Value = "DAMAGED")]
            DAMAGED = 14
        }


        /// <summary>
        /// The sub status of the shipment.
        /// </summary>
        /// <value>The sub status of the shipment.</value>
        [DataMember(Name = "subStatus", EmitDefaultValue = false)]
        public SubStatusEnum? SubStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Shipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        /// <param name="id">The shipment&#39;s ID. (required).</param>
        /// <param name="locationId">The location identifier of the seller&#39;s location in the marketplace channel to which the shipment has been created for fulfillment. (required).</param>
        /// <param name="marketplaceAttributes">marketplaceAttributes (required).</param>
        /// <param name="shipmentInfo">shipmentInfo (required).</param>
        /// <param name="invoiceInfo">invoiceInfo.</param>
        /// <param name="partyInfoList">All involved party identification and metadata for the vendor, buyer, and seller. Applicable for direct-fulfillment sellers..</param>
        /// <param name="shipmentRequirements">shipmentRequirements (required).</param>
        /// <param name="charges">The charges associated with the shipment. (required).</param>
        /// <param name="status">The current status of the shipment. (required).</param>
        /// <param name="subStatus">The sub status of the shipment..</param>
        /// <param name="lineItems">The line items in the shipment. (required).</param>
        /// <param name="shippingInfo">shippingInfo (required).</param>
        /// <param name="packages">The list of packages in the shipment..</param>
        /// <param name="creationDateTime">A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format. (required).</param>
        /// <param name="lastUpdatedDateTime">A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format. (required).</param>
        /// <param name="earliestPackDateTime">A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format..</param>
        public Shipment(string id = default(string), string locationId = default(string), MarketplaceAttributes marketplaceAttributes = default(MarketplaceAttributes), ShipmentInfo shipmentInfo = default(ShipmentInfo), InvoiceInfo invoiceInfo = default(InvoiceInfo), List<PartyIdentificationInfo> partyInfoList = default(List<PartyIdentificationInfo>), ShipmentRequirements shipmentRequirements = default(ShipmentRequirements), List<Charge> charges = default(List<Charge>), StatusEnum status = default(StatusEnum), SubStatusEnum? subStatus = default(SubStatusEnum?), List<ShipmentLineItem> lineItems = default(List<ShipmentLineItem>), ShippingInfo shippingInfo = default(ShippingInfo), List<Package> packages = default(List<Package>), string creationDateTime = default(string), string lastUpdatedDateTime = default(string), string earliestPackDateTime = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Shipment and cannot be null");
            }
            this.Id = id;
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new ArgumentNullException("locationId is a required property for Shipment and cannot be null");
            }
            this.LocationId = locationId;
            // to ensure "marketplaceAttributes" is required (not null)
            if (marketplaceAttributes == null)
            {
                throw new ArgumentNullException("marketplaceAttributes is a required property for Shipment and cannot be null");
            }
            this.MarketplaceAttributes = marketplaceAttributes;
            // to ensure "shipmentInfo" is required (not null)
            if (shipmentInfo == null)
            {
                throw new ArgumentNullException("shipmentInfo is a required property for Shipment and cannot be null");
            }
            this.ShipmentInfo = shipmentInfo;
            // to ensure "shipmentRequirements" is required (not null)
            if (shipmentRequirements == null)
            {
                throw new ArgumentNullException("shipmentRequirements is a required property for Shipment and cannot be null");
            }
            this.ShipmentRequirements = shipmentRequirements;
            // to ensure "charges" is required (not null)
            if (charges == null)
            {
                throw new ArgumentNullException("charges is a required property for Shipment and cannot be null");
            }
            this.Charges = charges;
            this.Status = status;
            // to ensure "lineItems" is required (not null)
            if (lineItems == null)
            {
                throw new ArgumentNullException("lineItems is a required property for Shipment and cannot be null");
            }
            this.LineItems = lineItems;
            // to ensure "shippingInfo" is required (not null)
            if (shippingInfo == null)
            {
                throw new ArgumentNullException("shippingInfo is a required property for Shipment and cannot be null");
            }
            this.ShippingInfo = shippingInfo;
            // to ensure "creationDateTime" is required (not null)
            if (creationDateTime == null)
            {
                throw new ArgumentNullException("creationDateTime is a required property for Shipment and cannot be null");
            }
            this.CreationDateTime = creationDateTime;
            // to ensure "lastUpdatedDateTime" is required (not null)
            if (lastUpdatedDateTime == null)
            {
                throw new ArgumentNullException("lastUpdatedDateTime is a required property for Shipment and cannot be null");
            }
            this.LastUpdatedDateTime = lastUpdatedDateTime;
            this.InvoiceInfo = invoiceInfo;
            this.PartyInfoList = partyInfoList;
            this.SubStatus = subStatus;
            this.Packages = packages;
            this.EarliestPackDateTime = earliestPackDateTime;
        }

        /// <summary>
        /// The shipment&#39;s ID.
        /// </summary>
        /// <value>The shipment&#39;s ID.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The location identifier of the seller&#39;s location in the marketplace channel to which the shipment has been created for fulfillment.
        /// </summary>
        /// <value>The location identifier of the seller&#39;s location in the marketplace channel to which the shipment has been created for fulfillment.</value>
        [DataMember(Name = "locationId", IsRequired = true, EmitDefaultValue = true)]
        public string LocationId { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceAttributes
        /// </summary>
        [DataMember(Name = "marketplaceAttributes", IsRequired = true, EmitDefaultValue = true)]
        public MarketplaceAttributes MarketplaceAttributes { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentInfo
        /// </summary>
        [DataMember(Name = "shipmentInfo", IsRequired = true, EmitDefaultValue = true)]
        public ShipmentInfo ShipmentInfo { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceInfo
        /// </summary>
        [DataMember(Name = "invoiceInfo", EmitDefaultValue = false)]
        public InvoiceInfo InvoiceInfo { get; set; }

        /// <summary>
        /// All involved party identification and metadata for the vendor, buyer, and seller. Applicable for direct-fulfillment sellers.
        /// </summary>
        /// <value>All involved party identification and metadata for the vendor, buyer, and seller. Applicable for direct-fulfillment sellers.</value>
        [DataMember(Name = "partyInfoList", EmitDefaultValue = false)]
        public List<PartyIdentificationInfo> PartyInfoList { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentRequirements
        /// </summary>
        [DataMember(Name = "shipmentRequirements", IsRequired = true, EmitDefaultValue = true)]
        public ShipmentRequirements ShipmentRequirements { get; set; }

        /// <summary>
        /// The charges associated with the shipment.
        /// </summary>
        /// <value>The charges associated with the shipment.</value>
        [DataMember(Name = "charges", IsRequired = true, EmitDefaultValue = true)]
        public List<Charge> Charges { get; set; }

        /// <summary>
        /// The line items in the shipment.
        /// </summary>
        /// <value>The line items in the shipment.</value>
        [DataMember(Name = "lineItems", IsRequired = true, EmitDefaultValue = true)]
        public List<ShipmentLineItem> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets ShippingInfo
        /// </summary>
        [DataMember(Name = "shippingInfo", IsRequired = true, EmitDefaultValue = true)]
        public ShippingInfo ShippingInfo { get; set; }

        /// <summary>
        /// The list of packages in the shipment.
        /// </summary>
        /// <value>The list of packages in the shipment.</value>
        [DataMember(Name = "packages", EmitDefaultValue = false)]
        public List<Package> Packages { get; set; }

        /// <summary>
        /// A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
        /// </summary>
        /// <value>A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.</value>
        [DataMember(Name = "creationDateTime", IsRequired = true, EmitDefaultValue = true)]
        public string CreationDateTime { get; set; }

        /// <summary>
        /// A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
        /// </summary>
        /// <value>A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.</value>
        [DataMember(Name = "lastUpdatedDateTime", IsRequired = true, EmitDefaultValue = true)]
        public string LastUpdatedDateTime { get; set; }

        /// <summary>
        /// A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
        /// </summary>
        /// <value>A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.</value>
        [DataMember(Name = "earliestPackDateTime", EmitDefaultValue = false)]
        public string EarliestPackDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MarketplaceAttributes: ").Append(MarketplaceAttributes).Append("\n");
            sb.Append("  ShipmentInfo: ").Append(ShipmentInfo).Append("\n");
            sb.Append("  InvoiceInfo: ").Append(InvoiceInfo).Append("\n");
            sb.Append("  PartyInfoList: ").Append(PartyInfoList).Append("\n");
            sb.Append("  ShipmentRequirements: ").Append(ShipmentRequirements).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubStatus: ").Append(SubStatus).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  ShippingInfo: ").Append(ShippingInfo).Append("\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
            sb.Append("  LastUpdatedDateTime: ").Append(LastUpdatedDateTime).Append("\n");
            sb.Append("  EarliestPackDateTime: ").Append(EarliestPackDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
