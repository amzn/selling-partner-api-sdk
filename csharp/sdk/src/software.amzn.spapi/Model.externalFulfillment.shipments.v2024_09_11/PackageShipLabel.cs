/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// A shipping label with a label document for a single package. If label generation fails, you can use the &#x60;status&#x60; and &#x60;errorDetails&#x60; attributes to determine the cause of failure.
    /// </summary>
    [DataContract(Name = "PackageShipLabel")]
    public partial class PackageShipLabel : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public Status? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageShipLabel" /> class.
        /// </summary>
        /// <param name="packageId">The package ID of the package..</param>
        /// <param name="shipLabelMetadata">shipLabelMetadata.</param>
        /// <param name="fileData">fileData.</param>
        /// <param name="status">status.</param>
        /// <param name="errorDetails">errorDetails.</param>
        public PackageShipLabel(string packageId = default(string), ShipLabelMetadata shipLabelMetadata = default(ShipLabelMetadata), DocumentV2 fileData = default(DocumentV2), Status? status = default(Status?), Error errorDetails = default(Error))
        {
            this.PackageId = packageId;
            this.ShipLabelMetadata = shipLabelMetadata;
            this.FileData = fileData;
            this.Status = status;
            this.ErrorDetails = errorDetails;
        }

        /// <summary>
        /// The package ID of the package.
        /// </summary>
        /// <value>The package ID of the package.</value>
        [DataMember(Name = "packageId", EmitDefaultValue = false)]
        public string PackageId { get; set; }

        /// <summary>
        /// Gets or Sets ShipLabelMetadata
        /// </summary>
        [DataMember(Name = "shipLabelMetadata", EmitDefaultValue = false)]
        public ShipLabelMetadata ShipLabelMetadata { get; set; }

        /// <summary>
        /// Gets or Sets FileData
        /// </summary>
        [DataMember(Name = "fileData", EmitDefaultValue = false)]
        public DocumentV2 FileData { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name = "errorDetails", EmitDefaultValue = false)]
        public Error ErrorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageShipLabel {\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  ShipLabelMetadata: ").Append(ShipLabelMetadata).Append("\n");
            sb.Append("  FileData: ").Append(FileData).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
