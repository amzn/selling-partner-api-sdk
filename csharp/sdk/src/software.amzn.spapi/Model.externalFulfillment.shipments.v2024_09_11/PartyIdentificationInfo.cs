/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Party identification details for the shipment, applicable to direct fulfillment shipments.
    /// </summary>
    [DataContract(Name = "PartyIdentificationInfo")]
    public partial class PartyIdentificationInfo : IValidatableObject
    {
        /// <summary>
        /// Assigned identification for the party. For example, a warehouse code or vendor code.
        /// </summary>
        /// <value>Assigned identification for the party. For example, a warehouse code or vendor code.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PartyTypeEnum
        {
            /// <summary>
            /// Enum BILLTOPARTY for value: BILL_TO_PARTY
            /// </summary>
            [EnumMember(Value = "BILL_TO_PARTY")]
            BILLTOPARTY = 1,

            /// <summary>
            /// Enum SHIPTOPARTY for value: SHIP_TO_PARTY
            /// </summary>
            [EnumMember(Value = "SHIP_TO_PARTY")]
            SHIPTOPARTY = 2,

            /// <summary>
            /// Enum SHIPFROMPARTY for value: SHIP_FROM_PARTY
            /// </summary>
            [EnumMember(Value = "SHIP_FROM_PARTY")]
            SHIPFROMPARTY = 3,

            /// <summary>
            /// Enum SELLINGPARTY for value: SELLING_PARTY
            /// </summary>
            [EnumMember(Value = "SELLING_PARTY")]
            SELLINGPARTY = 4
        }


        /// <summary>
        /// Assigned identification for the party. For example, a warehouse code or vendor code.
        /// </summary>
        /// <value>Assigned identification for the party. For example, a warehouse code or vendor code.</value>
        [DataMember(Name = "partyType", IsRequired = true, EmitDefaultValue = true)]
        public PartyTypeEnum PartyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartyIdentificationInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PartyIdentificationInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartyIdentificationInfo" /> class.
        /// </summary>
        /// <param name="partyId">Assigned identification for the party. For example, a warehouse code or vendor code. (required).</param>
        /// <param name="partyType">Assigned identification for the party. For example, a warehouse code or vendor code. (required).</param>
        /// <param name="address">address.</param>
        /// <param name="taxInfo">taxInfo.</param>
        public PartyIdentificationInfo(string partyId = default(string), PartyTypeEnum partyType = default(PartyTypeEnum), Address address = default(Address), TaxRegistrationInfo taxInfo = default(TaxRegistrationInfo))
        {
            // to ensure "partyId" is required (not null)
            if (partyId == null)
            {
                throw new ArgumentNullException("partyId is a required property for PartyIdentificationInfo and cannot be null");
            }
            this.PartyId = partyId;
            this.PartyType = partyType;
            this.Address = address;
            this.TaxInfo = taxInfo;
        }

        /// <summary>
        /// Assigned identification for the party. For example, a warehouse code or vendor code.
        /// </summary>
        /// <value>Assigned identification for the party. For example, a warehouse code or vendor code.</value>
        [DataMember(Name = "partyId", IsRequired = true, EmitDefaultValue = true)]
        public string PartyId { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets TaxInfo
        /// </summary>
        [DataMember(Name = "taxInfo", EmitDefaultValue = false)]
        public TaxRegistrationInfo TaxInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartyIdentificationInfo {\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  PartyType: ").Append(PartyType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  TaxInfo: ").Append(TaxInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
