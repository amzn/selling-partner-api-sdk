/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Whether the invoice document is required to be attached to the shipment and its corresponding status.
    /// </summary>
    [DataContract(Name = "InvoiceRequirement")]
    public partial class InvoiceRequirement : IValidatableObject
    {
        /// <summary>
        /// Whether the invoice document is required to be attached to the shipment.
        /// </summary>
        /// <value>Whether the invoice document is required to be attached to the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequirementEnum
        {
            /// <summary>
            /// Enum REQUIRED for value: REQUIRED
            /// </summary>
            [EnumMember(Value = "REQUIRED")]
            REQUIRED = 1,

            /// <summary>
            /// Enum NOTREQUIRED for value: NOT_REQUIRED
            /// </summary>
            [EnumMember(Value = "NOT_REQUIRED")]
            NOTREQUIRED = 2
        }


        /// <summary>
        /// Whether the invoice document is required to be attached to the shipment.
        /// </summary>
        /// <value>Whether the invoice document is required to be attached to the shipment.</value>
        [DataMember(Name = "requirement", EmitDefaultValue = false)]
        public RequirementEnum? Requirement { get; set; }
        /// <summary>
        /// The status of the of the invoice document that is attached to the shipment.
        /// </summary>
        /// <value>The status of the of the invoice document that is attached to the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 2,

            /// <summary>
            /// Enum NOTAVAILABLE for value: NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLE = 3
        }


        /// <summary>
        /// The status of the of the invoice document that is attached to the shipment.
        /// </summary>
        /// <value>The status of the of the invoice document that is attached to the shipment.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceRequirement" /> class.
        /// </summary>
        /// <param name="requirement">Whether the invoice document is required to be attached to the shipment..</param>
        /// <param name="status">The status of the of the invoice document that is attached to the shipment..</param>
        public InvoiceRequirement(RequirementEnum? requirement = default(RequirementEnum?), StatusEnum? status = default(StatusEnum?))
        {
            this.Requirement = requirement;
            this.Status = status;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceRequirement {\n");
            sb.Append("  Requirement: ").Append(Requirement).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
