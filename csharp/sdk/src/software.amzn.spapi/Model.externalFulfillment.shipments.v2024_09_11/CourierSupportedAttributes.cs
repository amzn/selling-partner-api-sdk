/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// The tracking details of the package if it is shipped by a third party courier. This attribute should only be provided when the value of &#x60;shipBy&#x60; is &#x60;THIRD_PARTY_CARRIER&#x60;.
    /// </summary>
    [DataContract(Name = "CourierSupportedAttributes")]
    public partial class CourierSupportedAttributes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CourierSupportedAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CourierSupportedAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CourierSupportedAttributes" /> class.
        /// </summary>
        /// <param name="carrierName">The name of the courier service used to ship the package (required).</param>
        /// <param name="trackingId">The tracking number of the package. (required).</param>
        public CourierSupportedAttributes(string carrierName = default(string), string trackingId = default(string))
        {
            // to ensure "carrierName" is required (not null)
            if (carrierName == null)
            {
                throw new ArgumentNullException("carrierName is a required property for CourierSupportedAttributes and cannot be null");
            }
            this.CarrierName = carrierName;
            // to ensure "trackingId" is required (not null)
            if (trackingId == null)
            {
                throw new ArgumentNullException("trackingId is a required property for CourierSupportedAttributes and cannot be null");
            }
            this.TrackingId = trackingId;
        }

        /// <summary>
        /// The name of the courier service used to ship the package
        /// </summary>
        /// <value>The name of the courier service used to ship the package</value>
        [DataMember(Name = "carrierName", IsRequired = true, EmitDefaultValue = true)]
        public string CarrierName { get; set; }

        /// <summary>
        /// The tracking number of the package.
        /// </summary>
        /// <value>The tracking number of the package.</value>
        [DataMember(Name = "trackingId", IsRequired = true, EmitDefaultValue = true)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CourierSupportedAttributes {\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
