/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// A line item to be contained in a recommended package. This attribute is provided only for orders that come with a specific recommendation of line-item distribution within the package recommendations.
    /// </summary>
    [DataContract(Name = "RecommendedPackageLineItem")]
    public partial class RecommendedPackageLineItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendedPackageLineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecommendedPackageLineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendedPackageLineItem" /> class.
        /// </summary>
        /// <param name="lineItemId">An ID for a line item in an order. The line item should be present in the recommended package. This identifier has the same value as the ID of the line item present in the order. (required).</param>
        public RecommendedPackageLineItem(string lineItemId = default(string))
        {
            // to ensure "lineItemId" is required (not null)
            if (lineItemId == null)
            {
                throw new ArgumentNullException("lineItemId is a required property for RecommendedPackageLineItem and cannot be null");
            }
            this.LineItemId = lineItemId;
        }

        /// <summary>
        /// An ID for a line item in an order. The line item should be present in the recommended package. This identifier has the same value as the ID of the line item present in the order.
        /// </summary>
        /// <value>An ID for a line item in an order. The line item should be present in the recommended package. This identifier has the same value as the ID of the line item present in the order.</value>
        /*
        <example>LI1</example>
        */
        [DataMember(Name = "lineItemId", IsRequired = true, EmitDefaultValue = true)]
        public string LineItemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecommendedPackageLineItem {\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LineItemId (string) minLength
            if (this.LineItemId != null && this.LineItemId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for LineItemId, length must be greater than 1.", new [] { "LineItemId" });
            }

            yield break;
        }
    }

}
