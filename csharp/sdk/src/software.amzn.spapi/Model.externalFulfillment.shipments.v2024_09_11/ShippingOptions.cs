/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Shipping options for a single package.
    /// </summary>
    [DataContract(Name = "ShippingOptions")]
    public partial class ShippingOptions : IValidatableObject
    {
        /// <summary>
        /// The shipper type.
        /// </summary>
        /// <value>The shipper type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShipByEnum
        {
            /// <summary>
            /// Enum MARKETPLACE for value: MARKETPLACE
            /// </summary>
            [EnumMember(Value = "MARKETPLACE")]
            MARKETPLACE = 1,

            /// <summary>
            /// Enum SELLER for value: SELLER
            /// </summary>
            [EnumMember(Value = "SELLER")]
            SELLER = 2,

            /// <summary>
            /// Enum THIRDPARTYCARRIER for value: THIRD_PARTY_CARRIER
            /// </summary>
            [EnumMember(Value = "THIRD_PARTY_CARRIER")]
            THIRDPARTYCARRIER = 3,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 4
        }


        /// <summary>
        /// The shipper type.
        /// </summary>
        /// <value>The shipper type.</value>
        [DataMember(Name = "shipBy", IsRequired = true, EmitDefaultValue = true)]
        public ShipByEnum ShipBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShippingOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingOptions" /> class.
        /// </summary>
        /// <param name="shippingOptionId">An identifier for the shipping option. (required).</param>
        /// <param name="shipBy">The shipper type. (required).</param>
        /// <param name="carrierName">The carrier name for the offering..</param>
        /// <param name="pickupWindow">pickupWindow.</param>
        /// <param name="timeSlot">timeSlot.</param>
        public ShippingOptions(string shippingOptionId = default(string), ShipByEnum shipBy = default(ShipByEnum), string carrierName = default(string), TimeWindow pickupWindow = default(TimeWindow), TimeWindow timeSlot = default(TimeWindow))
        {
            // to ensure "shippingOptionId" is required (not null)
            if (shippingOptionId == null)
            {
                throw new ArgumentNullException("shippingOptionId is a required property for ShippingOptions and cannot be null");
            }
            this.ShippingOptionId = shippingOptionId;
            this.ShipBy = shipBy;
            this.CarrierName = carrierName;
            this.PickupWindow = pickupWindow;
            this.TimeSlot = timeSlot;
        }

        /// <summary>
        /// An identifier for the shipping option.
        /// </summary>
        /// <value>An identifier for the shipping option.</value>
        [DataMember(Name = "shippingOptionId", IsRequired = true, EmitDefaultValue = true)]
        public string ShippingOptionId { get; set; }

        /// <summary>
        /// The carrier name for the offering.
        /// </summary>
        /// <value>The carrier name for the offering.</value>
        [DataMember(Name = "carrierName", EmitDefaultValue = false)]
        public string CarrierName { get; set; }

        /// <summary>
        /// Gets or Sets PickupWindow
        /// </summary>
        [DataMember(Name = "pickupWindow", EmitDefaultValue = false)]
        public TimeWindow PickupWindow { get; set; }

        /// <summary>
        /// Gets or Sets TimeSlot
        /// </summary>
        [DataMember(Name = "timeSlot", EmitDefaultValue = false)]
        public TimeWindow TimeSlot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingOptions {\n");
            sb.Append("  ShippingOptionId: ").Append(ShippingOptionId).Append("\n");
            sb.Append("  ShipBy: ").Append(ShipBy).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  PickupWindow: ").Append(PickupWindow).Append("\n");
            sb.Append("  TimeSlot: ").Append(TimeSlot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
