/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// The address.
    /// </summary>
    [DataContract(Name = "Address")]
    public partial class Address : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="name">The name of the person, business or institution at that address..</param>
        /// <param name="addressLine1">The first line of the address..</param>
        /// <param name="addressLine2">Additional address information, if required..</param>
        /// <param name="addressLine3">Additional address information, if required..</param>
        /// <param name="district">The district or state where the person, business, or institution is located..</param>
        /// <param name="municipality">The municiplaity where the person, business, or institution is located..</param>
        /// <param name="state">The state or region where the person, business, or institution is located..</param>
        /// <param name="city">The city where the person, business, or institution is located..</param>
        /// <param name="countryCode">The two digit country code. In ISO 3166-1 alpha-2 format..</param>
        /// <param name="postalCode">The postal code of the address. It contains a series of letters or digits or both, sometimes including spaces or punctuation. (required).</param>
        /// <param name="email">The email address of the contact associated with the address..</param>
        /// <param name="copyEmails">The email cc addresses of the contact associated with the address..</param>
        /// <param name="phoneNumber">The phone number of the person, business, or institution located at the address..</param>
        /// <param name="addressType">The type of address..</param>
        public Address(string name = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string district = default(string), string municipality = default(string), string state = default(string), string city = default(string), string countryCode = default(string), string postalCode = default(string), string email = default(string), List<string> copyEmails = default(List<string>), string phoneNumber = default(string), string addressType = default(string))
        {
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for Address and cannot be null");
            }
            this.PostalCode = postalCode;
            this.Name = name;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.District = district;
            this.Municipality = municipality;
            this.State = state;
            this.City = city;
            this.CountryCode = countryCode;
            this.Email = email;
            this.CopyEmails = copyEmails;
            this.PhoneNumber = phoneNumber;
            this.AddressType = addressType;
        }

        /// <summary>
        /// The name of the person, business or institution at that address.
        /// </summary>
        /// <value>The name of the person, business or institution at that address.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [DataMember(Name = "addressLine1", EmitDefaultValue = false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Additional address information, if required.
        /// </summary>
        /// <value>Additional address information, if required.</value>
        [DataMember(Name = "addressLine2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Additional address information, if required.
        /// </summary>
        /// <value>Additional address information, if required.</value>
        [DataMember(Name = "addressLine3", EmitDefaultValue = false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The district or state where the person, business, or institution is located.
        /// </summary>
        /// <value>The district or state where the person, business, or institution is located.</value>
        [DataMember(Name = "district", EmitDefaultValue = false)]
        public string District { get; set; }

        /// <summary>
        /// The municiplaity where the person, business, or institution is located.
        /// </summary>
        /// <value>The municiplaity where the person, business, or institution is located.</value>
        [DataMember(Name = "municipality", EmitDefaultValue = false)]
        public string Municipality { get; set; }

        /// <summary>
        /// The state or region where the person, business, or institution is located.
        /// </summary>
        /// <value>The state or region where the person, business, or institution is located.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// The city where the person, business, or institution is located.
        /// </summary>
        /// <value>The city where the person, business, or institution is located.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// The two digit country code. In ISO 3166-1 alpha-2 format.
        /// </summary>
        /// <value>The two digit country code. In ISO 3166-1 alpha-2 format.</value>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The postal code of the address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
        /// </summary>
        /// <value>The postal code of the address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.</value>
        [DataMember(Name = "postalCode", IsRequired = true, EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The email address of the contact associated with the address.
        /// </summary>
        /// <value>The email address of the contact associated with the address.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The email cc addresses of the contact associated with the address.
        /// </summary>
        /// <value>The email cc addresses of the contact associated with the address.</value>
        [DataMember(Name = "copyEmails", EmitDefaultValue = false)]
        public List<string> CopyEmails { get; set; }

        /// <summary>
        /// The phone number of the person, business, or institution located at the address.
        /// </summary>
        /// <value>The phone number of the person, business, or institution located at the address.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The type of address.
        /// </summary>
        /// <value>The type of address.</value>
        [DataMember(Name = "addressType", EmitDefaultValue = false)]
        public string AddressType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Municipality: ").Append(Municipality).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CopyEmails: ").Append(CopyEmails).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 50.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // AddressLine1 (string) maxLength
            if (this.AddressLine1 != null && this.AddressLine1.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be less than 60.", new [] { "AddressLine1" });
            }

            // AddressLine1 (string) minLength
            if (this.AddressLine1 != null && this.AddressLine1.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be greater than 1.", new [] { "AddressLine1" });
            }

            // AddressLine2 (string) maxLength
            if (this.AddressLine2 != null && this.AddressLine2.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be less than 60.", new [] { "AddressLine2" });
            }

            // AddressLine2 (string) minLength
            if (this.AddressLine2 != null && this.AddressLine2.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be greater than 1.", new [] { "AddressLine2" });
            }

            // AddressLine3 (string) maxLength
            if (this.AddressLine3 != null && this.AddressLine3.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AddressLine3, length must be less than 60.", new [] { "AddressLine3" });
            }

            // AddressLine3 (string) minLength
            if (this.AddressLine3 != null && this.AddressLine3.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AddressLine3, length must be greater than 1.", new [] { "AddressLine3" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 50)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 50.", new [] { "City" });
            }

            // City (string) minLength
            if (this.City != null && this.City.Length < 1)
            {
                yield return new ValidationResult("Invalid value for City, length must be greater than 1.", new [] { "City" });
            }

            // CountryCode (string) maxLength
            if (this.CountryCode != null && this.CountryCode.Length > 2)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be less than 2.", new [] { "CountryCode" });
            }

            // CountryCode (string) minLength
            if (this.CountryCode != null && this.CountryCode.Length < 2)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be greater than 2.", new [] { "CountryCode" });
            }

            // PostalCode (string) maxLength
            if (this.PostalCode != null && this.PostalCode.Length > 20)
            {
                yield return new ValidationResult("Invalid value for PostalCode, length must be less than 20.", new [] { "PostalCode" });
            }

            // PostalCode (string) minLength
            if (this.PostalCode != null && this.PostalCode.Length < 1)
            {
                yield return new ValidationResult("Invalid value for PostalCode, length must be greater than 1.", new [] { "PostalCode" });
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 64.", new [] { "Email" });
            }

            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be less than 20.", new [] { "PhoneNumber" });
            }

            // PhoneNumber (string) minLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be greater than 1.", new [] { "PhoneNumber" });
            }

            // AddressType (string) maxLength
            if (this.AddressType != null && this.AddressType.Length > 20)
            {
                yield return new ValidationResult("Invalid value for AddressType, length must be less than 20.", new [] { "AddressType" });
            }

            // AddressType (string) minLength
            if (this.AddressType != null && this.AddressType.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AddressType, length must be greater than 1.", new [] { "AddressType" });
            }

            yield break;
        }
    }

}
