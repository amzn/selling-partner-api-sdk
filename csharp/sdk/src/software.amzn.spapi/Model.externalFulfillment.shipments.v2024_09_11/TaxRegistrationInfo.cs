/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Tax registration details of the entity. Applicable to direct fulfillment shipments.
    /// </summary>
    [DataContract(Name = "TaxRegistrationInfo")]
    public partial class TaxRegistrationInfo : IValidatableObject
    {
        /// <summary>
        /// Tax registration type for the entity
        /// </summary>
        /// <value>Tax registration type for the entity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum VAT for value: VAT
            /// </summary>
            [EnumMember(Value = "VAT")]
            VAT = 1,

            /// <summary>
            /// Enum GST for value: GST
            /// </summary>
            [EnumMember(Value = "GST")]
            GST = 2
        }


        /// <summary>
        /// Tax registration type for the entity
        /// </summary>
        /// <value>Tax registration type for the entity</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRegistrationInfo" /> class.
        /// </summary>
        /// <param name="type">Tax registration type for the entity.</param>
        /// <param name="number">The tax registration number for the party. For example, their VAT ID..</param>
        /// <param name="address">address.</param>
        /// <param name="messages">Tax registration message that can be used for additional tax related details..</param>
        public TaxRegistrationInfo(TypeEnum? type = default(TypeEnum?), string number = default(string), Address address = default(Address), string messages = default(string))
        {
            this.Type = type;
            this.Number = number;
            this.Address = address;
            this.Messages = messages;
        }

        /// <summary>
        /// The tax registration number for the party. For example, their VAT ID.
        /// </summary>
        /// <value>The tax registration number for the party. For example, their VAT ID.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Tax registration message that can be used for additional tax related details.
        /// </summary>
        /// <value>Tax registration message that can be used for additional tax related details.</value>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public string Messages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxRegistrationInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
