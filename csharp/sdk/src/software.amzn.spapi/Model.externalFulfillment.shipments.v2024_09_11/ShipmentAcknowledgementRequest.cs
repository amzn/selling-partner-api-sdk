/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Information about the shipment and its line items, used to confirm or reject line items.
    /// </summary>
    [DataContract(Name = "ShipmentAcknowledgementRequest")]
    public partial class ShipmentAcknowledgementRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentAcknowledgementRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentAcknowledgementRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentAcknowledgementRequest" /> class.
        /// </summary>
        /// <param name="referenceId">A unique identifier for every shipment rejection..</param>
        /// <param name="lineItems">Details about the line items from the shipment that are being confirmed or rejected by the seller. (required).</param>
        public ShipmentAcknowledgementRequest(string referenceId = default(string), List<LineItemWithReason> lineItems = default(List<LineItemWithReason>))
        {
            // to ensure "lineItems" is required (not null)
            if (lineItems == null)
            {
                throw new ArgumentNullException("lineItems is a required property for ShipmentAcknowledgementRequest and cannot be null");
            }
            this.LineItems = lineItems;
            this.ReferenceId = referenceId;
        }

        /// <summary>
        /// A unique identifier for every shipment rejection.
        /// </summary>
        /// <value>A unique identifier for every shipment rejection.</value>
        [DataMember(Name = "referenceId", EmitDefaultValue = false)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Details about the line items from the shipment that are being confirmed or rejected by the seller.
        /// </summary>
        /// <value>Details about the line items from the shipment that are being confirmed or rejected by the seller.</value>
        [DataMember(Name = "lineItems", IsRequired = true, EmitDefaultValue = true)]
        public List<LineItemWithReason> LineItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentAcknowledgementRequest {\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
