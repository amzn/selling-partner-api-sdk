/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// The composition of the charge.
    /// </summary>
    [DataContract(Name = "ChargeBreakup")]
    public partial class ChargeBreakup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeBreakup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargeBreakup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeBreakup" /> class.
        /// </summary>
        /// <param name="baseAmount">baseAmount (required).</param>
        /// <param name="discountAmount">discountAmount (required).</param>
        /// <param name="netAmount">netAmount (required).</param>
        public ChargeBreakup(Amount baseAmount = default(Amount), Amount discountAmount = default(Amount), Amount netAmount = default(Amount))
        {
            // to ensure "baseAmount" is required (not null)
            if (baseAmount == null)
            {
                throw new ArgumentNullException("baseAmount is a required property for ChargeBreakup and cannot be null");
            }
            this.BaseAmount = baseAmount;
            // to ensure "discountAmount" is required (not null)
            if (discountAmount == null)
            {
                throw new ArgumentNullException("discountAmount is a required property for ChargeBreakup and cannot be null");
            }
            this.DiscountAmount = discountAmount;
            // to ensure "netAmount" is required (not null)
            if (netAmount == null)
            {
                throw new ArgumentNullException("netAmount is a required property for ChargeBreakup and cannot be null");
            }
            this.NetAmount = netAmount;
        }

        /// <summary>
        /// Gets or Sets BaseAmount
        /// </summary>
        [DataMember(Name = "baseAmount", IsRequired = true, EmitDefaultValue = true)]
        public Amount BaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name = "discountAmount", IsRequired = true, EmitDefaultValue = true)]
        public Amount DiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets NetAmount
        /// </summary>
        [DataMember(Name = "netAmount", IsRequired = true, EmitDefaultValue = true)]
        public Amount NetAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargeBreakup {\n");
            sb.Append("  BaseAmount: ").Append(BaseAmount).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
