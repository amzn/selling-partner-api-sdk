/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// A shipment&#39;s charge with relevant tax information.
    /// </summary>
    [DataContract(Name = "Charge")]
    public partial class Charge : IValidatableObject
    {
        /// <summary>
        /// The type of charge.
        /// </summary>
        /// <value>The type of charge.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChargeTypeEnum
        {
            /// <summary>
            /// Enum PRODUCT for value: PRODUCT
            /// </summary>
            [EnumMember(Value = "PRODUCT")]
            PRODUCT = 1,

            /// <summary>
            /// Enum SHIPPING for value: SHIPPING
            /// </summary>
            [EnumMember(Value = "SHIPPING")]
            SHIPPING = 2,

            /// <summary>
            /// Enum GIFTWRAP for value: GIFT_WRAP
            /// </summary>
            [EnumMember(Value = "GIFT_WRAP")]
            GIFTWRAP = 3,

            /// <summary>
            /// Enum TOTAL for value: TOTAL
            /// </summary>
            [EnumMember(Value = "TOTAL")]
            TOTAL = 4,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 5
        }


        /// <summary>
        /// The type of charge.
        /// </summary>
        /// <value>The type of charge.</value>
        [DataMember(Name = "chargeType", IsRequired = true, EmitDefaultValue = true)]
        public ChargeTypeEnum ChargeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Charge" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Charge() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Charge" /> class.
        /// </summary>
        /// <param name="baseCharge">baseCharge (required).</param>
        /// <param name="taxBreakup">The tax charge details..</param>
        /// <param name="chargeType">The type of charge. (required).</param>
        /// <param name="totalCharge">totalCharge (required).</param>
        /// <param name="totalTax">totalTax (required).</param>
        public Charge(ChargeBreakup baseCharge = default(ChargeBreakup), List<Tax> taxBreakup = default(List<Tax>), ChargeTypeEnum chargeType = default(ChargeTypeEnum), ChargeBreakup totalCharge = default(ChargeBreakup), Tax totalTax = default(Tax))
        {
            // to ensure "baseCharge" is required (not null)
            if (baseCharge == null)
            {
                throw new ArgumentNullException("baseCharge is a required property for Charge and cannot be null");
            }
            this.BaseCharge = baseCharge;
            this.ChargeType = chargeType;
            // to ensure "totalCharge" is required (not null)
            if (totalCharge == null)
            {
                throw new ArgumentNullException("totalCharge is a required property for Charge and cannot be null");
            }
            this.TotalCharge = totalCharge;
            // to ensure "totalTax" is required (not null)
            if (totalTax == null)
            {
                throw new ArgumentNullException("totalTax is a required property for Charge and cannot be null");
            }
            this.TotalTax = totalTax;
            this.TaxBreakup = taxBreakup;
        }

        /// <summary>
        /// Gets or Sets BaseCharge
        /// </summary>
        [DataMember(Name = "baseCharge", IsRequired = true, EmitDefaultValue = true)]
        public ChargeBreakup BaseCharge { get; set; }

        /// <summary>
        /// The tax charge details.
        /// </summary>
        /// <value>The tax charge details.</value>
        [DataMember(Name = "taxBreakup", EmitDefaultValue = false)]
        public List<Tax> TaxBreakup { get; set; }

        /// <summary>
        /// Gets or Sets TotalCharge
        /// </summary>
        [DataMember(Name = "totalCharge", IsRequired = true, EmitDefaultValue = true)]
        public ChargeBreakup TotalCharge { get; set; }

        /// <summary>
        /// Gets or Sets TotalTax
        /// </summary>
        [DataMember(Name = "totalTax", IsRequired = true, EmitDefaultValue = true)]
        public Tax TotalTax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Charge {\n");
            sb.Append("  BaseCharge: ").Append(BaseCharge).Append("\n");
            sb.Append("  TaxBreakup: ").Append(TaxBreakup).Append("\n");
            sb.Append("  ChargeType: ").Append(ChargeType).Append("\n");
            sb.Append("  TotalCharge: ").Append(TotalCharge).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
