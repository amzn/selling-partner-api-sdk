/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// An [S3-Presigned URL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-presigned-url.html) you can use to retrieve file contents.
    /// </summary>
    [DataContract(Name = "DocumentV2")]
    public partial class DocumentV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentV2" /> class.
        /// </summary>
        /// <param name="url">A presigned URL to fetch the ship label file using an HTTP GET request. To determine file type, use the &#x60;contentType&#x60; header of the file response. The file retrieved will be in one of the following supported formats:  - **ZPL**: &#x60;x.application/zpl&#x60; - **PDF**: &#x60;application/pdf&#x60; - **PNG**: &#x60;image/png&#x60; - **Plain Text**: &#x60;text/plain&#x60; (required).</param>
        public DocumentV2(string url = default(string))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for DocumentV2 and cannot be null");
            }
            this.Url = url;
        }

        /// <summary>
        /// A presigned URL to fetch the ship label file using an HTTP GET request. To determine file type, use the &#x60;contentType&#x60; header of the file response. The file retrieved will be in one of the following supported formats:  - **ZPL**: &#x60;x.application/zpl&#x60; - **PDF**: &#x60;application/pdf&#x60; - **PNG**: &#x60;image/png&#x60; - **Plain Text**: &#x60;text/plain&#x60;
        /// </summary>
        /// <value>A presigned URL to fetch the ship label file using an HTTP GET request. To determine file type, use the &#x60;contentType&#x60; header of the file response. The file retrieved will be in one of the following supported formats:  - **ZPL**: &#x60;x.application/zpl&#x60; - **PDF**: &#x60;application/pdf&#x60; - **PNG**: &#x60;image/png&#x60; - **Plain Text**: &#x60;text/plain&#x60;</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentV2 {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
