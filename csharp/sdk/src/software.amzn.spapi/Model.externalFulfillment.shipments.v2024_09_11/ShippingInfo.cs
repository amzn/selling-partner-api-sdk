/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Shipping information for the packages in a shipment.
    /// </summary>
    [DataContract(Name = "ShippingInfo")]
    public partial class ShippingInfo : IValidatableObject
    {
        /// <summary>
        /// The type of shipping that the seller uses to deliver a customer order.
        /// </summary>
        /// <value>The type of shipping that the seller uses to deliver a customer order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShippingTypeEnum
        {
            /// <summary>
            /// Enum MARKETPLACE for value: MARKETPLACE
            /// </summary>
            [EnumMember(Value = "MARKETPLACE")]
            MARKETPLACE = 1,

            /// <summary>
            /// Enum SELF for value: SELF
            /// </summary>
            [EnumMember(Value = "SELF")]
            SELF = 2
        }


        /// <summary>
        /// The type of shipping that the seller uses to deliver a customer order.
        /// </summary>
        /// <value>The type of shipping that the seller uses to deliver a customer order.</value>
        [DataMember(Name = "shippingType", EmitDefaultValue = false)]
        public ShippingTypeEnum? ShippingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShippingInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingInfo" /> class.
        /// </summary>
        /// <param name="recommendedShipMethod">The ship method recommended by the Amazon Fulfillment Network for the packages in this shipment..</param>
        /// <param name="expectedShippingDateTimeInUTC">A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format. (required).</param>
        /// <param name="shipToAddress">shipToAddress.</param>
        /// <param name="shippingType">The type of shipping that the seller uses to deliver a customer order..</param>
        /// <param name="recommendedPackages">Recommendations for the packages in an order..</param>
        public ShippingInfo(string recommendedShipMethod = default(string), string expectedShippingDateTimeInUTC = default(string), Address shipToAddress = default(Address), ShippingTypeEnum? shippingType = default(ShippingTypeEnum?), List<RecommendedPackage> recommendedPackages = default(List<RecommendedPackage>))
        {
            // to ensure "expectedShippingDateTimeInUTC" is required (not null)
            if (expectedShippingDateTimeInUTC == null)
            {
                throw new ArgumentNullException("expectedShippingDateTimeInUTC is a required property for ShippingInfo and cannot be null");
            }
            this.ExpectedShippingDateTimeInUTC = expectedShippingDateTimeInUTC;
            this.RecommendedShipMethod = recommendedShipMethod;
            this.ShipToAddress = shipToAddress;
            this.ShippingType = shippingType;
            this.RecommendedPackages = recommendedPackages;
        }

        /// <summary>
        /// The ship method recommended by the Amazon Fulfillment Network for the packages in this shipment.
        /// </summary>
        /// <value>The ship method recommended by the Amazon Fulfillment Network for the packages in this shipment.</value>
        [DataMember(Name = "recommendedShipMethod", EmitDefaultValue = false)]
        public string RecommendedShipMethod { get; set; }

        /// <summary>
        /// A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
        /// </summary>
        /// <value>A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.</value>
        [DataMember(Name = "expectedShippingDateTimeInUTC", IsRequired = true, EmitDefaultValue = true)]
        public string ExpectedShippingDateTimeInUTC { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddress
        /// </summary>
        [DataMember(Name = "shipToAddress", EmitDefaultValue = false)]
        public Address ShipToAddress { get; set; }

        /// <summary>
        /// Recommendations for the packages in an order.
        /// </summary>
        /// <value>Recommendations for the packages in an order.</value>
        [DataMember(Name = "recommendedPackages", EmitDefaultValue = false)]
        public List<RecommendedPackage> RecommendedPackages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingInfo {\n");
            sb.Append("  RecommendedShipMethod: ").Append(RecommendedShipMethod).Append("\n");
            sb.Append("  ExpectedShippingDateTimeInUTC: ").Append(ExpectedShippingDateTimeInUTC).Append("\n");
            sb.Append("  ShipToAddress: ").Append(ShipToAddress).Append("\n");
            sb.Append("  ShippingType: ").Append(ShippingType).Append("\n");
            sb.Append("  RecommendedPackages: ").Append(RecommendedPackages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
