/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Information about taxes.
    /// </summary>
    [DataContract(Name = "Tax")]
    public partial class Tax : IValidatableObject
    {
        /// <summary>
        /// The type of tax.
        /// </summary>
        /// <value>The type of tax.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum VAT for value: VAT
            /// </summary>
            [EnumMember(Value = "VAT")]
            VAT = 1,

            /// <summary>
            /// Enum CST for value: CST
            /// </summary>
            [EnumMember(Value = "CST")]
            CST = 2,

            /// <summary>
            /// Enum IGST for value: IGST
            /// </summary>
            [EnumMember(Value = "IGST")]
            IGST = 3,

            /// <summary>
            /// Enum SGST for value: SGST
            /// </summary>
            [EnumMember(Value = "SGST")]
            SGST = 4,

            /// <summary>
            /// Enum CGST for value: CGST
            /// </summary>
            [EnumMember(Value = "CGST")]
            CGST = 5,

            /// <summary>
            /// Enum UTGST for value: UTGST
            /// </summary>
            [EnumMember(Value = "UTGST")]
            UTGST = 6,

            /// <summary>
            /// Enum CESS for value: CESS
            /// </summary>
            [EnumMember(Value = "CESS")]
            CESS = 7,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 8,

            /// <summary>
            /// Enum TOTAL for value: TOTAL
            /// </summary>
            [EnumMember(Value = "TOTAL")]
            TOTAL = 9
        }


        /// <summary>
        /// The type of tax.
        /// </summary>
        /// <value>The type of tax.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tax" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Tax() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tax" /> class.
        /// </summary>
        /// <param name="type">The type of tax..</param>
        /// <param name="rate">A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies..</param>
        /// <param name="charge">charge (required).</param>
        public Tax(TypeEnum? type = default(TypeEnum?), string rate = default(string), ChargeBreakup charge = default(ChargeBreakup))
        {
            // to ensure "charge" is required (not null)
            if (charge == null)
            {
                throw new ArgumentNullException("charge is a required property for Tax and cannot be null");
            }
            this.Charge = charge;
            this.Type = type;
            this.Rate = rate;
        }

        /// <summary>
        /// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies.
        /// </summary>
        /// <value>A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies.</value>
        [DataMember(Name = "rate", EmitDefaultValue = false)]
        public string Rate { get; set; }

        /// <summary>
        /// Gets or Sets Charge
        /// </summary>
        [DataMember(Name = "charge", IsRequired = true, EmitDefaultValue = true)]
        public ChargeBreakup Charge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Tax {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
