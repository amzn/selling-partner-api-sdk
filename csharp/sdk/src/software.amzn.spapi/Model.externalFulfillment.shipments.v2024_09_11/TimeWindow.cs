/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Time duration used to specify the interval of an event, such as pick up and delivery.
    /// </summary>
    [DataContract(Name = "TimeWindow")]
    public partial class TimeWindow : IValidatableObject
    {
        /// <summary>
        /// Whether the seller picks up from Amazon Logistics or drops off to Amazon Logistics.
        /// </summary>
        /// <value>Whether the seller picks up from Amazon Logistics or drops off to Amazon Logistics.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HandoverMethodEnum
        {
            /// <summary>
            /// Enum PICKUP for value: PICKUP
            /// </summary>
            [EnumMember(Value = "PICKUP")]
            PICKUP = 1,

            /// <summary>
            /// Enum DROPOFF for value: DROPOFF
            /// </summary>
            [EnumMember(Value = "DROPOFF")]
            DROPOFF = 2
        }


        /// <summary>
        /// Whether the seller picks up from Amazon Logistics or drops off to Amazon Logistics.
        /// </summary>
        /// <value>Whether the seller picks up from Amazon Logistics or drops off to Amazon Logistics.</value>
        [DataMember(Name = "handoverMethod", EmitDefaultValue = false)]
        public HandoverMethodEnum? HandoverMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeWindow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeWindow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeWindow" /> class.
        /// </summary>
        /// <param name="startTime">The start time of the window. (required).</param>
        /// <param name="endTime">The end time of the window. (required).</param>
        /// <param name="handoverMethod">Whether the seller picks up from Amazon Logistics or drops off to Amazon Logistics..</param>
        public TimeWindow(long startTime = default(long), long endTime = default(long), HandoverMethodEnum? handoverMethod = default(HandoverMethodEnum?))
        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.HandoverMethod = handoverMethod;
        }

        /// <summary>
        /// The start time of the window.
        /// </summary>
        /// <value>The start time of the window.</value>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public long StartTime { get; set; }

        /// <summary>
        /// The end time of the window.
        /// </summary>
        /// <value>The end time of the window.</value>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public long EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeWindow {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  HandoverMethod: ").Append(HandoverMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
