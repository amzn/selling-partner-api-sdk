/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// A line item from the original shipment that corresponds to this shipment.
    /// </summary>
    [DataContract(Name = "OriginalLineItem")]
    public partial class OriginalLineItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginalLineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OriginalLineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginalLineItem" /> class.
        /// </summary>
        /// <param name="replacingSku">The SKU ID for this shipment (required).</param>
        /// <param name="originalSku">The SKU ID for the original shipment. (required).</param>
        /// <param name="charges">The charges associated with the shipment. (required).</param>
        public OriginalLineItem(string replacingSku = default(string), string originalSku = default(string), List<Charge> charges = default(List<Charge>))
        {
            // to ensure "replacingSku" is required (not null)
            if (replacingSku == null)
            {
                throw new ArgumentNullException("replacingSku is a required property for OriginalLineItem and cannot be null");
            }
            this.ReplacingSku = replacingSku;
            // to ensure "originalSku" is required (not null)
            if (originalSku == null)
            {
                throw new ArgumentNullException("originalSku is a required property for OriginalLineItem and cannot be null");
            }
            this.OriginalSku = originalSku;
            // to ensure "charges" is required (not null)
            if (charges == null)
            {
                throw new ArgumentNullException("charges is a required property for OriginalLineItem and cannot be null");
            }
            this.Charges = charges;
        }

        /// <summary>
        /// The SKU ID for this shipment
        /// </summary>
        /// <value>The SKU ID for this shipment</value>
        [DataMember(Name = "replacingSku", IsRequired = true, EmitDefaultValue = true)]
        public string ReplacingSku { get; set; }

        /// <summary>
        /// The SKU ID for the original shipment.
        /// </summary>
        /// <value>The SKU ID for the original shipment.</value>
        [DataMember(Name = "originalSku", IsRequired = true, EmitDefaultValue = true)]
        public string OriginalSku { get; set; }

        /// <summary>
        /// The charges associated with the shipment.
        /// </summary>
        /// <value>The charges associated with the shipment.</value>
        [DataMember(Name = "charges", IsRequired = true, EmitDefaultValue = true)]
        public List<Charge> Charges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OriginalLineItem {\n");
            sb.Append("  ReplacingSku: ").Append(ReplacingSku).Append("\n");
            sb.Append("  OriginalSku: ").Append(OriginalSku).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
