/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Whether specific capabilities are enabled or required for the shipment.
    /// </summary>
    [DataContract(Name = "ShipmentRequirements")]
    public partial class ShipmentRequirements : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentRequirements" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentRequirements() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentRequirements" /> class.
        /// </summary>
        /// <param name="pSlip">pSlip (required).</param>
        /// <param name="invoice">invoice (required).</param>
        public ShipmentRequirements(PackingSlipRequirement pSlip = default(PackingSlipRequirement), InvoiceRequirement invoice = default(InvoiceRequirement))
        {
            // to ensure "pSlip" is required (not null)
            if (pSlip == null)
            {
                throw new ArgumentNullException("pSlip is a required property for ShipmentRequirements and cannot be null");
            }
            this.PSlip = pSlip;
            // to ensure "invoice" is required (not null)
            if (invoice == null)
            {
                throw new ArgumentNullException("invoice is a required property for ShipmentRequirements and cannot be null");
            }
            this.Invoice = invoice;
        }

        /// <summary>
        /// Gets or Sets PSlip
        /// </summary>
        [DataMember(Name = "pSlip", IsRequired = true, EmitDefaultValue = true)]
        public PackingSlipRequirement PSlip { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>
        [DataMember(Name = "invoice", IsRequired = true, EmitDefaultValue = true)]
        public InvoiceRequirement Invoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentRequirements {\n");
            sb.Append("  PSlip: ").Append(PSlip).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
