/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Tracking details for multiple packages.
    /// </summary>
    [DataContract(Name = "ShipLabelsInput")]
    public partial class ShipLabelsInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipLabelsInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipLabelsInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipLabelsInput" /> class.
        /// </summary>
        /// <param name="packageIds">The subset of package IDs used to generate a label. (required).</param>
        /// <param name="courierSupportedAttributes">courierSupportedAttributes.</param>
        public ShipLabelsInput(List<string> packageIds = default(List<string>), CourierSupportedAttributes courierSupportedAttributes = default(CourierSupportedAttributes))
        {
            // to ensure "packageIds" is required (not null)
            if (packageIds == null)
            {
                throw new ArgumentNullException("packageIds is a required property for ShipLabelsInput and cannot be null");
            }
            this.PackageIds = packageIds;
            this.CourierSupportedAttributes = courierSupportedAttributes;
        }

        /// <summary>
        /// The subset of package IDs used to generate a label.
        /// </summary>
        /// <value>The subset of package IDs used to generate a label.</value>
        [DataMember(Name = "packageIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> PackageIds { get; set; }

        /// <summary>
        /// Gets or Sets CourierSupportedAttributes
        /// </summary>
        [DataMember(Name = "courierSupportedAttributes", EmitDefaultValue = false)]
        public CourierSupportedAttributes CourierSupportedAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipLabelsInput {\n");
            sb.Append("  PackageIds: ").Append(PackageIds).Append("\n");
            sb.Append("  CourierSupportedAttributes: ").Append(CourierSupportedAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
