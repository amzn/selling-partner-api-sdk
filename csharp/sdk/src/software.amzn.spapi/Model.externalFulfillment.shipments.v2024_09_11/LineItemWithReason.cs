/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Information about the line item being confirmed or rejected and the reason for the rejection.
    /// </summary>
    [DataContract(Name = "LineItemWithReason")]
    public partial class LineItemWithReason : IValidatableObject
    {
        /// <summary>
        /// The reason for the rejection of the line item.
        /// </summary>
        /// <value>The reason for the rejection of the line item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum OUTOFSTOCK for value: OUT_OF_STOCK
            /// </summary>
            [EnumMember(Value = "OUT_OF_STOCK")]
            OUTOFSTOCK = 1,

            /// <summary>
            /// Enum CUSTOMERREQUESTED for value: CUSTOMER_REQUESTED
            /// </summary>
            [EnumMember(Value = "CUSTOMER_REQUESTED")]
            CUSTOMERREQUESTED = 2
        }


        /// <summary>
        /// The reason for the rejection of the line item.
        /// </summary>
        /// <value>The reason for the rejection of the line item.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItemWithReason" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LineItemWithReason() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItemWithReason" /> class.
        /// </summary>
        /// <param name="lineItem">lineItem (required).</param>
        /// <param name="reason">The reason for the rejection of the line item..</param>
        public LineItemWithReason(LineItem lineItem = default(LineItem), ReasonEnum? reason = default(ReasonEnum?))
        {
            // to ensure "lineItem" is required (not null)
            if (lineItem == null)
            {
                throw new ArgumentNullException("lineItem is a required property for LineItemWithReason and cannot be null");
            }
            this.LineItem = lineItem;
            this.Reason = reason;
        }

        /// <summary>
        /// Gets or Sets LineItem
        /// </summary>
        [DataMember(Name = "lineItem", IsRequired = true, EmitDefaultValue = true)]
        public LineItem LineItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LineItemWithReason {\n");
            sb.Append("  LineItem: ").Append(LineItem).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
