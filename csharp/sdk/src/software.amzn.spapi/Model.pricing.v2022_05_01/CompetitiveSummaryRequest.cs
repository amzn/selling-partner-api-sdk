/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-05-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v2022_05_01
{
    /// <summary>
    /// An individual &#x60;competitiveSummary&#x60; request for an ASIN and &#x60;marketplaceId&#x60;.
    /// </summary>
    [DataContract(Name = "CompetitiveSummaryRequest")]
    public partial class CompetitiveSummaryRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
        public HttpMethod Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitiveSummaryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompetitiveSummaryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitiveSummaryRequest" /> class.
        /// </summary>
        /// <param name="asin">The ASIN of the item. (required).</param>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required).</param>
        /// <param name="includedData">The list of requested competitive pricing data for the product. (required).</param>
        /// <param name="lowestPricedOffersInputs">The list of &#x60;lowestPricedOffersInput&#x60; parameters that are used to build &#x60;lowestPricedOffers&#x60; in the response. This attribute is only valid if &#x60;lowestPricedOffers&#x60; is requested in &#x60;includedData&#x60;.</param>
        /// <param name="method">method (required).</param>
        /// <param name="uri">The URI associated with the individual APIs that are called as part of the batch request. (required).</param>
        public CompetitiveSummaryRequest(string asin = default(string), string marketplaceId = default(string), List<CompetitiveSummaryIncludedData> includedData = default(List<CompetitiveSummaryIncludedData>), List<LowestPricedOffersInput> lowestPricedOffersInputs = default(List<LowestPricedOffersInput>), HttpMethod method = default(HttpMethod), string uri = default(string))
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new ArgumentNullException("asin is a required property for CompetitiveSummaryRequest and cannot be null");
            }
            this.Asin = asin;
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for CompetitiveSummaryRequest and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            // to ensure "includedData" is required (not null)
            if (includedData == null)
            {
                throw new ArgumentNullException("includedData is a required property for CompetitiveSummaryRequest and cannot be null");
            }
            this.IncludedData = includedData;
            this.Method = method;
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new ArgumentNullException("uri is a required property for CompetitiveSummaryRequest and cannot be null");
            }
            this.Uri = uri;
            this.LowestPricedOffersInputs = lowestPricedOffersInputs;
        }

        /// <summary>
        /// The ASIN of the item.
        /// </summary>
        /// <value>The ASIN of the item.</value>
        [DataMember(Name = "asin", IsRequired = true, EmitDefaultValue = true)]
        public string Asin { get; set; }

        /// <summary>
        /// The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
        /// </summary>
        /// <value>The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The list of requested competitive pricing data for the product.
        /// </summary>
        /// <value>The list of requested competitive pricing data for the product.</value>
        [DataMember(Name = "includedData", IsRequired = true, EmitDefaultValue = true)]
        public List<CompetitiveSummaryIncludedData> IncludedData { get; set; }

        /// <summary>
        /// The list of &#x60;lowestPricedOffersInput&#x60; parameters that are used to build &#x60;lowestPricedOffers&#x60; in the response. This attribute is only valid if &#x60;lowestPricedOffers&#x60; is requested in &#x60;includedData&#x60;
        /// </summary>
        /// <value>The list of &#x60;lowestPricedOffersInput&#x60; parameters that are used to build &#x60;lowestPricedOffers&#x60; in the response. This attribute is only valid if &#x60;lowestPricedOffers&#x60; is requested in &#x60;includedData&#x60;</value>
        [DataMember(Name = "lowestPricedOffersInputs", EmitDefaultValue = false)]
        public List<LowestPricedOffersInput> LowestPricedOffersInputs { get; set; }

        /// <summary>
        /// The URI associated with the individual APIs that are called as part of the batch request.
        /// </summary>
        /// <value>The URI associated with the individual APIs that are called as part of the batch request.</value>
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompetitiveSummaryRequest {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  IncludedData: ").Append(IncludedData).Append("\n");
            sb.Append("  LowestPricedOffersInputs: ").Append(LowestPricedOffersInputs).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Uri (string) maxLength
            if (this.Uri != null && this.Uri.Length > 512)
            {
                yield return new ValidationResult("Invalid value for Uri, length must be less than 512.", new [] { "Uri" });
            }

            // Uri (string) minLength
            if (this.Uri != null && this.Uri.Length < 6)
            {
                yield return new ValidationResult("Invalid value for Uri, length must be greater than 6.", new [] { "Uri" });
            }

            yield break;
        }
    }

}
