/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-05-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v2022_05_01
{
    /// <summary>
    /// Identifies an offer from a particular seller for a specified ASIN.
    /// </summary>
    [DataContract(Name = "OfferIdentifier")]
    public partial class OfferIdentifier : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FulfillmentType
        /// </summary>
        [DataMember(Name = "fulfillmentType", EmitDefaultValue = false)]
        public FulfillmentType? FulfillmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferIdentifier" /> class.
        /// </summary>
        /// <param name="marketplaceId">The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required).</param>
        /// <param name="sellerId">The seller identifier for the offer..</param>
        /// <param name="sku">The seller SKU of the item. This will only be present for the target offer, which belongs to the requesting seller..</param>
        /// <param name="asin">The ASIN of the item. (required).</param>
        /// <param name="fulfillmentType">fulfillmentType.</param>
        public OfferIdentifier(string marketplaceId = default(string), string sellerId = default(string), string sku = default(string), string asin = default(string), FulfillmentType? fulfillmentType = default(FulfillmentType?))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for OfferIdentifier and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new ArgumentNullException("asin is a required property for OfferIdentifier and cannot be null");
            }
            this.Asin = asin;
            this.SellerId = sellerId;
            this.Sku = sku;
            this.FulfillmentType = fulfillmentType;
        }

        /// <summary>
        /// The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
        /// </summary>
        /// <value>The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The seller identifier for the offer.
        /// </summary>
        /// <value>The seller identifier for the offer.</value>
        [DataMember(Name = "sellerId", EmitDefaultValue = false)]
        public string SellerId { get; set; }

        /// <summary>
        /// The seller SKU of the item. This will only be present for the target offer, which belongs to the requesting seller.
        /// </summary>
        /// <value>The seller SKU of the item. This will only be present for the target offer, which belongs to the requesting seller.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// The ASIN of the item.
        /// </summary>
        /// <value>The ASIN of the item.</value>
        [DataMember(Name = "asin", IsRequired = true, EmitDefaultValue = true)]
        public string Asin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferIdentifier {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  FulfillmentType: ").Append(FulfillmentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
