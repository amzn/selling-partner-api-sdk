/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-05-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v2022_05_01
{
    /// <summary>
    /// Describes a featured buying option, which includes a list of segmented featured offers for a particular item condition.
    /// </summary>
    [DataContract(Name = "FeaturedBuyingOption")]
    public partial class FeaturedBuyingOption : IValidatableObject
    {
        /// <summary>
        /// The buying option type for the featured offer. &#x60;buyingOptionType&#x60; represents the buying options that a customer receives on the detail page, such as &#x60;B2B&#x60;, &#x60;Fresh&#x60;, and &#x60;Subscribe n Save&#x60;. &#x60;buyingOptionType&#x60; currently supports &#x60;NEW&#x60; as a value.
        /// </summary>
        /// <value>The buying option type for the featured offer. &#x60;buyingOptionType&#x60; represents the buying options that a customer receives on the detail page, such as &#x60;B2B&#x60;, &#x60;Fresh&#x60;, and &#x60;Subscribe n Save&#x60;. &#x60;buyingOptionType&#x60; currently supports &#x60;NEW&#x60; as a value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BuyingOptionTypeEnum
        {
            /// <summary>
            /// Enum New for value: New
            /// </summary>
            [EnumMember(Value = "New")]
            New = 1
        }


        /// <summary>
        /// The buying option type for the featured offer. &#x60;buyingOptionType&#x60; represents the buying options that a customer receives on the detail page, such as &#x60;B2B&#x60;, &#x60;Fresh&#x60;, and &#x60;Subscribe n Save&#x60;. &#x60;buyingOptionType&#x60; currently supports &#x60;NEW&#x60; as a value.
        /// </summary>
        /// <value>The buying option type for the featured offer. &#x60;buyingOptionType&#x60; represents the buying options that a customer receives on the detail page, such as &#x60;B2B&#x60;, &#x60;Fresh&#x60;, and &#x60;Subscribe n Save&#x60;. &#x60;buyingOptionType&#x60; currently supports &#x60;NEW&#x60; as a value.</value>
        [DataMember(Name = "buyingOptionType", IsRequired = true, EmitDefaultValue = true)]
        public BuyingOptionTypeEnum BuyingOptionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturedBuyingOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeaturedBuyingOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturedBuyingOption" /> class.
        /// </summary>
        /// <param name="buyingOptionType">The buying option type for the featured offer. &#x60;buyingOptionType&#x60; represents the buying options that a customer receives on the detail page, such as &#x60;B2B&#x60;, &#x60;Fresh&#x60;, and &#x60;Subscribe n Save&#x60;. &#x60;buyingOptionType&#x60; currently supports &#x60;NEW&#x60; as a value. (required).</param>
        /// <param name="segmentedFeaturedOffers">A list of segmented featured offers for the current buying option type. A segment can be considered as a group of regional contexts that all have the same featured offer. A regional context is a combination of factors such as customer type, region, or postal code and buying option. (required).</param>
        public FeaturedBuyingOption(BuyingOptionTypeEnum buyingOptionType = default(BuyingOptionTypeEnum), List<SegmentedFeaturedOffer> segmentedFeaturedOffers = default(List<SegmentedFeaturedOffer>))
        {
            this.BuyingOptionType = buyingOptionType;
            // to ensure "segmentedFeaturedOffers" is required (not null)
            if (segmentedFeaturedOffers == null)
            {
                throw new ArgumentNullException("segmentedFeaturedOffers is a required property for FeaturedBuyingOption and cannot be null");
            }
            this.SegmentedFeaturedOffers = segmentedFeaturedOffers;
        }

        /// <summary>
        /// A list of segmented featured offers for the current buying option type. A segment can be considered as a group of regional contexts that all have the same featured offer. A regional context is a combination of factors such as customer type, region, or postal code and buying option.
        /// </summary>
        /// <value>A list of segmented featured offers for the current buying option type. A segment can be considered as a group of regional contexts that all have the same featured offer. A regional context is a combination of factors such as customer type, region, or postal code and buying option.</value>
        [DataMember(Name = "segmentedFeaturedOffers", IsRequired = true, EmitDefaultValue = true)]
        public List<SegmentedFeaturedOffer> SegmentedFeaturedOffers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeaturedBuyingOption {\n");
            sb.Append("  BuyingOptionType: ").Append(BuyingOptionType).Append("\n");
            sb.Append("  SegmentedFeaturedOffers: ").Append(SegmentedFeaturedOffers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
