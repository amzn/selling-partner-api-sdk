/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-05-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v2022_05_01
{
    /// <summary>
    /// Describes the segment in which the offer is featured.
    /// </summary>
    [DataContract(Name = "FeaturedOfferSegment")]
    public partial class FeaturedOfferSegment : IValidatableObject
    {
        /// <summary>
        /// The customer membership type that makes up this segment
        /// </summary>
        /// <value>The customer membership type that makes up this segment</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomerMembershipEnum
        {
            /// <summary>
            /// Enum PRIME for value: PRIME
            /// </summary>
            [EnumMember(Value = "PRIME")]
            PRIME = 1,

            /// <summary>
            /// Enum NONPRIME for value: NON_PRIME
            /// </summary>
            [EnumMember(Value = "NON_PRIME")]
            NONPRIME = 2,

            /// <summary>
            /// Enum DEFAULT for value: DEFAULT
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULT = 3
        }


        /// <summary>
        /// The customer membership type that makes up this segment
        /// </summary>
        /// <value>The customer membership type that makes up this segment</value>
        [DataMember(Name = "customerMembership", IsRequired = true, EmitDefaultValue = true)]
        public CustomerMembershipEnum CustomerMembership { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturedOfferSegment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeaturedOfferSegment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturedOfferSegment" /> class.
        /// </summary>
        /// <param name="customerMembership">The customer membership type that makes up this segment (required).</param>
        /// <param name="segmentDetails">segmentDetails (required).</param>
        public FeaturedOfferSegment(CustomerMembershipEnum customerMembership = default(CustomerMembershipEnum), SegmentDetails segmentDetails = default(SegmentDetails))
        {
            this.CustomerMembership = customerMembership;
            // to ensure "segmentDetails" is required (not null)
            if (segmentDetails == null)
            {
                throw new ArgumentNullException("segmentDetails is a required property for FeaturedOfferSegment and cannot be null");
            }
            this.SegmentDetails = segmentDetails;
        }

        /// <summary>
        /// Gets or Sets SegmentDetails
        /// </summary>
        [DataMember(Name = "segmentDetails", IsRequired = true, EmitDefaultValue = true)]
        public SegmentDetails SegmentDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeaturedOfferSegment {\n");
            sb.Append("  CustomerMembership: ").Append(CustomerMembership).Append("\n");
            sb.Append("  SegmentDetails: ").Append(SegmentDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
