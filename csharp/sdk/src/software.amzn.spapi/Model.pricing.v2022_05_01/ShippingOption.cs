/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-05-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.pricing.v2022_05_01
{
    /// <summary>
    /// The shipping option available for the offer.
    /// </summary>
    [DataContract(Name = "ShippingOption")]
    public partial class ShippingOption : IValidatableObject
    {
        /// <summary>
        /// The type of shipping option.
        /// </summary>
        /// <value>The type of shipping option.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShippingOptionTypeEnum
        {
            /// <summary>
            /// Enum DEFAULT for value: DEFAULT
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULT = 1
        }


        /// <summary>
        /// The type of shipping option.
        /// </summary>
        /// <value>The type of shipping option.</value>
        [DataMember(Name = "shippingOptionType", IsRequired = true, EmitDefaultValue = true)]
        public ShippingOptionTypeEnum ShippingOptionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShippingOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingOption" /> class.
        /// </summary>
        /// <param name="shippingOptionType">The type of shipping option. (required).</param>
        /// <param name="price">price (required).</param>
        public ShippingOption(ShippingOptionTypeEnum shippingOptionType = default(ShippingOptionTypeEnum), MoneyType price = default(MoneyType))
        {
            this.ShippingOptionType = shippingOptionType;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for ShippingOption and cannot be null");
            }
            this.Price = price;
        }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public MoneyType Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingOption {\n");
            sb.Append("  ShippingOptionType: ").Append(ShippingOptionType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
