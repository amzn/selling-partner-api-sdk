/*
 * Selling Partner API for Listings Restrictions
 *
 * The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.listings.restrictions.v2021_08_01
{
    /// <summary>
    /// A link to resources related to a listing restriction.
    /// </summary>
    [DataContract(Name = "Link")]
    public partial class Link : IValidatableObject
    {
        /// <summary>
        /// The HTTP verb used to interact with the related resource.
        /// </summary>
        /// <value>The HTTP verb used to interact with the related resource.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerbEnum
        {
            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GET = 1
        }


        /// <summary>
        /// The HTTP verb used to interact with the related resource.
        /// </summary>
        /// <value>The HTTP verb used to interact with the related resource.</value>
        [DataMember(Name = "verb", IsRequired = true, EmitDefaultValue = true)]
        public VerbEnum Verb { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Link" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Link() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Link" /> class.
        /// </summary>
        /// <param name="resource">The URI of the related resource. (required).</param>
        /// <param name="verb">The HTTP verb used to interact with the related resource. (required).</param>
        /// <param name="title">The title of the related resource..</param>
        /// <param name="type">The media type of the related resource..</param>
        public Link(string resource = default(string), VerbEnum verb = default(VerbEnum), string title = default(string), string type = default(string))
        {
            // to ensure "resource" is required (not null)
            if (resource == null)
            {
                throw new ArgumentNullException("resource is a required property for Link and cannot be null");
            }
            this.Resource = resource;
            this.Verb = verb;
            this.Title = title;
            this.Type = type;
        }

        /// <summary>
        /// The URI of the related resource.
        /// </summary>
        /// <value>The URI of the related resource.</value>
        [DataMember(Name = "resource", IsRequired = true, EmitDefaultValue = true)]
        public string Resource { get; set; }

        /// <summary>
        /// The title of the related resource.
        /// </summary>
        /// <value>The title of the related resource.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The media type of the related resource.
        /// </summary>
        /// <value>The media type of the related resource.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Link {\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Verb: ").Append(Verb).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
