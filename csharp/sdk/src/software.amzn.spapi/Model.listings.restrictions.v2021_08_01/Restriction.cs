/*
 * Selling Partner API for Listings Restrictions
 *
 * The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.listings.restrictions.v2021_08_01
{
    /// <summary>
    /// A listing restriction, optionally qualified by a condition, with a list of reasons for the restriction.
    /// </summary>
    [DataContract(Name = "Restriction")]
    public partial class Restriction : IValidatableObject
    {
        /// <summary>
        /// The condition that applies to the restriction.
        /// </summary>
        /// <value>The condition that applies to the restriction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionTypeEnum
        {
            /// <summary>
            /// Enum NewNew for value: new_new
            /// </summary>
            [EnumMember(Value = "new_new")]
            NewNew = 1,

            /// <summary>
            /// Enum NewOpenBox for value: new_open_box
            /// </summary>
            [EnumMember(Value = "new_open_box")]
            NewOpenBox = 2,

            /// <summary>
            /// Enum NewOem for value: new_oem
            /// </summary>
            [EnumMember(Value = "new_oem")]
            NewOem = 3,

            /// <summary>
            /// Enum RefurbishedRefurbished for value: refurbished_refurbished
            /// </summary>
            [EnumMember(Value = "refurbished_refurbished")]
            RefurbishedRefurbished = 4,

            /// <summary>
            /// Enum UsedLikeNew for value: used_like_new
            /// </summary>
            [EnumMember(Value = "used_like_new")]
            UsedLikeNew = 5,

            /// <summary>
            /// Enum UsedVeryGood for value: used_very_good
            /// </summary>
            [EnumMember(Value = "used_very_good")]
            UsedVeryGood = 6,

            /// <summary>
            /// Enum UsedGood for value: used_good
            /// </summary>
            [EnumMember(Value = "used_good")]
            UsedGood = 7,

            /// <summary>
            /// Enum UsedAcceptable for value: used_acceptable
            /// </summary>
            [EnumMember(Value = "used_acceptable")]
            UsedAcceptable = 8,

            /// <summary>
            /// Enum CollectibleLikeNew for value: collectible_like_new
            /// </summary>
            [EnumMember(Value = "collectible_like_new")]
            CollectibleLikeNew = 9,

            /// <summary>
            /// Enum CollectibleVeryGood for value: collectible_very_good
            /// </summary>
            [EnumMember(Value = "collectible_very_good")]
            CollectibleVeryGood = 10,

            /// <summary>
            /// Enum CollectibleGood for value: collectible_good
            /// </summary>
            [EnumMember(Value = "collectible_good")]
            CollectibleGood = 11,

            /// <summary>
            /// Enum CollectibleAcceptable for value: collectible_acceptable
            /// </summary>
            [EnumMember(Value = "collectible_acceptable")]
            CollectibleAcceptable = 12,

            /// <summary>
            /// Enum ClubClub for value: club_club
            /// </summary>
            [EnumMember(Value = "club_club")]
            ClubClub = 13
        }


        /// <summary>
        /// The condition that applies to the restriction.
        /// </summary>
        /// <value>The condition that applies to the restriction.</value>
        [DataMember(Name = "conditionType", EmitDefaultValue = false)]
        public ConditionTypeEnum? ConditionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Restriction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Restriction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Restriction" /> class.
        /// </summary>
        /// <param name="marketplaceId">A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced. (required).</param>
        /// <param name="conditionType">The condition that applies to the restriction..</param>
        /// <param name="reasons">A list of reasons for the restriction..</param>
        public Restriction(string marketplaceId = default(string), ConditionTypeEnum? conditionType = default(ConditionTypeEnum?), List<Reason> reasons = default(List<Reason>))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for Restriction and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            this.ConditionType = conditionType;
            this.Reasons = reasons;
        }

        /// <summary>
        /// A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced.
        /// </summary>
        /// <value>A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced.</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A list of reasons for the restriction.
        /// </summary>
        /// <value>A list of reasons for the restriction.</value>
        [DataMember(Name = "reasons", EmitDefaultValue = false)]
        public List<Reason> Reasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Restriction {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  ConditionType: ").Append(ConditionType).Append("\n");
            sb.Append("  Reasons: ").Append(Reasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
