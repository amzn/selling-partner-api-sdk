/*
 * Selling Partner API for Listings Restrictions
 *
 * The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.listings.restrictions.v2021_08_01
{
    /// <summary>
    /// A reason for the restriction, including path forward links that may allow Selling Partners to remove the restriction, if available.
    /// </summary>
    [DataContract(Name = "Reason")]
    public partial class Reason : IValidatableObject
    {
        /// <summary>
        /// A code indicating why the listing is restricted.
        /// </summary>
        /// <value>A code indicating why the listing is restricted.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonCodeEnum
        {
            /// <summary>
            /// Enum APPROVALREQUIRED for value: APPROVAL_REQUIRED
            /// </summary>
            [EnumMember(Value = "APPROVAL_REQUIRED")]
            APPROVALREQUIRED = 1,

            /// <summary>
            /// Enum ASINNOTFOUND for value: ASIN_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "ASIN_NOT_FOUND")]
            ASINNOTFOUND = 2,

            /// <summary>
            /// Enum NOTELIGIBLE for value: NOT_ELIGIBLE
            /// </summary>
            [EnumMember(Value = "NOT_ELIGIBLE")]
            NOTELIGIBLE = 3
        }


        /// <summary>
        /// A code indicating why the listing is restricted.
        /// </summary>
        /// <value>A code indicating why the listing is restricted.</value>
        [DataMember(Name = "reasonCode", EmitDefaultValue = false)]
        public ReasonCodeEnum? ReasonCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Reason" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Reason() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Reason" /> class.
        /// </summary>
        /// <param name="message">A message describing the reason for the restriction. (required).</param>
        /// <param name="reasonCode">A code indicating why the listing is restricted..</param>
        /// <param name="links">A list of path forward links that may allow Selling Partners to remove the restriction..</param>
        public Reason(string message = default(string), ReasonCodeEnum? reasonCode = default(ReasonCodeEnum?), List<Link> links = default(List<Link>))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for Reason and cannot be null");
            }
            this.Message = message;
            this.ReasonCode = reasonCode;
            this.Links = links;
        }

        /// <summary>
        /// A message describing the reason for the restriction.
        /// </summary>
        /// <value>A message describing the reason for the restriction.</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// A list of path forward links that may allow Selling Partners to remove the restriction.
        /// </summary>
        /// <value>A list of path forward links that may allow Selling Partners to remove the restriction.</value>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Reason {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
