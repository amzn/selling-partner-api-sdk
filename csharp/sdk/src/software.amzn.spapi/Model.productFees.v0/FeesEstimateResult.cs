/*
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.productFees.v0
{
    /// <summary>
    /// An item identifier and the estimated fees for the item.
    /// </summary>
    [DataContract(Name = "FeesEstimateResult")]
    public partial class FeesEstimateResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesEstimateResult" /> class.
        /// </summary>
        /// <param name="status">The status of the fee request. Possible values: Success, ClientError, ServiceError..</param>
        /// <param name="feesEstimateIdentifier">feesEstimateIdentifier.</param>
        /// <param name="feesEstimate">feesEstimate.</param>
        /// <param name="error">error.</param>
        public FeesEstimateResult(string status = default(string), FeesEstimateIdentifier feesEstimateIdentifier = default(FeesEstimateIdentifier), FeesEstimate feesEstimate = default(FeesEstimate), FeesEstimateError error = default(FeesEstimateError))
        {
            this.Status = status;
            this.FeesEstimateIdentifier = feesEstimateIdentifier;
            this.FeesEstimate = feesEstimate;
            this.Error = error;
        }

        /// <summary>
        /// The status of the fee request. Possible values: Success, ClientError, ServiceError.
        /// </summary>
        /// <value>The status of the fee request. Possible values: Success, ClientError, ServiceError.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets FeesEstimateIdentifier
        /// </summary>
        [DataMember(Name = "FeesEstimateIdentifier", EmitDefaultValue = false)]
        public FeesEstimateIdentifier FeesEstimateIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets FeesEstimate
        /// </summary>
        [DataMember(Name = "FeesEstimate", EmitDefaultValue = false)]
        public FeesEstimate FeesEstimate { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "Error", EmitDefaultValue = false)]
        public FeesEstimateError Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeesEstimateResult {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FeesEstimateIdentifier: ").Append(FeesEstimateIdentifier).Append("\n");
            sb.Append("  FeesEstimate: ").Append(FeesEstimate).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
