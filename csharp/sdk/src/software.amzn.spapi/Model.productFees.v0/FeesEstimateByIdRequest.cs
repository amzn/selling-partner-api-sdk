/*
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.productFees.v0
{
    /// <summary>
    /// A product, marketplace, and proposed price used to request estimated fees.
    /// </summary>
    [DataContract(Name = "FeesEstimateByIdRequest")]
    public partial class FeesEstimateByIdRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets IdType
        /// </summary>
        [DataMember(Name = "IdType", IsRequired = true, EmitDefaultValue = true)]
        public IdType IdType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesEstimateByIdRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeesEstimateByIdRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesEstimateByIdRequest" /> class.
        /// </summary>
        /// <param name="feesEstimateRequest">feesEstimateRequest.</param>
        /// <param name="idType">idType (required).</param>
        /// <param name="idValue">The item identifier. (required).</param>
        public FeesEstimateByIdRequest(FeesEstimateRequest feesEstimateRequest = default(FeesEstimateRequest), IdType idType = default(IdType), string idValue = default(string))
        {
            this.IdType = idType;
            // to ensure "idValue" is required (not null)
            if (idValue == null)
            {
                throw new ArgumentNullException("idValue is a required property for FeesEstimateByIdRequest and cannot be null");
            }
            this.IdValue = idValue;
            this.FeesEstimateRequest = feesEstimateRequest;
        }

        /// <summary>
        /// Gets or Sets FeesEstimateRequest
        /// </summary>
        [DataMember(Name = "FeesEstimateRequest", EmitDefaultValue = false)]
        public FeesEstimateRequest FeesEstimateRequest { get; set; }

        /// <summary>
        /// The item identifier.
        /// </summary>
        /// <value>The item identifier.</value>
        [DataMember(Name = "IdValue", IsRequired = true, EmitDefaultValue = true)]
        public string IdValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeesEstimateByIdRequest {\n");
            sb.Append("  FeesEstimateRequest: ").Append(FeesEstimateRequest).Append("\n");
            sb.Append("  IdType: ").Append(IdType).Append("\n");
            sb.Append("  IdValue: ").Append(IdValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
