/*
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.productFees.v0
{
    /// <summary>
    /// Points
    /// </summary>
    [DataContract(Name = "Points")]
    public partial class Points : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Points" /> class.
        /// </summary>
        /// <param name="pointsNumber">pointsNumber.</param>
        /// <param name="pointsMonetaryValue">pointsMonetaryValue.</param>
        public Points(int pointsNumber = default(int), MoneyType pointsMonetaryValue = default(MoneyType))
        {
            this.PointsNumber = pointsNumber;
            this.PointsMonetaryValue = pointsMonetaryValue;
        }

        /// <summary>
        /// Gets or Sets PointsNumber
        /// </summary>
        [DataMember(Name = "PointsNumber", EmitDefaultValue = false)]
        public int PointsNumber { get; set; }

        /// <summary>
        /// Gets or Sets PointsMonetaryValue
        /// </summary>
        [DataMember(Name = "PointsMonetaryValue", EmitDefaultValue = false)]
        public MoneyType PointsMonetaryValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Points {\n");
            sb.Append("  PointsNumber: ").Append(PointsNumber).Append("\n");
            sb.Append("  PointsMonetaryValue: ").Append(PointsMonetaryValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
