/*
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * The version of the OpenAPI document: 2022-11-07
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.replenishment.v2022_11_07
{
    /// <summary>
    /// The offer program configuration contains a set of program properties for an offer.
    /// </summary>
    [DataContract(Name = "OfferProgramConfiguration")]
    public partial class OfferProgramConfiguration : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EnrollmentMethod
        /// </summary>
        [DataMember(Name = "enrollmentMethod", EmitDefaultValue = false)]
        public EnrollmentMethod? EnrollmentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferProgramConfiguration" /> class.
        /// </summary>
        /// <param name="preferences">preferences.</param>
        /// <param name="promotions">promotions.</param>
        /// <param name="enrollmentMethod">enrollmentMethod.</param>
        public OfferProgramConfiguration(OfferProgramConfigurationPreferences preferences = default(OfferProgramConfigurationPreferences), OfferProgramConfigurationPromotions promotions = default(OfferProgramConfigurationPromotions), EnrollmentMethod? enrollmentMethod = default(EnrollmentMethod?))
        {
            this.Preferences = preferences;
            this.Promotions = promotions;
            this.EnrollmentMethod = enrollmentMethod;
        }

        /// <summary>
        /// Gets or Sets Preferences
        /// </summary>
        [DataMember(Name = "preferences", EmitDefaultValue = false)]
        public OfferProgramConfigurationPreferences Preferences { get; set; }

        /// <summary>
        /// Gets or Sets Promotions
        /// </summary>
        [DataMember(Name = "promotions", EmitDefaultValue = false)]
        public OfferProgramConfigurationPromotions Promotions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferProgramConfiguration {\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  Promotions: ").Append(Promotions).Append("\n");
            sb.Append("  EnrollmentMethod: ").Append(EnrollmentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
