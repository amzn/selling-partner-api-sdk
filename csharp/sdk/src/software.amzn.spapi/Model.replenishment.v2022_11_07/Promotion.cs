/*
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * The version of the OpenAPI document: 2022-11-07
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.replenishment.v2022_11_07
{
    /// <summary>
    /// Offer promotions to include in the result filter criteria.
    /// </summary>
    [DataContract(Name = "Promotion")]
    public partial class Promotion : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Promotion" /> class.
        /// </summary>
        /// <param name="sellingPartnerFundedBaseDiscount">sellingPartnerFundedBaseDiscount.</param>
        /// <param name="sellingPartnerFundedTieredDiscount">sellingPartnerFundedTieredDiscount.</param>
        /// <param name="amazonFundedBaseDiscount">amazonFundedBaseDiscount.</param>
        /// <param name="amazonFundedTieredDiscount">amazonFundedTieredDiscount.</param>
        public Promotion(DiscountFunding sellingPartnerFundedBaseDiscount = default(DiscountFunding), DiscountFunding sellingPartnerFundedTieredDiscount = default(DiscountFunding), DiscountFunding amazonFundedBaseDiscount = default(DiscountFunding), DiscountFunding amazonFundedTieredDiscount = default(DiscountFunding))
        {
            this.SellingPartnerFundedBaseDiscount = sellingPartnerFundedBaseDiscount;
            this.SellingPartnerFundedTieredDiscount = sellingPartnerFundedTieredDiscount;
            this.AmazonFundedBaseDiscount = amazonFundedBaseDiscount;
            this.AmazonFundedTieredDiscount = amazonFundedTieredDiscount;
        }

        /// <summary>
        /// Gets or Sets SellingPartnerFundedBaseDiscount
        /// </summary>
        [DataMember(Name = "sellingPartnerFundedBaseDiscount", EmitDefaultValue = false)]
        public DiscountFunding SellingPartnerFundedBaseDiscount { get; set; }

        /// <summary>
        /// Gets or Sets SellingPartnerFundedTieredDiscount
        /// </summary>
        [DataMember(Name = "sellingPartnerFundedTieredDiscount", EmitDefaultValue = false)]
        public DiscountFunding SellingPartnerFundedTieredDiscount { get; set; }

        /// <summary>
        /// Gets or Sets AmazonFundedBaseDiscount
        /// </summary>
        [DataMember(Name = "amazonFundedBaseDiscount", EmitDefaultValue = false)]
        public DiscountFunding AmazonFundedBaseDiscount { get; set; }

        /// <summary>
        /// Gets or Sets AmazonFundedTieredDiscount
        /// </summary>
        [DataMember(Name = "amazonFundedTieredDiscount", EmitDefaultValue = false)]
        public DiscountFunding AmazonFundedTieredDiscount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Promotion {\n");
            sb.Append("  SellingPartnerFundedBaseDiscount: ").Append(SellingPartnerFundedBaseDiscount).Append("\n");
            sb.Append("  SellingPartnerFundedTieredDiscount: ").Append(SellingPartnerFundedTieredDiscount).Append("\n");
            sb.Append("  AmazonFundedBaseDiscount: ").Append(AmazonFundedBaseDiscount).Append("\n");
            sb.Append("  AmazonFundedTieredDiscount: ").Append(AmazonFundedTieredDiscount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
