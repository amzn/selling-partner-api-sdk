/*
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * The version of the OpenAPI document: 2022-11-07
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.replenishment.v2022_11_07
{
    /// <summary>
    /// The response schema for the &#x60;getSellingPartnerMetrics&#x60; operation.
    /// </summary>
    [DataContract(Name = "GetSellingPartnerMetricsResponse")]
    public partial class GetSellingPartnerMetricsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSellingPartnerMetricsResponse" /> class.
        /// </summary>
        /// <param name="metrics">A list of metrics data for the selling partner..</param>
        public GetSellingPartnerMetricsResponse(List<GetSellingPartnerMetricsResponseMetric> metrics = default(List<GetSellingPartnerMetricsResponseMetric>))
        {
            this.Metrics = metrics;
        }

        /// <summary>
        /// A list of metrics data for the selling partner.
        /// </summary>
        /// <value>A list of metrics data for the selling partner.</value>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public List<GetSellingPartnerMetricsResponseMetric> Metrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSellingPartnerMetricsResponse {\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
