/*
 * Selling Partner API for Direct Fulfillment Payments
 *
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.df.payments.v1
{
    /// <summary>
    /// Details of tax amount applied.
    /// </summary>
    [DataContract(Name = "TaxDetail")]
    public partial class TaxDetail : IValidatableObject
    {
        /// <summary>
        /// Type of the tax applied.
        /// </summary>
        /// <value>Type of the tax applied.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxTypeEnum
        {
            /// <summary>
            /// Enum CGST for value: CGST
            /// </summary>
            [EnumMember(Value = "CGST")]
            CGST = 1,

            /// <summary>
            /// Enum SGST for value: SGST
            /// </summary>
            [EnumMember(Value = "SGST")]
            SGST = 2,

            /// <summary>
            /// Enum CESS for value: CESS
            /// </summary>
            [EnumMember(Value = "CESS")]
            CESS = 3,

            /// <summary>
            /// Enum UTGST for value: UTGST
            /// </summary>
            [EnumMember(Value = "UTGST")]
            UTGST = 4,

            /// <summary>
            /// Enum IGST for value: IGST
            /// </summary>
            [EnumMember(Value = "IGST")]
            IGST = 5,

            /// <summary>
            /// Enum MwSt for value: MwSt.
            /// </summary>
            [EnumMember(Value = "MwSt.")]
            MwSt = 6,

            /// <summary>
            /// Enum PST for value: PST
            /// </summary>
            [EnumMember(Value = "PST")]
            PST = 7,

            /// <summary>
            /// Enum TVA for value: TVA
            /// </summary>
            [EnumMember(Value = "TVA")]
            TVA = 8,

            /// <summary>
            /// Enum VAT for value: VAT
            /// </summary>
            [EnumMember(Value = "VAT")]
            VAT = 9,

            /// <summary>
            /// Enum GST for value: GST
            /// </summary>
            [EnumMember(Value = "GST")]
            GST = 10,

            /// <summary>
            /// Enum ST for value: ST
            /// </summary>
            [EnumMember(Value = "ST")]
            ST = 11,

            /// <summary>
            /// Enum Consumption for value: Consumption
            /// </summary>
            [EnumMember(Value = "Consumption")]
            Consumption = 12,

            /// <summary>
            /// Enum MutuallyDefined for value: MutuallyDefined
            /// </summary>
            [EnumMember(Value = "MutuallyDefined")]
            MutuallyDefined = 13,

            /// <summary>
            /// Enum DomesticVAT for value: DomesticVAT
            /// </summary>
            [EnumMember(Value = "DomesticVAT")]
            DomesticVAT = 14
        }


        /// <summary>
        /// Type of the tax applied.
        /// </summary>
        /// <value>Type of the tax applied.</value>
        [DataMember(Name = "taxType", IsRequired = true, EmitDefaultValue = true)]
        public TaxTypeEnum TaxType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaxDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxDetail" /> class.
        /// </summary>
        /// <param name="taxType">Type of the tax applied. (required).</param>
        /// <param name="taxRate">A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. &lt;br&gt;**Pattern** : &#x60;^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$&#x60;..</param>
        /// <param name="taxAmount">taxAmount (required).</param>
        /// <param name="taxableAmount">taxableAmount.</param>
        public TaxDetail(TaxTypeEnum taxType = default(TaxTypeEnum), string taxRate = default(string), Money taxAmount = default(Money), Money taxableAmount = default(Money))
        {
            this.TaxType = taxType;
            // to ensure "taxAmount" is required (not null)
            if (taxAmount == null)
            {
                throw new ArgumentNullException("taxAmount is a required property for TaxDetail and cannot be null");
            }
            this.TaxAmount = taxAmount;
            this.TaxRate = taxRate;
            this.TaxableAmount = taxableAmount;
        }

        /// <summary>
        /// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. &lt;br&gt;**Pattern** : &#x60;^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$&#x60;.
        /// </summary>
        /// <value>A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. &lt;br&gt;**Pattern** : &#x60;^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$&#x60;.</value>
        [DataMember(Name = "taxRate", EmitDefaultValue = false)]
        public string TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name = "taxAmount", IsRequired = true, EmitDefaultValue = true)]
        public Money TaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxableAmount
        /// </summary>
        [DataMember(Name = "taxableAmount", EmitDefaultValue = false)]
        public Money TaxableAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxDetail {\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
