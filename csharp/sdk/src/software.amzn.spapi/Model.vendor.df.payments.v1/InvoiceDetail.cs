/*
 * Selling Partner API for Direct Fulfillment Payments
 *
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.df.payments.v1
{
    /// <summary>
    /// Represents the details of an invoice, including invoice number, date, parties involved, payment terms, totals, taxes, charges, and line items.
    /// </summary>
    [DataContract(Name = "InvoiceDetail")]
    public partial class InvoiceDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetail" /> class.
        /// </summary>
        /// <param name="invoiceNumber">The unique invoice number. (required).</param>
        /// <param name="invoiceDate">Invoice date. (required).</param>
        /// <param name="referenceNumber">An additional unique reference number used for regulatory or other purposes..</param>
        /// <param name="remitToParty">remitToParty (required).</param>
        /// <param name="shipFromParty">shipFromParty (required).</param>
        /// <param name="billToParty">billToParty.</param>
        /// <param name="shipToCountryCode">Ship-to country code..</param>
        /// <param name="paymentTermsCode">The payment terms for the invoice..</param>
        /// <param name="invoiceTotal">invoiceTotal (required).</param>
        /// <param name="taxTotals">Individual tax details per line item..</param>
        /// <param name="additionalDetails">Additional details provided by the selling party, for tax-related or other purposes..</param>
        /// <param name="chargeDetails">Total charge amount details for all line items..</param>
        /// <param name="items">Provides the details of the items in this invoice. (required).</param>
        public InvoiceDetail(string invoiceNumber = default(string), DateTime invoiceDate = default(DateTime), string referenceNumber = default(string), PartyIdentification remitToParty = default(PartyIdentification), PartyIdentification shipFromParty = default(PartyIdentification), PartyIdentification billToParty = default(PartyIdentification), string shipToCountryCode = default(string), string paymentTermsCode = default(string), Money invoiceTotal = default(Money), List<TaxDetail> taxTotals = default(List<TaxDetail>), List<AdditionalDetails> additionalDetails = default(List<AdditionalDetails>), List<ChargeDetails> chargeDetails = default(List<ChargeDetails>), List<InvoiceItem> items = default(List<InvoiceItem>))
        {
            // to ensure "invoiceNumber" is required (not null)
            if (invoiceNumber == null)
            {
                throw new ArgumentNullException("invoiceNumber is a required property for InvoiceDetail and cannot be null");
            }
            this.InvoiceNumber = invoiceNumber;
            this.InvoiceDate = invoiceDate;
            // to ensure "remitToParty" is required (not null)
            if (remitToParty == null)
            {
                throw new ArgumentNullException("remitToParty is a required property for InvoiceDetail and cannot be null");
            }
            this.RemitToParty = remitToParty;
            // to ensure "shipFromParty" is required (not null)
            if (shipFromParty == null)
            {
                throw new ArgumentNullException("shipFromParty is a required property for InvoiceDetail and cannot be null");
            }
            this.ShipFromParty = shipFromParty;
            // to ensure "invoiceTotal" is required (not null)
            if (invoiceTotal == null)
            {
                throw new ArgumentNullException("invoiceTotal is a required property for InvoiceDetail and cannot be null");
            }
            this.InvoiceTotal = invoiceTotal;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for InvoiceDetail and cannot be null");
            }
            this.Items = items;
            this.ReferenceNumber = referenceNumber;
            this.BillToParty = billToParty;
            this.ShipToCountryCode = shipToCountryCode;
            this.PaymentTermsCode = paymentTermsCode;
            this.TaxTotals = taxTotals;
            this.AdditionalDetails = additionalDetails;
            this.ChargeDetails = chargeDetails;
        }

        /// <summary>
        /// The unique invoice number.
        /// </summary>
        /// <value>The unique invoice number.</value>
        [DataMember(Name = "invoiceNumber", IsRequired = true, EmitDefaultValue = true)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Invoice date.
        /// </summary>
        /// <value>Invoice date.</value>
        [DataMember(Name = "invoiceDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime InvoiceDate { get; set; }

        /// <summary>
        /// An additional unique reference number used for regulatory or other purposes.
        /// </summary>
        /// <value>An additional unique reference number used for regulatory or other purposes.</value>
        [DataMember(Name = "referenceNumber", EmitDefaultValue = false)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets RemitToParty
        /// </summary>
        [DataMember(Name = "remitToParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification RemitToParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipFromParty
        /// </summary>
        [DataMember(Name = "shipFromParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Gets or Sets BillToParty
        /// </summary>
        [DataMember(Name = "billToParty", EmitDefaultValue = false)]
        public PartyIdentification BillToParty { get; set; }

        /// <summary>
        /// Ship-to country code.
        /// </summary>
        /// <value>Ship-to country code.</value>
        [DataMember(Name = "shipToCountryCode", EmitDefaultValue = false)]
        public string ShipToCountryCode { get; set; }

        /// <summary>
        /// The payment terms for the invoice.
        /// </summary>
        /// <value>The payment terms for the invoice.</value>
        [DataMember(Name = "paymentTermsCode", EmitDefaultValue = false)]
        public string PaymentTermsCode { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTotal
        /// </summary>
        [DataMember(Name = "invoiceTotal", IsRequired = true, EmitDefaultValue = true)]
        public Money InvoiceTotal { get; set; }

        /// <summary>
        /// Individual tax details per line item.
        /// </summary>
        /// <value>Individual tax details per line item.</value>
        [DataMember(Name = "taxTotals", EmitDefaultValue = false)]
        public List<TaxDetail> TaxTotals { get; set; }

        /// <summary>
        /// Additional details provided by the selling party, for tax-related or other purposes.
        /// </summary>
        /// <value>Additional details provided by the selling party, for tax-related or other purposes.</value>
        [DataMember(Name = "additionalDetails", EmitDefaultValue = false)]
        public List<AdditionalDetails> AdditionalDetails { get; set; }

        /// <summary>
        /// Total charge amount details for all line items.
        /// </summary>
        /// <value>Total charge amount details for all line items.</value>
        [DataMember(Name = "chargeDetails", EmitDefaultValue = false)]
        public List<ChargeDetails> ChargeDetails { get; set; }

        /// <summary>
        /// Provides the details of the items in this invoice.
        /// </summary>
        /// <value>Provides the details of the items in this invoice.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<InvoiceItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceDetail {\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  RemitToParty: ").Append(RemitToParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  BillToParty: ").Append(BillToParty).Append("\n");
            sb.Append("  ShipToCountryCode: ").Append(ShipToCountryCode).Append("\n");
            sb.Append("  PaymentTermsCode: ").Append(PaymentTermsCode).Append("\n");
            sb.Append("  InvoiceTotal: ").Append(InvoiceTotal).Append("\n");
            sb.Append("  TaxTotals: ").Append(TaxTotals).Append("\n");
            sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
            sb.Append("  ChargeDetails: ").Append(ChargeDetails).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
