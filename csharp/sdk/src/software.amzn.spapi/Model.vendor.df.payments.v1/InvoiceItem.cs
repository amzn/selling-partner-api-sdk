/*
 * Selling Partner API for Direct Fulfillment Payments
 *
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.df.payments.v1
{
    /// <summary>
    /// Provides the details of the items in this invoice.
    /// </summary>
    [DataContract(Name = "InvoiceItem")]
    public partial class InvoiceItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceItem" /> class.
        /// </summary>
        /// <param name="itemSequenceNumber">Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on. (required).</param>
        /// <param name="buyerProductIdentifier">Buyer&#39;s standard identification number (ASIN) of an item..</param>
        /// <param name="vendorProductIdentifier">The vendor selected product identification of the item..</param>
        /// <param name="invoicedQuantity">invoicedQuantity (required).</param>
        /// <param name="netCost">netCost (required).</param>
        /// <param name="purchaseOrderNumber">The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code. (required).</param>
        /// <param name="vendorOrderNumber">The vendor&#39;s order number for this order..</param>
        /// <param name="hsnCode">Harmonized System of Nomenclature (HSN) tax code. The HSN number cannot contain alphabets..</param>
        /// <param name="taxDetails">Individual tax details per line item..</param>
        /// <param name="chargeDetails">Individual charge details per line item..</param>
        public InvoiceItem(string itemSequenceNumber = default(string), string buyerProductIdentifier = default(string), string vendorProductIdentifier = default(string), ItemQuantity invoicedQuantity = default(ItemQuantity), Money netCost = default(Money), string purchaseOrderNumber = default(string), string vendorOrderNumber = default(string), string hsnCode = default(string), List<TaxDetail> taxDetails = default(List<TaxDetail>), List<ChargeDetails> chargeDetails = default(List<ChargeDetails>))
        {
            // to ensure "itemSequenceNumber" is required (not null)
            if (itemSequenceNumber == null)
            {
                throw new ArgumentNullException("itemSequenceNumber is a required property for InvoiceItem and cannot be null");
            }
            this.ItemSequenceNumber = itemSequenceNumber;
            // to ensure "invoicedQuantity" is required (not null)
            if (invoicedQuantity == null)
            {
                throw new ArgumentNullException("invoicedQuantity is a required property for InvoiceItem and cannot be null");
            }
            this.InvoicedQuantity = invoicedQuantity;
            // to ensure "netCost" is required (not null)
            if (netCost == null)
            {
                throw new ArgumentNullException("netCost is a required property for InvoiceItem and cannot be null");
            }
            this.NetCost = netCost;
            // to ensure "purchaseOrderNumber" is required (not null)
            if (purchaseOrderNumber == null)
            {
                throw new ArgumentNullException("purchaseOrderNumber is a required property for InvoiceItem and cannot be null");
            }
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.BuyerProductIdentifier = buyerProductIdentifier;
            this.VendorProductIdentifier = vendorProductIdentifier;
            this.VendorOrderNumber = vendorOrderNumber;
            this.HsnCode = hsnCode;
            this.TaxDetails = taxDetails;
            this.ChargeDetails = chargeDetails;
        }

        /// <summary>
        /// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
        /// </summary>
        /// <value>Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.</value>
        [DataMember(Name = "itemSequenceNumber", IsRequired = true, EmitDefaultValue = true)]
        public string ItemSequenceNumber { get; set; }

        /// <summary>
        /// Buyer&#39;s standard identification number (ASIN) of an item.
        /// </summary>
        /// <value>Buyer&#39;s standard identification number (ASIN) of an item.</value>
        [DataMember(Name = "buyerProductIdentifier", EmitDefaultValue = false)]
        public string BuyerProductIdentifier { get; set; }

        /// <summary>
        /// The vendor selected product identification of the item.
        /// </summary>
        /// <value>The vendor selected product identification of the item.</value>
        [DataMember(Name = "vendorProductIdentifier", EmitDefaultValue = false)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets InvoicedQuantity
        /// </summary>
        [DataMember(Name = "invoicedQuantity", IsRequired = true, EmitDefaultValue = true)]
        public ItemQuantity InvoicedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets NetCost
        /// </summary>
        [DataMember(Name = "netCost", IsRequired = true, EmitDefaultValue = true)]
        public Money NetCost { get; set; }

        /// <summary>
        /// The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
        /// </summary>
        /// <value>The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.</value>
        [DataMember(Name = "purchaseOrderNumber", IsRequired = true, EmitDefaultValue = true)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// The vendor&#39;s order number for this order.
        /// </summary>
        /// <value>The vendor&#39;s order number for this order.</value>
        [DataMember(Name = "vendorOrderNumber", EmitDefaultValue = false)]
        public string VendorOrderNumber { get; set; }

        /// <summary>
        /// Harmonized System of Nomenclature (HSN) tax code. The HSN number cannot contain alphabets.
        /// </summary>
        /// <value>Harmonized System of Nomenclature (HSN) tax code. The HSN number cannot contain alphabets.</value>
        [DataMember(Name = "hsnCode", EmitDefaultValue = false)]
        public string HsnCode { get; set; }

        /// <summary>
        /// Individual tax details per line item.
        /// </summary>
        /// <value>Individual tax details per line item.</value>
        [DataMember(Name = "taxDetails", EmitDefaultValue = false)]
        public List<TaxDetail> TaxDetails { get; set; }

        /// <summary>
        /// Individual charge details per line item.
        /// </summary>
        /// <value>Individual charge details per line item.</value>
        [DataMember(Name = "chargeDetails", EmitDefaultValue = false)]
        public List<ChargeDetails> ChargeDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceItem {\n");
            sb.Append("  ItemSequenceNumber: ").Append(ItemSequenceNumber).Append("\n");
            sb.Append("  BuyerProductIdentifier: ").Append(BuyerProductIdentifier).Append("\n");
            sb.Append("  VendorProductIdentifier: ").Append(VendorProductIdentifier).Append("\n");
            sb.Append("  InvoicedQuantity: ").Append(InvoicedQuantity).Append("\n");
            sb.Append("  NetCost: ").Append(NetCost).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  VendorOrderNumber: ").Append(VendorOrderNumber).Append("\n");
            sb.Append("  HsnCode: ").Append(HsnCode).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  ChargeDetails: ").Append(ChargeDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
