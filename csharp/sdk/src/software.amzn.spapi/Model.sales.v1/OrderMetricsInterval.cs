/*
 * Selling Partner API for Sales
 *
 * The Selling Partner API for Sales provides APIs related to sales performance.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.sales.v1
{
    /// <summary>
    /// Contains order metrics.
    /// </summary>
    [DataContract(Name = "OrderMetricsInterval")]
    public partial class OrderMetricsInterval : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderMetricsInterval" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderMetricsInterval() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderMetricsInterval" /> class.
        /// </summary>
        /// <param name="interval">The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first or the last interval from the list, it might contain incomplete data if the requested interval doesn&#39;t align with the requested granularity (ex. request interval 2018-09-01T02:00:00Z- -2018-09-04T19:00:00Z and granularity day will result in Sept 1st UTC day and Sept 4th UTC days having partial data). (required).</param>
        /// <param name="unitCount">The number of units in orders based on the specified filters. (required).</param>
        /// <param name="orderItemCount">The number of order items based on the specified filters. (required).</param>
        /// <param name="orderCount">The number of orders based on the specified filters. (required).</param>
        /// <param name="averageUnitPrice">averageUnitPrice (required).</param>
        /// <param name="totalSales">totalSales (required).</param>
        public OrderMetricsInterval(string interval = default(string), int unitCount = default(int), int orderItemCount = default(int), int orderCount = default(int), Money averageUnitPrice = default(Money), Money totalSales = default(Money))
        {
            // to ensure "interval" is required (not null)
            if (interval == null)
            {
                throw new ArgumentNullException("interval is a required property for OrderMetricsInterval and cannot be null");
            }
            this.Interval = interval;
            this.UnitCount = unitCount;
            this.OrderItemCount = orderItemCount;
            this.OrderCount = orderCount;
            // to ensure "averageUnitPrice" is required (not null)
            if (averageUnitPrice == null)
            {
                throw new ArgumentNullException("averageUnitPrice is a required property for OrderMetricsInterval and cannot be null");
            }
            this.AverageUnitPrice = averageUnitPrice;
            // to ensure "totalSales" is required (not null)
            if (totalSales == null)
            {
                throw new ArgumentNullException("totalSales is a required property for OrderMetricsInterval and cannot be null");
            }
            this.TotalSales = totalSales;
        }

        /// <summary>
        /// The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first or the last interval from the list, it might contain incomplete data if the requested interval doesn&#39;t align with the requested granularity (ex. request interval 2018-09-01T02:00:00Z- -2018-09-04T19:00:00Z and granularity day will result in Sept 1st UTC day and Sept 4th UTC days having partial data).
        /// </summary>
        /// <value>The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first or the last interval from the list, it might contain incomplete data if the requested interval doesn&#39;t align with the requested granularity (ex. request interval 2018-09-01T02:00:00Z- -2018-09-04T19:00:00Z and granularity day will result in Sept 1st UTC day and Sept 4th UTC days having partial data).</value>
        [DataMember(Name = "interval", IsRequired = true, EmitDefaultValue = true)]
        public string Interval { get; set; }

        /// <summary>
        /// The number of units in orders based on the specified filters.
        /// </summary>
        /// <value>The number of units in orders based on the specified filters.</value>
        [DataMember(Name = "unitCount", IsRequired = true, EmitDefaultValue = true)]
        public int UnitCount { get; set; }

        /// <summary>
        /// The number of order items based on the specified filters.
        /// </summary>
        /// <value>The number of order items based on the specified filters.</value>
        [DataMember(Name = "orderItemCount", IsRequired = true, EmitDefaultValue = true)]
        public int OrderItemCount { get; set; }

        /// <summary>
        /// The number of orders based on the specified filters.
        /// </summary>
        /// <value>The number of orders based on the specified filters.</value>
        [DataMember(Name = "orderCount", IsRequired = true, EmitDefaultValue = true)]
        public int OrderCount { get; set; }

        /// <summary>
        /// Gets or Sets AverageUnitPrice
        /// </summary>
        [DataMember(Name = "averageUnitPrice", IsRequired = true, EmitDefaultValue = true)]
        public Money AverageUnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalSales
        /// </summary>
        [DataMember(Name = "totalSales", IsRequired = true, EmitDefaultValue = true)]
        public Money TotalSales { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderMetricsInterval {\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  UnitCount: ").Append(UnitCount).Append("\n");
            sb.Append("  OrderItemCount: ").Append(OrderItemCount).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  AverageUnitPrice: ").Append(AverageUnitPrice).Append("\n");
            sb.Append("  TotalSales: ").Append(TotalSales).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
