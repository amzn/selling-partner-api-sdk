/*
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.orders.v1
{
    /// <summary>
    /// Represents an acknowledgement for an order, including the purchase order number, selling party details, acknowledgement date, and a list of acknowledged items.
    /// </summary>
    [DataContract(Name = "OrderAcknowledgement")]
    public partial class OrderAcknowledgement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAcknowledgement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderAcknowledgement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAcknowledgement" /> class.
        /// </summary>
        /// <param name="purchaseOrderNumber">The purchase order number. Formatting Notes: 8-character alpha-numeric code. (required).</param>
        /// <param name="sellingParty">sellingParty (required).</param>
        /// <param name="acknowledgementDate">The date and time when the purchase order is acknowledged, in ISO-8601 date/time format. (required).</param>
        /// <param name="items">A list of the items being acknowledged with associated details. (required).</param>
        public OrderAcknowledgement(string purchaseOrderNumber = default(string), PartyIdentification sellingParty = default(PartyIdentification), DateTime acknowledgementDate = default(DateTime), List<OrderAcknowledgementItem> items = default(List<OrderAcknowledgementItem>))
        {
            // to ensure "purchaseOrderNumber" is required (not null)
            if (purchaseOrderNumber == null)
            {
                throw new ArgumentNullException("purchaseOrderNumber is a required property for OrderAcknowledgement and cannot be null");
            }
            this.PurchaseOrderNumber = purchaseOrderNumber;
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new ArgumentNullException("sellingParty is a required property for OrderAcknowledgement and cannot be null");
            }
            this.SellingParty = sellingParty;
            this.AcknowledgementDate = acknowledgementDate;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for OrderAcknowledgement and cannot be null");
            }
            this.Items = items;
        }

        /// <summary>
        /// The purchase order number. Formatting Notes: 8-character alpha-numeric code.
        /// </summary>
        /// <value>The purchase order number. Formatting Notes: 8-character alpha-numeric code.</value>
        [DataMember(Name = "purchaseOrderNumber", IsRequired = true, EmitDefaultValue = true)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets SellingParty
        /// </summary>
        [DataMember(Name = "sellingParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// The date and time when the purchase order is acknowledged, in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date and time when the purchase order is acknowledged, in ISO-8601 date/time format.</value>
        [DataMember(Name = "acknowledgementDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime AcknowledgementDate { get; set; }

        /// <summary>
        /// A list of the items being acknowledged with associated details.
        /// </summary>
        /// <value>A list of the items being acknowledged with associated details.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<OrderAcknowledgementItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderAcknowledgement {\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  AcknowledgementDate: ").Append(AcknowledgementDate).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
