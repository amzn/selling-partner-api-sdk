/*
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.orders.v1
{
    /// <summary>
    /// Item receive status at the buyer&#39;s warehouse.
    /// </summary>
    [DataContract(Name = "OrderItemStatus_receivingStatus")]
    public partial class OrderItemStatusReceivingStatus : IValidatableObject
    {
        /// <summary>
        /// Receive status of the line item.
        /// </summary>
        /// <value>Receive status of the line item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReceiveStatusEnum
        {
            /// <summary>
            /// Enum NOTRECEIVED for value: NOT_RECEIVED
            /// </summary>
            [EnumMember(Value = "NOT_RECEIVED")]
            NOTRECEIVED = 1,

            /// <summary>
            /// Enum PARTIALLYRECEIVED for value: PARTIALLY_RECEIVED
            /// </summary>
            [EnumMember(Value = "PARTIALLY_RECEIVED")]
            PARTIALLYRECEIVED = 2,

            /// <summary>
            /// Enum RECEIVED for value: RECEIVED
            /// </summary>
            [EnumMember(Value = "RECEIVED")]
            RECEIVED = 3
        }


        /// <summary>
        /// Receive status of the line item.
        /// </summary>
        /// <value>Receive status of the line item.</value>
        [DataMember(Name = "receiveStatus", EmitDefaultValue = false)]
        public ReceiveStatusEnum? ReceiveStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemStatusReceivingStatus" /> class.
        /// </summary>
        /// <param name="receiveStatus">Receive status of the line item..</param>
        /// <param name="receivedQuantity">receivedQuantity.</param>
        /// <param name="lastReceiveDate">The date when the most recent item was received at the buyer&#39;s warehouse. Must be in ISO-8601 date/time format..</param>
        public OrderItemStatusReceivingStatus(ReceiveStatusEnum? receiveStatus = default(ReceiveStatusEnum?), ItemQuantity receivedQuantity = default(ItemQuantity), DateTime lastReceiveDate = default(DateTime))
        {
            this.ReceiveStatus = receiveStatus;
            this.ReceivedQuantity = receivedQuantity;
            this.LastReceiveDate = lastReceiveDate;
        }

        /// <summary>
        /// Gets or Sets ReceivedQuantity
        /// </summary>
        [DataMember(Name = "receivedQuantity", EmitDefaultValue = false)]
        public ItemQuantity ReceivedQuantity { get; set; }

        /// <summary>
        /// The date when the most recent item was received at the buyer&#39;s warehouse. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date when the most recent item was received at the buyer&#39;s warehouse. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name = "lastReceiveDate", EmitDefaultValue = false)]
        public DateTime LastReceiveDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderItemStatusReceivingStatus {\n");
            sb.Append("  ReceiveStatus: ").Append(ReceiveStatus).Append("\n");
            sb.Append("  ReceivedQuantity: ").Append(ReceivedQuantity).Append("\n");
            sb.Append("  LastReceiveDate: ").Append(LastReceiveDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
