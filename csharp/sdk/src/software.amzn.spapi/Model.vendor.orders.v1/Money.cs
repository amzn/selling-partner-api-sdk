/*
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.orders.v1
{
    /// <summary>
    /// An amount of money. Includes the currency code and an optional unit of measure for items priced by weight.
    /// </summary>
    [DataContract(Name = "Money")]
    public partial class Money : IValidatableObject
    {
        /// <summary>
        /// The unit of measure for prices of items sold by weight. If this field is absent, the item is sold by eaches.
        /// </summary>
        /// <value>The unit of measure for prices of items sold by weight. If this field is absent, the item is sold by eaches.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitOfMeasureEnum
        {
            /// <summary>
            /// Enum POUNDS for value: POUNDS
            /// </summary>
            [EnumMember(Value = "POUNDS")]
            POUNDS = 1,

            /// <summary>
            /// Enum OUNCES for value: OUNCES
            /// </summary>
            [EnumMember(Value = "OUNCES")]
            OUNCES = 2,

            /// <summary>
            /// Enum GRAMS for value: GRAMS
            /// </summary>
            [EnumMember(Value = "GRAMS")]
            GRAMS = 3,

            /// <summary>
            /// Enum KILOGRAMS for value: KILOGRAMS
            /// </summary>
            [EnumMember(Value = "KILOGRAMS")]
            KILOGRAMS = 4
        }


        /// <summary>
        /// The unit of measure for prices of items sold by weight. If this field is absent, the item is sold by eaches.
        /// </summary>
        /// <value>The unit of measure for prices of items sold by weight. If this field is absent, the item is sold by eaches.</value>
        [DataMember(Name = "unitOfMeasure", EmitDefaultValue = false)]
        public UnitOfMeasureEnum? UnitOfMeasure { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Money" /> class.
        /// </summary>
        /// <param name="currencyCode">Three digit currency code in ISO 4217 format. String of length 3..</param>
        /// <param name="amount">A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. &lt;br&gt;**Pattern** : &#x60;^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$&#x60;..</param>
        /// <param name="unitOfMeasure">The unit of measure for prices of items sold by weight. If this field is absent, the item is sold by eaches..</param>
        public Money(string currencyCode = default(string), string amount = default(string), UnitOfMeasureEnum? unitOfMeasure = default(UnitOfMeasureEnum?))
        {
            this.CurrencyCode = currencyCode;
            this.Amount = amount;
            this.UnitOfMeasure = unitOfMeasure;
        }

        /// <summary>
        /// Three digit currency code in ISO 4217 format. String of length 3.
        /// </summary>
        /// <value>Three digit currency code in ISO 4217 format. String of length 3.</value>
        [DataMember(Name = "currencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. &lt;br&gt;**Pattern** : &#x60;^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$&#x60;.
        /// </summary>
        /// <value>A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. &lt;br&gt;**Pattern** : &#x60;^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$&#x60;.</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Money {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CurrencyCode (string) maxLength
            if (this.CurrencyCode != null && this.CurrencyCode.Length > 3)
            {
                yield return new ValidationResult("Invalid value for CurrencyCode, length must be less than 3.", new [] { "CurrencyCode" });
            }

            yield break;
        }
    }

}
