/*
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.orders.v1
{
    /// <summary>
    /// Acknowledgement status information.
    /// </summary>
    [DataContract(Name = "OrderItemStatus_acknowledgementStatus")]
    public partial class OrderItemStatusAcknowledgementStatus : IValidatableObject
    {
        /// <summary>
        /// Confirmation status of line item.
        /// </summary>
        /// <value>Confirmation status of line item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConfirmationStatusEnum
        {
            /// <summary>
            /// Enum ACCEPTED for value: ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED = 1,

            /// <summary>
            /// Enum PARTIALLYACCEPTED for value: PARTIALLY_ACCEPTED
            /// </summary>
            [EnumMember(Value = "PARTIALLY_ACCEPTED")]
            PARTIALLYACCEPTED = 2,

            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 3,

            /// <summary>
            /// Enum UNCONFIRMED for value: UNCONFIRMED
            /// </summary>
            [EnumMember(Value = "UNCONFIRMED")]
            UNCONFIRMED = 4
        }


        /// <summary>
        /// Confirmation status of line item.
        /// </summary>
        /// <value>Confirmation status of line item.</value>
        [DataMember(Name = "confirmationStatus", EmitDefaultValue = false)]
        public ConfirmationStatusEnum? ConfirmationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemStatusAcknowledgementStatus" /> class.
        /// </summary>
        /// <param name="confirmationStatus">Confirmation status of line item..</param>
        /// <param name="acceptedQuantity">acceptedQuantity.</param>
        /// <param name="rejectedQuantity">rejectedQuantity.</param>
        /// <param name="acknowledgementStatusDetails">Details of item quantity confirmed..</param>
        public OrderItemStatusAcknowledgementStatus(ConfirmationStatusEnum? confirmationStatus = default(ConfirmationStatusEnum?), ItemQuantity acceptedQuantity = default(ItemQuantity), ItemQuantity rejectedQuantity = default(ItemQuantity), List<AcknowledgementStatusDetails> acknowledgementStatusDetails = default(List<AcknowledgementStatusDetails>))
        {
            this.ConfirmationStatus = confirmationStatus;
            this.AcceptedQuantity = acceptedQuantity;
            this.RejectedQuantity = rejectedQuantity;
            this.AcknowledgementStatusDetails = acknowledgementStatusDetails;
        }

        /// <summary>
        /// Gets or Sets AcceptedQuantity
        /// </summary>
        [DataMember(Name = "acceptedQuantity", EmitDefaultValue = false)]
        public ItemQuantity AcceptedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets RejectedQuantity
        /// </summary>
        [DataMember(Name = "rejectedQuantity", EmitDefaultValue = false)]
        public ItemQuantity RejectedQuantity { get; set; }

        /// <summary>
        /// Details of item quantity confirmed.
        /// </summary>
        /// <value>Details of item quantity confirmed.</value>
        [DataMember(Name = "acknowledgementStatusDetails", EmitDefaultValue = false)]
        public List<AcknowledgementStatusDetails> AcknowledgementStatusDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderItemStatusAcknowledgementStatus {\n");
            sb.Append("  ConfirmationStatus: ").Append(ConfirmationStatus).Append("\n");
            sb.Append("  AcceptedQuantity: ").Append(AcceptedQuantity).Append("\n");
            sb.Append("  RejectedQuantity: ").Append(RejectedQuantity).Append("\n");
            sb.Append("  AcknowledgementStatusDetails: ").Append(AcknowledgementStatusDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
