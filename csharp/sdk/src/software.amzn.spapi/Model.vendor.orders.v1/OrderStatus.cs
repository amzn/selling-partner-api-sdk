/*
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.orders.v1
{
    /// <summary>
    /// Current status of a purchase order.
    /// </summary>
    [DataContract(Name = "OrderStatus")]
    public partial class OrderStatus : IValidatableObject
    {
        /// <summary>
        /// The status of the buyer&#39;s purchase order for this order.
        /// </summary>
        /// <value>The status of the buyer&#39;s purchase order for this order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PurchaseOrderStatusEnum
        {
            /// <summary>
            /// Enum OPEN for value: OPEN
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPEN = 1,

            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 2
        }


        /// <summary>
        /// The status of the buyer&#39;s purchase order for this order.
        /// </summary>
        /// <value>The status of the buyer&#39;s purchase order for this order.</value>
        [DataMember(Name = "purchaseOrderStatus", IsRequired = true, EmitDefaultValue = true)]
        public PurchaseOrderStatusEnum PurchaseOrderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class.
        /// </summary>
        /// <param name="purchaseOrderNumber">The buyer&#39;s purchase order number for this order. Formatting Notes: 8-character alpha-numeric code. (required).</param>
        /// <param name="purchaseOrderStatus">The status of the buyer&#39;s purchase order for this order. (required).</param>
        /// <param name="purchaseOrderDate">The date the purchase order was placed. Must be in ISO-8601 date/time format. (required).</param>
        /// <param name="lastUpdatedDate">The date when the purchase order was last updated. Must be in ISO-8601 date/time format..</param>
        /// <param name="sellingParty">sellingParty (required).</param>
        /// <param name="shipToParty">shipToParty (required).</param>
        /// <param name="itemStatus">Detailed description of items order status. (required).</param>
        public OrderStatus(string purchaseOrderNumber = default(string), PurchaseOrderStatusEnum purchaseOrderStatus = default(PurchaseOrderStatusEnum), DateTime purchaseOrderDate = default(DateTime), DateTime lastUpdatedDate = default(DateTime), PartyIdentification sellingParty = default(PartyIdentification), PartyIdentification shipToParty = default(PartyIdentification), List<OrderItemStatus> itemStatus = default(List<OrderItemStatus>))
        {
            // to ensure "purchaseOrderNumber" is required (not null)
            if (purchaseOrderNumber == null)
            {
                throw new ArgumentNullException("purchaseOrderNumber is a required property for OrderStatus and cannot be null");
            }
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.PurchaseOrderStatus = purchaseOrderStatus;
            this.PurchaseOrderDate = purchaseOrderDate;
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new ArgumentNullException("sellingParty is a required property for OrderStatus and cannot be null");
            }
            this.SellingParty = sellingParty;
            // to ensure "shipToParty" is required (not null)
            if (shipToParty == null)
            {
                throw new ArgumentNullException("shipToParty is a required property for OrderStatus and cannot be null");
            }
            this.ShipToParty = shipToParty;
            // to ensure "itemStatus" is required (not null)
            if (itemStatus == null)
            {
                throw new ArgumentNullException("itemStatus is a required property for OrderStatus and cannot be null");
            }
            this.ItemStatus = itemStatus;
            this.LastUpdatedDate = lastUpdatedDate;
        }

        /// <summary>
        /// The buyer&#39;s purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
        /// </summary>
        /// <value>The buyer&#39;s purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.</value>
        [DataMember(Name = "purchaseOrderNumber", IsRequired = true, EmitDefaultValue = true)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// The date the purchase order was placed. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date the purchase order was placed. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name = "purchaseOrderDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime PurchaseOrderDate { get; set; }

        /// <summary>
        /// The date when the purchase order was last updated. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>The date when the purchase order was last updated. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name = "lastUpdatedDate", EmitDefaultValue = false)]
        public DateTime LastUpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets SellingParty
        /// </summary>
        [DataMember(Name = "sellingParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipToParty
        /// </summary>
        [DataMember(Name = "shipToParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification ShipToParty { get; set; }

        /// <summary>
        /// Detailed description of items order status.
        /// </summary>
        /// <value>Detailed description of items order status.</value>
        [DataMember(Name = "itemStatus", IsRequired = true, EmitDefaultValue = true)]
        public List<OrderItemStatus> ItemStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderStatus {\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  PurchaseOrderStatus: ").Append(PurchaseOrderStatus).Append("\n");
            sb.Append("  PurchaseOrderDate: ").Append(PurchaseOrderDate).Append("\n");
            sb.Append("  LastUpdatedDate: ").Append(LastUpdatedDate).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  ItemStatus: ").Append(ItemStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
