/*
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.orders.v1
{
    /// <summary>
    /// Represents the acknowledgement details for an individual order item, including the acknowledgement code, acknowledged quantity, scheduled ship and delivery dates, and rejection reason (if applicable).
    /// </summary>
    [DataContract(Name = "OrderItemAcknowledgement")]
    public partial class OrderItemAcknowledgement : IValidatableObject
    {
        /// <summary>
        /// This indicates the acknowledgement code.
        /// </summary>
        /// <value>This indicates the acknowledgement code.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AcknowledgementCodeEnum
        {
            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 1,

            /// <summary>
            /// Enum Backordered for value: Backordered
            /// </summary>
            [EnumMember(Value = "Backordered")]
            Backordered = 2,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 3
        }


        /// <summary>
        /// This indicates the acknowledgement code.
        /// </summary>
        /// <value>This indicates the acknowledgement code.</value>
        [DataMember(Name = "acknowledgementCode", IsRequired = true, EmitDefaultValue = true)]
        public AcknowledgementCodeEnum AcknowledgementCode { get; set; }
        /// <summary>
        /// Indicates the reason for rejection.
        /// </summary>
        /// <value>Indicates the reason for rejection.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RejectionReasonEnum
        {
            /// <summary>
            /// Enum TemporarilyUnavailable for value: TemporarilyUnavailable
            /// </summary>
            [EnumMember(Value = "TemporarilyUnavailable")]
            TemporarilyUnavailable = 1,

            /// <summary>
            /// Enum InvalidProductIdentifier for value: InvalidProductIdentifier
            /// </summary>
            [EnumMember(Value = "InvalidProductIdentifier")]
            InvalidProductIdentifier = 2,

            /// <summary>
            /// Enum ObsoleteProduct for value: ObsoleteProduct
            /// </summary>
            [EnumMember(Value = "ObsoleteProduct")]
            ObsoleteProduct = 3
        }


        /// <summary>
        /// Indicates the reason for rejection.
        /// </summary>
        /// <value>Indicates the reason for rejection.</value>
        [DataMember(Name = "rejectionReason", EmitDefaultValue = false)]
        public RejectionReasonEnum? RejectionReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemAcknowledgement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderItemAcknowledgement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemAcknowledgement" /> class.
        /// </summary>
        /// <param name="acknowledgementCode">This indicates the acknowledgement code. (required).</param>
        /// <param name="acknowledgedQuantity">acknowledgedQuantity (required).</param>
        /// <param name="scheduledShipDate">Estimated ship date per line item. Must be in ISO-8601 date/time format..</param>
        /// <param name="scheduledDeliveryDate">Estimated delivery date per line item. Must be in ISO-8601 date/time format..</param>
        /// <param name="rejectionReason">Indicates the reason for rejection..</param>
        public OrderItemAcknowledgement(AcknowledgementCodeEnum acknowledgementCode = default(AcknowledgementCodeEnum), ItemQuantity acknowledgedQuantity = default(ItemQuantity), DateTime scheduledShipDate = default(DateTime), DateTime scheduledDeliveryDate = default(DateTime), RejectionReasonEnum? rejectionReason = default(RejectionReasonEnum?))
        {
            this.AcknowledgementCode = acknowledgementCode;
            // to ensure "acknowledgedQuantity" is required (not null)
            if (acknowledgedQuantity == null)
            {
                throw new ArgumentNullException("acknowledgedQuantity is a required property for OrderItemAcknowledgement and cannot be null");
            }
            this.AcknowledgedQuantity = acknowledgedQuantity;
            this.ScheduledShipDate = scheduledShipDate;
            this.ScheduledDeliveryDate = scheduledDeliveryDate;
            this.RejectionReason = rejectionReason;
        }

        /// <summary>
        /// Gets or Sets AcknowledgedQuantity
        /// </summary>
        [DataMember(Name = "acknowledgedQuantity", IsRequired = true, EmitDefaultValue = true)]
        public ItemQuantity AcknowledgedQuantity { get; set; }

        /// <summary>
        /// Estimated ship date per line item. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>Estimated ship date per line item. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name = "scheduledShipDate", EmitDefaultValue = false)]
        public DateTime ScheduledShipDate { get; set; }

        /// <summary>
        /// Estimated delivery date per line item. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>Estimated delivery date per line item. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name = "scheduledDeliveryDate", EmitDefaultValue = false)]
        public DateTime ScheduledDeliveryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderItemAcknowledgement {\n");
            sb.Append("  AcknowledgementCode: ").Append(AcknowledgementCode).Append("\n");
            sb.Append("  AcknowledgedQuantity: ").Append(AcknowledgedQuantity).Append("\n");
            sb.Append("  ScheduledShipDate: ").Append(ScheduledShipDate).Append("\n");
            sb.Append("  ScheduledDeliveryDate: ").Append(ScheduledDeliveryDate).Append("\n");
            sb.Append("  RejectionReason: ").Append(RejectionReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
