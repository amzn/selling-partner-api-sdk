/*
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.orders.v1
{
    /// <summary>
    /// Details of the item being acknowledged.
    /// </summary>
    [DataContract(Name = "OrderAcknowledgementItem")]
    public partial class OrderAcknowledgementItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAcknowledgementItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderAcknowledgementItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAcknowledgementItem" /> class.
        /// </summary>
        /// <param name="itemSequenceNumber">Line item sequence number for the item..</param>
        /// <param name="amazonProductIdentifier">Amazon Standard Identification Number (ASIN) of an item..</param>
        /// <param name="vendorProductIdentifier">The vendor selected product identification of the item. Should be the same as was sent in the purchase order..</param>
        /// <param name="orderedQuantity">orderedQuantity (required).</param>
        /// <param name="netCost">netCost.</param>
        /// <param name="listPrice">listPrice.</param>
        /// <param name="discountMultiplier">The discount multiplier that should be applied to the price if a vendor sells books with a list price. This is a multiplier factor to arrive at a final discounted price. A multiplier of .90 would be the factor if a 10% discount is given..</param>
        /// <param name="itemAcknowledgements">This is used to indicate acknowledged quantity. (required).</param>
        public OrderAcknowledgementItem(string itemSequenceNumber = default(string), string amazonProductIdentifier = default(string), string vendorProductIdentifier = default(string), ItemQuantity orderedQuantity = default(ItemQuantity), Money netCost = default(Money), Money listPrice = default(Money), string discountMultiplier = default(string), List<OrderItemAcknowledgement> itemAcknowledgements = default(List<OrderItemAcknowledgement>))
        {
            // to ensure "orderedQuantity" is required (not null)
            if (orderedQuantity == null)
            {
                throw new ArgumentNullException("orderedQuantity is a required property for OrderAcknowledgementItem and cannot be null");
            }
            this.OrderedQuantity = orderedQuantity;
            // to ensure "itemAcknowledgements" is required (not null)
            if (itemAcknowledgements == null)
            {
                throw new ArgumentNullException("itemAcknowledgements is a required property for OrderAcknowledgementItem and cannot be null");
            }
            this.ItemAcknowledgements = itemAcknowledgements;
            this.ItemSequenceNumber = itemSequenceNumber;
            this.AmazonProductIdentifier = amazonProductIdentifier;
            this.VendorProductIdentifier = vendorProductIdentifier;
            this.NetCost = netCost;
            this.ListPrice = listPrice;
            this.DiscountMultiplier = discountMultiplier;
        }

        /// <summary>
        /// Line item sequence number for the item.
        /// </summary>
        /// <value>Line item sequence number for the item.</value>
        [DataMember(Name = "itemSequenceNumber", EmitDefaultValue = false)]
        public string ItemSequenceNumber { get; set; }

        /// <summary>
        /// Amazon Standard Identification Number (ASIN) of an item.
        /// </summary>
        /// <value>Amazon Standard Identification Number (ASIN) of an item.</value>
        [DataMember(Name = "amazonProductIdentifier", EmitDefaultValue = false)]
        public string AmazonProductIdentifier { get; set; }

        /// <summary>
        /// The vendor selected product identification of the item. Should be the same as was sent in the purchase order.
        /// </summary>
        /// <value>The vendor selected product identification of the item. Should be the same as was sent in the purchase order.</value>
        [DataMember(Name = "vendorProductIdentifier", EmitDefaultValue = false)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets OrderedQuantity
        /// </summary>
        [DataMember(Name = "orderedQuantity", IsRequired = true, EmitDefaultValue = true)]
        public ItemQuantity OrderedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets NetCost
        /// </summary>
        [DataMember(Name = "netCost", EmitDefaultValue = false)]
        public Money NetCost { get; set; }

        /// <summary>
        /// Gets or Sets ListPrice
        /// </summary>
        [DataMember(Name = "listPrice", EmitDefaultValue = false)]
        public Money ListPrice { get; set; }

        /// <summary>
        /// The discount multiplier that should be applied to the price if a vendor sells books with a list price. This is a multiplier factor to arrive at a final discounted price. A multiplier of .90 would be the factor if a 10% discount is given.
        /// </summary>
        /// <value>The discount multiplier that should be applied to the price if a vendor sells books with a list price. This is a multiplier factor to arrive at a final discounted price. A multiplier of .90 would be the factor if a 10% discount is given.</value>
        [DataMember(Name = "discountMultiplier", EmitDefaultValue = false)]
        public string DiscountMultiplier { get; set; }

        /// <summary>
        /// This is used to indicate acknowledged quantity.
        /// </summary>
        /// <value>This is used to indicate acknowledged quantity.</value>
        [DataMember(Name = "itemAcknowledgements", IsRequired = true, EmitDefaultValue = true)]
        public List<OrderItemAcknowledgement> ItemAcknowledgements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderAcknowledgementItem {\n");
            sb.Append("  ItemSequenceNumber: ").Append(ItemSequenceNumber).Append("\n");
            sb.Append("  AmazonProductIdentifier: ").Append(AmazonProductIdentifier).Append("\n");
            sb.Append("  VendorProductIdentifier: ").Append(VendorProductIdentifier).Append("\n");
            sb.Append("  OrderedQuantity: ").Append(OrderedQuantity).Append("\n");
            sb.Append("  NetCost: ").Append(NetCost).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  DiscountMultiplier: ").Append(DiscountMultiplier).Append("\n");
            sb.Append("  ItemAcknowledgements: ").Append(ItemAcknowledgements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
