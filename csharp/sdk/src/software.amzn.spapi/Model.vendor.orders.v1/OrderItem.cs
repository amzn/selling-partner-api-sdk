/*
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.orders.v1
{
    /// <summary>
    /// Represents an individual item in an order, including item details, quantities, pricing, and backorder information.
    /// </summary>
    [DataContract(Name = "OrderItem")]
    public partial class OrderItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="itemSequenceNumber">Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on. (required).</param>
        /// <param name="amazonProductIdentifier">Amazon Standard Identification Number (ASIN) of an item..</param>
        /// <param name="vendorProductIdentifier">The vendor selected product identification of the item..</param>
        /// <param name="orderedQuantity">orderedQuantity (required).</param>
        /// <param name="isBackOrderAllowed">When true, we will accept backorder confirmations for this item. (required).</param>
        /// <param name="netCost">netCost.</param>
        /// <param name="listPrice">listPrice.</param>
        public OrderItem(string itemSequenceNumber = default(string), string amazonProductIdentifier = default(string), string vendorProductIdentifier = default(string), ItemQuantity orderedQuantity = default(ItemQuantity), bool isBackOrderAllowed = default(bool), Money netCost = default(Money), Money listPrice = default(Money))
        {
            // to ensure "itemSequenceNumber" is required (not null)
            if (itemSequenceNumber == null)
            {
                throw new ArgumentNullException("itemSequenceNumber is a required property for OrderItem and cannot be null");
            }
            this.ItemSequenceNumber = itemSequenceNumber;
            // to ensure "orderedQuantity" is required (not null)
            if (orderedQuantity == null)
            {
                throw new ArgumentNullException("orderedQuantity is a required property for OrderItem and cannot be null");
            }
            this.OrderedQuantity = orderedQuantity;
            this.IsBackOrderAllowed = isBackOrderAllowed;
            this.AmazonProductIdentifier = amazonProductIdentifier;
            this.VendorProductIdentifier = vendorProductIdentifier;
            this.NetCost = netCost;
            this.ListPrice = listPrice;
        }

        /// <summary>
        /// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
        /// </summary>
        /// <value>Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.</value>
        [DataMember(Name = "itemSequenceNumber", IsRequired = true, EmitDefaultValue = true)]
        public string ItemSequenceNumber { get; set; }

        /// <summary>
        /// Amazon Standard Identification Number (ASIN) of an item.
        /// </summary>
        /// <value>Amazon Standard Identification Number (ASIN) of an item.</value>
        [DataMember(Name = "amazonProductIdentifier", EmitDefaultValue = false)]
        public string AmazonProductIdentifier { get; set; }

        /// <summary>
        /// The vendor selected product identification of the item.
        /// </summary>
        /// <value>The vendor selected product identification of the item.</value>
        [DataMember(Name = "vendorProductIdentifier", EmitDefaultValue = false)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets OrderedQuantity
        /// </summary>
        [DataMember(Name = "orderedQuantity", IsRequired = true, EmitDefaultValue = true)]
        public ItemQuantity OrderedQuantity { get; set; }

        /// <summary>
        /// When true, we will accept backorder confirmations for this item.
        /// </summary>
        /// <value>When true, we will accept backorder confirmations for this item.</value>
        [DataMember(Name = "isBackOrderAllowed", IsRequired = true, EmitDefaultValue = true)]
        public bool IsBackOrderAllowed { get; set; }

        /// <summary>
        /// Gets or Sets NetCost
        /// </summary>
        [DataMember(Name = "netCost", EmitDefaultValue = false)]
        public Money NetCost { get; set; }

        /// <summary>
        /// Gets or Sets ListPrice
        /// </summary>
        [DataMember(Name = "listPrice", EmitDefaultValue = false)]
        public Money ListPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  ItemSequenceNumber: ").Append(ItemSequenceNumber).Append("\n");
            sb.Append("  AmazonProductIdentifier: ").Append(AmazonProductIdentifier).Append("\n");
            sb.Append("  VendorProductIdentifier: ").Append(VendorProductIdentifier).Append("\n");
            sb.Append("  OrderedQuantity: ").Append(OrderedQuantity).Append("\n");
            sb.Append("  IsBackOrderAllowed: ").Append(IsBackOrderAllowed).Append("\n");
            sb.Append("  NetCost: ").Append(NetCost).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
