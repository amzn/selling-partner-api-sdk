/*
 * Selling Partner API for Direct Fulfillment Inventory Updates
 *
 * The Selling Partner API for Direct Fulfillment Inventory Updates provides programmatic access to a direct fulfillment vendor's inventory updates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.df.inventory.v1
{
    /// <summary>
    /// Inventory details required to update some or all items for the requested warehouse.
    /// </summary>
    [DataContract(Name = "InventoryUpdate")]
    public partial class InventoryUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryUpdate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InventoryUpdate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryUpdate" /> class.
        /// </summary>
        /// <param name="sellingParty">sellingParty (required).</param>
        /// <param name="isFullUpdate">When true, this request contains a full feed. Otherwise, this request contains a partial feed. When sending a full feed, you must send information about all items in the warehouse. Any items not in the full feed are updated as not available. When sending a partial feed, only include the items that need an update to inventory. The status of other items will remain unchanged. (required).</param>
        /// <param name="items">A list of inventory items with updated details, including quantity available. (required).</param>
        public InventoryUpdate(PartyIdentification sellingParty = default(PartyIdentification), bool isFullUpdate = default(bool), List<ItemDetails> items = default(List<ItemDetails>))
        {
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new ArgumentNullException("sellingParty is a required property for InventoryUpdate and cannot be null");
            }
            this.SellingParty = sellingParty;
            this.IsFullUpdate = isFullUpdate;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for InventoryUpdate and cannot be null");
            }
            this.Items = items;
        }

        /// <summary>
        /// Gets or Sets SellingParty
        /// </summary>
        [DataMember(Name = "sellingParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// When true, this request contains a full feed. Otherwise, this request contains a partial feed. When sending a full feed, you must send information about all items in the warehouse. Any items not in the full feed are updated as not available. When sending a partial feed, only include the items that need an update to inventory. The status of other items will remain unchanged.
        /// </summary>
        /// <value>When true, this request contains a full feed. Otherwise, this request contains a partial feed. When sending a full feed, you must send information about all items in the warehouse. Any items not in the full feed are updated as not available. When sending a partial feed, only include the items that need an update to inventory. The status of other items will remain unchanged.</value>
        [DataMember(Name = "isFullUpdate", IsRequired = true, EmitDefaultValue = true)]
        public bool IsFullUpdate { get; set; }

        /// <summary>
        /// A list of inventory items with updated details, including quantity available.
        /// </summary>
        /// <value>A list of inventory items with updated details, including quantity available.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<ItemDetails> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryUpdate {\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  IsFullUpdate: ").Append(IsFullUpdate).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
