/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// A list of the items in this transportation and their associated inner container details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
    /// </summary>
    [DataContract(Name = "Containers")]
    public partial class Containers : IValidatableObject
    {
        /// <summary>
        /// The type of container.
        /// </summary>
        /// <value>The type of container.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContainerTypeEnum
        {
            /// <summary>
            /// Enum Carton for value: carton
            /// </summary>
            [EnumMember(Value = "carton")]
            Carton = 1,

            /// <summary>
            /// Enum Pallet for value: pallet
            /// </summary>
            [EnumMember(Value = "pallet")]
            Pallet = 2
        }


        /// <summary>
        /// The type of container.
        /// </summary>
        /// <value>The type of container.</value>
        [DataMember(Name = "containerType", IsRequired = true, EmitDefaultValue = true)]
        public ContainerTypeEnum ContainerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Containers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Containers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Containers" /> class.
        /// </summary>
        /// <param name="containerType">The type of container. (required).</param>
        /// <param name="containerSequenceNumber">An integer that must be submitted for multi-box shipments only, where one item may come in separate packages..</param>
        /// <param name="containerIdentifiers">A list of carton identifiers. (required).</param>
        /// <param name="trackingNumber">The tracking number used for identifying the shipment..</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="weight">weight.</param>
        /// <param name="tier">Number of layers per pallet..</param>
        /// <param name="block">Number of cartons per layer on the pallet..</param>
        /// <param name="innerContainersDetails">innerContainersDetails.</param>
        /// <param name="packedItems">A list of packed items..</param>
        public Containers(ContainerTypeEnum containerType = default(ContainerTypeEnum), string containerSequenceNumber = default(string), List<ContainerIdentification> containerIdentifiers = default(List<ContainerIdentification>), string trackingNumber = default(string), Dimensions dimensions = default(Dimensions), Weight weight = default(Weight), int tier = default(int), int block = default(int), InnerContainersDetails innerContainersDetails = default(InnerContainersDetails), List<PackedItems> packedItems = default(List<PackedItems>))
        {
            this.ContainerType = containerType;
            // to ensure "containerIdentifiers" is required (not null)
            if (containerIdentifiers == null)
            {
                throw new ArgumentNullException("containerIdentifiers is a required property for Containers and cannot be null");
            }
            this.ContainerIdentifiers = containerIdentifiers;
            this.ContainerSequenceNumber = containerSequenceNumber;
            this.TrackingNumber = trackingNumber;
            this.Dimensions = dimensions;
            this.Weight = weight;
            this.Tier = tier;
            this.Block = block;
            this.InnerContainersDetails = innerContainersDetails;
            this.PackedItems = packedItems;
        }

        /// <summary>
        /// An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.
        /// </summary>
        /// <value>An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.</value>
        [DataMember(Name = "containerSequenceNumber", EmitDefaultValue = false)]
        public string ContainerSequenceNumber { get; set; }

        /// <summary>
        /// A list of carton identifiers.
        /// </summary>
        /// <value>A list of carton identifiers.</value>
        [DataMember(Name = "containerIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public List<ContainerIdentification> ContainerIdentifiers { get; set; }

        /// <summary>
        /// The tracking number used for identifying the shipment.
        /// </summary>
        /// <value>The tracking number used for identifying the shipment.</value>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Number of layers per pallet.
        /// </summary>
        /// <value>Number of layers per pallet.</value>
        [DataMember(Name = "tier", EmitDefaultValue = false)]
        public int Tier { get; set; }

        /// <summary>
        /// Number of cartons per layer on the pallet.
        /// </summary>
        /// <value>Number of cartons per layer on the pallet.</value>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public int Block { get; set; }

        /// <summary>
        /// Gets or Sets InnerContainersDetails
        /// </summary>
        [DataMember(Name = "innerContainersDetails", EmitDefaultValue = false)]
        public InnerContainersDetails InnerContainersDetails { get; set; }

        /// <summary>
        /// A list of packed items.
        /// </summary>
        /// <value>A list of packed items.</value>
        [DataMember(Name = "packedItems", EmitDefaultValue = false)]
        public List<PackedItems> PackedItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Containers {\n");
            sb.Append("  ContainerType: ").Append(ContainerType).Append("\n");
            sb.Append("  ContainerSequenceNumber: ").Append(ContainerSequenceNumber).Append("\n");
            sb.Append("  ContainerIdentifiers: ").Append(ContainerIdentifiers).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  InnerContainersDetails: ").Append(InnerContainersDetails).Append("\n");
            sb.Append("  PackedItems: ").Append(PackedItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
