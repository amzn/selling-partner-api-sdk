/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// A list of one or more shipments with respective details.
    /// </summary>
    [DataContract(Name = "Shipment")]
    public partial class Shipment : IValidatableObject
    {
        /// <summary>
        /// Indicates the type of transportation request (for example, &#x60;New&#x60; or &#x60;Cancel&#x60;). Each &#x60;transactionType&#x60; has a unique set of operations and there are corresponding details to be populated for each operation.
        /// </summary>
        /// <value>Indicates the type of transportation request (for example, &#x60;New&#x60; or &#x60;Cancel&#x60;). Each &#x60;transactionType&#x60; has a unique set of operations and there are corresponding details to be populated for each operation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            /// <summary>
            /// Enum New for value: New
            /// </summary>
            [EnumMember(Value = "New")]
            New = 1,

            /// <summary>
            /// Enum Cancel for value: Cancel
            /// </summary>
            [EnumMember(Value = "Cancel")]
            Cancel = 2
        }


        /// <summary>
        /// Indicates the type of transportation request (for example, &#x60;New&#x60; or &#x60;Cancel&#x60;). Each &#x60;transactionType&#x60; has a unique set of operations and there are corresponding details to be populated for each operation.
        /// </summary>
        /// <value>Indicates the type of transportation request (for example, &#x60;New&#x60; or &#x60;Cancel&#x60;). Each &#x60;transactionType&#x60; has a unique set of operations and there are corresponding details to be populated for each operation.</value>
        [DataMember(Name = "transactionType", IsRequired = true, EmitDefaultValue = true)]
        public TransactionTypeEnum TransactionType { get; set; }
        /// <summary>
        /// Indicates the current shipment status.
        /// </summary>
        /// <value>Indicates the current shipment status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrentShipmentStatusEnum
        {
            /// <summary>
            /// Enum Created for value: Created
            /// </summary>
            [EnumMember(Value = "Created")]
            Created = 1,

            /// <summary>
            /// Enum TransportationRequested for value: TransportationRequested
            /// </summary>
            [EnumMember(Value = "TransportationRequested")]
            TransportationRequested = 2,

            /// <summary>
            /// Enum CarrierAssigned for value: CarrierAssigned
            /// </summary>
            [EnumMember(Value = "CarrierAssigned")]
            CarrierAssigned = 3,

            /// <summary>
            /// Enum Shipped for value: Shipped
            /// </summary>
            [EnumMember(Value = "Shipped")]
            Shipped = 4
        }


        /// <summary>
        /// Indicates the current shipment status.
        /// </summary>
        /// <value>Indicates the current shipment status.</value>
        [DataMember(Name = "currentShipmentStatus", EmitDefaultValue = false)]
        public CurrentShipmentStatusEnum? CurrentShipmentStatus { get; set; }
        /// <summary>
        /// Specifies if payment is Collect (WePay) or Prepaid (TheyPay). Required.
        /// </summary>
        /// <value>Specifies if payment is Collect (WePay) or Prepaid (TheyPay). Required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShipmentFreightTermEnum
        {
            /// <summary>
            /// Enum Collect for value: Collect
            /// </summary>
            [EnumMember(Value = "Collect")]
            Collect = 1,

            /// <summary>
            /// Enum Prepaid for value: Prepaid
            /// </summary>
            [EnumMember(Value = "Prepaid")]
            Prepaid = 2
        }


        /// <summary>
        /// Specifies if payment is Collect (WePay) or Prepaid (TheyPay). Required.
        /// </summary>
        /// <value>Specifies if payment is Collect (WePay) or Prepaid (TheyPay). Required.</value>
        [DataMember(Name = "shipmentFreightTerm", EmitDefaultValue = false)]
        public ShipmentFreightTermEnum? ShipmentFreightTerm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Shipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        /// <param name="vendorShipmentIdentifier">Unique Transportation ID created by Vendor (Should not be used over the last 365 days). (required).</param>
        /// <param name="transactionType">Indicates the type of transportation request (for example, &#x60;New&#x60; or &#x60;Cancel&#x60;). Each &#x60;transactionType&#x60; has a unique set of operations and there are corresponding details to be populated for each operation. (required).</param>
        /// <param name="buyerReferenceNumber">The buyer Reference Number is a unique identifier generated by buyer for all Collect/WePay shipments when you submit a transportation request. This field is mandatory for Collect/WePay shipments..</param>
        /// <param name="transactionDate">Date on which the transportation request was submitted. (required).</param>
        /// <param name="currentShipmentStatus">Indicates the current shipment status..</param>
        /// <param name="currentshipmentStatusDate">Date and time when the last status was updated..</param>
        /// <param name="shipmentStatusDetails">Indicates the list of current shipment status details and when the last update was received from carrier this is available on shipment Details response..</param>
        /// <param name="shipmentCreateDate">The date and time of the shipment request created by vendor..</param>
        /// <param name="shipmentConfirmDate">The date and time of the departure of the shipment from the vendor&#39;s location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Buyer destination warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future..</param>
        /// <param name="packageLabelCreateDate">The date and time of the package label created for the shipment by buyer..</param>
        /// <param name="shipmentFreightTerm">Specifies if payment is Collect (WePay) or Prepaid (TheyPay). Required..</param>
        /// <param name="sellingParty">sellingParty (required).</param>
        /// <param name="shipFromParty">shipFromParty (required).</param>
        /// <param name="shipToParty">shipToParty (required).</param>
        /// <param name="shipmentMeasurements">shipmentMeasurements.</param>
        /// <param name="collectFreightPickupDetails">collectFreightPickupDetails.</param>
        /// <param name="purchaseOrders">Indicates the purchase orders involved for the transportation request. This group is an array create 1 for each PO and list their corresponding items. This information is used for deciding the route,truck allocation and storage efficiently. This is a mandatory information for Buyer performing transportation from vendor warehouse (WePay/Collect).</param>
        /// <param name="importDetails">importDetails.</param>
        /// <param name="containers">A list of the items in this transportation and their associated inner container details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level..</param>
        /// <param name="transportationDetails">transportationDetails.</param>
        public Shipment(string vendorShipmentIdentifier = default(string), TransactionTypeEnum transactionType = default(TransactionTypeEnum), string buyerReferenceNumber = default(string), DateTime transactionDate = default(DateTime), CurrentShipmentStatusEnum? currentShipmentStatus = default(CurrentShipmentStatusEnum?), DateTime currentshipmentStatusDate = default(DateTime), List<ShipmentStatusDetails> shipmentStatusDetails = default(List<ShipmentStatusDetails>), DateTime shipmentCreateDate = default(DateTime), DateTime shipmentConfirmDate = default(DateTime), DateTime packageLabelCreateDate = default(DateTime), ShipmentFreightTermEnum? shipmentFreightTerm = default(ShipmentFreightTermEnum?), PartyIdentification sellingParty = default(PartyIdentification), PartyIdentification shipFromParty = default(PartyIdentification), PartyIdentification shipToParty = default(PartyIdentification), TransportShipmentMeasurements shipmentMeasurements = default(TransportShipmentMeasurements), CollectFreightPickupDetails collectFreightPickupDetails = default(CollectFreightPickupDetails), List<PurchaseOrders> purchaseOrders = default(List<PurchaseOrders>), ImportDetails importDetails = default(ImportDetails), List<Containers> containers = default(List<Containers>), TransportationDetails transportationDetails = default(TransportationDetails))
        {
            // to ensure "vendorShipmentIdentifier" is required (not null)
            if (vendorShipmentIdentifier == null)
            {
                throw new ArgumentNullException("vendorShipmentIdentifier is a required property for Shipment and cannot be null");
            }
            this.VendorShipmentIdentifier = vendorShipmentIdentifier;
            this.TransactionType = transactionType;
            this.TransactionDate = transactionDate;
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new ArgumentNullException("sellingParty is a required property for Shipment and cannot be null");
            }
            this.SellingParty = sellingParty;
            // to ensure "shipFromParty" is required (not null)
            if (shipFromParty == null)
            {
                throw new ArgumentNullException("shipFromParty is a required property for Shipment and cannot be null");
            }
            this.ShipFromParty = shipFromParty;
            // to ensure "shipToParty" is required (not null)
            if (shipToParty == null)
            {
                throw new ArgumentNullException("shipToParty is a required property for Shipment and cannot be null");
            }
            this.ShipToParty = shipToParty;
            this.BuyerReferenceNumber = buyerReferenceNumber;
            this.CurrentShipmentStatus = currentShipmentStatus;
            this.CurrentshipmentStatusDate = currentshipmentStatusDate;
            this.ShipmentStatusDetails = shipmentStatusDetails;
            this.ShipmentCreateDate = shipmentCreateDate;
            this.ShipmentConfirmDate = shipmentConfirmDate;
            this.PackageLabelCreateDate = packageLabelCreateDate;
            this.ShipmentFreightTerm = shipmentFreightTerm;
            this.ShipmentMeasurements = shipmentMeasurements;
            this.CollectFreightPickupDetails = collectFreightPickupDetails;
            this.PurchaseOrders = purchaseOrders;
            this.ImportDetails = importDetails;
            this.Containers = containers;
            this.TransportationDetails = transportationDetails;
        }

        /// <summary>
        /// Unique Transportation ID created by Vendor (Should not be used over the last 365 days).
        /// </summary>
        /// <value>Unique Transportation ID created by Vendor (Should not be used over the last 365 days).</value>
        [DataMember(Name = "vendorShipmentIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string VendorShipmentIdentifier { get; set; }

        /// <summary>
        /// The buyer Reference Number is a unique identifier generated by buyer for all Collect/WePay shipments when you submit a transportation request. This field is mandatory for Collect/WePay shipments.
        /// </summary>
        /// <value>The buyer Reference Number is a unique identifier generated by buyer for all Collect/WePay shipments when you submit a transportation request. This field is mandatory for Collect/WePay shipments.</value>
        [DataMember(Name = "buyerReferenceNumber", EmitDefaultValue = false)]
        public string BuyerReferenceNumber { get; set; }

        /// <summary>
        /// Date on which the transportation request was submitted.
        /// </summary>
        /// <value>Date on which the transportation request was submitted.</value>
        [DataMember(Name = "transactionDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime TransactionDate { get; set; }

        /// <summary>
        /// Date and time when the last status was updated.
        /// </summary>
        /// <value>Date and time when the last status was updated.</value>
        [DataMember(Name = "currentshipmentStatusDate", EmitDefaultValue = false)]
        public DateTime CurrentshipmentStatusDate { get; set; }

        /// <summary>
        /// Indicates the list of current shipment status details and when the last update was received from carrier this is available on shipment Details response.
        /// </summary>
        /// <value>Indicates the list of current shipment status details and when the last update was received from carrier this is available on shipment Details response.</value>
        [DataMember(Name = "shipmentStatusDetails", EmitDefaultValue = false)]
        public List<ShipmentStatusDetails> ShipmentStatusDetails { get; set; }

        /// <summary>
        /// The date and time of the shipment request created by vendor.
        /// </summary>
        /// <value>The date and time of the shipment request created by vendor.</value>
        [DataMember(Name = "shipmentCreateDate", EmitDefaultValue = false)]
        public DateTime ShipmentCreateDate { get; set; }

        /// <summary>
        /// The date and time of the departure of the shipment from the vendor&#39;s location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Buyer destination warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future.
        /// </summary>
        /// <value>The date and time of the departure of the shipment from the vendor&#39;s location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Buyer destination warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future.</value>
        [DataMember(Name = "shipmentConfirmDate", EmitDefaultValue = false)]
        public DateTime ShipmentConfirmDate { get; set; }

        /// <summary>
        /// The date and time of the package label created for the shipment by buyer.
        /// </summary>
        /// <value>The date and time of the package label created for the shipment by buyer.</value>
        [DataMember(Name = "packageLabelCreateDate", EmitDefaultValue = false)]
        public DateTime PackageLabelCreateDate { get; set; }

        /// <summary>
        /// Gets or Sets SellingParty
        /// </summary>
        [DataMember(Name = "sellingParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipFromParty
        /// </summary>
        [DataMember(Name = "shipFromParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipToParty
        /// </summary>
        [DataMember(Name = "shipToParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification ShipToParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentMeasurements
        /// </summary>
        [DataMember(Name = "shipmentMeasurements", EmitDefaultValue = false)]
        public TransportShipmentMeasurements ShipmentMeasurements { get; set; }

        /// <summary>
        /// Gets or Sets CollectFreightPickupDetails
        /// </summary>
        [DataMember(Name = "collectFreightPickupDetails", EmitDefaultValue = false)]
        public CollectFreightPickupDetails CollectFreightPickupDetails { get; set; }

        /// <summary>
        /// Indicates the purchase orders involved for the transportation request. This group is an array create 1 for each PO and list their corresponding items. This information is used for deciding the route,truck allocation and storage efficiently. This is a mandatory information for Buyer performing transportation from vendor warehouse (WePay/Collect)
        /// </summary>
        /// <value>Indicates the purchase orders involved for the transportation request. This group is an array create 1 for each PO and list their corresponding items. This information is used for deciding the route,truck allocation and storage efficiently. This is a mandatory information for Buyer performing transportation from vendor warehouse (WePay/Collect)</value>
        [DataMember(Name = "purchaseOrders", EmitDefaultValue = false)]
        public List<PurchaseOrders> PurchaseOrders { get; set; }

        /// <summary>
        /// Gets or Sets ImportDetails
        /// </summary>
        [DataMember(Name = "importDetails", EmitDefaultValue = false)]
        public ImportDetails ImportDetails { get; set; }

        /// <summary>
        /// A list of the items in this transportation and their associated inner container details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
        /// </summary>
        /// <value>A list of the items in this transportation and their associated inner container details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.</value>
        [DataMember(Name = "containers", EmitDefaultValue = false)]
        public List<Containers> Containers { get; set; }

        /// <summary>
        /// Gets or Sets TransportationDetails
        /// </summary>
        [DataMember(Name = "transportationDetails", EmitDefaultValue = false)]
        public TransportationDetails TransportationDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  VendorShipmentIdentifier: ").Append(VendorShipmentIdentifier).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  BuyerReferenceNumber: ").Append(BuyerReferenceNumber).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  CurrentShipmentStatus: ").Append(CurrentShipmentStatus).Append("\n");
            sb.Append("  CurrentshipmentStatusDate: ").Append(CurrentshipmentStatusDate).Append("\n");
            sb.Append("  ShipmentStatusDetails: ").Append(ShipmentStatusDetails).Append("\n");
            sb.Append("  ShipmentCreateDate: ").Append(ShipmentCreateDate).Append("\n");
            sb.Append("  ShipmentConfirmDate: ").Append(ShipmentConfirmDate).Append("\n");
            sb.Append("  PackageLabelCreateDate: ").Append(PackageLabelCreateDate).Append("\n");
            sb.Append("  ShipmentFreightTerm: ").Append(ShipmentFreightTerm).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  ShipmentMeasurements: ").Append(ShipmentMeasurements).Append("\n");
            sb.Append("  CollectFreightPickupDetails: ").Append(CollectFreightPickupDetails).Append("\n");
            sb.Append("  PurchaseOrders: ").Append(PurchaseOrders).Append("\n");
            sb.Append("  ImportDetails: ").Append(ImportDetails).Append("\n");
            sb.Append("  Containers: ").Append(Containers).Append("\n");
            sb.Append("  TransportationDetails: ").Append(TransportationDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
