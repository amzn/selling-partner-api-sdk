/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// Shipment Information details for Label request.
    /// </summary>
    [DataContract(Name = "ShipmentInformation")]
    public partial class ShipmentInformation : IValidatableObject
    {
        /// <summary>
        /// Type of shipment whether it is Small Parcel
        /// </summary>
        /// <value>Type of shipment whether it is Small Parcel</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShipModeEnum
        {
            /// <summary>
            /// Enum SmallParcel for value: SmallParcel
            /// </summary>
            [EnumMember(Value = "SmallParcel")]
            SmallParcel = 1,

            /// <summary>
            /// Enum LTL for value: LTL
            /// </summary>
            [EnumMember(Value = "LTL")]
            LTL = 2
        }


        /// <summary>
        /// Type of shipment whether it is Small Parcel
        /// </summary>
        /// <value>Type of shipment whether it is Small Parcel</value>
        [DataMember(Name = "shipMode", EmitDefaultValue = false)]
        public ShipModeEnum? ShipMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentInformation" /> class.
        /// </summary>
        /// <param name="vendorDetails">vendorDetails.</param>
        /// <param name="buyerReferenceNumber">The buyer reference number is a unique identifier generated by the buyer for all Collect and WePay shipments..</param>
        /// <param name="shipToParty">shipToParty.</param>
        /// <param name="shipFromParty">shipFromParty.</param>
        /// <param name="warehouseId">Vendor Warehouse ID from where the shipment is scheduled to be picked up by buyer / Carrier..</param>
        /// <param name="masterTrackingId">Unique Id with  which  the shipment can be tracked for Small Parcels..</param>
        /// <param name="totalLabelCount">Number of Labels that are created as part of this shipment..</param>
        /// <param name="shipMode">Type of shipment whether it is Small Parcel.</param>
        public ShipmentInformation(VendorDetails vendorDetails = default(VendorDetails), string buyerReferenceNumber = default(string), PartyIdentification shipToParty = default(PartyIdentification), PartyIdentification shipFromParty = default(PartyIdentification), string warehouseId = default(string), string masterTrackingId = default(string), int totalLabelCount = default(int), ShipModeEnum? shipMode = default(ShipModeEnum?))
        {
            this.VendorDetails = vendorDetails;
            this.BuyerReferenceNumber = buyerReferenceNumber;
            this.ShipToParty = shipToParty;
            this.ShipFromParty = shipFromParty;
            this.WarehouseId = warehouseId;
            this.MasterTrackingId = masterTrackingId;
            this.TotalLabelCount = totalLabelCount;
            this.ShipMode = shipMode;
        }

        /// <summary>
        /// Gets or Sets VendorDetails
        /// </summary>
        [DataMember(Name = "vendorDetails", EmitDefaultValue = false)]
        public VendorDetails VendorDetails { get; set; }

        /// <summary>
        /// The buyer reference number is a unique identifier generated by the buyer for all Collect and WePay shipments.
        /// </summary>
        /// <value>The buyer reference number is a unique identifier generated by the buyer for all Collect and WePay shipments.</value>
        [DataMember(Name = "buyerReferenceNumber", EmitDefaultValue = false)]
        public string BuyerReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets ShipToParty
        /// </summary>
        [DataMember(Name = "shipToParty", EmitDefaultValue = false)]
        public PartyIdentification ShipToParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipFromParty
        /// </summary>
        [DataMember(Name = "shipFromParty", EmitDefaultValue = false)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Vendor Warehouse ID from where the shipment is scheduled to be picked up by buyer / Carrier.
        /// </summary>
        /// <value>Vendor Warehouse ID from where the shipment is scheduled to be picked up by buyer / Carrier.</value>
        [DataMember(Name = "warehouseId", EmitDefaultValue = false)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// Unique Id with  which  the shipment can be tracked for Small Parcels.
        /// </summary>
        /// <value>Unique Id with  which  the shipment can be tracked for Small Parcels.</value>
        [DataMember(Name = "masterTrackingId", EmitDefaultValue = false)]
        public string MasterTrackingId { get; set; }

        /// <summary>
        /// Number of Labels that are created as part of this shipment.
        /// </summary>
        /// <value>Number of Labels that are created as part of this shipment.</value>
        [DataMember(Name = "totalLabelCount", EmitDefaultValue = false)]
        public int TotalLabelCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentInformation {\n");
            sb.Append("  VendorDetails: ").Append(VendorDetails).Append("\n");
            sb.Append("  BuyerReferenceNumber: ").Append(BuyerReferenceNumber).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  MasterTrackingId: ").Append(MasterTrackingId).Append("\n");
            sb.Append("  TotalLabelCount: ").Append(TotalLabelCount).Append("\n");
            sb.Append("  ShipMode: ").Append(ShipMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
