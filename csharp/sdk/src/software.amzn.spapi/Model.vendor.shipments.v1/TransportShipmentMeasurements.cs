/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// Shipment measurement details.
    /// </summary>
    [DataContract(Name = "TransportShipmentMeasurements")]
    public partial class TransportShipmentMeasurements : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportShipmentMeasurements" /> class.
        /// </summary>
        /// <param name="totalCartonCount">Total number of cartons present in the shipment. Provide the cartonCount only for non-palletized shipments..</param>
        /// <param name="totalPalletStackable">Total number of Stackable Pallets present in the shipment..</param>
        /// <param name="totalPalletNonStackable">Total number of Non Stackable Pallets present in the shipment..</param>
        /// <param name="shipmentWeight">shipmentWeight.</param>
        /// <param name="shipmentVolume">shipmentVolume.</param>
        public TransportShipmentMeasurements(int totalCartonCount = default(int), int totalPalletStackable = default(int), int totalPalletNonStackable = default(int), Weight shipmentWeight = default(Weight), Volume shipmentVolume = default(Volume))
        {
            this.TotalCartonCount = totalCartonCount;
            this.TotalPalletStackable = totalPalletStackable;
            this.TotalPalletNonStackable = totalPalletNonStackable;
            this.ShipmentWeight = shipmentWeight;
            this.ShipmentVolume = shipmentVolume;
        }

        /// <summary>
        /// Total number of cartons present in the shipment. Provide the cartonCount only for non-palletized shipments.
        /// </summary>
        /// <value>Total number of cartons present in the shipment. Provide the cartonCount only for non-palletized shipments.</value>
        [DataMember(Name = "totalCartonCount", EmitDefaultValue = false)]
        public int TotalCartonCount { get; set; }

        /// <summary>
        /// Total number of Stackable Pallets present in the shipment.
        /// </summary>
        /// <value>Total number of Stackable Pallets present in the shipment.</value>
        [DataMember(Name = "totalPalletStackable", EmitDefaultValue = false)]
        public int TotalPalletStackable { get; set; }

        /// <summary>
        /// Total number of Non Stackable Pallets present in the shipment.
        /// </summary>
        /// <value>Total number of Non Stackable Pallets present in the shipment.</value>
        [DataMember(Name = "totalPalletNonStackable", EmitDefaultValue = false)]
        public int TotalPalletNonStackable { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentWeight
        /// </summary>
        [DataMember(Name = "shipmentWeight", EmitDefaultValue = false)]
        public Weight ShipmentWeight { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentVolume
        /// </summary>
        [DataMember(Name = "shipmentVolume", EmitDefaultValue = false)]
        public Volume ShipmentVolume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransportShipmentMeasurements {\n");
            sb.Append("  TotalCartonCount: ").Append(TotalCartonCount).Append("\n");
            sb.Append("  TotalPalletStackable: ").Append(TotalPalletStackable).Append("\n");
            sb.Append("  TotalPalletNonStackable: ").Append(TotalPalletNonStackable).Append("\n");
            sb.Append("  ShipmentWeight: ").Append(ShipmentWeight).Append("\n");
            sb.Append("  ShipmentVolume: ").Append(ShipmentVolume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
