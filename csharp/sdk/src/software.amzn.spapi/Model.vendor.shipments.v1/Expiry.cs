/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// Expiry refers to the collection of dates required  for certain items. These could be either expiryDate or mfgDate and expiryAfterDuration. These are mandatory for perishable items.
    /// </summary>
    [DataContract(Name = "Expiry")]
    public partial class Expiry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Expiry" /> class.
        /// </summary>
        /// <param name="manufacturerDate">Production, packaging or assembly date determined by the manufacturer. Its meaning is determined based on the trade item context..</param>
        /// <param name="expiryDate">The date that determines the limit of consumption or use of a product. Its meaning is determined based on the trade item context..</param>
        /// <param name="expiryAfterDuration">expiryAfterDuration.</param>
        public Expiry(DateTime manufacturerDate = default(DateTime), DateTime expiryDate = default(DateTime), Duration expiryAfterDuration = default(Duration))
        {
            this.ManufacturerDate = manufacturerDate;
            this.ExpiryDate = expiryDate;
            this.ExpiryAfterDuration = expiryAfterDuration;
        }

        /// <summary>
        /// Production, packaging or assembly date determined by the manufacturer. Its meaning is determined based on the trade item context.
        /// </summary>
        /// <value>Production, packaging or assembly date determined by the manufacturer. Its meaning is determined based on the trade item context.</value>
        [DataMember(Name = "manufacturerDate", EmitDefaultValue = false)]
        public DateTime ManufacturerDate { get; set; }

        /// <summary>
        /// The date that determines the limit of consumption or use of a product. Its meaning is determined based on the trade item context.
        /// </summary>
        /// <value>The date that determines the limit of consumption or use of a product. Its meaning is determined based on the trade item context.</value>
        [DataMember(Name = "expiryDate", EmitDefaultValue = false)]
        public DateTime ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryAfterDuration
        /// </summary>
        [DataMember(Name = "expiryAfterDuration", EmitDefaultValue = false)]
        public Duration ExpiryAfterDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Expiry {\n");
            sb.Append("  ManufacturerDate: ").Append(ManufacturerDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  ExpiryAfterDuration: ").Append(ExpiryAfterDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
