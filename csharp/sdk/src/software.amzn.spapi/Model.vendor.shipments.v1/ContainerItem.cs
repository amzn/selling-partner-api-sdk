/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// Carton/Pallet level details for the item.
    /// </summary>
    [DataContract(Name = "ContainerItem")]
    public partial class ContainerItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContainerItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerItem" /> class.
        /// </summary>
        /// <param name="itemReference">The reference number for the item. Please provide the itemSequenceNumber from the &#39;items&#39; segment to refer to that item&#39;s details here. (required).</param>
        /// <param name="shippedQuantity">shippedQuantity (required).</param>
        /// <param name="itemDetails">itemDetails.</param>
        public ContainerItem(string itemReference = default(string), ItemQuantity shippedQuantity = default(ItemQuantity), ItemDetails itemDetails = default(ItemDetails))
        {
            // to ensure "itemReference" is required (not null)
            if (itemReference == null)
            {
                throw new ArgumentNullException("itemReference is a required property for ContainerItem and cannot be null");
            }
            this.ItemReference = itemReference;
            // to ensure "shippedQuantity" is required (not null)
            if (shippedQuantity == null)
            {
                throw new ArgumentNullException("shippedQuantity is a required property for ContainerItem and cannot be null");
            }
            this.ShippedQuantity = shippedQuantity;
            this.ItemDetails = itemDetails;
        }

        /// <summary>
        /// The reference number for the item. Please provide the itemSequenceNumber from the &#39;items&#39; segment to refer to that item&#39;s details here.
        /// </summary>
        /// <value>The reference number for the item. Please provide the itemSequenceNumber from the &#39;items&#39; segment to refer to that item&#39;s details here.</value>
        [DataMember(Name = "itemReference", IsRequired = true, EmitDefaultValue = true)]
        public string ItemReference { get; set; }

        /// <summary>
        /// Gets or Sets ShippedQuantity
        /// </summary>
        [DataMember(Name = "shippedQuantity", IsRequired = true, EmitDefaultValue = true)]
        public ItemQuantity ShippedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ItemDetails
        /// </summary>
        [DataMember(Name = "itemDetails", EmitDefaultValue = false)]
        public ItemDetails ItemDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContainerItem {\n");
            sb.Append("  ItemReference: ").Append(ItemReference).Append("\n");
            sb.Append("  ShippedQuantity: ").Append(ShippedQuantity).Append("\n");
            sb.Append("  ItemDetails: ").Append(ItemDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
