/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// Details of the carton/package being shipped.
    /// </summary>
    [DataContract(Name = "Carton")]
    public partial class Carton : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Carton" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Carton() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Carton" /> class.
        /// </summary>
        /// <param name="cartonIdentifiers">A list of carton identifiers..</param>
        /// <param name="cartonSequenceNumber">Carton sequence number for the carton. The first carton will be 001, the second 002, and so on. This number is used as a reference to refer to this carton from the pallet level. (required).</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="weight">weight.</param>
        /// <param name="trackingNumber">This is required to be provided for every carton in the small parcel shipments..</param>
        /// <param name="items">A list of container item details. (required).</param>
        public Carton(List<ContainerIdentification> cartonIdentifiers = default(List<ContainerIdentification>), string cartonSequenceNumber = default(string), Dimensions dimensions = default(Dimensions), Weight weight = default(Weight), string trackingNumber = default(string), List<ContainerItem> items = default(List<ContainerItem>))
        {
            // to ensure "cartonSequenceNumber" is required (not null)
            if (cartonSequenceNumber == null)
            {
                throw new ArgumentNullException("cartonSequenceNumber is a required property for Carton and cannot be null");
            }
            this.CartonSequenceNumber = cartonSequenceNumber;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for Carton and cannot be null");
            }
            this.Items = items;
            this.CartonIdentifiers = cartonIdentifiers;
            this.Dimensions = dimensions;
            this.Weight = weight;
            this.TrackingNumber = trackingNumber;
        }

        /// <summary>
        /// A list of carton identifiers.
        /// </summary>
        /// <value>A list of carton identifiers.</value>
        [DataMember(Name = "cartonIdentifiers", EmitDefaultValue = false)]
        public List<ContainerIdentification> CartonIdentifiers { get; set; }

        /// <summary>
        /// Carton sequence number for the carton. The first carton will be 001, the second 002, and so on. This number is used as a reference to refer to this carton from the pallet level.
        /// </summary>
        /// <value>Carton sequence number for the carton. The first carton will be 001, the second 002, and so on. This number is used as a reference to refer to this carton from the pallet level.</value>
        [DataMember(Name = "cartonSequenceNumber", IsRequired = true, EmitDefaultValue = true)]
        public string CartonSequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// This is required to be provided for every carton in the small parcel shipments.
        /// </summary>
        /// <value>This is required to be provided for every carton in the small parcel shipments.</value>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// A list of container item details.
        /// </summary>
        /// <value>A list of container item details.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<ContainerItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Carton {\n");
            sb.Append("  CartonIdentifiers: ").Append(CartonIdentifiers).Append("\n");
            sb.Append("  CartonSequenceNumber: ").Append(CartonSequenceNumber).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
