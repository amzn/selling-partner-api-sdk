/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// Label details as part of the transport label response
    /// </summary>
    [DataContract(Name = "LabelData")]
    public partial class LabelData : IValidatableObject
    {
        /// <summary>
        /// The format of the label.
        /// </summary>
        /// <value>The format of the label.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LabelFormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 1
        }


        /// <summary>
        /// The format of the label.
        /// </summary>
        /// <value>The format of the label.</value>
        [DataMember(Name = "labelFormat", EmitDefaultValue = false)]
        public LabelFormatEnum? LabelFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LabelData" /> class.
        /// </summary>
        /// <param name="labelSequenceNumber">A sequential number assigned to each label within a shipment..</param>
        /// <param name="labelFormat">The format of the label..</param>
        /// <param name="carrierCode">Unique identification of the carrier..</param>
        /// <param name="trackingId">Tracking Id for the transportation..</param>
        /// <param name="label">The base-64 encoded string that represents the shipment label..</param>
        public LabelData(int labelSequenceNumber = default(int), LabelFormatEnum? labelFormat = default(LabelFormatEnum?), string carrierCode = default(string), string trackingId = default(string), string label = default(string))
        {
            this.LabelSequenceNumber = labelSequenceNumber;
            this.LabelFormat = labelFormat;
            this.CarrierCode = carrierCode;
            this.TrackingId = trackingId;
            this.Label = label;
        }

        /// <summary>
        /// A sequential number assigned to each label within a shipment.
        /// </summary>
        /// <value>A sequential number assigned to each label within a shipment.</value>
        [DataMember(Name = "labelSequenceNumber", EmitDefaultValue = false)]
        public int LabelSequenceNumber { get; set; }

        /// <summary>
        /// Unique identification of the carrier.
        /// </summary>
        /// <value>Unique identification of the carrier.</value>
        [DataMember(Name = "carrierCode", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Tracking Id for the transportation.
        /// </summary>
        /// <value>Tracking Id for the transportation.</value>
        [DataMember(Name = "trackingId", EmitDefaultValue = false)]
        public string TrackingId { get; set; }

        /// <summary>
        /// The base-64 encoded string that represents the shipment label.
        /// </summary>
        /// <value>The base-64 encoded string that represents the shipment label.</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LabelData {\n");
            sb.Append("  LabelSequenceNumber: ").Append(LabelSequenceNumber).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
