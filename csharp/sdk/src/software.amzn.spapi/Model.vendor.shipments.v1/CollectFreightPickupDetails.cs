/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// Transport Request pickup date from Vendor Warehouse by Buyer
    /// </summary>
    [DataContract(Name = "CollectFreightPickupDetails")]
    public partial class CollectFreightPickupDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectFreightPickupDetails" /> class.
        /// </summary>
        /// <param name="requestedPickUp">Date on which the items can be picked up from vendor warehouse by Buyer used for WePay/Collect vendors..</param>
        /// <param name="scheduledPickUp">Date on which the items are scheduled to be picked from vendor warehouse by Buyer used for WePay/Collect vendors..</param>
        /// <param name="carrierAssignmentDate">Date on which the carrier is being scheduled to pickup items from vendor warehouse by Byer used for WePay/Collect vendors..</param>
        public CollectFreightPickupDetails(DateTime requestedPickUp = default(DateTime), DateTime scheduledPickUp = default(DateTime), DateTime carrierAssignmentDate = default(DateTime))
        {
            this.RequestedPickUp = requestedPickUp;
            this.ScheduledPickUp = scheduledPickUp;
            this.CarrierAssignmentDate = carrierAssignmentDate;
        }

        /// <summary>
        /// Date on which the items can be picked up from vendor warehouse by Buyer used for WePay/Collect vendors.
        /// </summary>
        /// <value>Date on which the items can be picked up from vendor warehouse by Buyer used for WePay/Collect vendors.</value>
        [DataMember(Name = "requestedPickUp", EmitDefaultValue = false)]
        public DateTime RequestedPickUp { get; set; }

        /// <summary>
        /// Date on which the items are scheduled to be picked from vendor warehouse by Buyer used for WePay/Collect vendors.
        /// </summary>
        /// <value>Date on which the items are scheduled to be picked from vendor warehouse by Buyer used for WePay/Collect vendors.</value>
        [DataMember(Name = "scheduledPickUp", EmitDefaultValue = false)]
        public DateTime ScheduledPickUp { get; set; }

        /// <summary>
        /// Date on which the carrier is being scheduled to pickup items from vendor warehouse by Byer used for WePay/Collect vendors.
        /// </summary>
        /// <value>Date on which the carrier is being scheduled to pickup items from vendor warehouse by Byer used for WePay/Collect vendors.</value>
        [DataMember(Name = "carrierAssignmentDate", EmitDefaultValue = false)]
        public DateTime CarrierAssignmentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CollectFreightPickupDetails {\n");
            sb.Append("  RequestedPickUp: ").Append(RequestedPickUp).Append("\n");
            sb.Append("  ScheduledPickUp: ").Append(ScheduledPickUp).Append("\n");
            sb.Append("  CarrierAssignmentDate: ").Append(CarrierAssignmentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
