/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// Details of item quantity.
    /// </summary>
    [DataContract(Name = "ItemQuantity")]
    public partial class ItemQuantity : IValidatableObject
    {
        /// <summary>
        /// Unit of measure for the shipped quantity.
        /// </summary>
        /// <value>Unit of measure for the shipped quantity.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitOfMeasureEnum
        {
            /// <summary>
            /// Enum Cases for value: Cases
            /// </summary>
            [EnumMember(Value = "Cases")]
            Cases = 1,

            /// <summary>
            /// Enum Eaches for value: Eaches
            /// </summary>
            [EnumMember(Value = "Eaches")]
            Eaches = 2
        }


        /// <summary>
        /// Unit of measure for the shipped quantity.
        /// </summary>
        /// <value>Unit of measure for the shipped quantity.</value>
        [DataMember(Name = "unitOfMeasure", IsRequired = true, EmitDefaultValue = true)]
        public UnitOfMeasureEnum UnitOfMeasure { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemQuantity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemQuantity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemQuantity" /> class.
        /// </summary>
        /// <param name="amount">Amount of units shipped for a specific item at a shipment level. If the item is present only in certain cartons or pallets within the shipment, please provide this at the appropriate carton or pallet level. (required).</param>
        /// <param name="unitOfMeasure">Unit of measure for the shipped quantity. (required).</param>
        /// <param name="unitSize">The case size, in the event that we ordered using cases. Otherwise, 1..</param>
        /// <param name="totalWeight">totalWeight.</param>
        public ItemQuantity(int amount = default(int), UnitOfMeasureEnum unitOfMeasure = default(UnitOfMeasureEnum), int unitSize = default(int), TotalWeight totalWeight = default(TotalWeight))
        {
            this.Amount = amount;
            this.UnitOfMeasure = unitOfMeasure;
            this.UnitSize = unitSize;
            this.TotalWeight = totalWeight;
        }

        /// <summary>
        /// Amount of units shipped for a specific item at a shipment level. If the item is present only in certain cartons or pallets within the shipment, please provide this at the appropriate carton or pallet level.
        /// </summary>
        /// <value>Amount of units shipped for a specific item at a shipment level. If the item is present only in certain cartons or pallets within the shipment, please provide this at the appropriate carton or pallet level.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public int Amount { get; set; }

        /// <summary>
        /// The case size, in the event that we ordered using cases. Otherwise, 1.
        /// </summary>
        /// <value>The case size, in the event that we ordered using cases. Otherwise, 1.</value>
        [DataMember(Name = "unitSize", EmitDefaultValue = false)]
        public int UnitSize { get; set; }

        /// <summary>
        /// Gets or Sets TotalWeight
        /// </summary>
        [DataMember(Name = "totalWeight", EmitDefaultValue = false)]
        public TotalWeight TotalWeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemQuantity {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  UnitSize: ").Append(UnitSize).Append("\n");
            sb.Append("  TotalWeight: ").Append(TotalWeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
