/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.shipments.v1
{
    /// <summary>
    /// Shipment Status details.
    /// </summary>
    [DataContract(Name = "ShipmentStatusDetails")]
    public partial class ShipmentStatusDetails : IValidatableObject
    {
        /// <summary>
        /// Current status of the shipment on whether it is picked up or scheduled.
        /// </summary>
        /// <value>Current status of the shipment on whether it is picked up or scheduled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShipmentStatusEnum
        {
            /// <summary>
            /// Enum Created for value: Created
            /// </summary>
            [EnumMember(Value = "Created")]
            Created = 1,

            /// <summary>
            /// Enum TransportationRequested for value: TransportationRequested
            /// </summary>
            [EnumMember(Value = "TransportationRequested")]
            TransportationRequested = 2,

            /// <summary>
            /// Enum CarrierAssigned for value: CarrierAssigned
            /// </summary>
            [EnumMember(Value = "CarrierAssigned")]
            CarrierAssigned = 3,

            /// <summary>
            /// Enum Shipped for value: Shipped
            /// </summary>
            [EnumMember(Value = "Shipped")]
            Shipped = 4
        }


        /// <summary>
        /// Current status of the shipment on whether it is picked up or scheduled.
        /// </summary>
        /// <value>Current status of the shipment on whether it is picked up or scheduled.</value>
        [DataMember(Name = "shipmentStatus", EmitDefaultValue = false)]
        public ShipmentStatusEnum? ShipmentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentStatusDetails" /> class.
        /// </summary>
        /// <param name="shipmentStatus">Current status of the shipment on whether it is picked up or scheduled..</param>
        /// <param name="shipmentStatusDate">Date and time on last status update received for the shipment.</param>
        public ShipmentStatusDetails(ShipmentStatusEnum? shipmentStatus = default(ShipmentStatusEnum?), DateTime shipmentStatusDate = default(DateTime))
        {
            this.ShipmentStatus = shipmentStatus;
            this.ShipmentStatusDate = shipmentStatusDate;
        }

        /// <summary>
        /// Date and time on last status update received for the shipment
        /// </summary>
        /// <value>Date and time on last status update received for the shipment</value>
        [DataMember(Name = "shipmentStatusDate", EmitDefaultValue = false)]
        public DateTime ShipmentStatusDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentStatusDetails {\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  ShipmentStatusDate: ").Append(ShipmentStatusDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
