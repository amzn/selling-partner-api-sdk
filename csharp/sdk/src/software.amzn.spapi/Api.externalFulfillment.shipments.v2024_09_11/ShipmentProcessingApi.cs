/*
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using software.amzn.spapi.Client;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Model.externalFulfillment.shipments.v2024_09_11;

namespace software.amzn.spapi.Api.externalFulfillment.shipments.v2024_09_11
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentProcessingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide details about the packages in the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment.</param>
        /// <param name="body">A list of packages in the shipment.</param>
        /// <returns></returns>
        void CreatePackages (string shipmentId, Packages body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide details about the packages in the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment.</param>
        /// <param name="body">A list of packages in the shipment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreatePackagesWithHttpInfo (string shipmentId, Packages body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get invoices for the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want.</param>
        /// <returns>InvoiceResponse</returns>
        InvoiceResponse GenerateInvoice (string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get invoices for the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        ApiResponse<InvoiceResponse> GenerateInvoiceWithHttpInfo (string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose shipping labels you want to generate and retrieve.</param>
        /// <param name="operation">Specify whether you want to generate or regenerate a label.</param>
        /// <param name="shippingOptionId">The ID of the shipping option whose shipping labels you want. (optional)</param>
        /// <param name="body">Shipping details for when shipping is not done by the marketplace channel. (optional)</param>
        /// <returns>ShipLabelsResponse</returns>
        ShipLabelsResponse GenerateShipLabels (string shipmentId, string operation, string? shippingOptionId = null, ShipLabelsInput? body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose shipping labels you want to generate and retrieve.</param>
        /// <param name="operation">Specify whether you want to generate or regenerate a label.</param>
        /// <param name="shippingOptionId">The ID of the shipping option whose shipping labels you want. (optional)</param>
        /// <param name="body">Shipping details for when shipping is not done by the marketplace channel. (optional)</param>
        /// <returns>ApiResponse of ShipLabelsResponse</returns>
        ApiResponse<ShipLabelsResponse> GenerateShipLabelsWithHttpInfo (string shipmentId, string operation, string? shippingOptionId = null, ShipLabelsInput? body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirm or reject the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment you want to confirm or reject.</param>
        /// <param name="operation">The status of the shipment.</param>
        /// <param name="body">Information about the shipment and its line items. (optional)</param>
        /// <returns></returns>
        void ProcessShipment (string shipmentId, string operation, ShipmentAcknowledgementRequest? body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirm or reject the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment you want to confirm or reject.</param>
        /// <param name="operation">The status of the shipment.</param>
        /// <param name="body">Information about the shipment and its line items. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProcessShipmentWithHttpInfo (string shipmentId, string operation, ShipmentAcknowledgementRequest? body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve invoices for the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want to retrieve.</param>
        /// <returns>InvoiceResponse</returns>
        InvoiceResponse RetrieveInvoice (string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve invoices for the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want to retrieve.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        ApiResponse<InvoiceResponse> RetrieveInvoiceWithHttpInfo (string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of shipping options for a package in a shipment given the shipment&#39;s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package for which you want to retrieve shipping options.</param>
        /// <returns>ShippingOptionsResponse</returns>
        ShippingOptionsResponse RetrieveShippingOptions (string shipmentId, string packageId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of shipping options for a package in a shipment given the shipment&#39;s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package for which you want to retrieve shipping options.</param>
        /// <returns>ApiResponse of ShippingOptionsResponse</returns>
        ApiResponse<ShippingOptionsResponse> RetrieveShippingOptionsWithHttpInfo (string shipmentId, string packageId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the details about the packages that will be used to fulfill the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose information you want to update.</param>
        /// <param name="body">The body of the request.</param>
        /// <returns></returns>
        void UpdatePackage (string shipmentId, string packageId, Package body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the details about the packages that will be used to fulfill the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose information you want to update.</param>
        /// <param name="body">The body of the request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePackageWithHttpInfo (string shipmentId, string packageId, Package body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the status of the packages.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose status you want to update.</param>
        /// <param name="status">**DEPRECATED**. Do not use. Package status is defined in the body parameter. (optional)</param>
        /// <param name="body">The body of the request. (optional)</param>
        /// <returns></returns>
        void UpdatePackageStatus (string shipmentId, string packageId, string? status = null, PackageDeliveryStatus? body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the status of the packages.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose status you want to update.</param>
        /// <param name="status">**DEPRECATED**. Do not use. Package status is defined in the body parameter. (optional)</param>
        /// <param name="body">The body of the request. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePackageStatusWithHttpInfo (string shipmentId, string packageId, string? status = null, PackageDeliveryStatus? body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide details about the packages in the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment.</param>
        /// <param name="body">A list of packages in the shipment.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreatePackagesAsync (string shipmentId, Packages body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide details about the packages in the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment.</param>
        /// <param name="body">A list of packages in the shipment.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreatePackagesAsyncWithHttpInfo (string shipmentId, Packages body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get invoices for the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want.</param>
        /// <returns>Task of InvoiceResponse</returns>
        System.Threading.Tasks.Task<InvoiceResponse> GenerateInvoiceAsync (string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get invoices for the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceResponse>> GenerateInvoiceAsyncWithHttpInfo (string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose shipping labels you want to generate and retrieve.</param>
        /// <param name="operation">Specify whether you want to generate or regenerate a label.</param>
        /// <param name="shippingOptionId">The ID of the shipping option whose shipping labels you want. (optional)</param>
        /// <param name="body">Shipping details for when shipping is not done by the marketplace channel. (optional)</param>
        /// <returns>Task of ShipLabelsResponse</returns>
        System.Threading.Tasks.Task<ShipLabelsResponse> GenerateShipLabelsAsync (string shipmentId, string operation, string? shippingOptionId = null, ShipLabelsInput? body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose shipping labels you want to generate and retrieve.</param>
        /// <param name="operation">Specify whether you want to generate or regenerate a label.</param>
        /// <param name="shippingOptionId">The ID of the shipping option whose shipping labels you want. (optional)</param>
        /// <param name="body">Shipping details for when shipping is not done by the marketplace channel. (optional)</param>
        /// <returns>Task of ApiResponse (ShipLabelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipLabelsResponse>> GenerateShipLabelsAsyncWithHttpInfo (string shipmentId, string operation, string? shippingOptionId = null, ShipLabelsInput? body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirm or reject the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment you want to confirm or reject.</param>
        /// <param name="operation">The status of the shipment.</param>
        /// <param name="body">Information about the shipment and its line items. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProcessShipmentAsync (string shipmentId, string operation, ShipmentAcknowledgementRequest? body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirm or reject the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment you want to confirm or reject.</param>
        /// <param name="operation">The status of the shipment.</param>
        /// <param name="body">Information about the shipment and its line items. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProcessShipmentAsyncWithHttpInfo (string shipmentId, string operation, ShipmentAcknowledgementRequest? body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve invoices for the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want to retrieve.</param>
        /// <returns>Task of InvoiceResponse</returns>
        System.Threading.Tasks.Task<InvoiceResponse> RetrieveInvoiceAsync (string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve invoices for the shipment you specify.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want to retrieve.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceResponse>> RetrieveInvoiceAsyncWithHttpInfo (string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of shipping options for a package in a shipment given the shipment&#39;s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package for which you want to retrieve shipping options.</param>
        /// <returns>Task of ShippingOptionsResponse</returns>
        System.Threading.Tasks.Task<ShippingOptionsResponse> RetrieveShippingOptionsAsync (string shipmentId, string packageId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of shipping options for a package in a shipment given the shipment&#39;s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package for which you want to retrieve shipping options.</param>
        /// <returns>Task of ApiResponse (ShippingOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShippingOptionsResponse>> RetrieveShippingOptionsAsyncWithHttpInfo (string shipmentId, string packageId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the details about the packages that will be used to fulfill the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose information you want to update.</param>
        /// <param name="body">The body of the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePackageAsync (string shipmentId, string packageId, Package body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the details about the packages that will be used to fulfill the specified shipment.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose information you want to update.</param>
        /// <param name="body">The body of the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackageAsyncWithHttpInfo (string shipmentId, string packageId, Package body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the status of the packages.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose status you want to update.</param>
        /// <param name="status">**DEPRECATED**. Do not use. Package status is defined in the body parameter. (optional)</param>
        /// <param name="body">The body of the request. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePackageStatusAsync (string shipmentId, string packageId, string? status = null, PackageDeliveryStatus? body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the status of the packages.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose status you want to update.</param>
        /// <param name="status">**DEPRECATED**. Do not use. Package status is defined in the body parameter. (optional)</param>
        /// <param name="body">The body of the request. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackageStatusAsyncWithHttpInfo (string shipmentId, string packageId, string? status = null, PackageDeliveryStatus? body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShipmentProcessingApi : IShipmentProcessingApi
    {
        private software.amzn.spapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentProcessingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShipmentProcessingApi(software.amzn.spapi.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = software.amzn.spapi.Client.Configuration.DefaultExceptionFactory;
        }

        IReadableConfiguration IApiAccessor.Configuration 
        {
            get => Configuration;  // Implicit upcast to interface
            set => Configuration = (software.amzn.spapi.Client.Configuration)value;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public software.amzn.spapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public software.amzn.spapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Provide details about the packages in the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment.</param>
        /// <param name="body">A list of packages in the shipment.</param>
        /// <returns></returns>
        public void CreatePackages (string shipmentId, Packages body)
        {
             CreatePackagesWithHttpInfo(shipmentId, body);
        }

        /// <summary>
        ///  Provide details about the packages in the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment.</param>
        /// <param name="body">A list of packages in the shipment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreatePackagesWithHttpInfo (string shipmentId, Packages body)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->CreatePackages");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShipmentProcessingApi->CreatePackages");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePackages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(
                statusCode: localVarResponse.StatusCode,
                headers: ConvertHeadersToMultimap(localVarResponse),
                data: null);
        }

        /// <summary>
        ///  Provide details about the packages in the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment.</param>
        /// <param name="body">A list of packages in the shipment.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreatePackagesAsync (string shipmentId, Packages body)
        {
             await CreatePackagesAsyncWithHttpInfo(shipmentId, body);

        }

        /// <summary>
        ///  Provide details about the packages in the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment.</param>
        /// <param name="body">A list of packages in the shipment.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreatePackagesAsyncWithHttpInfo (string shipmentId, Packages body)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->CreatePackages");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShipmentProcessingApi->CreatePackages");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePackages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(
                statusCode: localVarResponse.StatusCode,
                headers: ConvertHeadersToMultimap(localVarResponse),
                data: null);
        }

        /// <summary>
        ///  Get invoices for the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want.</param>
        /// <returns>InvoiceResponse</returns>
        public InvoiceResponse GenerateInvoice (string shipmentId)
        {
             ApiResponse<InvoiceResponse> localVarResponse = GenerateInvoiceWithHttpInfo(shipmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get invoices for the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        public ApiResponse< InvoiceResponse > GenerateInvoiceWithHttpInfo (string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->GenerateInvoice");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (InvoiceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceResponse)));
        }

        /// <summary>
        ///  Get invoices for the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want.</param>
        /// <returns>Task of InvoiceResponse</returns>
        public async System.Threading.Tasks.Task<InvoiceResponse> GenerateInvoiceAsync (string shipmentId)
        {
             ApiResponse<InvoiceResponse> localVarResponse = await GenerateInvoiceAsyncWithHttpInfo(shipmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get invoices for the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoiceResponse>> GenerateInvoiceAsyncWithHttpInfo (string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->GenerateInvoice");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (InvoiceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceResponse)));
        }

        /// <summary>
        ///  Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose shipping labels you want to generate and retrieve.</param>
        /// <param name="operation">Specify whether you want to generate or regenerate a label.</param>
        /// <param name="shippingOptionId">The ID of the shipping option whose shipping labels you want. (optional)</param>
        /// <param name="body">Shipping details for when shipping is not done by the marketplace channel. (optional)</param>
        /// <returns>ShipLabelsResponse</returns>
        public ShipLabelsResponse GenerateShipLabels (string shipmentId, string operation, string? shippingOptionId = null, ShipLabelsInput? body = null)
        {
             ApiResponse<ShipLabelsResponse> localVarResponse = GenerateShipLabelsWithHttpInfo(shipmentId, operation, shippingOptionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose shipping labels you want to generate and retrieve.</param>
        /// <param name="operation">Specify whether you want to generate or regenerate a label.</param>
        /// <param name="shippingOptionId">The ID of the shipping option whose shipping labels you want. (optional)</param>
        /// <param name="body">Shipping details for when shipping is not done by the marketplace channel. (optional)</param>
        /// <returns>ApiResponse of ShipLabelsResponse</returns>
        public ApiResponse< ShipLabelsResponse > GenerateShipLabelsWithHttpInfo (string shipmentId, string operation, string? shippingOptionId = null, ShipLabelsInput? body = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->GenerateShipLabels");
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling ShipmentProcessingApi->GenerateShipLabels");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/shipLabels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (shippingOptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shippingOptionId", shippingOptionId)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateShipLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShipLabelsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (ShipLabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipLabelsResponse)));
        }

        /// <summary>
        ///  Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose shipping labels you want to generate and retrieve.</param>
        /// <param name="operation">Specify whether you want to generate or regenerate a label.</param>
        /// <param name="shippingOptionId">The ID of the shipping option whose shipping labels you want. (optional)</param>
        /// <param name="body">Shipping details for when shipping is not done by the marketplace channel. (optional)</param>
        /// <returns>Task of ShipLabelsResponse</returns>
        public async System.Threading.Tasks.Task<ShipLabelsResponse> GenerateShipLabelsAsync (string shipmentId, string operation, string? shippingOptionId = null, ShipLabelsInput? body = null)
        {
             ApiResponse<ShipLabelsResponse> localVarResponse = await GenerateShipLabelsAsyncWithHttpInfo(shipmentId, operation, shippingOptionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose shipping labels you want to generate and retrieve.</param>
        /// <param name="operation">Specify whether you want to generate or regenerate a label.</param>
        /// <param name="shippingOptionId">The ID of the shipping option whose shipping labels you want. (optional)</param>
        /// <param name="body">Shipping details for when shipping is not done by the marketplace channel. (optional)</param>
        /// <returns>Task of ApiResponse (ShipLabelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShipLabelsResponse>> GenerateShipLabelsAsyncWithHttpInfo (string shipmentId, string operation, string? shippingOptionId = null, ShipLabelsInput? body = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->GenerateShipLabels");
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling ShipmentProcessingApi->GenerateShipLabels");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/shipLabels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (shippingOptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shippingOptionId", shippingOptionId)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateShipLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShipLabelsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (ShipLabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipLabelsResponse)));
        }

        /// <summary>
        ///  Confirm or reject the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment you want to confirm or reject.</param>
        /// <param name="operation">The status of the shipment.</param>
        /// <param name="body">Information about the shipment and its line items. (optional)</param>
        /// <returns></returns>
        public void ProcessShipment (string shipmentId, string operation, ShipmentAcknowledgementRequest? body = null)
        {
             ProcessShipmentWithHttpInfo(shipmentId, operation, body);
        }

        /// <summary>
        ///  Confirm or reject the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment you want to confirm or reject.</param>
        /// <param name="operation">The status of the shipment.</param>
        /// <param name="body">Information about the shipment and its line items. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProcessShipmentWithHttpInfo (string shipmentId, string operation, ShipmentAcknowledgementRequest? body = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->ProcessShipment");
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling ShipmentProcessingApi->ProcessShipment");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(
                statusCode: localVarResponse.StatusCode,
                headers: ConvertHeadersToMultimap(localVarResponse),
                data: null);
        }

        /// <summary>
        ///  Confirm or reject the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment you want to confirm or reject.</param>
        /// <param name="operation">The status of the shipment.</param>
        /// <param name="body">Information about the shipment and its line items. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProcessShipmentAsync (string shipmentId, string operation, ShipmentAcknowledgementRequest? body = null)
        {
             await ProcessShipmentAsyncWithHttpInfo(shipmentId, operation, body);

        }

        /// <summary>
        ///  Confirm or reject the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment you want to confirm or reject.</param>
        /// <param name="operation">The status of the shipment.</param>
        /// <param name="body">Information about the shipment and its line items. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProcessShipmentAsyncWithHttpInfo (string shipmentId, string operation, ShipmentAcknowledgementRequest? body = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->ProcessShipment");
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling ShipmentProcessingApi->ProcessShipment");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("POST"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessShipment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(
                statusCode: localVarResponse.StatusCode,
                headers: ConvertHeadersToMultimap(localVarResponse),
                data: null);
        }

        /// <summary>
        ///  Retrieve invoices for the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want to retrieve.</param>
        /// <returns>InvoiceResponse</returns>
        public InvoiceResponse RetrieveInvoice (string shipmentId)
        {
             ApiResponse<InvoiceResponse> localVarResponse = RetrieveInvoiceWithHttpInfo(shipmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve invoices for the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want to retrieve.</param>
        /// <returns>ApiResponse of InvoiceResponse</returns>
        public ApiResponse< InvoiceResponse > RetrieveInvoiceWithHttpInfo (string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->RetrieveInvoice");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (InvoiceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceResponse)));
        }

        /// <summary>
        ///  Retrieve invoices for the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want to retrieve.</param>
        /// <returns>Task of InvoiceResponse</returns>
        public async System.Threading.Tasks.Task<InvoiceResponse> RetrieveInvoiceAsync (string shipmentId)
        {
             ApiResponse<InvoiceResponse> localVarResponse = await RetrieveInvoiceAsyncWithHttpInfo(shipmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve invoices for the shipment you specify.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment whose invoice you want to retrieve.</param>
        /// <returns>Task of ApiResponse (InvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoiceResponse>> RetrieveInvoiceAsyncWithHttpInfo (string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->RetrieveInvoice");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (InvoiceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceResponse)));
        }

        /// <summary>
        ///  Get a list of shipping options for a package in a shipment given the shipment&#39;s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package for which you want to retrieve shipping options.</param>
        /// <returns>ShippingOptionsResponse</returns>
        public ShippingOptionsResponse RetrieveShippingOptions (string shipmentId, string packageId)
        {
             ApiResponse<ShippingOptionsResponse> localVarResponse = RetrieveShippingOptionsWithHttpInfo(shipmentId, packageId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of shipping options for a package in a shipment given the shipment&#39;s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package for which you want to retrieve shipping options.</param>
        /// <returns>ApiResponse of ShippingOptionsResponse</returns>
        public ApiResponse< ShippingOptionsResponse > RetrieveShippingOptionsWithHttpInfo (string shipmentId, string packageId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->RetrieveShippingOptions");
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling ShipmentProcessingApi->RetrieveShippingOptions");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/shippingOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (packageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "packageId", packageId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveShippingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShippingOptionsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (ShippingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShippingOptionsResponse)));
        }

        /// <summary>
        ///  Get a list of shipping options for a package in a shipment given the shipment&#39;s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package for which you want to retrieve shipping options.</param>
        /// <returns>Task of ShippingOptionsResponse</returns>
        public async System.Threading.Tasks.Task<ShippingOptionsResponse> RetrieveShippingOptionsAsync (string shipmentId, string packageId)
        {
             ApiResponse<ShippingOptionsResponse> localVarResponse = await RetrieveShippingOptionsAsyncWithHttpInfo(shipmentId, packageId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a list of shipping options for a package in a shipment given the shipment&#39;s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package for which you want to retrieve shipping options.</param>
        /// <returns>Task of ApiResponse (ShippingOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShippingOptionsResponse>> RetrieveShippingOptionsAsyncWithHttpInfo (string shipmentId, string packageId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->RetrieveShippingOptions");
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling ShipmentProcessingApi->RetrieveShippingOptions");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/shippingOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (packageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "packageId", packageId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveShippingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShippingOptionsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (ShippingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShippingOptionsResponse)));
        }

        /// <summary>
        ///  Updates the details about the packages that will be used to fulfill the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose information you want to update.</param>
        /// <param name="body">The body of the request.</param>
        /// <returns></returns>
        public void UpdatePackage (string shipmentId, string packageId, Package body)
        {
             UpdatePackageWithHttpInfo(shipmentId, packageId, body);
        }

        /// <summary>
        ///  Updates the details about the packages that will be used to fulfill the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose information you want to update.</param>
        /// <param name="body">The body of the request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePackageWithHttpInfo (string shipmentId, string packageId, Package body)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->UpdatePackage");
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling ShipmentProcessingApi->UpdatePackage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShipmentProcessingApi->UpdatePackage");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(
                statusCode: localVarResponse.StatusCode,
                headers: ConvertHeadersToMultimap(localVarResponse),
                data: null);
        }

        /// <summary>
        ///  Updates the details about the packages that will be used to fulfill the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose information you want to update.</param>
        /// <param name="body">The body of the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePackageAsync (string shipmentId, string packageId, Package body)
        {
             await UpdatePackageAsyncWithHttpInfo(shipmentId, packageId, body);

        }

        /// <summary>
        ///  Updates the details about the packages that will be used to fulfill the specified shipment.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose information you want to update.</param>
        /// <param name="body">The body of the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackageAsyncWithHttpInfo (string shipmentId, string packageId, Package body)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->UpdatePackage");
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling ShipmentProcessingApi->UpdatePackage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShipmentProcessingApi->UpdatePackage");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("PUT"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(
                statusCode: localVarResponse.StatusCode,
                headers: ConvertHeadersToMultimap(localVarResponse),
                data: null);
        }

        /// <summary>
        ///  Updates the status of the packages.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose status you want to update.</param>
        /// <param name="status">**DEPRECATED**. Do not use. Package status is defined in the body parameter. (optional)</param>
        /// <param name="body">The body of the request. (optional)</param>
        /// <returns></returns>
        public void UpdatePackageStatus (string shipmentId, string packageId, string? status = null, PackageDeliveryStatus? body = null)
        {
             UpdatePackageStatusWithHttpInfo(shipmentId, packageId, status, body);
        }

        /// <summary>
        ///  Updates the status of the packages.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose status you want to update.</param>
        /// <param name="status">**DEPRECATED**. Do not use. Package status is defined in the body parameter. (optional)</param>
        /// <param name="body">The body of the request. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePackageStatusWithHttpInfo (string shipmentId, string packageId, string? status = null, PackageDeliveryStatus? body = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->UpdatePackageStatus");
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling ShipmentProcessingApi->UpdatePackageStatus");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("PATCH"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackageStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(
                statusCode: localVarResponse.StatusCode,
                headers: ConvertHeadersToMultimap(localVarResponse),
                data: null);
        }

        /// <summary>
        ///  Updates the status of the packages.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose status you want to update.</param>
        /// <param name="status">**DEPRECATED**. Do not use. Package status is defined in the body parameter. (optional)</param>
        /// <param name="body">The body of the request. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePackageStatusAsync (string shipmentId, string packageId, string? status = null, PackageDeliveryStatus? body = null)
        {
             await UpdatePackageStatusAsyncWithHttpInfo(shipmentId, packageId, status, body);

        }

        /// <summary>
        ///  Updates the status of the packages.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The ID of the shipment to which the package belongs.</param>
        /// <param name="packageId">The ID of the package whose status you want to update.</param>
        /// <param name="status">**DEPRECATED**. Do not use. Package status is defined in the body parameter. (optional)</param>
        /// <param name="body">The body of the request. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackageStatusAsyncWithHttpInfo (string shipmentId, string packageId, string? status = null, PackageDeliveryStatus? body = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentProcessingApi->UpdatePackageStatus");
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling ShipmentProcessingApi->UpdatePackageStatus");

            var localVarPath = "/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("PATCH"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackageStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(
                statusCode: localVarResponse.StatusCode,
                headers: ConvertHeadersToMultimap(localVarResponse),
                data: null);
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public ShipmentProcessingApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                software.amzn.spapi.Client.Configuration configuration = new software.amzn.spapi.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.initializeApiClient();
                configuration.Timeout = 100000;

                return new ShipmentProcessingApi(configuration);
            }
        }
        
        private static Multimap<string, string> ConvertHeadersToMultimap(RestResponse response)
        {
            var multimap = new Multimap<string, string>();
            foreach (var header in response.Headers)
            {
                multimap.Add(header.Name, header.Value?.ToString());
            }
            return multimap;
        }


        private static RestSharp.Method ChangeHttpMethod(String httpMethod) {
            switch(httpMethod) {
                case "GET":
                    // GET logic
                    return Method.Get;
                case "POST":
                    // POST logic
                    return Method.Post;
                case "DELETE":
                    return Method.Delete;
                case "PUT":
                    return Method.Put;
                case "PATCH":
                    return Method.Patch;
                case "OPTIONS":
                    return Method.Options;
            }
            return Method.Head;
        }

    }
}
