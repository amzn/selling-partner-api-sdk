/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// The details of an appointment.
    /// </summary>
    [DataContract(Name = "Appointment")]
    public partial class Appointment : IValidatableObject
    {
        /// <summary>
        /// The status of the appointment.
        /// </summary>
        /// <value>The status of the appointment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AppointmentStatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 2,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 3
        }


        /// <summary>
        /// The status of the appointment.
        /// </summary>
        /// <value>The status of the appointment.</value>
        [DataMember(Name = "appointmentStatus", EmitDefaultValue = false)]
        public AppointmentStatusEnum? AppointmentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Appointment" /> class.
        /// </summary>
        /// <param name="appointmentId">The appointment identifier..</param>
        /// <param name="appointmentStatus">The status of the appointment..</param>
        /// <param name="appointmentTime">appointmentTime.</param>
        /// <param name="assignedTechnicians">A list of technicians assigned to the service job..</param>
        /// <param name="rescheduledAppointmentId">The appointment identifier..</param>
        /// <param name="poa">poa.</param>
        public Appointment(string appointmentId = default(string), AppointmentStatusEnum? appointmentStatus = default(AppointmentStatusEnum?), AppointmentTime appointmentTime = default(AppointmentTime), List<Technician> assignedTechnicians = default(List<Technician>), string rescheduledAppointmentId = default(string), Poa poa = default(Poa))
        {
            this.AppointmentId = appointmentId;
            this.AppointmentStatus = appointmentStatus;
            this.AppointmentTime = appointmentTime;
            this.AssignedTechnicians = assignedTechnicians;
            this.RescheduledAppointmentId = rescheduledAppointmentId;
            this.Poa = poa;
        }

        /// <summary>
        /// The appointment identifier.
        /// </summary>
        /// <value>The appointment identifier.</value>
        [DataMember(Name = "appointmentId", EmitDefaultValue = false)]
        public string AppointmentId { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentTime
        /// </summary>
        [DataMember(Name = "appointmentTime", EmitDefaultValue = false)]
        public AppointmentTime AppointmentTime { get; set; }

        /// <summary>
        /// A list of technicians assigned to the service job.
        /// </summary>
        /// <value>A list of technicians assigned to the service job.</value>
        [DataMember(Name = "assignedTechnicians", EmitDefaultValue = false)]
        public List<Technician> AssignedTechnicians { get; set; }

        /// <summary>
        /// The appointment identifier.
        /// </summary>
        /// <value>The appointment identifier.</value>
        [DataMember(Name = "rescheduledAppointmentId", EmitDefaultValue = false)]
        public string RescheduledAppointmentId { get; set; }

        /// <summary>
        /// Gets or Sets Poa
        /// </summary>
        [DataMember(Name = "poa", EmitDefaultValue = false)]
        public Poa Poa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Appointment {\n");
            sb.Append("  AppointmentId: ").Append(AppointmentId).Append("\n");
            sb.Append("  AppointmentStatus: ").Append(AppointmentStatus).Append("\n");
            sb.Append("  AppointmentTime: ").Append(AppointmentTime).Append("\n");
            sb.Append("  AssignedTechnicians: ").Append(AssignedTechnicians).Append("\n");
            sb.Append("  RescheduledAppointmentId: ").Append(RescheduledAppointmentId).Append("\n");
            sb.Append("  Poa: ").Append(Poa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AppointmentId (string) maxLength
            if (this.AppointmentId != null && this.AppointmentId.Length > 100)
            {
                yield return new ValidationResult("Invalid value for AppointmentId, length must be less than 100.", new [] { "AppointmentId" });
            }

            // AppointmentId (string) minLength
            if (this.AppointmentId != null && this.AppointmentId.Length < 5)
            {
                yield return new ValidationResult("Invalid value for AppointmentId, length must be greater than 5.", new [] { "AppointmentId" });
            }

            // RescheduledAppointmentId (string) maxLength
            if (this.RescheduledAppointmentId != null && this.RescheduledAppointmentId.Length > 100)
            {
                yield return new ValidationResult("Invalid value for RescheduledAppointmentId, length must be less than 100.", new [] { "RescheduledAppointmentId" });
            }

            // RescheduledAppointmentId (string) minLength
            if (this.RescheduledAppointmentId != null && this.RescheduledAppointmentId.Length < 5)
            {
                yield return new ValidationResult("Invalid value for RescheduledAppointmentId, length must be greater than 5.", new [] { "RescheduledAppointmentId" });
            }

            yield break;
        }
    }

}
