/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// Response schema for the &#x60;getFixedSlotCapacity&#x60; operation.
    /// </summary>
    [DataContract(Name = "FixedSlotCapacity")]
    public partial class FixedSlotCapacity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedSlotCapacity" /> class.
        /// </summary>
        /// <param name="resourceId">Resource Identifier..</param>
        /// <param name="slotDuration">The duration of each slot which is returned. This value will be a multiple of 5 and fall in the following range: 5 &lt;&#x3D; &#x60;slotDuration&#x60; &lt;&#x3D; 360..</param>
        /// <param name="capacities">Array of capacity slots in fixed slot format..</param>
        /// <param name="nextPageToken">Next page token, if there are more pages..</param>
        public FixedSlotCapacity(string resourceId = default(string), decimal slotDuration = default(decimal), List<FixedSlot> capacities = default(List<FixedSlot>), string nextPageToken = default(string))
        {
            this.ResourceId = resourceId;
            this.SlotDuration = slotDuration;
            this.Capacities = capacities;
            this.NextPageToken = nextPageToken;
        }

        /// <summary>
        /// Resource Identifier.
        /// </summary>
        /// <value>Resource Identifier.</value>
        [DataMember(Name = "resourceId", EmitDefaultValue = false)]
        public string ResourceId { get; set; }

        /// <summary>
        /// The duration of each slot which is returned. This value will be a multiple of 5 and fall in the following range: 5 &lt;&#x3D; &#x60;slotDuration&#x60; &lt;&#x3D; 360.
        /// </summary>
        /// <value>The duration of each slot which is returned. This value will be a multiple of 5 and fall in the following range: 5 &lt;&#x3D; &#x60;slotDuration&#x60; &lt;&#x3D; 360.</value>
        [DataMember(Name = "slotDuration", EmitDefaultValue = false)]
        public decimal SlotDuration { get; set; }

        /// <summary>
        /// Array of capacity slots in fixed slot format.
        /// </summary>
        /// <value>Array of capacity slots in fixed slot format.</value>
        [DataMember(Name = "capacities", EmitDefaultValue = false)]
        public List<FixedSlot> Capacities { get; set; }

        /// <summary>
        /// Next page token, if there are more pages.
        /// </summary>
        /// <value>Next page token, if there are more pages.</value>
        [DataMember(Name = "nextPageToken", EmitDefaultValue = false)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FixedSlotCapacity {\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  SlotDuration: ").Append(SlotDuration).Append("\n");
            sb.Append("  Capacities: ").Append(Capacities).Append("\n");
            sb.Append("  NextPageToken: ").Append(NextPageToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
