/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// &#x60;AvailabilityRecord&#x60; to represent the capacity of a resource over a time range.
    /// </summary>
    [DataContract(Name = "AvailabilityRecord")]
    public partial class AvailabilityRecord : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailabilityRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AvailabilityRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailabilityRecord" /> class.
        /// </summary>
        /// <param name="startTime">Denotes the time from when the resource is available in a day in ISO-8601 format. (required).</param>
        /// <param name="endTime">Denotes the time till when the resource is available in a day in ISO-8601 format. (required).</param>
        /// <param name="recurrence">recurrence.</param>
        /// <param name="capacity">Signifies the capacity of a resource which is available..</param>
        public AvailabilityRecord(DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), Recurrence recurrence = default(Recurrence), int capacity = default(int))
        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Recurrence = recurrence;
            this.Capacity = capacity;
        }

        /// <summary>
        /// Denotes the time from when the resource is available in a day in ISO-8601 format.
        /// </summary>
        /// <value>Denotes the time from when the resource is available in a day in ISO-8601 format.</value>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Denotes the time till when the resource is available in a day in ISO-8601 format.
        /// </summary>
        /// <value>Denotes the time till when the resource is available in a day in ISO-8601 format.</value>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets Recurrence
        /// </summary>
        [DataMember(Name = "recurrence", EmitDefaultValue = false)]
        public Recurrence Recurrence { get; set; }

        /// <summary>
        /// Signifies the capacity of a resource which is available.
        /// </summary>
        /// <value>Signifies the capacity of a resource which is available.</value>
        [DataMember(Name = "capacity", EmitDefaultValue = false)]
        public int Capacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AvailabilityRecord {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Recurrence: ").Append(Recurrence).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Capacity (int) minimum
            if (this.Capacity < (int)1)
            {
                yield return new ValidationResult("Invalid value for Capacity, must be a value greater than or equal to 1.", new [] { "Capacity" });
            }

            yield break;
        }
    }

}
