/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// Request schema for the &#x60;getFixedSlotCapacity&#x60; operation. This schema is used to define the time range, capacity types and slot duration which are being queried.
    /// </summary>
    [DataContract(Name = "FixedSlotCapacityQuery")]
    public partial class FixedSlotCapacityQuery : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedSlotCapacityQuery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FixedSlotCapacityQuery() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedSlotCapacityQuery" /> class.
        /// </summary>
        /// <param name="capacityTypes">An array of capacity types which are being requested. Default value is &#x60;[SCHEDULED_CAPACITY]&#x60;..</param>
        /// <param name="slotDuration">Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 &lt;&#x3D; &#x60;slotDuration&#x60; &lt;&#x3D; 360..</param>
        /// <param name="startDateTime">Start date time from which the capacity slots are being requested in ISO 8601 format. (required).</param>
        /// <param name="endDateTime">End date time up to which the capacity slots are being requested in ISO 8601 format. (required).</param>
        public FixedSlotCapacityQuery(List<CapacityType> capacityTypes = default(List<CapacityType>), decimal slotDuration = default(decimal), DateTime startDateTime = default(DateTime), DateTime endDateTime = default(DateTime))
        {
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.CapacityTypes = capacityTypes;
            this.SlotDuration = slotDuration;
        }

        /// <summary>
        /// An array of capacity types which are being requested. Default value is &#x60;[SCHEDULED_CAPACITY]&#x60;.
        /// </summary>
        /// <value>An array of capacity types which are being requested. Default value is &#x60;[SCHEDULED_CAPACITY]&#x60;.</value>
        [DataMember(Name = "capacityTypes", EmitDefaultValue = false)]
        public List<CapacityType> CapacityTypes { get; set; }

        /// <summary>
        /// Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 &lt;&#x3D; &#x60;slotDuration&#x60; &lt;&#x3D; 360.
        /// </summary>
        /// <value>Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 &lt;&#x3D; &#x60;slotDuration&#x60; &lt;&#x3D; 360.</value>
        [DataMember(Name = "slotDuration", EmitDefaultValue = false)]
        public decimal SlotDuration { get; set; }

        /// <summary>
        /// Start date time from which the capacity slots are being requested in ISO 8601 format.
        /// </summary>
        /// <value>Start date time from which the capacity slots are being requested in ISO 8601 format.</value>
        [DataMember(Name = "startDateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartDateTime { get; set; }

        /// <summary>
        /// End date time up to which the capacity slots are being requested in ISO 8601 format.
        /// </summary>
        /// <value>End date time up to which the capacity slots are being requested in ISO 8601 format.</value>
        [DataMember(Name = "endDateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FixedSlotCapacityQuery {\n");
            sb.Append("  CapacityTypes: ").Append(CapacityTypes).Append("\n");
            sb.Append("  SlotDuration: ").Append(SlotDuration).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
