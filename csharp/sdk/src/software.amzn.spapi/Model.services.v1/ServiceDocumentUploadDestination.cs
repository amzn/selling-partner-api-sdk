/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// Information about an upload destination.
    /// </summary>
    [DataContract(Name = "ServiceDocumentUploadDestination")]
    public partial class ServiceDocumentUploadDestination : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceDocumentUploadDestination" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceDocumentUploadDestination() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceDocumentUploadDestination" /> class.
        /// </summary>
        /// <param name="uploadDestinationId">The unique identifier to be used by APIs that reference the upload destination. (required).</param>
        /// <param name="url">The URL to which to upload the file. (required).</param>
        /// <param name="encryptionDetails">encryptionDetails (required).</param>
        /// <param name="headers">The headers to include in the upload request..</param>
        public ServiceDocumentUploadDestination(string uploadDestinationId = default(string), string url = default(string), EncryptionDetails encryptionDetails = default(EncryptionDetails), Object headers = default(Object))
        {
            // to ensure "uploadDestinationId" is required (not null)
            if (uploadDestinationId == null)
            {
                throw new ArgumentNullException("uploadDestinationId is a required property for ServiceDocumentUploadDestination and cannot be null");
            }
            this.UploadDestinationId = uploadDestinationId;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for ServiceDocumentUploadDestination and cannot be null");
            }
            this.Url = url;
            // to ensure "encryptionDetails" is required (not null)
            if (encryptionDetails == null)
            {
                throw new ArgumentNullException("encryptionDetails is a required property for ServiceDocumentUploadDestination and cannot be null");
            }
            this.EncryptionDetails = encryptionDetails;
            this.Headers = headers;
        }

        /// <summary>
        /// The unique identifier to be used by APIs that reference the upload destination.
        /// </summary>
        /// <value>The unique identifier to be used by APIs that reference the upload destination.</value>
        [DataMember(Name = "uploadDestinationId", IsRequired = true, EmitDefaultValue = true)]
        public string UploadDestinationId { get; set; }

        /// <summary>
        /// The URL to which to upload the file.
        /// </summary>
        /// <value>The URL to which to upload the file.</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets EncryptionDetails
        /// </summary>
        [DataMember(Name = "encryptionDetails", IsRequired = true, EmitDefaultValue = true)]
        public EncryptionDetails EncryptionDetails { get; set; }

        /// <summary>
        /// The headers to include in the upload request.
        /// </summary>
        /// <value>The headers to include in the upload request.</value>
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        public Object Headers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceDocumentUploadDestination {\n");
            sb.Append("  UploadDestinationId: ").Append(UploadDestinationId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  EncryptionDetails: ").Append(EncryptionDetails).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
