/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// A time window along with associated capacity in which the service can be performed.
    /// </summary>
    [DataContract(Name = "AppointmentSlot")]
    public partial class AppointmentSlot : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentSlot" /> class.
        /// </summary>
        /// <param name="startTime">Time window start time in ISO 8601 format..</param>
        /// <param name="endTime">Time window end time in ISO 8601 format..</param>
        /// <param name="capacity">Number of resources for which a slot can be reserved..</param>
        public AppointmentSlot(DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), int capacity = default(int))
        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Capacity = capacity;
        }

        /// <summary>
        /// Time window start time in ISO 8601 format.
        /// </summary>
        /// <value>Time window start time in ISO 8601 format.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Time window end time in ISO 8601 format.
        /// </summary>
        /// <value>Time window end time in ISO 8601 format.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Number of resources for which a slot can be reserved.
        /// </summary>
        /// <value>Number of resources for which a slot can be reserved.</value>
        [DataMember(Name = "capacity", EmitDefaultValue = false)]
        public int Capacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppointmentSlot {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Capacity (int) minimum
            if (this.Capacity < (int)0)
            {
                yield return new ValidationResult("Invalid value for Capacity, must be a value greater than or equal to 0.", new [] { "Capacity" });
            }

            yield break;
        }
    }

}
