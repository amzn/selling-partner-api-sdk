/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// Proof of Appointment (POA) details.
    /// </summary>
    [DataContract(Name = "Poa")]
    public partial class Poa : IValidatableObject
    {
        /// <summary>
        /// The type of POA uploaded.
        /// </summary>
        /// <value>The type of POA uploaded.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PoaTypeEnum
        {
            /// <summary>
            /// Enum NOSIGNATUREDUMMYPOS for value: NO_SIGNATURE_DUMMY_POS
            /// </summary>
            [EnumMember(Value = "NO_SIGNATURE_DUMMY_POS")]
            NOSIGNATUREDUMMYPOS = 1,

            /// <summary>
            /// Enum CUSTOMERSIGNATURE for value: CUSTOMER_SIGNATURE
            /// </summary>
            [EnumMember(Value = "CUSTOMER_SIGNATURE")]
            CUSTOMERSIGNATURE = 2,

            /// <summary>
            /// Enum DUMMYRECEIPT for value: DUMMY_RECEIPT
            /// </summary>
            [EnumMember(Value = "DUMMY_RECEIPT")]
            DUMMYRECEIPT = 3,

            /// <summary>
            /// Enum POARECEIPT for value: POA_RECEIPT
            /// </summary>
            [EnumMember(Value = "POA_RECEIPT")]
            POARECEIPT = 4
        }


        /// <summary>
        /// The type of POA uploaded.
        /// </summary>
        /// <value>The type of POA uploaded.</value>
        [DataMember(Name = "poaType", EmitDefaultValue = false)]
        public PoaTypeEnum? PoaType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Poa" /> class.
        /// </summary>
        /// <param name="appointmentTime">appointmentTime.</param>
        /// <param name="technicians">A list of technicians..</param>
        /// <param name="uploadingTechnician">The identifier of the technician who uploaded the POA..</param>
        /// <param name="uploadTime">The date and time when the POA was uploaded in ISO 8601 format..</param>
        /// <param name="poaType">The type of POA uploaded..</param>
        public Poa(AppointmentTime appointmentTime = default(AppointmentTime), List<Technician> technicians = default(List<Technician>), string uploadingTechnician = default(string), DateTime uploadTime = default(DateTime), PoaTypeEnum? poaType = default(PoaTypeEnum?))
        {
            this.AppointmentTime = appointmentTime;
            this.Technicians = technicians;
            this.UploadingTechnician = uploadingTechnician;
            this.UploadTime = uploadTime;
            this.PoaType = poaType;
        }

        /// <summary>
        /// Gets or Sets AppointmentTime
        /// </summary>
        [DataMember(Name = "appointmentTime", EmitDefaultValue = false)]
        public AppointmentTime AppointmentTime { get; set; }

        /// <summary>
        /// A list of technicians.
        /// </summary>
        /// <value>A list of technicians.</value>
        [DataMember(Name = "technicians", EmitDefaultValue = false)]
        public List<Technician> Technicians { get; set; }

        /// <summary>
        /// The identifier of the technician who uploaded the POA.
        /// </summary>
        /// <value>The identifier of the technician who uploaded the POA.</value>
        [DataMember(Name = "uploadingTechnician", EmitDefaultValue = false)]
        public string UploadingTechnician { get; set; }

        /// <summary>
        /// The date and time when the POA was uploaded in ISO 8601 format.
        /// </summary>
        /// <value>The date and time when the POA was uploaded in ISO 8601 format.</value>
        [DataMember(Name = "uploadTime", EmitDefaultValue = false)]
        public DateTime UploadTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Poa {\n");
            sb.Append("  AppointmentTime: ").Append(AppointmentTime).Append("\n");
            sb.Append("  Technicians: ").Append(Technicians).Append("\n");
            sb.Append("  UploadingTechnician: ").Append(UploadingTechnician).Append("\n");
            sb.Append("  UploadTime: ").Append(UploadTime).Append("\n");
            sb.Append("  PoaType: ").Append(PoaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.UploadingTechnician != null) {
                // UploadingTechnician (string) pattern
                Regex regexUploadingTechnician = new Regex(@"^[A-Z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexUploadingTechnician.Match(this.UploadingTechnician).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UploadingTechnician, must match a pattern of " + regexUploadingTechnician, new [] { "UploadingTechnician" });
                }
            }

            yield break;
        }
    }

}
