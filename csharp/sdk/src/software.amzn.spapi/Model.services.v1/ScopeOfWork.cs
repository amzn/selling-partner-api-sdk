/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// The scope of work for the order.
    /// </summary>
    [DataContract(Name = "ScopeOfWork")]
    public partial class ScopeOfWork : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScopeOfWork" /> class.
        /// </summary>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the service job..</param>
        /// <param name="title">The title of the service job..</param>
        /// <param name="quantity">The number of service jobs..</param>
        /// <param name="requiredSkills">A list of skills required to perform the job..</param>
        public ScopeOfWork(string asin = default(string), string title = default(string), int quantity = default(int), List<string> requiredSkills = default(List<string>))
        {
            this.Asin = asin;
            this.Title = title;
            this.Quantity = quantity;
            this.RequiredSkills = requiredSkills;
        }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the service job.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the service job.</value>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        /// The title of the service job.
        /// </summary>
        /// <value>The title of the service job.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The number of service jobs.
        /// </summary>
        /// <value>The number of service jobs.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// A list of skills required to perform the job.
        /// </summary>
        /// <value>A list of skills required to perform the job.</value>
        [DataMember(Name = "requiredSkills", EmitDefaultValue = false)]
        public List<string> RequiredSkills { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScopeOfWork {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RequiredSkills: ").Append(RequiredSkills).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
