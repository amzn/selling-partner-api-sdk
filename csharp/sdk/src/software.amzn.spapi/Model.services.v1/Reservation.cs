/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// Reservation object reduces the capacity of a resource.
    /// </summary>
    [DataContract(Name = "Reservation")]
    public partial class Reservation : IValidatableObject
    {
        /// <summary>
        /// Type of reservation.
        /// </summary>
        /// <value>Type of reservation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum APPOINTMENT for value: APPOINTMENT
            /// </summary>
            [EnumMember(Value = "APPOINTMENT")]
            APPOINTMENT = 1,

            /// <summary>
            /// Enum TRAVEL for value: TRAVEL
            /// </summary>
            [EnumMember(Value = "TRAVEL")]
            TRAVEL = 2,

            /// <summary>
            /// Enum VACATION for value: VACATION
            /// </summary>
            [EnumMember(Value = "VACATION")]
            VACATION = 3,

            /// <summary>
            /// Enum BREAK for value: BREAK
            /// </summary>
            [EnumMember(Value = "BREAK")]
            BREAK = 4,

            /// <summary>
            /// Enum TRAINING for value: TRAINING
            /// </summary>
            [EnumMember(Value = "TRAINING")]
            TRAINING = 5
        }


        /// <summary>
        /// Type of reservation.
        /// </summary>
        /// <value>Type of reservation.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Reservation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Reservation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Reservation" /> class.
        /// </summary>
        /// <param name="reservationId">Unique identifier for a reservation. If present, it is treated as an update reservation request and will update the corresponding reservation. Otherwise, it is treated as a new create reservation request..</param>
        /// <param name="type">Type of reservation. (required).</param>
        /// <param name="availability">availability (required).</param>
        public Reservation(string reservationId = default(string), TypeEnum type = default(TypeEnum), AvailabilityRecord availability = default(AvailabilityRecord))
        {
            this.Type = type;
            // to ensure "availability" is required (not null)
            if (availability == null)
            {
                throw new ArgumentNullException("availability is a required property for Reservation and cannot be null");
            }
            this.Availability = availability;
            this.ReservationId = reservationId;
        }

        /// <summary>
        /// Unique identifier for a reservation. If present, it is treated as an update reservation request and will update the corresponding reservation. Otherwise, it is treated as a new create reservation request.
        /// </summary>
        /// <value>Unique identifier for a reservation. If present, it is treated as an update reservation request and will update the corresponding reservation. Otherwise, it is treated as a new create reservation request.</value>
        [DataMember(Name = "reservationId", EmitDefaultValue = false)]
        public string ReservationId { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [DataMember(Name = "availability", IsRequired = true, EmitDefaultValue = true)]
        public AvailabilityRecord Availability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Reservation {\n");
            sb.Append("  ReservationId: ").Append(ReservationId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
