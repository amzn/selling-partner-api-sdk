/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// Information about the buyer.
    /// </summary>
    [DataContract(Name = "Buyer")]
    public partial class Buyer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Buyer" /> class.
        /// </summary>
        /// <param name="buyerId">The identifier of the buyer..</param>
        /// <param name="name">The name of the buyer..</param>
        /// <param name="phone">The phone number of the buyer..</param>
        /// <param name="isPrimeMember">When true, the service is for an Amazon Prime buyer..</param>
        public Buyer(string buyerId = default(string), string name = default(string), string phone = default(string), bool isPrimeMember = default(bool))
        {
            this.BuyerId = buyerId;
            this.Name = name;
            this.Phone = phone;
            this.IsPrimeMember = isPrimeMember;
        }

        /// <summary>
        /// The identifier of the buyer.
        /// </summary>
        /// <value>The identifier of the buyer.</value>
        [DataMember(Name = "buyerId", EmitDefaultValue = false)]
        public string BuyerId { get; set; }

        /// <summary>
        /// The name of the buyer.
        /// </summary>
        /// <value>The name of the buyer.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The phone number of the buyer.
        /// </summary>
        /// <value>The phone number of the buyer.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// When true, the service is for an Amazon Prime buyer.
        /// </summary>
        /// <value>When true, the service is for an Amazon Prime buyer.</value>
        [DataMember(Name = "isPrimeMember", EmitDefaultValue = true)]
        public bool IsPrimeMember { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Buyer {\n");
            sb.Append("  BuyerId: ").Append(BuyerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  IsPrimeMember: ").Append(IsPrimeMember).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.BuyerId != null) {
                // BuyerId (string) pattern
                Regex regexBuyerId = new Regex(@"^[A-Z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexBuyerId.Match(this.BuyerId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BuyerId, must match a pattern of " + regexBuyerId, new [] { "BuyerId" });
                }
            }

            yield break;
        }
    }

}
