/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// Information about the seller of the service job.
    /// </summary>
    [DataContract(Name = "Seller")]
    public partial class Seller : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Seller" /> class.
        /// </summary>
        /// <param name="sellerId">The identifier of the seller of the service job..</param>
        public Seller(string sellerId = default(string))
        {
            this.SellerId = sellerId;
        }

        /// <summary>
        /// The identifier of the seller of the service job.
        /// </summary>
        /// <value>The identifier of the seller of the service job.</value>
        [DataMember(Name = "sellerId", EmitDefaultValue = false)]
        public string SellerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Seller {\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SellerId != null) {
                // SellerId (string) pattern
                Regex regexSellerId = new Regex(@"^[A-Z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexSellerId.Match(this.SellerId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SellerId, must match a pattern of " + regexSellerId, new [] { "SellerId" });
                }
            }

            yield break;
        }
    }

}
