/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// Information about the location of the service job.
    /// </summary>
    [DataContract(Name = "ServiceLocation")]
    public partial class ServiceLocation : IValidatableObject
    {
        /// <summary>
        /// The location of the service job.
        /// </summary>
        /// <value>The location of the service job.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceLocationTypeEnum
        {
            /// <summary>
            /// Enum INHOME for value: IN_HOME
            /// </summary>
            [EnumMember(Value = "IN_HOME")]
            INHOME = 1,

            /// <summary>
            /// Enum INSTORE for value: IN_STORE
            /// </summary>
            [EnumMember(Value = "IN_STORE")]
            INSTORE = 2,

            /// <summary>
            /// Enum ONLINE for value: ONLINE
            /// </summary>
            [EnumMember(Value = "ONLINE")]
            ONLINE = 3
        }


        /// <summary>
        /// The location of the service job.
        /// </summary>
        /// <value>The location of the service job.</value>
        [DataMember(Name = "serviceLocationType", EmitDefaultValue = false)]
        public ServiceLocationTypeEnum? ServiceLocationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceLocation" /> class.
        /// </summary>
        /// <param name="serviceLocationType">The location of the service job..</param>
        /// <param name="address">address.</param>
        public ServiceLocation(ServiceLocationTypeEnum? serviceLocationType = default(ServiceLocationTypeEnum?), Address address = default(Address))
        {
            this.ServiceLocationType = serviceLocationType;
            this.Address = address;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceLocation {\n");
            sb.Append("  ServiceLocationType: ").Append(ServiceLocationType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
