/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// Response schema for the &#x60;addAppointmentForServiceJobByServiceJobId&#x60; and &#x60;rescheduleAppointmentForServiceJobByServiceJobId&#x60; operations.
    /// </summary>
    [DataContract(Name = "SetAppointmentResponse")]
    public partial class SetAppointmentResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetAppointmentResponse" /> class.
        /// </summary>
        /// <param name="appointmentId">The appointment identifier..</param>
        /// <param name="warnings">A list of warnings returned in the sucessful execution response of an API request..</param>
        /// <param name="errors">A list of error responses returned when a request is unsuccessful..</param>
        public SetAppointmentResponse(string appointmentId = default(string), List<Warning> warnings = default(List<Warning>), List<Error> errors = default(List<Error>))
        {
            this.AppointmentId = appointmentId;
            this.Warnings = warnings;
            this.Errors = errors;
        }

        /// <summary>
        /// The appointment identifier.
        /// </summary>
        /// <value>The appointment identifier.</value>
        [DataMember(Name = "appointmentId", EmitDefaultValue = false)]
        public string AppointmentId { get; set; }

        /// <summary>
        /// A list of warnings returned in the sucessful execution response of an API request.
        /// </summary>
        /// <value>A list of warnings returned in the sucessful execution response of an API request.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<Warning> Warnings { get; set; }

        /// <summary>
        /// A list of error responses returned when a request is unsuccessful.
        /// </summary>
        /// <value>A list of error responses returned when a request is unsuccessful.</value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<Error> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetAppointmentResponse {\n");
            sb.Append("  AppointmentId: ").Append(AppointmentId).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AppointmentId (string) maxLength
            if (this.AppointmentId != null && this.AppointmentId.Length > 100)
            {
                yield return new ValidationResult("Invalid value for AppointmentId, length must be less than 100.", new [] { "AppointmentId" });
            }

            // AppointmentId (string) minLength
            if (this.AppointmentId != null && this.AppointmentId.Length < 5)
            {
                yield return new ValidationResult("Invalid value for AppointmentId, length must be greater than 5.", new [] { "AppointmentId" });
            }

            yield break;
        }
    }

}
