/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.services.v1
{
    /// <summary>
    /// Repeated occurrence of an event in a time range.
    /// </summary>
    [DataContract(Name = "Recurrence")]
    public partial class Recurrence : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Recurrence" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Recurrence() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Recurrence" /> class.
        /// </summary>
        /// <param name="endTime">End time of the recurrence. (required).</param>
        /// <param name="daysOfWeek">Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain &#x60;MONDAY&#x60; in the list..</param>
        /// <param name="daysOfMonth">Days of the month when recurrence is valid..</param>
        public Recurrence(DateTime endTime = default(DateTime), List<DayOfWeek> daysOfWeek = default(List<DayOfWeek>), List<int> daysOfMonth = default(List<int>))
        {
            this.EndTime = endTime;
            this.DaysOfWeek = daysOfWeek;
            this.DaysOfMonth = daysOfMonth;
        }

        /// <summary>
        /// End time of the recurrence.
        /// </summary>
        /// <value>End time of the recurrence.</value>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain &#x60;MONDAY&#x60; in the list.
        /// </summary>
        /// <value>Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain &#x60;MONDAY&#x60; in the list.</value>
        [DataMember(Name = "daysOfWeek", EmitDefaultValue = false)]
        public List<DayOfWeek> DaysOfWeek { get; set; }

        /// <summary>
        /// Days of the month when recurrence is valid.
        /// </summary>
        /// <value>Days of the month when recurrence is valid.</value>
        [DataMember(Name = "daysOfMonth", EmitDefaultValue = false)]
        public List<int> DaysOfMonth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Recurrence {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  DaysOfWeek: ").Append(DaysOfWeek).Append("\n");
            sb.Append("  DaysOfMonth: ").Append(DaysOfMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
