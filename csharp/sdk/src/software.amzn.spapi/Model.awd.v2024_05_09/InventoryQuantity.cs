/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.awd.v2024_05_09
{
    /// <summary>
    /// Quantity of inventory with an associated measurement unit context.
    /// </summary>
    [DataContract(Name = "InventoryQuantity")]
    public partial class InventoryQuantity : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets UnitOfMeasurement
        /// </summary>
        [DataMember(Name = "unitOfMeasurement", IsRequired = true, EmitDefaultValue = true)]
        public InventoryUnitOfMeasurement UnitOfMeasurement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryQuantity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InventoryQuantity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryQuantity" /> class.
        /// </summary>
        /// <param name="quantity">Quantity of the respective inventory. (required).</param>
        /// <param name="unitOfMeasurement">unitOfMeasurement (required).</param>
        public InventoryQuantity(decimal quantity = default(decimal), InventoryUnitOfMeasurement unitOfMeasurement = default(InventoryUnitOfMeasurement))
        {
            this.Quantity = quantity;
            this.UnitOfMeasurement = unitOfMeasurement;
        }

        /// <summary>
        /// Quantity of the respective inventory.
        /// </summary>
        /// <value>Quantity of the respective inventory.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryQuantity {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitOfMeasurement: ").Append(UnitOfMeasurement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
