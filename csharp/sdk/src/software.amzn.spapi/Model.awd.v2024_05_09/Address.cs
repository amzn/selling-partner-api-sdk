/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.awd.v2024_05_09
{
    /// <summary>
    /// Shipping address that represents the origin or destination location.
    /// </summary>
    [DataContract(Name = "Address")]
    public partial class Address : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="addressLine1">First line of the address text. (required).</param>
        /// <param name="addressLine2">Optional second line of the address text..</param>
        /// <param name="addressLine3">Optional third line of the address text..</param>
        /// <param name="city">Optional city where this address is located..</param>
        /// <param name="countryCode">Two-digit, ISO 3166-1 alpha-2 formatted country code where this address is located. (required).</param>
        /// <param name="county">Optional county where this address is located..</param>
        /// <param name="district">Optional district where this address is located..</param>
        /// <param name="name">Name of the person, business, or institution at this address. (required).</param>
        /// <param name="phoneNumber">Optional E.164-formatted phone number for an available contact at this address..</param>
        /// <param name="postalCode">Optional postal code where this address is located..</param>
        /// <param name="stateOrRegion">State or region where this address is located. Note that this is contextual to the specified country code. (required).</param>
        public Address(string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string city = default(string), string countryCode = default(string), string county = default(string), string district = default(string), string name = default(string), string phoneNumber = default(string), string postalCode = default(string), string stateOrRegion = default(string))
        {
            // to ensure "addressLine1" is required (not null)
            if (addressLine1 == null)
            {
                throw new ArgumentNullException("addressLine1 is a required property for Address and cannot be null");
            }
            this.AddressLine1 = addressLine1;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for Address and cannot be null");
            }
            this.CountryCode = countryCode;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Address and cannot be null");
            }
            this.Name = name;
            // to ensure "stateOrRegion" is required (not null)
            if (stateOrRegion == null)
            {
                throw new ArgumentNullException("stateOrRegion is a required property for Address and cannot be null");
            }
            this.StateOrRegion = stateOrRegion;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.City = city;
            this.County = county;
            this.District = district;
            this.PhoneNumber = phoneNumber;
            this.PostalCode = postalCode;
        }

        /// <summary>
        /// First line of the address text.
        /// </summary>
        /// <value>First line of the address text.</value>
        [DataMember(Name = "addressLine1", IsRequired = true, EmitDefaultValue = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Optional second line of the address text.
        /// </summary>
        /// <value>Optional second line of the address text.</value>
        [DataMember(Name = "addressLine2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Optional third line of the address text.
        /// </summary>
        /// <value>Optional third line of the address text.</value>
        [DataMember(Name = "addressLine3", EmitDefaultValue = false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// Optional city where this address is located.
        /// </summary>
        /// <value>Optional city where this address is located.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Two-digit, ISO 3166-1 alpha-2 formatted country code where this address is located.
        /// </summary>
        /// <value>Two-digit, ISO 3166-1 alpha-2 formatted country code where this address is located.</value>
        [DataMember(Name = "countryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Optional county where this address is located.
        /// </summary>
        /// <value>Optional county where this address is located.</value>
        /*
        <example>Washington</example>
        */
        [DataMember(Name = "county", EmitDefaultValue = false)]
        public string County { get; set; }

        /// <summary>
        /// Optional district where this address is located.
        /// </summary>
        /// <value>Optional district where this address is located.</value>
        [DataMember(Name = "district", EmitDefaultValue = false)]
        public string District { get; set; }

        /// <summary>
        /// Name of the person, business, or institution at this address.
        /// </summary>
        /// <value>Name of the person, business, or institution at this address.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Optional E.164-formatted phone number for an available contact at this address.
        /// </summary>
        /// <value>Optional E.164-formatted phone number for an available contact at this address.</value>
        /*
        <example>+14155552671</example>
        */
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Optional postal code where this address is located.
        /// </summary>
        /// <value>Optional postal code where this address is located.</value>
        [DataMember(Name = "postalCode", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// State or region where this address is located. Note that this is contextual to the specified country code.
        /// </summary>
        /// <value>State or region where this address is located. Note that this is contextual to the specified country code.</value>
        [DataMember(Name = "stateOrRegion", IsRequired = true, EmitDefaultValue = true)]
        public string StateOrRegion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  StateOrRegion: ").Append(StateOrRegion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
