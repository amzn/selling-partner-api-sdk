/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.awd.v2024_05_09
{
    /// <summary>
    /// Represents an AWD inbound order.
    /// </summary>
    [DataContract(Name = "InboundOrder")]
    public partial class InboundOrder : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OrderStatus
        /// </summary>
        [DataMember(Name = "orderStatus", IsRequired = true, EmitDefaultValue = true)]
        public InboundStatus OrderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InboundOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundOrder" /> class.
        /// </summary>
        /// <param name="createdAt">Date when this order was created. (required).</param>
        /// <param name="destinationDetails">destinationDetails.</param>
        /// <param name="externalReferenceId">Reference ID that can be used to correlate the order with partner resources..</param>
        /// <param name="orderId">Inbound order ID. (required).</param>
        /// <param name="orderStatus">orderStatus (required).</param>
        /// <param name="originAddress">originAddress (required).</param>
        /// <param name="packagesToInbound">List of packages to be inbounded. (required).</param>
        /// <param name="preferences">preferences.</param>
        /// <param name="updatedAt">Date when this order was last updated..</param>
        public InboundOrder(DateTime createdAt = default(DateTime), DestinationDetails destinationDetails = default(DestinationDetails), string externalReferenceId = default(string), string orderId = default(string), InboundStatus orderStatus = default(InboundStatus), Address originAddress = default(Address), List<DistributionPackageQuantity> packagesToInbound = default(List<DistributionPackageQuantity>), InboundPreferences preferences = default(InboundPreferences), DateTime updatedAt = default(DateTime))
        {
            this.CreatedAt = createdAt;
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for InboundOrder and cannot be null");
            }
            this.OrderId = orderId;
            this.OrderStatus = orderStatus;
            // to ensure "originAddress" is required (not null)
            if (originAddress == null)
            {
                throw new ArgumentNullException("originAddress is a required property for InboundOrder and cannot be null");
            }
            this.OriginAddress = originAddress;
            // to ensure "packagesToInbound" is required (not null)
            if (packagesToInbound == null)
            {
                throw new ArgumentNullException("packagesToInbound is a required property for InboundOrder and cannot be null");
            }
            this.PackagesToInbound = packagesToInbound;
            this.DestinationDetails = destinationDetails;
            this.ExternalReferenceId = externalReferenceId;
            this.Preferences = preferences;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Date when this order was created.
        /// </summary>
        /// <value>Date when this order was created.</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DestinationDetails
        /// </summary>
        [DataMember(Name = "destinationDetails", EmitDefaultValue = false)]
        public DestinationDetails DestinationDetails { get; set; }

        /// <summary>
        /// Reference ID that can be used to correlate the order with partner resources.
        /// </summary>
        /// <value>Reference ID that can be used to correlate the order with partner resources.</value>
        /*
        <example>TestReferenceId</example>
        */
        [DataMember(Name = "externalReferenceId", EmitDefaultValue = false)]
        public string ExternalReferenceId { get; set; }

        /// <summary>
        /// Inbound order ID.
        /// </summary>
        /// <value>Inbound order ID.</value>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets OriginAddress
        /// </summary>
        [DataMember(Name = "originAddress", IsRequired = true, EmitDefaultValue = true)]
        public Address OriginAddress { get; set; }

        /// <summary>
        /// List of packages to be inbounded.
        /// </summary>
        /// <value>List of packages to be inbounded.</value>
        [DataMember(Name = "packagesToInbound", IsRequired = true, EmitDefaultValue = true)]
        public List<DistributionPackageQuantity> PackagesToInbound { get; set; }

        /// <summary>
        /// Gets or Sets Preferences
        /// </summary>
        [DataMember(Name = "preferences", EmitDefaultValue = false)]
        public InboundPreferences Preferences { get; set; }

        /// <summary>
        /// Date when this order was last updated.
        /// </summary>
        /// <value>Date when this order was last updated.</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboundOrder {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DestinationDetails: ").Append(DestinationDetails).Append("\n");
            sb.Append("  ExternalReferenceId: ").Append(ExternalReferenceId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  OriginAddress: ").Append(OriginAddress).Append("\n");
            sb.Append("  PackagesToInbound: ").Append(PackagesToInbound).Append("\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
