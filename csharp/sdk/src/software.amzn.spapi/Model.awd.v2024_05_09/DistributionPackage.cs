/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.awd.v2024_05_09
{
    /// <summary>
    /// Represents an AWD distribution package.
    /// </summary>
    [DataContract(Name = "DistributionPackage")]
    public partial class DistributionPackage : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public DistributionPackageType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DistributionPackage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DistributionPackage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DistributionPackage" /> class.
        /// </summary>
        /// <param name="contents">contents (required).</param>
        /// <param name="measurements">measurements (required).</param>
        /// <param name="type">type (required).</param>
        public DistributionPackage(DistributionPackageContents contents = default(DistributionPackageContents), MeasurementData measurements = default(MeasurementData), DistributionPackageType type = default(DistributionPackageType))
        {
            // to ensure "contents" is required (not null)
            if (contents == null)
            {
                throw new ArgumentNullException("contents is a required property for DistributionPackage and cannot be null");
            }
            this.Contents = contents;
            // to ensure "measurements" is required (not null)
            if (measurements == null)
            {
                throw new ArgumentNullException("measurements is a required property for DistributionPackage and cannot be null");
            }
            this.Measurements = measurements;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [DataMember(Name = "contents", IsRequired = true, EmitDefaultValue = true)]
        public DistributionPackageContents Contents { get; set; }

        /// <summary>
        /// Gets or Sets Measurements
        /// </summary>
        [DataMember(Name = "measurements", IsRequired = true, EmitDefaultValue = true)]
        public MeasurementData Measurements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DistributionPackage {\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Measurements: ").Append(Measurements).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
