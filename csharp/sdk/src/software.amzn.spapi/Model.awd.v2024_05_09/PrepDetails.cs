/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.awd.v2024_05_09
{
    /// <summary>
    /// The preparation details for a product. This contains the prep category, prep owner, and label owner. Prep instructions are generated based on the specified category.
    /// </summary>
    [DataContract(Name = "PrepDetails")]
    public partial class PrepDetails : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LabelOwner
        /// </summary>
        [DataMember(Name = "labelOwner", EmitDefaultValue = false)]
        public LabelOwner? LabelOwner { get; set; }

        /// <summary>
        /// Gets or Sets PrepCategory
        /// </summary>
        [DataMember(Name = "prepCategory", EmitDefaultValue = false)]
        public PrepCategory? PrepCategory { get; set; }

        /// <summary>
        /// Gets or Sets PrepOwner
        /// </summary>
        [DataMember(Name = "prepOwner", EmitDefaultValue = false)]
        public PrepOwner? PrepOwner { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepDetails" /> class.
        /// </summary>
        /// <param name="labelOwner">labelOwner.</param>
        /// <param name="prepCategory">prepCategory.</param>
        /// <param name="prepInstructions">Contains information about the preparation of the inbound products. The system auto-generates this field with the use of the &#x60;prepCategory&#x60;, and if you attempt to pass a value for this field, the system will ignore it..</param>
        /// <param name="prepOwner">prepOwner.</param>
        public PrepDetails(LabelOwner? labelOwner = default(LabelOwner?), PrepCategory? prepCategory = default(PrepCategory?), List<PrepInstruction> prepInstructions = default(List<PrepInstruction>), PrepOwner? prepOwner = default(PrepOwner?))
        {
            this.LabelOwner = labelOwner;
            this.PrepCategory = prepCategory;
            this.PrepInstructions = prepInstructions;
            this.PrepOwner = prepOwner;
        }

        /// <summary>
        /// Contains information about the preparation of the inbound products. The system auto-generates this field with the use of the &#x60;prepCategory&#x60;, and if you attempt to pass a value for this field, the system will ignore it.
        /// </summary>
        /// <value>Contains information about the preparation of the inbound products. The system auto-generates this field with the use of the &#x60;prepCategory&#x60;, and if you attempt to pass a value for this field, the system will ignore it.</value>
        [DataMember(Name = "prepInstructions", EmitDefaultValue = false)]
        public List<PrepInstruction> PrepInstructions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepDetails {\n");
            sb.Append("  LabelOwner: ").Append(LabelOwner).Append("\n");
            sb.Append("  PrepCategory: ").Append(PrepCategory).Append("\n");
            sb.Append("  PrepInstructions: ").Append(PrepInstructions).Append("\n");
            sb.Append("  PrepOwner: ").Append(PrepOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
