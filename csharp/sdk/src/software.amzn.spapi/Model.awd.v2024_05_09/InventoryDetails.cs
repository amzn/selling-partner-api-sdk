/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.awd.v2024_05_09
{
    /// <summary>
    /// Additional inventory details. This object is only displayed if the details parameter in the request is set to &#x60;SHOW&#x60;.
    /// </summary>
    [DataContract(Name = "InventoryDetails")]
    public partial class InventoryDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryDetails" /> class.
        /// </summary>
        /// <param name="availableDistributableQuantity">Quantity that is available for downstream channel replenishment..</param>
        /// <param name="replenishmentQuantity">Quantity that is in transit from AWD and has not yet been received at FBA..</param>
        /// <param name="reservedDistributableQuantity">Quantity that is reserved for a downstream channel replenishment order that is being prepared for shipment..</param>
        public InventoryDetails(long availableDistributableQuantity = default(long), long replenishmentQuantity = default(long), long reservedDistributableQuantity = default(long))
        {
            this.AvailableDistributableQuantity = availableDistributableQuantity;
            this.ReplenishmentQuantity = replenishmentQuantity;
            this.ReservedDistributableQuantity = reservedDistributableQuantity;
        }

        /// <summary>
        /// Quantity that is available for downstream channel replenishment.
        /// </summary>
        /// <value>Quantity that is available for downstream channel replenishment.</value>
        [DataMember(Name = "availableDistributableQuantity", EmitDefaultValue = false)]
        public long AvailableDistributableQuantity { get; set; }

        /// <summary>
        /// Quantity that is in transit from AWD and has not yet been received at FBA.
        /// </summary>
        /// <value>Quantity that is in transit from AWD and has not yet been received at FBA.</value>
        [DataMember(Name = "replenishmentQuantity", EmitDefaultValue = false)]
        public long ReplenishmentQuantity { get; set; }

        /// <summary>
        /// Quantity that is reserved for a downstream channel replenishment order that is being prepared for shipment.
        /// </summary>
        /// <value>Quantity that is reserved for a downstream channel replenishment order that is being prepared for shipment.</value>
        [DataMember(Name = "reservedDistributableQuantity", EmitDefaultValue = false)]
        public long ReservedDistributableQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryDetails {\n");
            sb.Append("  AvailableDistributableQuantity: ").Append(AvailableDistributableQuantity).Append("\n");
            sb.Append("  ReplenishmentQuantity: ").Append(ReplenishmentQuantity).Append("\n");
            sb.Append("  ReservedDistributableQuantity: ").Append(ReservedDistributableQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
