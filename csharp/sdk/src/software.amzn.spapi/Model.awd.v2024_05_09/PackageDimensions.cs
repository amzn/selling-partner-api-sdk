/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.awd.v2024_05_09
{
    /// <summary>
    /// Dimensions of the package.
    /// </summary>
    [DataContract(Name = "PackageDimensions")]
    public partial class PackageDimensions : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets UnitOfMeasurement
        /// </summary>
        [DataMember(Name = "unitOfMeasurement", IsRequired = true, EmitDefaultValue = true)]
        public DimensionUnitOfMeasurement UnitOfMeasurement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageDimensions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PackageDimensions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageDimensions" /> class.
        /// </summary>
        /// <param name="height">Height of the package. (required).</param>
        /// <param name="length">Length of the package. (required).</param>
        /// <param name="unitOfMeasurement">unitOfMeasurement (required).</param>
        /// <param name="width">Width of the package. (required).</param>
        public PackageDimensions(double height = default(double), double length = default(double), DimensionUnitOfMeasurement unitOfMeasurement = default(DimensionUnitOfMeasurement), double width = default(double))
        {
            this.Height = height;
            this.Length = length;
            this.UnitOfMeasurement = unitOfMeasurement;
            this.Width = width;
        }

        /// <summary>
        /// Height of the package.
        /// </summary>
        /// <value>Height of the package.</value>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public double Height { get; set; }

        /// <summary>
        /// Length of the package.
        /// </summary>
        /// <value>Length of the package.</value>
        [DataMember(Name = "length", IsRequired = true, EmitDefaultValue = true)]
        public double Length { get; set; }

        /// <summary>
        /// Width of the package.
        /// </summary>
        /// <value>Width of the package.</value>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public double Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageDimensions {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  UnitOfMeasurement: ").Append(UnitOfMeasurement).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
