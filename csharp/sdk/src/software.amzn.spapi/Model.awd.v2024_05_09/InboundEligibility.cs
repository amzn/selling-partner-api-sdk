/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.awd.v2024_05_09
{
    /// <summary>
    /// Represents the eligibility status of the inbound packages.
    /// </summary>
    [DataContract(Name = "InboundEligibility")]
    public partial class InboundEligibility : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public InboundEligibilityStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundEligibility" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InboundEligibility() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundEligibility" /> class.
        /// </summary>
        /// <param name="ineligibilityReasons">If there are order level eligibility issues, then this list will contain those error codes and descriptions..</param>
        /// <param name="packagesToInbound">Details on SKU eligibility for each inbound package. (required).</param>
        /// <param name="previewedAt">Timestamp when the eligibility check is performed. (required).</param>
        /// <param name="status">status (required).</param>
        public InboundEligibility(List<OrderIneligibilityReason> ineligibilityReasons = default(List<OrderIneligibilityReason>), List<SkuEligibility> packagesToInbound = default(List<SkuEligibility>), DateTime previewedAt = default(DateTime), InboundEligibilityStatus status = default(InboundEligibilityStatus))
        {
            // to ensure "packagesToInbound" is required (not null)
            if (packagesToInbound == null)
            {
                throw new ArgumentNullException("packagesToInbound is a required property for InboundEligibility and cannot be null");
            }
            this.PackagesToInbound = packagesToInbound;
            this.PreviewedAt = previewedAt;
            this.Status = status;
            this.IneligibilityReasons = ineligibilityReasons;
        }

        /// <summary>
        /// If there are order level eligibility issues, then this list will contain those error codes and descriptions.
        /// </summary>
        /// <value>If there are order level eligibility issues, then this list will contain those error codes and descriptions.</value>
        [DataMember(Name = "ineligibilityReasons", EmitDefaultValue = false)]
        public List<OrderIneligibilityReason> IneligibilityReasons { get; set; }

        /// <summary>
        /// Details on SKU eligibility for each inbound package.
        /// </summary>
        /// <value>Details on SKU eligibility for each inbound package.</value>
        [DataMember(Name = "packagesToInbound", IsRequired = true, EmitDefaultValue = true)]
        public List<SkuEligibility> PackagesToInbound { get; set; }

        /// <summary>
        /// Timestamp when the eligibility check is performed.
        /// </summary>
        /// <value>Timestamp when the eligibility check is performed.</value>
        [DataMember(Name = "previewedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime PreviewedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboundEligibility {\n");
            sb.Append("  IneligibilityReasons: ").Append(IneligibilityReasons).Append("\n");
            sb.Append("  PackagesToInbound: ").Append(PackagesToInbound).Append("\n");
            sb.Append("  PreviewedAt: ").Append(PreviewedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
