/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.awd.v2024_05_09
{
    /// <summary>
    /// Quantity details for a SKU as part of a shipment
    /// </summary>
    [DataContract(Name = "SkuQuantity")]
    public partial class SkuQuantity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SkuQuantity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SkuQuantity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SkuQuantity" /> class.
        /// </summary>
        /// <param name="expectedQuantity">expectedQuantity (required).</param>
        /// <param name="receivedQuantity">receivedQuantity.</param>
        /// <param name="sku">The merchant stock keeping unit (required).</param>
        public SkuQuantity(InventoryQuantity expectedQuantity = default(InventoryQuantity), InventoryQuantity receivedQuantity = default(InventoryQuantity), string sku = default(string))
        {
            // to ensure "expectedQuantity" is required (not null)
            if (expectedQuantity == null)
            {
                throw new ArgumentNullException("expectedQuantity is a required property for SkuQuantity and cannot be null");
            }
            this.ExpectedQuantity = expectedQuantity;
            // to ensure "sku" is required (not null)
            if (sku == null)
            {
                throw new ArgumentNullException("sku is a required property for SkuQuantity and cannot be null");
            }
            this.Sku = sku;
            this.ReceivedQuantity = receivedQuantity;
        }

        /// <summary>
        /// Gets or Sets ExpectedQuantity
        /// </summary>
        [DataMember(Name = "expectedQuantity", IsRequired = true, EmitDefaultValue = true)]
        public InventoryQuantity ExpectedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedQuantity
        /// </summary>
        [DataMember(Name = "receivedQuantity", EmitDefaultValue = false)]
        public InventoryQuantity ReceivedQuantity { get; set; }

        /// <summary>
        /// The merchant stock keeping unit
        /// </summary>
        /// <value>The merchant stock keeping unit</value>
        [DataMember(Name = "sku", IsRequired = true, EmitDefaultValue = true)]
        public string Sku { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SkuQuantity {\n");
            sb.Append("  ExpectedQuantity: ").Append(ExpectedQuantity).Append("\n");
            sb.Append("  ReceivedQuantity: ").Append(ReceivedQuantity).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
