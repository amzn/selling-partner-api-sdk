/*
 * Selling Partner API for Solicitations
 *
 * With the Solicitations API you can build applications that send non-critical solicitations to buyers. You can get a list of solicitation types that are available for an order that you specify, then call an operation that sends a solicitation to the buyer for that order. Buyers cannot respond to solicitations sent by this API, and these solicitations do not appear in the Messaging section of Seller Central or in the recipient's Message Center. The Solicitations API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.solicitations.v1
{
    /// <summary>
    /// GetSolicitationActionsForOrderResponseLinks
    /// </summary>
    [DataContract(Name = "GetSolicitationActionsForOrderResponse__links")]
    public partial class GetSolicitationActionsForOrderResponseLinks : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSolicitationActionsForOrderResponseLinks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSolicitationActionsForOrderResponseLinks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSolicitationActionsForOrderResponseLinks" /> class.
        /// </summary>
        /// <param name="self">self (required).</param>
        /// <param name="actions">Eligible actions for the specified amazonOrderId. (required).</param>
        public GetSolicitationActionsForOrderResponseLinks(LinkObject self = default(LinkObject), List<LinkObject> actions = default(List<LinkObject>))
        {
            // to ensure "self" is required (not null)
            if (self == null)
            {
                throw new ArgumentNullException("self is a required property for GetSolicitationActionsForOrderResponseLinks and cannot be null");
            }
            this.Self = self;
            // to ensure "actions" is required (not null)
            if (actions == null)
            {
                throw new ArgumentNullException("actions is a required property for GetSolicitationActionsForOrderResponseLinks and cannot be null");
            }
            this.Actions = actions;
        }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name = "self", IsRequired = true, EmitDefaultValue = true)]
        public LinkObject Self { get; set; }

        /// <summary>
        /// Eligible actions for the specified amazonOrderId.
        /// </summary>
        /// <value>Eligible actions for the specified amazonOrderId.</value>
        [DataMember(Name = "actions", IsRequired = true, EmitDefaultValue = true)]
        public List<LinkObject> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSolicitationActionsForOrderResponseLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
