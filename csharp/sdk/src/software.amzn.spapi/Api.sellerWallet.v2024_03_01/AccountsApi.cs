/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using software.amzn.spapi.Client;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Model.sellerWallet.v2024_03_01;

namespace software.amzn.spapi.Api.sellerWallet.v2024_03_01
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find particular Amazon SW account by Amazon account identifier
        /// </summary>
        /// <remarks>
        /// Retrieve a Seller Wallet bank account by Amazon account identifier.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>BankAccount</returns>
        BankAccount GetAccount (string accountId, string marketplaceId);

        /// <summary>
        /// Find particular Amazon SW account by Amazon account identifier
        /// </summary>
        /// <remarks>
        /// Retrieve a Seller Wallet bank account by Amazon account identifier.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>ApiResponse of BankAccount</returns>
        ApiResponse<BankAccount> GetAccountWithHttpInfo (string accountId, string marketplaceId);
        /// <summary>
        /// Find balance in particular Amazon SW account by Amazon account identifier
        /// </summary>
        /// <remarks>
        /// Retrieve the balance in a given Seller Wallet bank account.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>BalanceListing</returns>
        BalanceListing ListAccountBalances (string accountId, string marketplaceId);

        /// <summary>
        /// Find balance in particular Amazon SW account by Amazon account identifier
        /// </summary>
        /// <remarks>
        /// Retrieve the balance in a given Seller Wallet bank account.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>ApiResponse of BalanceListing</returns>
        ApiResponse<BalanceListing> ListAccountBalancesWithHttpInfo (string accountId, string marketplaceId);
        /// <summary>
        /// Get all Amazon SW accounts for the seller
        /// </summary>
        /// <remarks>
        /// Get Seller Wallet accounts for a seller.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <returns>BankAccountListing</returns>
        BankAccountListing ListAccounts (string marketplaceId);

        /// <summary>
        /// Get all Amazon SW accounts for the seller
        /// </summary>
        /// <remarks>
        /// Get Seller Wallet accounts for a seller.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <returns>ApiResponse of BankAccountListing</returns>
        ApiResponse<BankAccountListing> ListAccountsWithHttpInfo (string marketplaceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Find particular Amazon SW account by Amazon account identifier
        /// </summary>
        /// <remarks>
        /// Retrieve a Seller Wallet bank account by Amazon account identifier.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of BankAccount</returns>
        System.Threading.Tasks.Task<BankAccount> GetAccountAsync (string accountId, string marketplaceId);

        /// <summary>
        /// Find particular Amazon SW account by Amazon account identifier
        /// </summary>
        /// <remarks>
        /// Retrieve a Seller Wallet bank account by Amazon account identifier.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccount>> GetAccountAsyncWithHttpInfo (string accountId, string marketplaceId);
        /// <summary>
        /// Find balance in particular Amazon SW account by Amazon account identifier
        /// </summary>
        /// <remarks>
        /// Retrieve the balance in a given Seller Wallet bank account.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of BalanceListing</returns>
        System.Threading.Tasks.Task<BalanceListing> ListAccountBalancesAsync (string accountId, string marketplaceId);

        /// <summary>
        /// Find balance in particular Amazon SW account by Amazon account identifier
        /// </summary>
        /// <remarks>
        /// Retrieve the balance in a given Seller Wallet bank account.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of ApiResponse (BalanceListing)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceListing>> ListAccountBalancesAsyncWithHttpInfo (string accountId, string marketplaceId);
        /// <summary>
        /// Get all Amazon SW accounts for the seller
        /// </summary>
        /// <remarks>
        /// Get Seller Wallet accounts for a seller.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <returns>Task of BankAccountListing</returns>
        System.Threading.Tasks.Task<BankAccountListing> ListAccountsAsync (string marketplaceId);

        /// <summary>
        /// Get all Amazon SW accounts for the seller
        /// </summary>
        /// <remarks>
        /// Get Seller Wallet accounts for a seller.
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <returns>Task of ApiResponse (BankAccountListing)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccountListing>> ListAccountsAsyncWithHttpInfo (string marketplaceId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IAccountsApi
    {
        private software.amzn.spapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(software.amzn.spapi.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = software.amzn.spapi.Client.Configuration.DefaultExceptionFactory;
        }

        IReadableConfiguration IApiAccessor.Configuration 
        {
            get => Configuration;  // Implicit upcast to interface
            set => Configuration = (software.amzn.spapi.Client.Configuration)value;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public software.amzn.spapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public software.amzn.spapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Find particular Amazon SW account by Amazon account identifier Retrieve a Seller Wallet bank account by Amazon account identifier.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>BankAccount</returns>
        public BankAccount GetAccount (string accountId, string marketplaceId)
        {
             ApiResponse<BankAccount> localVarResponse = GetAccountWithHttpInfo(accountId, marketplaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find particular Amazon SW account by Amazon account identifier Retrieve a Seller Wallet bank account by Amazon account identifier.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>ApiResponse of BankAccount</returns>
        public ApiResponse< BankAccount > GetAccountWithHttpInfo (string accountId, string marketplaceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->GetAccount");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AccountsApi->GetAccount");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/accounts/{accountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccount>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (BankAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccount)));
        }

        /// <summary>
        /// Find particular Amazon SW account by Amazon account identifier Retrieve a Seller Wallet bank account by Amazon account identifier.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of BankAccount</returns>
        public async System.Threading.Tasks.Task<BankAccount> GetAccountAsync (string accountId, string marketplaceId)
        {
             ApiResponse<BankAccount> localVarResponse = await GetAccountAsyncWithHttpInfo(accountId, marketplaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find particular Amazon SW account by Amazon account identifier Retrieve a Seller Wallet bank account by Amazon account identifier.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankAccount>> GetAccountAsyncWithHttpInfo (string accountId, string marketplaceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->GetAccount");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AccountsApi->GetAccount");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/accounts/{accountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccount>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (BankAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccount)));
        }

        /// <summary>
        /// Find balance in particular Amazon SW account by Amazon account identifier Retrieve the balance in a given Seller Wallet bank account.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>BalanceListing</returns>
        public BalanceListing ListAccountBalances (string accountId, string marketplaceId)
        {
             ApiResponse<BalanceListing> localVarResponse = ListAccountBalancesWithHttpInfo(accountId, marketplaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find balance in particular Amazon SW account by Amazon account identifier Retrieve the balance in a given Seller Wallet bank account.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>ApiResponse of BalanceListing</returns>
        public ApiResponse< BalanceListing > ListAccountBalancesWithHttpInfo (string accountId, string marketplaceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->ListAccountBalances");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AccountsApi->ListAccountBalances");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/accounts/{accountId}/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountBalances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceListing>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (BalanceListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceListing)));
        }

        /// <summary>
        /// Find balance in particular Amazon SW account by Amazon account identifier Retrieve the balance in a given Seller Wallet bank account.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of BalanceListing</returns>
        public async System.Threading.Tasks.Task<BalanceListing> ListAccountBalancesAsync (string accountId, string marketplaceId)
        {
             ApiResponse<BalanceListing> localVarResponse = await ListAccountBalancesAsyncWithHttpInfo(accountId, marketplaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find balance in particular Amazon SW account by Amazon account identifier Retrieve the balance in a given Seller Wallet bank account.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">ID of the Amazon SW account</param>
        /// <param name="marketplaceId">The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</param>
        /// <returns>Task of ApiResponse (BalanceListing)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BalanceListing>> ListAccountBalancesAsyncWithHttpInfo (string accountId, string marketplaceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->ListAccountBalances");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AccountsApi->ListAccountBalances");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/accounts/{accountId}/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountBalances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceListing>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (BalanceListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceListing)));
        }

        /// <summary>
        /// Get all Amazon SW accounts for the seller Get Seller Wallet accounts for a seller.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <returns>BankAccountListing</returns>
        public BankAccountListing ListAccounts (string marketplaceId)
        {
             ApiResponse<BankAccountListing> localVarResponse = ListAccountsWithHttpInfo(marketplaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Amazon SW accounts for the seller Get Seller Wallet accounts for a seller.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <returns>ApiResponse of BankAccountListing</returns>
        public ApiResponse< BankAccountListing > ListAccountsWithHttpInfo (string marketplaceId)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AccountsApi->ListAccounts");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccountListing>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (BankAccountListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccountListing)));
        }

        /// <summary>
        /// Get all Amazon SW accounts for the seller Get Seller Wallet accounts for a seller.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <returns>Task of BankAccountListing</returns>
        public async System.Threading.Tasks.Task<BankAccountListing> ListAccountsAsync (string marketplaceId)
        {
             ApiResponse<BankAccountListing> localVarResponse = await ListAccountsAsyncWithHttpInfo(marketplaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Amazon SW accounts for the seller Get Seller Wallet accounts for a seller.
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which items are returned.</param>
        /// <returns>Task of ApiResponse (BankAccountListing)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankAccountListing>> ListAccountsAsyncWithHttpInfo (string marketplaceId)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling AccountsApi->ListAccounts");

            var localVarPath = "/finances/transfers/wallet/2024-03-01/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "marketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccountListing>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (BankAccountListing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccountListing)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public AccountsApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                software.amzn.spapi.Client.Configuration configuration = new software.amzn.spapi.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.initializeApiClient();
                configuration.Timeout = 100000;

                return new AccountsApi(configuration);
            }
        }
        
        private static Multimap<string, string> ConvertHeadersToMultimap(RestResponse response)
        {
            var multimap = new Multimap<string, string>();
            foreach (var header in response.Headers)
            {
                multimap.Add(header.Name, header.Value?.ToString());
            }
            return multimap;
        }


        private static RestSharp.Method ChangeHttpMethod(String httpMethod) {
            switch(httpMethod) {
                case "GET":
                    // GET logic
                    return Method.Get;
                case "POST":
                    // POST logic
                    return Method.Post;
                case "DELETE":
                    return Method.Delete;
                case "PUT":
                    return Method.Put;
                case "PATCH":
                    return Method.Patch;
                case "OPTIONS":
                    return Method.Options;
            }
            return Method.Head;
        }

    }
}
