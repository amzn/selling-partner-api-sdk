/*
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.df.shipping.v2021_12_28
{
    /// <summary>
    /// The details of the container label.
    /// </summary>
    [DataContract(Name = "ContainerLabel")]
    public partial class ContainerLabel : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", IsRequired = true, EmitDefaultValue = true)]
        public ContainerLabelFormat Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerLabel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContainerLabel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerLabel" /> class.
        /// </summary>
        /// <param name="containerTrackingNumber">The container (pallet) tracking identifier from the shipping carrier..</param>
        /// <param name="content">The container label content encoded into a Base64 string. (required).</param>
        /// <param name="format">format (required).</param>
        public ContainerLabel(string containerTrackingNumber = default(string), string content = default(string), ContainerLabelFormat format = default(ContainerLabelFormat))
        {
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for ContainerLabel and cannot be null");
            }
            this.Content = content;
            this.Format = format;
            this.ContainerTrackingNumber = containerTrackingNumber;
        }

        /// <summary>
        /// The container (pallet) tracking identifier from the shipping carrier.
        /// </summary>
        /// <value>The container (pallet) tracking identifier from the shipping carrier.</value>
        [DataMember(Name = "containerTrackingNumber", EmitDefaultValue = false)]
        public string ContainerTrackingNumber { get; set; }

        /// <summary>
        /// The container label content encoded into a Base64 string.
        /// </summary>
        /// <value>The container label content encoded into a Base64 string.</value>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContainerLabel {\n");
            sb.Append("  ContainerTrackingNumber: ").Append(ContainerTrackingNumber).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
