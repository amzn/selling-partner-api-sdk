/*
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.vendor.df.shipping.v2021_12_28
{
    /// <summary>
    /// Shipping label information for an order, including the purchase order number, selling party, ship from party, label format, and package details.
    /// </summary>
    [DataContract(Name = "ShippingLabel")]
    public partial class ShippingLabel : IValidatableObject
    {
        /// <summary>
        /// Format of the label.
        /// </summary>
        /// <value>Format of the label.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LabelFormatEnum
        {
            /// <summary>
            /// Enum PNG for value: PNG
            /// </summary>
            [EnumMember(Value = "PNG")]
            PNG = 1,

            /// <summary>
            /// Enum ZPL for value: ZPL
            /// </summary>
            [EnumMember(Value = "ZPL")]
            ZPL = 2
        }


        /// <summary>
        /// Format of the label.
        /// </summary>
        /// <value>Format of the label.</value>
        [DataMember(Name = "labelFormat", IsRequired = true, EmitDefaultValue = true)]
        public LabelFormatEnum LabelFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingLabel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShippingLabel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingLabel" /> class.
        /// </summary>
        /// <param name="purchaseOrderNumber">This field will contain the Purchase Order Number for this order. (required).</param>
        /// <param name="sellingParty">sellingParty (required).</param>
        /// <param name="shipFromParty">shipFromParty (required).</param>
        /// <param name="labelFormat">Format of the label. (required).</param>
        /// <param name="labelData">Provides the details of the packages in this shipment. (required).</param>
        public ShippingLabel(string purchaseOrderNumber = default(string), PartyIdentification sellingParty = default(PartyIdentification), PartyIdentification shipFromParty = default(PartyIdentification), LabelFormatEnum labelFormat = default(LabelFormatEnum), List<LabelData> labelData = default(List<LabelData>))
        {
            // to ensure "purchaseOrderNumber" is required (not null)
            if (purchaseOrderNumber == null)
            {
                throw new ArgumentNullException("purchaseOrderNumber is a required property for ShippingLabel and cannot be null");
            }
            this.PurchaseOrderNumber = purchaseOrderNumber;
            // to ensure "sellingParty" is required (not null)
            if (sellingParty == null)
            {
                throw new ArgumentNullException("sellingParty is a required property for ShippingLabel and cannot be null");
            }
            this.SellingParty = sellingParty;
            // to ensure "shipFromParty" is required (not null)
            if (shipFromParty == null)
            {
                throw new ArgumentNullException("shipFromParty is a required property for ShippingLabel and cannot be null");
            }
            this.ShipFromParty = shipFromParty;
            this.LabelFormat = labelFormat;
            // to ensure "labelData" is required (not null)
            if (labelData == null)
            {
                throw new ArgumentNullException("labelData is a required property for ShippingLabel and cannot be null");
            }
            this.LabelData = labelData;
        }

        /// <summary>
        /// This field will contain the Purchase Order Number for this order.
        /// </summary>
        /// <value>This field will contain the Purchase Order Number for this order.</value>
        [DataMember(Name = "purchaseOrderNumber", IsRequired = true, EmitDefaultValue = true)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets SellingParty
        /// </summary>
        [DataMember(Name = "sellingParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipFromParty
        /// </summary>
        [DataMember(Name = "shipFromParty", IsRequired = true, EmitDefaultValue = true)]
        public PartyIdentification ShipFromParty { get; set; }

        /// <summary>
        /// Provides the details of the packages in this shipment.
        /// </summary>
        /// <value>Provides the details of the packages in this shipment.</value>
        [DataMember(Name = "labelData", IsRequired = true, EmitDefaultValue = true)]
        public List<LabelData> LabelData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingLabel {\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  SellingParty: ").Append(SellingParty).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  LabelData: ").Append(LabelData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.PurchaseOrderNumber != null) {
                // PurchaseOrderNumber (string) pattern
                Regex regexPurchaseOrderNumber = new Regex(@"^[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
                if (!regexPurchaseOrderNumber.Match(this.PurchaseOrderNumber).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseOrderNumber, must match a pattern of " + regexPurchaseOrderNumber, new [] { "PurchaseOrderNumber" });
                }
            }

            yield break;
        }
    }

}
