/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// Extra services provided by a carrier.
    /// </summary>
    [DataContract(Name = "ShippingServiceOptions")]
    public partial class ShippingServiceOptions : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DeliveryExperience
        /// </summary>
        [DataMember(Name = "DeliveryExperience", IsRequired = true, EmitDefaultValue = true)]
        public DeliveryExperienceType DeliveryExperience { get; set; }

        /// <summary>
        /// Gets or Sets CarrierWillPickUpOption
        /// </summary>
        [DataMember(Name = "CarrierWillPickUpOption", EmitDefaultValue = false)]
        public CarrierWillPickUpOption? CarrierWillPickUpOption { get; set; }

        /// <summary>
        /// Gets or Sets LabelFormat
        /// </summary>
        [DataMember(Name = "LabelFormat", EmitDefaultValue = false)]
        public LabelFormat? LabelFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingServiceOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShippingServiceOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingServiceOptions" /> class.
        /// </summary>
        /// <param name="deliveryExperience">deliveryExperience (required).</param>
        /// <param name="declaredValue">declaredValue.</param>
        /// <param name="carrierWillPickUp">When true, the carrier will pick up the package. Note: Scheduled carrier pickup is available only using Dynamex (US), DPD (UK), and Royal Mail (UK). (required).</param>
        /// <param name="carrierWillPickUpOption">carrierWillPickUpOption.</param>
        /// <param name="labelFormat">labelFormat.</param>
        public ShippingServiceOptions(DeliveryExperienceType deliveryExperience = default(DeliveryExperienceType), CurrencyAmount declaredValue = default(CurrencyAmount), bool carrierWillPickUp = default(bool), CarrierWillPickUpOption? carrierWillPickUpOption = default(CarrierWillPickUpOption?), LabelFormat? labelFormat = default(LabelFormat?))
        {
            this.DeliveryExperience = deliveryExperience;
            this.CarrierWillPickUp = carrierWillPickUp;
            this.DeclaredValue = declaredValue;
            this.CarrierWillPickUpOption = carrierWillPickUpOption;
            this.LabelFormat = labelFormat;
        }

        /// <summary>
        /// Gets or Sets DeclaredValue
        /// </summary>
        [DataMember(Name = "DeclaredValue", EmitDefaultValue = false)]
        public CurrencyAmount DeclaredValue { get; set; }

        /// <summary>
        /// When true, the carrier will pick up the package. Note: Scheduled carrier pickup is available only using Dynamex (US), DPD (UK), and Royal Mail (UK).
        /// </summary>
        /// <value>When true, the carrier will pick up the package. Note: Scheduled carrier pickup is available only using Dynamex (US), DPD (UK), and Royal Mail (UK).</value>
        [DataMember(Name = "CarrierWillPickUp", IsRequired = true, EmitDefaultValue = true)]
        public bool CarrierWillPickUp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingServiceOptions {\n");
            sb.Append("  DeliveryExperience: ").Append(DeliveryExperience).Append("\n");
            sb.Append("  DeclaredValue: ").Append(DeclaredValue).Append("\n");
            sb.Append("  CarrierWillPickUp: ").Append(CarrierWillPickUp).Append("\n");
            sb.Append("  CarrierWillPickUpOption: ").Append(CarrierWillPickUpOption).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
