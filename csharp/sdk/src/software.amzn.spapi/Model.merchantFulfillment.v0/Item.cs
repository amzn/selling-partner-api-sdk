/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// An Amazon order item identifier and a quantity.
    /// </summary>
    [DataContract(Name = "Item")]
    public partial class Item : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Item() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="orderItemId">An Amazon-defined identifier for an individual item in an order. (required).</param>
        /// <param name="quantity">The number of items. (required).</param>
        /// <param name="itemWeight">itemWeight.</param>
        /// <param name="itemDescription">The description of the item..</param>
        /// <param name="transparencyCodeList">A list of transparency codes..</param>
        /// <param name="itemLevelSellerInputsList">A list of additional seller input pairs required to purchase shipping..</param>
        /// <param name="liquidVolume">liquidVolume.</param>
        /// <param name="isHazmat">When true, the item qualifies as hazardous materials (hazmat). Defaults to false..</param>
        /// <param name="dangerousGoodsDetails">dangerousGoodsDetails.</param>
        public Item(string orderItemId = default(string), int quantity = default(int), Weight itemWeight = default(Weight), string itemDescription = default(string), List<string> transparencyCodeList = default(List<string>), List<AdditionalSellerInputs> itemLevelSellerInputsList = default(List<AdditionalSellerInputs>), LiquidVolume liquidVolume = default(LiquidVolume), bool isHazmat = default(bool), DangerousGoodsDetails dangerousGoodsDetails = default(DangerousGoodsDetails))
        {
            // to ensure "orderItemId" is required (not null)
            if (orderItemId == null)
            {
                throw new ArgumentNullException("orderItemId is a required property for Item and cannot be null");
            }
            this.OrderItemId = orderItemId;
            this.Quantity = quantity;
            this.ItemWeight = itemWeight;
            this.ItemDescription = itemDescription;
            this.TransparencyCodeList = transparencyCodeList;
            this.ItemLevelSellerInputsList = itemLevelSellerInputsList;
            this.LiquidVolume = liquidVolume;
            this.IsHazmat = isHazmat;
            this.DangerousGoodsDetails = dangerousGoodsDetails;
        }

        /// <summary>
        /// An Amazon-defined identifier for an individual item in an order.
        /// </summary>
        /// <value>An Amazon-defined identifier for an individual item in an order.</value>
        [DataMember(Name = "OrderItemId", IsRequired = true, EmitDefaultValue = true)]
        public string OrderItemId { get; set; }

        /// <summary>
        /// The number of items.
        /// </summary>
        /// <value>The number of items.</value>
        [DataMember(Name = "Quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets ItemWeight
        /// </summary>
        [DataMember(Name = "ItemWeight", EmitDefaultValue = false)]
        public Weight ItemWeight { get; set; }

        /// <summary>
        /// The description of the item.
        /// </summary>
        /// <value>The description of the item.</value>
        [DataMember(Name = "ItemDescription", EmitDefaultValue = false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// A list of transparency codes.
        /// </summary>
        /// <value>A list of transparency codes.</value>
        [DataMember(Name = "TransparencyCodeList", EmitDefaultValue = false)]
        public List<string> TransparencyCodeList { get; set; }

        /// <summary>
        /// A list of additional seller input pairs required to purchase shipping.
        /// </summary>
        /// <value>A list of additional seller input pairs required to purchase shipping.</value>
        [DataMember(Name = "ItemLevelSellerInputsList", EmitDefaultValue = false)]
        public List<AdditionalSellerInputs> ItemLevelSellerInputsList { get; set; }

        /// <summary>
        /// Gets or Sets LiquidVolume
        /// </summary>
        [DataMember(Name = "LiquidVolume", EmitDefaultValue = false)]
        public LiquidVolume LiquidVolume { get; set; }

        /// <summary>
        /// When true, the item qualifies as hazardous materials (hazmat). Defaults to false.
        /// </summary>
        /// <value>When true, the item qualifies as hazardous materials (hazmat). Defaults to false.</value>
        [DataMember(Name = "IsHazmat", EmitDefaultValue = true)]
        public bool IsHazmat { get; set; }

        /// <summary>
        /// Gets or Sets DangerousGoodsDetails
        /// </summary>
        [DataMember(Name = "DangerousGoodsDetails", EmitDefaultValue = false)]
        public DangerousGoodsDetails DangerousGoodsDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  OrderItemId: ").Append(OrderItemId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ItemWeight: ").Append(ItemWeight).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  TransparencyCodeList: ").Append(TransparencyCodeList).Append("\n");
            sb.Append("  ItemLevelSellerInputsList: ").Append(ItemLevelSellerInputsList).Append("\n");
            sb.Append("  LiquidVolume: ").Append(LiquidVolume).Append("\n");
            sb.Append("  IsHazmat: ").Append(IsHazmat).Append("\n");
            sb.Append("  DangerousGoodsDetails: ").Append(DangerousGoodsDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
