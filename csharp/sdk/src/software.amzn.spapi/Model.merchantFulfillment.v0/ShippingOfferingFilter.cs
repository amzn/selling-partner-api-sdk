/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// Filter for use when requesting eligible shipping services.
    /// </summary>
    [DataContract(Name = "ShippingOfferingFilter")]
    public partial class ShippingOfferingFilter : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CarrierWillPickUp
        /// </summary>
        [DataMember(Name = "CarrierWillPickUp", EmitDefaultValue = false)]
        public CarrierWillPickUpOption? CarrierWillPickUp { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryExperience
        /// </summary>
        [DataMember(Name = "DeliveryExperience", EmitDefaultValue = false)]
        public DeliveryExperienceOption? DeliveryExperience { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingOfferingFilter" /> class.
        /// </summary>
        /// <param name="includePackingSlipWithLabel">When true, include a packing slip with the label..</param>
        /// <param name="includeComplexShippingOptions">When true, include complex shipping options..</param>
        /// <param name="carrierWillPickUp">carrierWillPickUp.</param>
        /// <param name="deliveryExperience">deliveryExperience.</param>
        public ShippingOfferingFilter(bool includePackingSlipWithLabel = default(bool), bool includeComplexShippingOptions = default(bool), CarrierWillPickUpOption? carrierWillPickUp = default(CarrierWillPickUpOption?), DeliveryExperienceOption? deliveryExperience = default(DeliveryExperienceOption?))
        {
            this.IncludePackingSlipWithLabel = includePackingSlipWithLabel;
            this.IncludeComplexShippingOptions = includeComplexShippingOptions;
            this.CarrierWillPickUp = carrierWillPickUp;
            this.DeliveryExperience = deliveryExperience;
        }

        /// <summary>
        /// When true, include a packing slip with the label.
        /// </summary>
        /// <value>When true, include a packing slip with the label.</value>
        [DataMember(Name = "IncludePackingSlipWithLabel", EmitDefaultValue = true)]
        public bool IncludePackingSlipWithLabel { get; set; }

        /// <summary>
        /// When true, include complex shipping options.
        /// </summary>
        /// <value>When true, include complex shipping options.</value>
        [DataMember(Name = "IncludeComplexShippingOptions", EmitDefaultValue = true)]
        public bool IncludeComplexShippingOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingOfferingFilter {\n");
            sb.Append("  IncludePackingSlipWithLabel: ").Append(IncludePackingSlipWithLabel).Append("\n");
            sb.Append("  IncludeComplexShippingOptions: ").Append(IncludeComplexShippingOptions).Append("\n");
            sb.Append("  CarrierWillPickUp: ").Append(CarrierWillPickUp).Append("\n");
            sb.Append("  DeliveryExperience: ").Append(DeliveryExperience).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
