/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// Additional information required to purchase shipping.
    /// </summary>
    [DataContract(Name = "AdditionalSellerInput")]
    public partial class AdditionalSellerInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalSellerInput" /> class.
        /// </summary>
        /// <param name="dataType">The data type of the additional information..</param>
        /// <param name="valueAsString">The value when the data type is string..</param>
        /// <param name="valueAsBoolean">The value when the data type is boolean..</param>
        /// <param name="valueAsInteger">The value when the data type is integer..</param>
        /// <param name="valueAsTimestamp">Date-time formatted timestamp..</param>
        /// <param name="valueAsAddress">valueAsAddress.</param>
        /// <param name="valueAsWeight">valueAsWeight.</param>
        /// <param name="valueAsDimension">valueAsDimension.</param>
        /// <param name="valueAsCurrency">valueAsCurrency.</param>
        public AdditionalSellerInput(string dataType = default(string), string valueAsString = default(string), bool valueAsBoolean = default(bool), int valueAsInteger = default(int), DateTime valueAsTimestamp = default(DateTime), Address valueAsAddress = default(Address), Weight valueAsWeight = default(Weight), Length valueAsDimension = default(Length), CurrencyAmount valueAsCurrency = default(CurrencyAmount))
        {
            this.DataType = dataType;
            this.ValueAsString = valueAsString;
            this.ValueAsBoolean = valueAsBoolean;
            this.ValueAsInteger = valueAsInteger;
            this.ValueAsTimestamp = valueAsTimestamp;
            this.ValueAsAddress = valueAsAddress;
            this.ValueAsWeight = valueAsWeight;
            this.ValueAsDimension = valueAsDimension;
            this.ValueAsCurrency = valueAsCurrency;
        }

        /// <summary>
        /// The data type of the additional information.
        /// </summary>
        /// <value>The data type of the additional information.</value>
        [DataMember(Name = "DataType", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        /// The value when the data type is string.
        /// </summary>
        /// <value>The value when the data type is string.</value>
        [DataMember(Name = "ValueAsString", EmitDefaultValue = false)]
        public string ValueAsString { get; set; }

        /// <summary>
        /// The value when the data type is boolean.
        /// </summary>
        /// <value>The value when the data type is boolean.</value>
        [DataMember(Name = "ValueAsBoolean", EmitDefaultValue = true)]
        public bool ValueAsBoolean { get; set; }

        /// <summary>
        /// The value when the data type is integer.
        /// </summary>
        /// <value>The value when the data type is integer.</value>
        [DataMember(Name = "ValueAsInteger", EmitDefaultValue = false)]
        public int ValueAsInteger { get; set; }

        /// <summary>
        /// Date-time formatted timestamp.
        /// </summary>
        /// <value>Date-time formatted timestamp.</value>
        [DataMember(Name = "ValueAsTimestamp", EmitDefaultValue = false)]
        public DateTime ValueAsTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsAddress
        /// </summary>
        [DataMember(Name = "ValueAsAddress", EmitDefaultValue = false)]
        public Address ValueAsAddress { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsWeight
        /// </summary>
        [DataMember(Name = "ValueAsWeight", EmitDefaultValue = false)]
        public Weight ValueAsWeight { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsDimension
        /// </summary>
        [DataMember(Name = "ValueAsDimension", EmitDefaultValue = false)]
        public Length ValueAsDimension { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsCurrency
        /// </summary>
        [DataMember(Name = "ValueAsCurrency", EmitDefaultValue = false)]
        public CurrencyAmount ValueAsCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalSellerInput {\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  ValueAsString: ").Append(ValueAsString).Append("\n");
            sb.Append("  ValueAsBoolean: ").Append(ValueAsBoolean).Append("\n");
            sb.Append("  ValueAsInteger: ").Append(ValueAsInteger).Append("\n");
            sb.Append("  ValueAsTimestamp: ").Append(ValueAsTimestamp).Append("\n");
            sb.Append("  ValueAsAddress: ").Append(ValueAsAddress).Append("\n");
            sb.Append("  ValueAsWeight: ").Append(ValueAsWeight).Append("\n");
            sb.Append("  ValueAsDimension: ").Append(ValueAsDimension).Append("\n");
            sb.Append("  ValueAsCurrency: ").Append(ValueAsCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
