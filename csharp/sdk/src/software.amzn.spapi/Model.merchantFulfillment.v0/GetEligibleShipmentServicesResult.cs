/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// The payload for the &#x60;getEligibleShipmentServices&#x60; operation.
    /// </summary>
    [DataContract(Name = "GetEligibleShipmentServicesResult")]
    public partial class GetEligibleShipmentServicesResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEligibleShipmentServicesResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetEligibleShipmentServicesResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEligibleShipmentServicesResult" /> class.
        /// </summary>
        /// <param name="shippingServiceList">A list of shipping services offers. (required).</param>
        /// <param name="rejectedShippingServiceList">List of services that are for some reason unavailable for this request.</param>
        /// <param name="temporarilyUnavailableCarrierList">A list of temporarily unavailable carriers..</param>
        /// <param name="termsAndConditionsNotAcceptedCarrierList">List of carriers whose terms and conditions were not accepted by the seller..</param>
        public GetEligibleShipmentServicesResult(List<ShippingService> shippingServiceList = default(List<ShippingService>), List<RejectedShippingService> rejectedShippingServiceList = default(List<RejectedShippingService>), List<TemporarilyUnavailableCarrier> temporarilyUnavailableCarrierList = default(List<TemporarilyUnavailableCarrier>), List<TermsAndConditionsNotAcceptedCarrier> termsAndConditionsNotAcceptedCarrierList = default(List<TermsAndConditionsNotAcceptedCarrier>))
        {
            // to ensure "shippingServiceList" is required (not null)
            if (shippingServiceList == null)
            {
                throw new ArgumentNullException("shippingServiceList is a required property for GetEligibleShipmentServicesResult and cannot be null");
            }
            this.ShippingServiceList = shippingServiceList;
            this.RejectedShippingServiceList = rejectedShippingServiceList;
            this.TemporarilyUnavailableCarrierList = temporarilyUnavailableCarrierList;
            this.TermsAndConditionsNotAcceptedCarrierList = termsAndConditionsNotAcceptedCarrierList;
        }

        /// <summary>
        /// A list of shipping services offers.
        /// </summary>
        /// <value>A list of shipping services offers.</value>
        [DataMember(Name = "ShippingServiceList", IsRequired = true, EmitDefaultValue = true)]
        public List<ShippingService> ShippingServiceList { get; set; }

        /// <summary>
        /// List of services that are for some reason unavailable for this request
        /// </summary>
        /// <value>List of services that are for some reason unavailable for this request</value>
        [DataMember(Name = "RejectedShippingServiceList", EmitDefaultValue = false)]
        public List<RejectedShippingService> RejectedShippingServiceList { get; set; }

        /// <summary>
        /// A list of temporarily unavailable carriers.
        /// </summary>
        /// <value>A list of temporarily unavailable carriers.</value>
        [DataMember(Name = "TemporarilyUnavailableCarrierList", EmitDefaultValue = false)]
        public List<TemporarilyUnavailableCarrier> TemporarilyUnavailableCarrierList { get; set; }

        /// <summary>
        /// List of carriers whose terms and conditions were not accepted by the seller.
        /// </summary>
        /// <value>List of carriers whose terms and conditions were not accepted by the seller.</value>
        [DataMember(Name = "TermsAndConditionsNotAcceptedCarrierList", EmitDefaultValue = false)]
        public List<TermsAndConditionsNotAcceptedCarrier> TermsAndConditionsNotAcceptedCarrierList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEligibleShipmentServicesResult {\n");
            sb.Append("  ShippingServiceList: ").Append(ShippingServiceList).Append("\n");
            sb.Append("  RejectedShippingServiceList: ").Append(RejectedShippingServiceList).Append("\n");
            sb.Append("  TemporarilyUnavailableCarrierList: ").Append(TemporarilyUnavailableCarrierList).Append("\n");
            sb.Append("  TermsAndConditionsNotAcceptedCarrierList: ").Append(TermsAndConditionsNotAcceptedCarrierList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
