/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// A carrier whose terms and conditions have not been accepted by the seller.
    /// </summary>
    [DataContract(Name = "TermsAndConditionsNotAcceptedCarrier")]
    public partial class TermsAndConditionsNotAcceptedCarrier : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsNotAcceptedCarrier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermsAndConditionsNotAcceptedCarrier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsNotAcceptedCarrier" /> class.
        /// </summary>
        /// <param name="carrierName">The name of the carrier. (required).</param>
        public TermsAndConditionsNotAcceptedCarrier(string carrierName = default(string))
        {
            // to ensure "carrierName" is required (not null)
            if (carrierName == null)
            {
                throw new ArgumentNullException("carrierName is a required property for TermsAndConditionsNotAcceptedCarrier and cannot be null");
            }
            this.CarrierName = carrierName;
        }

        /// <summary>
        /// The name of the carrier.
        /// </summary>
        /// <value>The name of the carrier.</value>
        [DataMember(Name = "CarrierName", IsRequired = true, EmitDefaultValue = true)]
        public string CarrierName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TermsAndConditionsNotAcceptedCarrier {\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
