/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// A shipping service offer made by a carrier.
    /// </summary>
    [DataContract(Name = "ShippingService")]
    public partial class ShippingService : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingService" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShippingService() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingService" /> class.
        /// </summary>
        /// <param name="shippingServiceName">A plain text representation of a carrier&#39;s shipping service. For example, \&quot;UPS Ground\&quot; or \&quot;FedEx Standard Overnight\&quot;.  (required).</param>
        /// <param name="carrierName">The name of the carrier. (required).</param>
        /// <param name="shippingServiceId">An Amazon-defined shipping service identifier. (required).</param>
        /// <param name="shippingServiceOfferId">An Amazon-defined shipping service offer identifier. (required).</param>
        /// <param name="shipDate">Date-time formatted timestamp. (required).</param>
        /// <param name="earliestEstimatedDeliveryDate">Date-time formatted timestamp..</param>
        /// <param name="latestEstimatedDeliveryDate">Date-time formatted timestamp..</param>
        /// <param name="rate">rate (required).</param>
        /// <param name="shippingServiceOptions">shippingServiceOptions (required).</param>
        /// <param name="availableShippingServiceOptions">availableShippingServiceOptions.</param>
        /// <param name="availableLabelFormats">List of label formats..</param>
        /// <param name="availableFormatOptionsForLabel">The available label formats..</param>
        /// <param name="requiresAdditionalSellerInputs">When true, additional seller inputs are required. (required).</param>
        /// <param name="benefits">benefits.</param>
        public ShippingService(string shippingServiceName = default(string), string carrierName = default(string), string shippingServiceId = default(string), string shippingServiceOfferId = default(string), DateTime shipDate = default(DateTime), DateTime earliestEstimatedDeliveryDate = default(DateTime), DateTime latestEstimatedDeliveryDate = default(DateTime), CurrencyAmount rate = default(CurrencyAmount), ShippingServiceOptions shippingServiceOptions = default(ShippingServiceOptions), AvailableShippingServiceOptions availableShippingServiceOptions = default(AvailableShippingServiceOptions), List<LabelFormat> availableLabelFormats = default(List<LabelFormat>), List<LabelFormatOption> availableFormatOptionsForLabel = default(List<LabelFormatOption>), bool requiresAdditionalSellerInputs = default(bool), Benefits benefits = default(Benefits))
        {
            // to ensure "shippingServiceName" is required (not null)
            if (shippingServiceName == null)
            {
                throw new ArgumentNullException("shippingServiceName is a required property for ShippingService and cannot be null");
            }
            this.ShippingServiceName = shippingServiceName;
            // to ensure "carrierName" is required (not null)
            if (carrierName == null)
            {
                throw new ArgumentNullException("carrierName is a required property for ShippingService and cannot be null");
            }
            this.CarrierName = carrierName;
            // to ensure "shippingServiceId" is required (not null)
            if (shippingServiceId == null)
            {
                throw new ArgumentNullException("shippingServiceId is a required property for ShippingService and cannot be null");
            }
            this.ShippingServiceId = shippingServiceId;
            // to ensure "shippingServiceOfferId" is required (not null)
            if (shippingServiceOfferId == null)
            {
                throw new ArgumentNullException("shippingServiceOfferId is a required property for ShippingService and cannot be null");
            }
            this.ShippingServiceOfferId = shippingServiceOfferId;
            this.ShipDate = shipDate;
            // to ensure "rate" is required (not null)
            if (rate == null)
            {
                throw new ArgumentNullException("rate is a required property for ShippingService and cannot be null");
            }
            this.Rate = rate;
            // to ensure "shippingServiceOptions" is required (not null)
            if (shippingServiceOptions == null)
            {
                throw new ArgumentNullException("shippingServiceOptions is a required property for ShippingService and cannot be null");
            }
            this.ShippingServiceOptions = shippingServiceOptions;
            this.RequiresAdditionalSellerInputs = requiresAdditionalSellerInputs;
            this.EarliestEstimatedDeliveryDate = earliestEstimatedDeliveryDate;
            this.LatestEstimatedDeliveryDate = latestEstimatedDeliveryDate;
            this.AvailableShippingServiceOptions = availableShippingServiceOptions;
            this.AvailableLabelFormats = availableLabelFormats;
            this.AvailableFormatOptionsForLabel = availableFormatOptionsForLabel;
            this.Benefits = benefits;
        }

        /// <summary>
        /// A plain text representation of a carrier&#39;s shipping service. For example, \&quot;UPS Ground\&quot; or \&quot;FedEx Standard Overnight\&quot;. 
        /// </summary>
        /// <value>A plain text representation of a carrier&#39;s shipping service. For example, \&quot;UPS Ground\&quot; or \&quot;FedEx Standard Overnight\&quot;. </value>
        [DataMember(Name = "ShippingServiceName", IsRequired = true, EmitDefaultValue = true)]
        public string ShippingServiceName { get; set; }

        /// <summary>
        /// The name of the carrier.
        /// </summary>
        /// <value>The name of the carrier.</value>
        [DataMember(Name = "CarrierName", IsRequired = true, EmitDefaultValue = true)]
        public string CarrierName { get; set; }

        /// <summary>
        /// An Amazon-defined shipping service identifier.
        /// </summary>
        /// <value>An Amazon-defined shipping service identifier.</value>
        [DataMember(Name = "ShippingServiceId", IsRequired = true, EmitDefaultValue = true)]
        public string ShippingServiceId { get; set; }

        /// <summary>
        /// An Amazon-defined shipping service offer identifier.
        /// </summary>
        /// <value>An Amazon-defined shipping service offer identifier.</value>
        [DataMember(Name = "ShippingServiceOfferId", IsRequired = true, EmitDefaultValue = true)]
        public string ShippingServiceOfferId { get; set; }

        /// <summary>
        /// Date-time formatted timestamp.
        /// </summary>
        /// <value>Date-time formatted timestamp.</value>
        [DataMember(Name = "ShipDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ShipDate { get; set; }

        /// <summary>
        /// Date-time formatted timestamp.
        /// </summary>
        /// <value>Date-time formatted timestamp.</value>
        [DataMember(Name = "EarliestEstimatedDeliveryDate", EmitDefaultValue = false)]
        public DateTime EarliestEstimatedDeliveryDate { get; set; }

        /// <summary>
        /// Date-time formatted timestamp.
        /// </summary>
        /// <value>Date-time formatted timestamp.</value>
        [DataMember(Name = "LatestEstimatedDeliveryDate", EmitDefaultValue = false)]
        public DateTime LatestEstimatedDeliveryDate { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name = "Rate", IsRequired = true, EmitDefaultValue = true)]
        public CurrencyAmount Rate { get; set; }

        /// <summary>
        /// Gets or Sets ShippingServiceOptions
        /// </summary>
        [DataMember(Name = "ShippingServiceOptions", IsRequired = true, EmitDefaultValue = true)]
        public ShippingServiceOptions ShippingServiceOptions { get; set; }

        /// <summary>
        /// Gets or Sets AvailableShippingServiceOptions
        /// </summary>
        [DataMember(Name = "AvailableShippingServiceOptions", EmitDefaultValue = false)]
        public AvailableShippingServiceOptions AvailableShippingServiceOptions { get; set; }

        /// <summary>
        /// List of label formats.
        /// </summary>
        /// <value>List of label formats.</value>
        [DataMember(Name = "AvailableLabelFormats", EmitDefaultValue = false)]
        public List<LabelFormat> AvailableLabelFormats { get; set; }

        /// <summary>
        /// The available label formats.
        /// </summary>
        /// <value>The available label formats.</value>
        [DataMember(Name = "AvailableFormatOptionsForLabel", EmitDefaultValue = false)]
        public List<LabelFormatOption> AvailableFormatOptionsForLabel { get; set; }

        /// <summary>
        /// When true, additional seller inputs are required.
        /// </summary>
        /// <value>When true, additional seller inputs are required.</value>
        [DataMember(Name = "RequiresAdditionalSellerInputs", IsRequired = true, EmitDefaultValue = true)]
        public bool RequiresAdditionalSellerInputs { get; set; }

        /// <summary>
        /// Gets or Sets Benefits
        /// </summary>
        [DataMember(Name = "Benefits", EmitDefaultValue = false)]
        public Benefits Benefits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShippingService {\n");
            sb.Append("  ShippingServiceName: ").Append(ShippingServiceName).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  ShippingServiceId: ").Append(ShippingServiceId).Append("\n");
            sb.Append("  ShippingServiceOfferId: ").Append(ShippingServiceOfferId).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  EarliestEstimatedDeliveryDate: ").Append(EarliestEstimatedDeliveryDate).Append("\n");
            sb.Append("  LatestEstimatedDeliveryDate: ").Append(LatestEstimatedDeliveryDate).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  ShippingServiceOptions: ").Append(ShippingServiceOptions).Append("\n");
            sb.Append("  AvailableShippingServiceOptions: ").Append(AvailableShippingServiceOptions).Append("\n");
            sb.Append("  AvailableLabelFormats: ").Append(AvailableLabelFormats).Append("\n");
            sb.Append("  AvailableFormatOptionsForLabel: ").Append(AvailableFormatOptionsForLabel).Append("\n");
            sb.Append("  RequiresAdditionalSellerInputs: ").Append(RequiresAdditionalSellerInputs).Append("\n");
            sb.Append("  Benefits: ").Append(Benefits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
