/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// A list of item level fields.
    /// </summary>
    [DataContract(Name = "ItemLevelFields")]
    public partial class ItemLevelFields : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemLevelFields" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemLevelFields() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemLevelFields" /> class.
        /// </summary>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item. (required).</param>
        /// <param name="additionalInputs">A list of additional inputs. (required).</param>
        public ItemLevelFields(string asin = default(string), List<AdditionalInputs> additionalInputs = default(List<AdditionalInputs>))
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new ArgumentNullException("asin is a required property for ItemLevelFields and cannot be null");
            }
            this.Asin = asin;
            // to ensure "additionalInputs" is required (not null)
            if (additionalInputs == null)
            {
                throw new ArgumentNullException("additionalInputs is a required property for ItemLevelFields and cannot be null");
            }
            this.AdditionalInputs = additionalInputs;
        }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "Asin", IsRequired = true, EmitDefaultValue = true)]
        public string Asin { get; set; }

        /// <summary>
        /// A list of additional inputs.
        /// </summary>
        /// <value>A list of additional inputs.</value>
        [DataMember(Name = "AdditionalInputs", IsRequired = true, EmitDefaultValue = true)]
        public List<AdditionalInputs> AdditionalInputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemLevelFields {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  AdditionalInputs: ").Append(AdditionalInputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
