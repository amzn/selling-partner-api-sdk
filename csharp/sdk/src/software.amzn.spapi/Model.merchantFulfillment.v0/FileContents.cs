/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// The document data and checksum.
    /// </summary>
    [DataContract(Name = "FileContents")]
    public partial class FileContents : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FileType
        /// </summary>
        [DataMember(Name = "FileType", IsRequired = true, EmitDefaultValue = true)]
        public FileType FileType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileContents" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileContents() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileContents" /> class.
        /// </summary>
        /// <param name="contents">Data for printing labels encoded into a Base64, GZip-compressed string. (required).</param>
        /// <param name="fileType">fileType (required).</param>
        /// <param name="checksum">An MD5 hash to validate the PDF document data, in the form of a Base64 string. (required).</param>
        public FileContents(string contents = default(string), FileType fileType = default(FileType), string checksum = default(string))
        {
            // to ensure "contents" is required (not null)
            if (contents == null)
            {
                throw new ArgumentNullException("contents is a required property for FileContents and cannot be null");
            }
            this.Contents = contents;
            this.FileType = fileType;
            // to ensure "checksum" is required (not null)
            if (checksum == null)
            {
                throw new ArgumentNullException("checksum is a required property for FileContents and cannot be null");
            }
            this.Checksum = checksum;
        }

        /// <summary>
        /// Data for printing labels encoded into a Base64, GZip-compressed string.
        /// </summary>
        /// <value>Data for printing labels encoded into a Base64, GZip-compressed string.</value>
        [DataMember(Name = "Contents", IsRequired = true, EmitDefaultValue = true)]
        public string Contents { get; set; }

        /// <summary>
        /// An MD5 hash to validate the PDF document data, in the form of a Base64 string.
        /// </summary>
        /// <value>An MD5 hash to validate the PDF document data, in the form of a Base64 string.</value>
        [DataMember(Name = "Checksum", IsRequired = true, EmitDefaultValue = true)]
        public string Checksum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileContents {\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
