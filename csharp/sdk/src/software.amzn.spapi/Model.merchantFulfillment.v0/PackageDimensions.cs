/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// The dimensions of a package contained in a shipment.
    /// </summary>
    [DataContract(Name = "PackageDimensions")]
    public partial class PackageDimensions : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "Unit", EmitDefaultValue = false)]
        public UnitOfLength? Unit { get; set; }

        /// <summary>
        /// Gets or Sets PredefinedPackageDimensions
        /// </summary>
        [DataMember(Name = "PredefinedPackageDimensions", EmitDefaultValue = false)]
        public PredefinedPackageDimensions? PredefinedPackageDimensions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageDimensions" /> class.
        /// </summary>
        /// <param name="length">A number that represents the given package dimension..</param>
        /// <param name="width">A number that represents the given package dimension..</param>
        /// <param name="height">A number that represents the given package dimension..</param>
        /// <param name="unit">unit.</param>
        /// <param name="predefinedPackageDimensions">predefinedPackageDimensions.</param>
        public PackageDimensions(double length = default(double), double width = default(double), double height = default(double), UnitOfLength? unit = default(UnitOfLength?), PredefinedPackageDimensions? predefinedPackageDimensions = default(PredefinedPackageDimensions?))
        {
            this.Length = length;
            this.Width = width;
            this.Height = height;
            this.Unit = unit;
            this.PredefinedPackageDimensions = predefinedPackageDimensions;
        }

        /// <summary>
        /// A number that represents the given package dimension.
        /// </summary>
        /// <value>A number that represents the given package dimension.</value>
        [DataMember(Name = "Length", EmitDefaultValue = false)]
        public double Length { get; set; }

        /// <summary>
        /// A number that represents the given package dimension.
        /// </summary>
        /// <value>A number that represents the given package dimension.</value>
        [DataMember(Name = "Width", EmitDefaultValue = false)]
        public double Width { get; set; }

        /// <summary>
        /// A number that represents the given package dimension.
        /// </summary>
        /// <value>A number that represents the given package dimension.</value>
        [DataMember(Name = "Height", EmitDefaultValue = false)]
        public double Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageDimensions {\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  PredefinedPackageDimensions: ").Append(PredefinedPackageDimensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
