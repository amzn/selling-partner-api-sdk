/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// The postal address information.
    /// </summary>
    [DataContract(Name = "Address")]
    public partial class Address : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="name">The name of the addressee, or business name. (required).</param>
        /// <param name="addressLine1">The street address information. (required).</param>
        /// <param name="addressLine2">Additional street address information..</param>
        /// <param name="addressLine3">Additional street address information..</param>
        /// <param name="districtOrCounty">The district or county..</param>
        /// <param name="email">The email address. (required).</param>
        /// <param name="city">The city. (required).</param>
        /// <param name="stateOrProvinceCode">The state or province code. This is a required field in Canada, US, and UK marketplaces, and for shipments that originate in China..</param>
        /// <param name="postalCode">The zip code or postal code. (required).</param>
        /// <param name="countryCode">The two-letter country code in [ISO 3166-1 alpha-2](https://www.iban.com/country-codes) format. (required).</param>
        /// <param name="phone">The phone number. (required).</param>
        public Address(string name = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string districtOrCounty = default(string), string email = default(string), string city = default(string), string stateOrProvinceCode = default(string), string postalCode = default(string), string countryCode = default(string), string phone = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Address and cannot be null");
            }
            this.Name = name;
            // to ensure "addressLine1" is required (not null)
            if (addressLine1 == null)
            {
                throw new ArgumentNullException("addressLine1 is a required property for Address and cannot be null");
            }
            this.AddressLine1 = addressLine1;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for Address and cannot be null");
            }
            this.Email = email;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for Address and cannot be null");
            }
            this.City = city;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for Address and cannot be null");
            }
            this.PostalCode = postalCode;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for Address and cannot be null");
            }
            this.CountryCode = countryCode;
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new ArgumentNullException("phone is a required property for Address and cannot be null");
            }
            this.Phone = phone;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.DistrictOrCounty = districtOrCounty;
            this.StateOrProvinceCode = stateOrProvinceCode;
        }

        /// <summary>
        /// The name of the addressee, or business name.
        /// </summary>
        /// <value>The name of the addressee, or business name.</value>
        [DataMember(Name = "Name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The street address information.
        /// </summary>
        /// <value>The street address information.</value>
        [DataMember(Name = "AddressLine1", IsRequired = true, EmitDefaultValue = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Additional street address information.
        /// </summary>
        /// <value>Additional street address information.</value>
        [DataMember(Name = "AddressLine2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Additional street address information.
        /// </summary>
        /// <value>Additional street address information.</value>
        [DataMember(Name = "AddressLine3", EmitDefaultValue = false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The district or county.
        /// </summary>
        /// <value>The district or county.</value>
        [DataMember(Name = "DistrictOrCounty", EmitDefaultValue = false)]
        public string DistrictOrCounty { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name = "Email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// The city.
        /// </summary>
        /// <value>The city.</value>
        [DataMember(Name = "City", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// The state or province code. This is a required field in Canada, US, and UK marketplaces, and for shipments that originate in China.
        /// </summary>
        /// <value>The state or province code. This is a required field in Canada, US, and UK marketplaces, and for shipments that originate in China.</value>
        [DataMember(Name = "StateOrProvinceCode", EmitDefaultValue = false)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// The zip code or postal code.
        /// </summary>
        /// <value>The zip code or postal code.</value>
        [DataMember(Name = "PostalCode", IsRequired = true, EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The two-letter country code in [ISO 3166-1 alpha-2](https://www.iban.com/country-codes) format.
        /// </summary>
        /// <value>The two-letter country code in [ISO 3166-1 alpha-2](https://www.iban.com/country-codes) format.</value>
        [DataMember(Name = "CountryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The phone number.
        /// </summary>
        /// <value>The phone number.</value>
        [DataMember(Name = "Phone", IsRequired = true, EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  DistrictOrCounty: ").Append(DistrictOrCounty).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateOrProvinceCode: ").Append(StateOrProvinceCode).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 30)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 30.", new [] { "Name" });
            }

            // AddressLine1 (string) maxLength
            if (this.AddressLine1 != null && this.AddressLine1.Length > 180)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be less than 180.", new [] { "AddressLine1" });
            }

            // AddressLine2 (string) maxLength
            if (this.AddressLine2 != null && this.AddressLine2.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be less than 60.", new [] { "AddressLine2" });
            }

            // AddressLine3 (string) maxLength
            if (this.AddressLine3 != null && this.AddressLine3.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AddressLine3, length must be less than 60.", new [] { "AddressLine3" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 30)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 30.", new [] { "City" });
            }

            // StateOrProvinceCode (string) maxLength
            if (this.StateOrProvinceCode != null && this.StateOrProvinceCode.Length > 30)
            {
                yield return new ValidationResult("Invalid value for StateOrProvinceCode, length must be less than 30.", new [] { "StateOrProvinceCode" });
            }

            // PostalCode (string) maxLength
            if (this.PostalCode != null && this.PostalCode.Length > 30)
            {
                yield return new ValidationResult("Invalid value for PostalCode, length must be less than 30.", new [] { "PostalCode" });
            }

            // Phone (string) maxLength
            if (this.Phone != null && this.Phone.Length > 30)
            {
                yield return new ValidationResult("Invalid value for Phone, length must be less than 30.", new [] { "Phone" });
            }

            yield break;
        }
    }

}
