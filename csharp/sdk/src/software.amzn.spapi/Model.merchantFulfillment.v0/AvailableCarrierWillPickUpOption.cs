/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// Indicates whether the carrier will pick up the package, and what fee is charged, if any.
    /// </summary>
    [DataContract(Name = "AvailableCarrierWillPickUpOption")]
    public partial class AvailableCarrierWillPickUpOption : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CarrierWillPickUpOption
        /// </summary>
        [DataMember(Name = "CarrierWillPickUpOption", IsRequired = true, EmitDefaultValue = true)]
        public CarrierWillPickUpOption CarrierWillPickUpOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableCarrierWillPickUpOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AvailableCarrierWillPickUpOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableCarrierWillPickUpOption" /> class.
        /// </summary>
        /// <param name="carrierWillPickUpOption">carrierWillPickUpOption (required).</param>
        /// <param name="charge">charge (required).</param>
        public AvailableCarrierWillPickUpOption(CarrierWillPickUpOption carrierWillPickUpOption = default(CarrierWillPickUpOption), CurrencyAmount charge = default(CurrencyAmount))
        {
            this.CarrierWillPickUpOption = carrierWillPickUpOption;
            // to ensure "charge" is required (not null)
            if (charge == null)
            {
                throw new ArgumentNullException("charge is a required property for AvailableCarrierWillPickUpOption and cannot be null");
            }
            this.Charge = charge;
        }

        /// <summary>
        /// Gets or Sets Charge
        /// </summary>
        [DataMember(Name = "Charge", IsRequired = true, EmitDefaultValue = true)]
        public CurrencyAmount Charge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AvailableCarrierWillPickUpOption {\n");
            sb.Append("  CarrierWillPickUpOption: ").Append(CarrierWillPickUpOption).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
