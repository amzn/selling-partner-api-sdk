/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// The payload for the &#x60;getAdditionalSellerInputs&#x60; operation.
    /// </summary>
    [DataContract(Name = "GetAdditionalSellerInputsResult")]
    public partial class GetAdditionalSellerInputsResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAdditionalSellerInputsResult" /> class.
        /// </summary>
        /// <param name="shipmentLevelFields">A list of additional inputs..</param>
        /// <param name="itemLevelFieldsList">A list of item level fields..</param>
        public GetAdditionalSellerInputsResult(List<AdditionalInputs> shipmentLevelFields = default(List<AdditionalInputs>), List<ItemLevelFields> itemLevelFieldsList = default(List<ItemLevelFields>))
        {
            this.ShipmentLevelFields = shipmentLevelFields;
            this.ItemLevelFieldsList = itemLevelFieldsList;
        }

        /// <summary>
        /// A list of additional inputs.
        /// </summary>
        /// <value>A list of additional inputs.</value>
        [DataMember(Name = "ShipmentLevelFields", EmitDefaultValue = false)]
        public List<AdditionalInputs> ShipmentLevelFields { get; set; }

        /// <summary>
        /// A list of item level fields.
        /// </summary>
        /// <value>A list of item level fields.</value>
        [DataMember(Name = "ItemLevelFieldsList", EmitDefaultValue = false)]
        public List<ItemLevelFields> ItemLevelFieldsList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAdditionalSellerInputsResult {\n");
            sb.Append("  ShipmentLevelFields: ").Append(ShipmentLevelFields).Append("\n");
            sb.Append("  ItemLevelFieldsList: ").Append(ItemLevelFieldsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
