/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// Data for creating a shipping label and dimensions for printing the label.
    /// </summary>
    [DataContract(Name = "Label")]
    public partial class Label : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LabelFormat
        /// </summary>
        [DataMember(Name = "LabelFormat", EmitDefaultValue = false)]
        public LabelFormat? LabelFormat { get; set; }

        /// <summary>
        /// Gets or Sets StandardIdForLabel
        /// </summary>
        [DataMember(Name = "StandardIdForLabel", EmitDefaultValue = false)]
        public StandardIdForLabel? StandardIdForLabel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Label" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Label() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Label" /> class.
        /// </summary>
        /// <param name="customTextForLabel">Custom text to print on the label. Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support &#x60;CustomTextForLabel&#x60;..</param>
        /// <param name="dimensions">dimensions (required).</param>
        /// <param name="fileContents">fileContents (required).</param>
        /// <param name="labelFormat">labelFormat.</param>
        /// <param name="standardIdForLabel">standardIdForLabel.</param>
        public Label(string customTextForLabel = default(string), LabelDimensions dimensions = default(LabelDimensions), FileContents fileContents = default(FileContents), LabelFormat? labelFormat = default(LabelFormat?), StandardIdForLabel? standardIdForLabel = default(StandardIdForLabel?))
        {
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new ArgumentNullException("dimensions is a required property for Label and cannot be null");
            }
            this.Dimensions = dimensions;
            // to ensure "fileContents" is required (not null)
            if (fileContents == null)
            {
                throw new ArgumentNullException("fileContents is a required property for Label and cannot be null");
            }
            this.FileContents = fileContents;
            this.CustomTextForLabel = customTextForLabel;
            this.LabelFormat = labelFormat;
            this.StandardIdForLabel = standardIdForLabel;
        }

        /// <summary>
        /// Custom text to print on the label. Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support &#x60;CustomTextForLabel&#x60;.
        /// </summary>
        /// <value>Custom text to print on the label. Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support &#x60;CustomTextForLabel&#x60;.</value>
        [DataMember(Name = "CustomTextForLabel", EmitDefaultValue = false)]
        public string CustomTextForLabel { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "Dimensions", IsRequired = true, EmitDefaultValue = true)]
        public LabelDimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets FileContents
        /// </summary>
        [DataMember(Name = "FileContents", IsRequired = true, EmitDefaultValue = true)]
        public FileContents FileContents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Label {\n");
            sb.Append("  CustomTextForLabel: ").Append(CustomTextForLabel).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  FileContents: ").Append(FileContents).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  StandardIdForLabel: ").Append(StandardIdForLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CustomTextForLabel (string) maxLength
            if (this.CustomTextForLabel != null && this.CustomTextForLabel.Length > 14)
            {
                yield return new ValidationResult("Invalid value for CustomTextForLabel, length must be less than 14.", new [] { "CustomTextForLabel" });
            }

            yield break;
        }
    }

}
