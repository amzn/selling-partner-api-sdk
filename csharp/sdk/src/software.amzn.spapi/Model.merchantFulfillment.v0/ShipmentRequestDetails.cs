/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// Shipment information required for requesting shipping service offers or for creating a shipment.
    /// </summary>
    [DataContract(Name = "ShipmentRequestDetails")]
    public partial class ShipmentRequestDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentRequestDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentRequestDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentRequestDetails" /> class.
        /// </summary>
        /// <param name="amazonOrderId">An Amazon-defined order identifier, in 3-7-7 format. (required).</param>
        /// <param name="sellerOrderId">A seller-defined order identifier..</param>
        /// <param name="itemList">The list of items you want to include in a shipment. (required).</param>
        /// <param name="shipFromAddress">shipFromAddress (required).</param>
        /// <param name="packageDimensions">packageDimensions (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="mustArriveByDate">Date-time formatted timestamp..</param>
        /// <param name="shipDate">Date-time formatted timestamp..</param>
        /// <param name="shippingServiceOptions">shippingServiceOptions (required).</param>
        /// <param name="labelCustomization">labelCustomization.</param>
        public ShipmentRequestDetails(string amazonOrderId = default(string), string sellerOrderId = default(string), List<Item> itemList = default(List<Item>), Address shipFromAddress = default(Address), PackageDimensions packageDimensions = default(PackageDimensions), Weight weight = default(Weight), DateTime mustArriveByDate = default(DateTime), DateTime shipDate = default(DateTime), ShippingServiceOptions shippingServiceOptions = default(ShippingServiceOptions), LabelCustomization labelCustomization = default(LabelCustomization))
        {
            // to ensure "amazonOrderId" is required (not null)
            if (amazonOrderId == null)
            {
                throw new ArgumentNullException("amazonOrderId is a required property for ShipmentRequestDetails and cannot be null");
            }
            this.AmazonOrderId = amazonOrderId;
            // to ensure "itemList" is required (not null)
            if (itemList == null)
            {
                throw new ArgumentNullException("itemList is a required property for ShipmentRequestDetails and cannot be null");
            }
            this.ItemList = itemList;
            // to ensure "shipFromAddress" is required (not null)
            if (shipFromAddress == null)
            {
                throw new ArgumentNullException("shipFromAddress is a required property for ShipmentRequestDetails and cannot be null");
            }
            this.ShipFromAddress = shipFromAddress;
            // to ensure "packageDimensions" is required (not null)
            if (packageDimensions == null)
            {
                throw new ArgumentNullException("packageDimensions is a required property for ShipmentRequestDetails and cannot be null");
            }
            this.PackageDimensions = packageDimensions;
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new ArgumentNullException("weight is a required property for ShipmentRequestDetails and cannot be null");
            }
            this.Weight = weight;
            // to ensure "shippingServiceOptions" is required (not null)
            if (shippingServiceOptions == null)
            {
                throw new ArgumentNullException("shippingServiceOptions is a required property for ShipmentRequestDetails and cannot be null");
            }
            this.ShippingServiceOptions = shippingServiceOptions;
            this.SellerOrderId = sellerOrderId;
            this.MustArriveByDate = mustArriveByDate;
            this.ShipDate = shipDate;
            this.LabelCustomization = labelCustomization;
        }

        /// <summary>
        /// An Amazon-defined order identifier, in 3-7-7 format.
        /// </summary>
        /// <value>An Amazon-defined order identifier, in 3-7-7 format.</value>
        [DataMember(Name = "AmazonOrderId", IsRequired = true, EmitDefaultValue = true)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// A seller-defined order identifier.
        /// </summary>
        /// <value>A seller-defined order identifier.</value>
        [DataMember(Name = "SellerOrderId", EmitDefaultValue = false)]
        public string SellerOrderId { get; set; }

        /// <summary>
        /// The list of items you want to include in a shipment.
        /// </summary>
        /// <value>The list of items you want to include in a shipment.</value>
        [DataMember(Name = "ItemList", IsRequired = true, EmitDefaultValue = true)]
        public List<Item> ItemList { get; set; }

        /// <summary>
        /// Gets or Sets ShipFromAddress
        /// </summary>
        [DataMember(Name = "ShipFromAddress", IsRequired = true, EmitDefaultValue = true)]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        /// Gets or Sets PackageDimensions
        /// </summary>
        [DataMember(Name = "PackageDimensions", IsRequired = true, EmitDefaultValue = true)]
        public PackageDimensions PackageDimensions { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "Weight", IsRequired = true, EmitDefaultValue = true)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Date-time formatted timestamp.
        /// </summary>
        /// <value>Date-time formatted timestamp.</value>
        [DataMember(Name = "MustArriveByDate", EmitDefaultValue = false)]
        public DateTime MustArriveByDate { get; set; }

        /// <summary>
        /// Date-time formatted timestamp.
        /// </summary>
        /// <value>Date-time formatted timestamp.</value>
        [DataMember(Name = "ShipDate", EmitDefaultValue = false)]
        public DateTime ShipDate { get; set; }

        /// <summary>
        /// Gets or Sets ShippingServiceOptions
        /// </summary>
        [DataMember(Name = "ShippingServiceOptions", IsRequired = true, EmitDefaultValue = true)]
        public ShippingServiceOptions ShippingServiceOptions { get; set; }

        /// <summary>
        /// Gets or Sets LabelCustomization
        /// </summary>
        [DataMember(Name = "LabelCustomization", EmitDefaultValue = false)]
        public LabelCustomization LabelCustomization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentRequestDetails {\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  SellerOrderId: ").Append(SellerOrderId).Append("\n");
            sb.Append("  ItemList: ").Append(ItemList).Append("\n");
            sb.Append("  ShipFromAddress: ").Append(ShipFromAddress).Append("\n");
            sb.Append("  PackageDimensions: ").Append(PackageDimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  MustArriveByDate: ").Append(MustArriveByDate).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  ShippingServiceOptions: ").Append(ShippingServiceOptions).Append("\n");
            sb.Append("  LabelCustomization: ").Append(LabelCustomization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SellerOrderId (string) maxLength
            if (this.SellerOrderId != null && this.SellerOrderId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for SellerOrderId, length must be less than 64.", new [] { "SellerOrderId" });
            }

            yield break;
        }
    }

}
