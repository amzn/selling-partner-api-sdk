/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// Specifies characteristics that apply to a seller input.
    /// </summary>
    [DataContract(Name = "SellerInputDefinition")]
    public partial class SellerInputDefinition : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets InputTarget
        /// </summary>
        [DataMember(Name = "InputTarget", EmitDefaultValue = false)]
        public InputTargetType? InputTarget { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SellerInputDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SellerInputDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SellerInputDefinition" /> class.
        /// </summary>
        /// <param name="isRequired">When true, the additional input field is required. (required).</param>
        /// <param name="dataType">The data type of the additional input field. (required).</param>
        /// <param name="constraints">List of constraints. (required).</param>
        /// <param name="inputDisplayText">The display text for the additional input field. (required).</param>
        /// <param name="inputTarget">inputTarget.</param>
        /// <param name="storedValue">storedValue (required).</param>
        /// <param name="restrictedSetValues">The set of fixed values in an additional seller input..</param>
        public SellerInputDefinition(bool isRequired = default(bool), string dataType = default(string), List<Constraint> constraints = default(List<Constraint>), string inputDisplayText = default(string), InputTargetType? inputTarget = default(InputTargetType?), AdditionalSellerInput storedValue = default(AdditionalSellerInput), List<string> restrictedSetValues = default(List<string>))
        {
            this.IsRequired = isRequired;
            // to ensure "dataType" is required (not null)
            if (dataType == null)
            {
                throw new ArgumentNullException("dataType is a required property for SellerInputDefinition and cannot be null");
            }
            this.DataType = dataType;
            // to ensure "constraints" is required (not null)
            if (constraints == null)
            {
                throw new ArgumentNullException("constraints is a required property for SellerInputDefinition and cannot be null");
            }
            this.Constraints = constraints;
            // to ensure "inputDisplayText" is required (not null)
            if (inputDisplayText == null)
            {
                throw new ArgumentNullException("inputDisplayText is a required property for SellerInputDefinition and cannot be null");
            }
            this.InputDisplayText = inputDisplayText;
            // to ensure "storedValue" is required (not null)
            if (storedValue == null)
            {
                throw new ArgumentNullException("storedValue is a required property for SellerInputDefinition and cannot be null");
            }
            this.StoredValue = storedValue;
            this.InputTarget = inputTarget;
            this.RestrictedSetValues = restrictedSetValues;
        }

        /// <summary>
        /// When true, the additional input field is required.
        /// </summary>
        /// <value>When true, the additional input field is required.</value>
        [DataMember(Name = "IsRequired", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// The data type of the additional input field.
        /// </summary>
        /// <value>The data type of the additional input field.</value>
        [DataMember(Name = "DataType", IsRequired = true, EmitDefaultValue = true)]
        public string DataType { get; set; }

        /// <summary>
        /// List of constraints.
        /// </summary>
        /// <value>List of constraints.</value>
        [DataMember(Name = "Constraints", IsRequired = true, EmitDefaultValue = true)]
        public List<Constraint> Constraints { get; set; }

        /// <summary>
        /// The display text for the additional input field.
        /// </summary>
        /// <value>The display text for the additional input field.</value>
        [DataMember(Name = "InputDisplayText", IsRequired = true, EmitDefaultValue = true)]
        public string InputDisplayText { get; set; }

        /// <summary>
        /// Gets or Sets StoredValue
        /// </summary>
        [DataMember(Name = "StoredValue", IsRequired = true, EmitDefaultValue = true)]
        public AdditionalSellerInput StoredValue { get; set; }

        /// <summary>
        /// The set of fixed values in an additional seller input.
        /// </summary>
        /// <value>The set of fixed values in an additional seller input.</value>
        [DataMember(Name = "RestrictedSetValues", EmitDefaultValue = false)]
        public List<string> RestrictedSetValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SellerInputDefinition {\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  InputDisplayText: ").Append(InputDisplayText).Append("\n");
            sb.Append("  InputTarget: ").Append(InputTarget).Append("\n");
            sb.Append("  StoredValue: ").Append(StoredValue).Append("\n");
            sb.Append("  RestrictedSetValues: ").Append(RestrictedSetValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
