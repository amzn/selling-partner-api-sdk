/*
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.merchantFulfillment.v0
{
    /// <summary>
    /// Rate item for shipping costs and adjustments.
    /// </summary>
    [DataContract(Name = "RateItem")]
    public partial class RateItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RateItemID
        /// </summary>
        [DataMember(Name = "RateItemID", IsRequired = true, EmitDefaultValue = true)]
        public RateItemID RateItemID { get; set; }

        /// <summary>
        /// Gets or Sets RateItemType
        /// </summary>
        [DataMember(Name = "RateItemType", EmitDefaultValue = false)]
        public RateItemType? RateItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RateItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RateItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RateItem" /> class.
        /// </summary>
        /// <param name="rateItemID">rateItemID (required).</param>
        /// <param name="rateItemType">rateItemType.</param>
        /// <param name="rateItemCharge">rateItemCharge.</param>
        /// <param name="rateItemNameLocalization">Localized name for the RateItem..</param>
        public RateItem(RateItemID rateItemID = default(RateItemID), RateItemType? rateItemType = default(RateItemType?), CurrencyAmount rateItemCharge = default(CurrencyAmount), string rateItemNameLocalization = default(string))
        {
            this.RateItemID = rateItemID;
            this.RateItemType = rateItemType;
            this.RateItemCharge = rateItemCharge;
            this.RateItemNameLocalization = rateItemNameLocalization;
        }

        /// <summary>
        /// Gets or Sets RateItemCharge
        /// </summary>
        [DataMember(Name = "RateItemCharge", EmitDefaultValue = false)]
        public CurrencyAmount RateItemCharge { get; set; }

        /// <summary>
        /// Localized name for the RateItem.
        /// </summary>
        /// <value>Localized name for the RateItem.</value>
        [DataMember(Name = "RateItemNameLocalization", EmitDefaultValue = false)]
        public string RateItemNameLocalization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RateItem {\n");
            sb.Append("  RateItemID: ").Append(RateItemID).Append("\n");
            sb.Append("  RateItemType: ").Append(RateItemType).Append("\n");
            sb.Append("  RateItemCharge: ").Append(RateItemCharge).Append("\n");
            sb.Append("  RateItemNameLocalization: ").Append(RateItemNameLocalization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
