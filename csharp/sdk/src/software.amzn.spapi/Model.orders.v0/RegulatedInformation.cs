/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.orders.v0
{
    /// <summary>
    /// The regulated information collected during purchase and used to verify the order.
    /// </summary>
    [DataContract(Name = "RegulatedInformation")]
    public partial class RegulatedInformation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegulatedInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegulatedInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegulatedInformation" /> class.
        /// </summary>
        /// <param name="fields">A list of regulated information fields as collected from the regulatory form. (required).</param>
        public RegulatedInformation(List<RegulatedInformationField> fields = default(List<RegulatedInformationField>))
        {
            // to ensure "fields" is required (not null)
            if (fields == null)
            {
                throw new ArgumentNullException("fields is a required property for RegulatedInformation and cannot be null");
            }
            this.Fields = fields;
        }

        /// <summary>
        /// A list of regulated information fields as collected from the regulatory form.
        /// </summary>
        /// <value>A list of regulated information fields as collected from the regulatory form.</value>
        [DataMember(Name = "Fields", IsRequired = true, EmitDefaultValue = true)]
        public List<RegulatedInformationField> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegulatedInformation {\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
