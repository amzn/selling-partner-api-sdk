/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.orders.v0
{
    /// <summary>
    /// Contains the business invoice tax information. Available only in the TR marketplace.
    /// </summary>
    [DataContract(Name = "BuyerTaxInformation")]
    public partial class BuyerTaxInformation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyerTaxInformation" /> class.
        /// </summary>
        /// <param name="buyerLegalCompanyName">Business buyer&#39;s company legal name..</param>
        /// <param name="buyerBusinessAddress">Business buyer&#39;s address..</param>
        /// <param name="buyerTaxRegistrationId">Business buyer&#39;s tax registration ID..</param>
        /// <param name="buyerTaxOffice">Business buyer&#39;s tax office..</param>
        public BuyerTaxInformation(string buyerLegalCompanyName = default(string), string buyerBusinessAddress = default(string), string buyerTaxRegistrationId = default(string), string buyerTaxOffice = default(string))
        {
            this.BuyerLegalCompanyName = buyerLegalCompanyName;
            this.BuyerBusinessAddress = buyerBusinessAddress;
            this.BuyerTaxRegistrationId = buyerTaxRegistrationId;
            this.BuyerTaxOffice = buyerTaxOffice;
        }

        /// <summary>
        /// Business buyer&#39;s company legal name.
        /// </summary>
        /// <value>Business buyer&#39;s company legal name.</value>
        [DataMember(Name = "BuyerLegalCompanyName", EmitDefaultValue = false)]
        public string BuyerLegalCompanyName { get; set; }

        /// <summary>
        /// Business buyer&#39;s address.
        /// </summary>
        /// <value>Business buyer&#39;s address.</value>
        [DataMember(Name = "BuyerBusinessAddress", EmitDefaultValue = false)]
        public string BuyerBusinessAddress { get; set; }

        /// <summary>
        /// Business buyer&#39;s tax registration ID.
        /// </summary>
        /// <value>Business buyer&#39;s tax registration ID.</value>
        [DataMember(Name = "BuyerTaxRegistrationId", EmitDefaultValue = false)]
        public string BuyerTaxRegistrationId { get; set; }

        /// <summary>
        /// Business buyer&#39;s tax office.
        /// </summary>
        /// <value>Business buyer&#39;s tax office.</value>
        [DataMember(Name = "BuyerTaxOffice", EmitDefaultValue = false)]
        public string BuyerTaxOffice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuyerTaxInformation {\n");
            sb.Append("  BuyerLegalCompanyName: ").Append(BuyerLegalCompanyName).Append("\n");
            sb.Append("  BuyerBusinessAddress: ").Append(BuyerBusinessAddress).Append("\n");
            sb.Append("  BuyerTaxRegistrationId: ").Append(BuyerTaxRegistrationId).Append("\n");
            sb.Append("  BuyerTaxOffice: ").Append(BuyerTaxOffice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
