/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.orders.v0
{
    /// <summary>
    /// Contains the instructions about the fulfillment, such as the location from where you want the order filled.
    /// </summary>
    [DataContract(Name = "FulfillmentInstruction")]
    public partial class FulfillmentInstruction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentInstruction" /> class.
        /// </summary>
        /// <param name="fulfillmentSupplySourceId">The &#x60;sourceId&#x60; of the location from where you want the order fulfilled..</param>
        public FulfillmentInstruction(string fulfillmentSupplySourceId = default(string))
        {
            this.FulfillmentSupplySourceId = fulfillmentSupplySourceId;
        }

        /// <summary>
        /// The &#x60;sourceId&#x60; of the location from where you want the order fulfilled.
        /// </summary>
        /// <value>The &#x60;sourceId&#x60; of the location from where you want the order fulfilled.</value>
        [DataMember(Name = "FulfillmentSupplySourceId", EmitDefaultValue = false)]
        public string FulfillmentSupplySourceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentInstruction {\n");
            sb.Append("  FulfillmentSupplySourceId: ").Append(FulfillmentSupplySourceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
