/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.orders.v0
{
    /// <summary>
    /// Substitution options for an order item.
    /// </summary>
    [DataContract(Name = "SubstitutionOption")]
    public partial class SubstitutionOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubstitutionOption" /> class.
        /// </summary>
        /// <param name="aSIN">The item&#39;s Amazon Standard Identification Number (ASIN)..</param>
        /// <param name="quantityOrdered">The number of items to be picked for this substitution option. .</param>
        /// <param name="sellerSKU">The item&#39;s seller stock keeping unit (SKU)..</param>
        /// <param name="title">The item&#39;s title..</param>
        /// <param name="measurement">measurement.</param>
        public SubstitutionOption(string aSIN = default(string), int quantityOrdered = default(int), string sellerSKU = default(string), string title = default(string), Measurement measurement = default(Measurement))
        {
            this.ASIN = aSIN;
            this.QuantityOrdered = quantityOrdered;
            this.SellerSKU = sellerSKU;
            this.Title = title;
            this.Measurement = measurement;
        }

        /// <summary>
        /// The item&#39;s Amazon Standard Identification Number (ASIN).
        /// </summary>
        /// <value>The item&#39;s Amazon Standard Identification Number (ASIN).</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }

        /// <summary>
        /// The number of items to be picked for this substitution option. 
        /// </summary>
        /// <value>The number of items to be picked for this substitution option. </value>
        [DataMember(Name = "QuantityOrdered", EmitDefaultValue = false)]
        public int QuantityOrdered { get; set; }

        /// <summary>
        /// The item&#39;s seller stock keeping unit (SKU).
        /// </summary>
        /// <value>The item&#39;s seller stock keeping unit (SKU).</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The item&#39;s title.
        /// </summary>
        /// <value>The item&#39;s title.</value>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Measurement
        /// </summary>
        [DataMember(Name = "Measurement", EmitDefaultValue = false)]
        public Measurement Measurement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubstitutionOption {\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  QuantityOrdered: ").Append(QuantityOrdered).Append("\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Measurement: ").Append(Measurement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
