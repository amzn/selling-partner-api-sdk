/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.orders.v0
{
    /// <summary>
    /// A single order item.
    /// </summary>
    [DataContract(Name = "ConfirmShipmentOrderItem")]
    public partial class ConfirmShipmentOrderItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfirmShipmentOrderItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConfirmShipmentOrderItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfirmShipmentOrderItem" /> class.
        /// </summary>
        /// <param name="orderItemId">The order item&#39;s unique identifier. (required).</param>
        /// <param name="quantity">The item&#39;s quantity. (required).</param>
        /// <param name="transparencyCodes">A list of order items..</param>
        public ConfirmShipmentOrderItem(string orderItemId = default(string), int quantity = default(int), List<string> transparencyCodes = default(List<string>))
        {
            // to ensure "orderItemId" is required (not null)
            if (orderItemId == null)
            {
                throw new ArgumentNullException("orderItemId is a required property for ConfirmShipmentOrderItem and cannot be null");
            }
            this.OrderItemId = orderItemId;
            this.Quantity = quantity;
            this.TransparencyCodes = transparencyCodes;
        }

        /// <summary>
        /// The order item&#39;s unique identifier.
        /// </summary>
        /// <value>The order item&#39;s unique identifier.</value>
        [DataMember(Name = "orderItemId", IsRequired = true, EmitDefaultValue = true)]
        public string OrderItemId { get; set; }

        /// <summary>
        /// The item&#39;s quantity.
        /// </summary>
        /// <value>The item&#39;s quantity.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// A list of order items.
        /// </summary>
        /// <value>A list of order items.</value>
        [DataMember(Name = "transparencyCodes", EmitDefaultValue = false)]
        public List<string> TransparencyCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfirmShipmentOrderItem {\n");
            sb.Append("  OrderItemId: ").Append(OrderItemId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TransparencyCodes: ").Append(TransparencyCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
