/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.orders.v0
{
    /// <summary>
    /// The shipping address for the order.
    /// </summary>
    [DataContract(Name = "OrderAddress")]
    public partial class OrderAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAddress" /> class.
        /// </summary>
        /// <param name="amazonOrderId">An Amazon-defined order identifier, in 3-7-7 format. (required).</param>
        /// <param name="buyerCompanyName">The company name of the contact buyer. For IBA orders, the buyer company must be Amazon entities..</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="deliveryPreferences">deliveryPreferences.</param>
        public OrderAddress(string amazonOrderId = default(string), string buyerCompanyName = default(string), Address shippingAddress = default(Address), DeliveryPreferences deliveryPreferences = default(DeliveryPreferences))
        {
            // to ensure "amazonOrderId" is required (not null)
            if (amazonOrderId == null)
            {
                throw new ArgumentNullException("amazonOrderId is a required property for OrderAddress and cannot be null");
            }
            this.AmazonOrderId = amazonOrderId;
            this.BuyerCompanyName = buyerCompanyName;
            this.ShippingAddress = shippingAddress;
            this.DeliveryPreferences = deliveryPreferences;
        }

        /// <summary>
        /// An Amazon-defined order identifier, in 3-7-7 format.
        /// </summary>
        /// <value>An Amazon-defined order identifier, in 3-7-7 format.</value>
        [DataMember(Name = "AmazonOrderId", IsRequired = true, EmitDefaultValue = true)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// The company name of the contact buyer. For IBA orders, the buyer company must be Amazon entities.
        /// </summary>
        /// <value>The company name of the contact buyer. For IBA orders, the buyer company must be Amazon entities.</value>
        [DataMember(Name = "BuyerCompanyName", EmitDefaultValue = false)]
        public string BuyerCompanyName { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "ShippingAddress", EmitDefaultValue = false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryPreferences
        /// </summary>
        [DataMember(Name = "DeliveryPreferences", EmitDefaultValue = false)]
        public DeliveryPreferences DeliveryPreferences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderAddress {\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  BuyerCompanyName: ").Append(BuyerCompanyName).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  DeliveryPreferences: ").Append(DeliveryPreferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
