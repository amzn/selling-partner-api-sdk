/*
 * Selling Partner API for Data Kiosk
 *
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2023-11-15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.datakiosk.v2023_11_15
{
    /// <summary>
    /// Detailed information about the query.
    /// </summary>
    [DataContract(Name = "Query")]
    public partial class Query : IValidatableObject
    {
        /// <summary>
        /// The processing status of the query.
        /// </summary>
        /// <value>The processing status of the query.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingStatusEnum
        {
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 1,

            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 2,

            /// <summary>
            /// Enum FATAL for value: FATAL
            /// </summary>
            [EnumMember(Value = "FATAL")]
            FATAL = 3,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 4,

            /// <summary>
            /// Enum INQUEUE for value: IN_QUEUE
            /// </summary>
            [EnumMember(Value = "IN_QUEUE")]
            INQUEUE = 5
        }


        /// <summary>
        /// The processing status of the query.
        /// </summary>
        /// <value>The processing status of the query.</value>
        [DataMember(Name = "processingStatus", IsRequired = true, EmitDefaultValue = true)]
        public ProcessingStatusEnum ProcessingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Query" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Query() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Query" /> class.
        /// </summary>
        /// <param name="queryId">The query identifier. This identifier is unique only in combination with a selling partner account ID. (required).</param>
        /// <param name="varQuery">The submitted query. (required).</param>
        /// <param name="createdTime">The date and time when the query was created, in ISO 8601 date time format. (required).</param>
        /// <param name="processingStatus">The processing status of the query. (required).</param>
        /// <param name="processingStartTime">The date and time when the query processing started, in ISO 8601 date time format..</param>
        /// <param name="processingEndTime">The date and time when the query processing completed, in ISO 8601 date time format..</param>
        /// <param name="dataDocumentId">The data document identifier. This identifier is only present when there is data available as a result of the query. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the data document&#39;s contents..</param>
        /// <param name="errorDocumentId">The error document identifier. This identifier is only present when an error occurs during query processing. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the error document&#39;s contents..</param>
        /// <param name="pagination">pagination.</param>
        public Query(string queryId = default(string), string varQuery = default(string), DateTime createdTime = default(DateTime), ProcessingStatusEnum processingStatus = default(ProcessingStatusEnum), DateTime processingStartTime = default(DateTime), DateTime processingEndTime = default(DateTime), string dataDocumentId = default(string), string errorDocumentId = default(string), QueryPagination pagination = default(QueryPagination))
        {
            // to ensure "queryId" is required (not null)
            if (queryId == null)
            {
                throw new ArgumentNullException("queryId is a required property for Query and cannot be null");
            }
            this.QueryId = queryId;
            // to ensure "varQuery" is required (not null)
            if (varQuery == null)
            {
                throw new ArgumentNullException("varQuery is a required property for Query and cannot be null");
            }
            this.VarQuery = varQuery;
            this.CreatedTime = createdTime;
            this.ProcessingStatus = processingStatus;
            this.ProcessingStartTime = processingStartTime;
            this.ProcessingEndTime = processingEndTime;
            this.DataDocumentId = dataDocumentId;
            this.ErrorDocumentId = errorDocumentId;
            this.Pagination = pagination;
        }

        /// <summary>
        /// The query identifier. This identifier is unique only in combination with a selling partner account ID.
        /// </summary>
        /// <value>The query identifier. This identifier is unique only in combination with a selling partner account ID.</value>
        [DataMember(Name = "queryId", IsRequired = true, EmitDefaultValue = true)]
        public string QueryId { get; set; }

        /// <summary>
        /// The submitted query.
        /// </summary>
        /// <value>The submitted query.</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string VarQuery { get; set; }

        /// <summary>
        /// The date and time when the query was created, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the query was created, in ISO 8601 date time format.</value>
        [DataMember(Name = "createdTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// The date and time when the query processing started, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the query processing started, in ISO 8601 date time format.</value>
        [DataMember(Name = "processingStartTime", EmitDefaultValue = false)]
        public DateTime ProcessingStartTime { get; set; }

        /// <summary>
        /// The date and time when the query processing completed, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the query processing completed, in ISO 8601 date time format.</value>
        [DataMember(Name = "processingEndTime", EmitDefaultValue = false)]
        public DateTime ProcessingEndTime { get; set; }

        /// <summary>
        /// The data document identifier. This identifier is only present when there is data available as a result of the query. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the data document&#39;s contents.
        /// </summary>
        /// <value>The data document identifier. This identifier is only present when there is data available as a result of the query. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the data document&#39;s contents.</value>
        [DataMember(Name = "dataDocumentId", EmitDefaultValue = false)]
        public string DataDocumentId { get; set; }

        /// <summary>
        /// The error document identifier. This identifier is only present when an error occurs during query processing. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the error document&#39;s contents.
        /// </summary>
        /// <value>The error document identifier. This identifier is only present when an error occurs during query processing. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the &#x60;getDocument&#x60; operation to get the information required to retrieve the error document&#39;s contents.</value>
        [DataMember(Name = "errorDocumentId", EmitDefaultValue = false)]
        public string ErrorDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name = "pagination", EmitDefaultValue = false)]
        public QueryPagination Pagination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Query {\n");
            sb.Append("  QueryId: ").Append(QueryId).Append("\n");
            sb.Append("  VarQuery: ").Append(VarQuery).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  ProcessingStatus: ").Append(ProcessingStatus).Append("\n");
            sb.Append("  ProcessingStartTime: ").Append(ProcessingStartTime).Append("\n");
            sb.Append("  ProcessingEndTime: ").Append(ProcessingEndTime).Append("\n");
            sb.Append("  DataDocumentId: ").Append(DataDocumentId).Append("\n");
            sb.Append("  ErrorDocumentId: ").Append(ErrorDocumentId).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
