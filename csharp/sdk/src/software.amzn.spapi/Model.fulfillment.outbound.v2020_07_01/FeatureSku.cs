/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// Information about an SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool.
    /// </summary>
    [DataContract(Name = "FeatureSku")]
    public partial class FeatureSku : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureSku" /> class.
        /// </summary>
        /// <param name="sellerSku">Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the seller&#39;s SellerId, which is included with every operation that you submit..</param>
        /// <param name="fnSku">The unique SKU used by Amazon&#39;s fulfillment network..</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="skuCount">The number of SKUs available for this service..</param>
        /// <param name="overlappingSkus">Other seller SKUs that are shared across the same inventory..</param>
        public FeatureSku(string sellerSku = default(string), string fnSku = default(string), string asin = default(string), decimal skuCount = default(decimal), List<string> overlappingSkus = default(List<string>))
        {
            this.SellerSku = sellerSku;
            this.FnSku = fnSku;
            this.Asin = asin;
            this.SkuCount = skuCount;
            this.OverlappingSkus = overlappingSkus;
        }

        /// <summary>
        /// Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.
        /// </summary>
        /// <value>Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</value>
        [DataMember(Name = "sellerSku", EmitDefaultValue = false)]
        public string SellerSku { get; set; }

        /// <summary>
        /// The unique SKU used by Amazon&#39;s fulfillment network.
        /// </summary>
        /// <value>The unique SKU used by Amazon&#39;s fulfillment network.</value>
        [DataMember(Name = "fnSku", EmitDefaultValue = false)]
        public string FnSku { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        /// The number of SKUs available for this service.
        /// </summary>
        /// <value>The number of SKUs available for this service.</value>
        [DataMember(Name = "skuCount", EmitDefaultValue = false)]
        public decimal SkuCount { get; set; }

        /// <summary>
        /// Other seller SKUs that are shared across the same inventory.
        /// </summary>
        /// <value>Other seller SKUs that are shared across the same inventory.</value>
        [DataMember(Name = "overlappingSkus", EmitDefaultValue = false)]
        public List<string> OverlappingSkus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeatureSku {\n");
            sb.Append("  SellerSku: ").Append(SellerSku).Append("\n");
            sb.Append("  FnSku: ").Append(FnSku).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  SkuCount: ").Append(SkuCount).Append("\n");
            sb.Append("  OverlappingSkus: ").Append(OverlappingSkus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
