/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// Item information for a shipment in a fulfillment order preview.
    /// </summary>
    [DataContract(Name = "FulfillmentPreviewItem")]
    public partial class FulfillmentPreviewItem : IValidatableObject
    {
        /// <summary>
        /// The method used to calculate the estimated shipping weight.
        /// </summary>
        /// <value>The method used to calculate the estimated shipping weight.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShippingWeightCalculationMethodEnum
        {
            /// <summary>
            /// Enum Package for value: Package
            /// </summary>
            [EnumMember(Value = "Package")]
            Package = 1,

            /// <summary>
            /// Enum Dimensional for value: Dimensional
            /// </summary>
            [EnumMember(Value = "Dimensional")]
            Dimensional = 2
        }


        /// <summary>
        /// The method used to calculate the estimated shipping weight.
        /// </summary>
        /// <value>The method used to calculate the estimated shipping weight.</value>
        [DataMember(Name = "shippingWeightCalculationMethod", EmitDefaultValue = false)]
        public ShippingWeightCalculationMethodEnum? ShippingWeightCalculationMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPreviewItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentPreviewItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPreviewItem" /> class.
        /// </summary>
        /// <param name="sellerSku">The seller SKU of the item. (required).</param>
        /// <param name="quantity">The item quantity. (required).</param>
        /// <param name="sellerFulfillmentOrderItemId">A fulfillment order item identifier that the seller created with a call to the &#x60;createFulfillmentOrder&#x60; operation. (required).</param>
        /// <param name="estimatedShippingWeight">estimatedShippingWeight.</param>
        /// <param name="shippingWeightCalculationMethod">The method used to calculate the estimated shipping weight..</param>
        public FulfillmentPreviewItem(string sellerSku = default(string), int quantity = default(int), string sellerFulfillmentOrderItemId = default(string), Weight estimatedShippingWeight = default(Weight), ShippingWeightCalculationMethodEnum? shippingWeightCalculationMethod = default(ShippingWeightCalculationMethodEnum?))
        {
            // to ensure "sellerSku" is required (not null)
            if (sellerSku == null)
            {
                throw new ArgumentNullException("sellerSku is a required property for FulfillmentPreviewItem and cannot be null");
            }
            this.SellerSku = sellerSku;
            this.Quantity = quantity;
            // to ensure "sellerFulfillmentOrderItemId" is required (not null)
            if (sellerFulfillmentOrderItemId == null)
            {
                throw new ArgumentNullException("sellerFulfillmentOrderItemId is a required property for FulfillmentPreviewItem and cannot be null");
            }
            this.SellerFulfillmentOrderItemId = sellerFulfillmentOrderItemId;
            this.EstimatedShippingWeight = estimatedShippingWeight;
            this.ShippingWeightCalculationMethod = shippingWeightCalculationMethod;
        }

        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name = "sellerSku", IsRequired = true, EmitDefaultValue = true)]
        public string SellerSku { get; set; }

        /// <summary>
        /// The item quantity.
        /// </summary>
        /// <value>The item quantity.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// A fulfillment order item identifier that the seller created with a call to the &#x60;createFulfillmentOrder&#x60; operation.
        /// </summary>
        /// <value>A fulfillment order item identifier that the seller created with a call to the &#x60;createFulfillmentOrder&#x60; operation.</value>
        [DataMember(Name = "sellerFulfillmentOrderItemId", IsRequired = true, EmitDefaultValue = true)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedShippingWeight
        /// </summary>
        [DataMember(Name = "estimatedShippingWeight", EmitDefaultValue = false)]
        public Weight EstimatedShippingWeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentPreviewItem {\n");
            sb.Append("  SellerSku: ").Append(SellerSku).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SellerFulfillmentOrderItemId: ").Append(SellerFulfillmentOrderItemId).Append("\n");
            sb.Append("  EstimatedShippingWeight: ").Append(EstimatedShippingWeight).Append("\n");
            sb.Append("  ShippingWeightCalculationMethod: ").Append(ShippingWeightCalculationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
