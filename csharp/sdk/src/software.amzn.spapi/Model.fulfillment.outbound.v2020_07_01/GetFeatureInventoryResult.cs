/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// The payload for the &#x60;getEligibileInventory&#x60; operation.
    /// </summary>
    [DataContract(Name = "GetFeatureInventoryResult")]
    public partial class GetFeatureInventoryResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFeatureInventoryResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetFeatureInventoryResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFeatureInventoryResult" /> class.
        /// </summary>
        /// <param name="marketplaceId">The requested marketplace. (required).</param>
        /// <param name="featureName">The name of the feature. (required).</param>
        /// <param name="nextToken">When present and not empty, pass this string token in the next request to return the next response page..</param>
        /// <param name="featureSkus">An array of SKUs eligible for this feature and the quantity available..</param>
        public GetFeatureInventoryResult(string marketplaceId = default(string), string featureName = default(string), string nextToken = default(string), List<FeatureSku> featureSkus = default(List<FeatureSku>))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for GetFeatureInventoryResult and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            // to ensure "featureName" is required (not null)
            if (featureName == null)
            {
                throw new ArgumentNullException("featureName is a required property for GetFeatureInventoryResult and cannot be null");
            }
            this.FeatureName = featureName;
            this.NextToken = nextToken;
            this.FeatureSkus = featureSkus;
        }

        /// <summary>
        /// The requested marketplace.
        /// </summary>
        /// <value>The requested marketplace.</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The name of the feature.
        /// </summary>
        /// <value>The name of the feature.</value>
        [DataMember(Name = "featureName", IsRequired = true, EmitDefaultValue = true)]
        public string FeatureName { get; set; }

        /// <summary>
        /// When present and not empty, pass this string token in the next request to return the next response page.
        /// </summary>
        /// <value>When present and not empty, pass this string token in the next request to return the next response page.</value>
        [DataMember(Name = "nextToken", EmitDefaultValue = false)]
        public string NextToken { get; set; }

        /// <summary>
        /// An array of SKUs eligible for this feature and the quantity available.
        /// </summary>
        /// <value>An array of SKUs eligible for this feature and the quantity available.</value>
        [DataMember(Name = "featureSkus", EmitDefaultValue = false)]
        public List<FeatureSku> FeatureSkus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetFeatureInventoryResult {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  NextToken: ").Append(NextToken).Append("\n");
            sb.Append("  FeatureSkus: ").Append(FeatureSkus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
