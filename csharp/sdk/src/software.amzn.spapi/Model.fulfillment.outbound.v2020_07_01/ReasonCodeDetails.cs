/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// A return reason code, a description, and an optional description translation.
    /// </summary>
    [DataContract(Name = "ReasonCodeDetails")]
    public partial class ReasonCodeDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReasonCodeDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReasonCodeDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReasonCodeDetails" /> class.
        /// </summary>
        /// <param name="returnReasonCode">A code that indicates a valid return reason. (required).</param>
        /// <param name="description">A human readable description of the return reason code. (required).</param>
        /// <param name="translatedDescription">A translation of the description. The translation is in the language specified in the Language request parameter..</param>
        public ReasonCodeDetails(string returnReasonCode = default(string), string description = default(string), string translatedDescription = default(string))
        {
            // to ensure "returnReasonCode" is required (not null)
            if (returnReasonCode == null)
            {
                throw new ArgumentNullException("returnReasonCode is a required property for ReasonCodeDetails and cannot be null");
            }
            this.ReturnReasonCode = returnReasonCode;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ReasonCodeDetails and cannot be null");
            }
            this.Description = description;
            this.TranslatedDescription = translatedDescription;
        }

        /// <summary>
        /// A code that indicates a valid return reason.
        /// </summary>
        /// <value>A code that indicates a valid return reason.</value>
        [DataMember(Name = "returnReasonCode", IsRequired = true, EmitDefaultValue = true)]
        public string ReturnReasonCode { get; set; }

        /// <summary>
        /// A human readable description of the return reason code.
        /// </summary>
        /// <value>A human readable description of the return reason code.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// A translation of the description. The translation is in the language specified in the Language request parameter.
        /// </summary>
        /// <value>A translation of the description. The translation is in the language specified in the Language request parameter.</value>
        [DataMember(Name = "translatedDescription", EmitDefaultValue = false)]
        public string TranslatedDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReasonCodeDetails {\n");
            sb.Append("  ReturnReasonCode: ").Append(ReturnReasonCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TranslatedDescription: ").Append(TranslatedDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
