/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// Return authorization information for items accepted for return.
    /// </summary>
    [DataContract(Name = "ReturnAuthorization")]
    public partial class ReturnAuthorization : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnAuthorization" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReturnAuthorization() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnAuthorization" /> class.
        /// </summary>
        /// <param name="returnAuthorizationId">An identifier for the return authorization. This identifier associates return items with the return authorization used to return them. (required).</param>
        /// <param name="fulfillmentCenterId">An identifier for the Amazon fulfillment center that the return items should be sent to. (required).</param>
        /// <param name="returnToAddress">returnToAddress (required).</param>
        /// <param name="amazonRmaId">The return merchandise authorization (RMA) that Amazon needs to process the return. (required).</param>
        /// <param name="rmaPageURL">A URL for a web page that contains the return authorization barcode and the mailing label. This does not include pre-paid shipping. (required).</param>
        public ReturnAuthorization(string returnAuthorizationId = default(string), string fulfillmentCenterId = default(string), Address returnToAddress = default(Address), string amazonRmaId = default(string), string rmaPageURL = default(string))
        {
            // to ensure "returnAuthorizationId" is required (not null)
            if (returnAuthorizationId == null)
            {
                throw new ArgumentNullException("returnAuthorizationId is a required property for ReturnAuthorization and cannot be null");
            }
            this.ReturnAuthorizationId = returnAuthorizationId;
            // to ensure "fulfillmentCenterId" is required (not null)
            if (fulfillmentCenterId == null)
            {
                throw new ArgumentNullException("fulfillmentCenterId is a required property for ReturnAuthorization and cannot be null");
            }
            this.FulfillmentCenterId = fulfillmentCenterId;
            // to ensure "returnToAddress" is required (not null)
            if (returnToAddress == null)
            {
                throw new ArgumentNullException("returnToAddress is a required property for ReturnAuthorization and cannot be null");
            }
            this.ReturnToAddress = returnToAddress;
            // to ensure "amazonRmaId" is required (not null)
            if (amazonRmaId == null)
            {
                throw new ArgumentNullException("amazonRmaId is a required property for ReturnAuthorization and cannot be null");
            }
            this.AmazonRmaId = amazonRmaId;
            // to ensure "rmaPageURL" is required (not null)
            if (rmaPageURL == null)
            {
                throw new ArgumentNullException("rmaPageURL is a required property for ReturnAuthorization and cannot be null");
            }
            this.RmaPageURL = rmaPageURL;
        }

        /// <summary>
        /// An identifier for the return authorization. This identifier associates return items with the return authorization used to return them.
        /// </summary>
        /// <value>An identifier for the return authorization. This identifier associates return items with the return authorization used to return them.</value>
        [DataMember(Name = "returnAuthorizationId", IsRequired = true, EmitDefaultValue = true)]
        public string ReturnAuthorizationId { get; set; }

        /// <summary>
        /// An identifier for the Amazon fulfillment center that the return items should be sent to.
        /// </summary>
        /// <value>An identifier for the Amazon fulfillment center that the return items should be sent to.</value>
        [DataMember(Name = "fulfillmentCenterId", IsRequired = true, EmitDefaultValue = true)]
        public string FulfillmentCenterId { get; set; }

        /// <summary>
        /// Gets or Sets ReturnToAddress
        /// </summary>
        [DataMember(Name = "returnToAddress", IsRequired = true, EmitDefaultValue = true)]
        public Address ReturnToAddress { get; set; }

        /// <summary>
        /// The return merchandise authorization (RMA) that Amazon needs to process the return.
        /// </summary>
        /// <value>The return merchandise authorization (RMA) that Amazon needs to process the return.</value>
        [DataMember(Name = "amazonRmaId", IsRequired = true, EmitDefaultValue = true)]
        public string AmazonRmaId { get; set; }

        /// <summary>
        /// A URL for a web page that contains the return authorization barcode and the mailing label. This does not include pre-paid shipping.
        /// </summary>
        /// <value>A URL for a web page that contains the return authorization barcode and the mailing label. This does not include pre-paid shipping.</value>
        [DataMember(Name = "rmaPageURL", IsRequired = true, EmitDefaultValue = true)]
        public string RmaPageURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnAuthorization {\n");
            sb.Append("  ReturnAuthorizationId: ").Append(ReturnAuthorizationId).Append("\n");
            sb.Append("  FulfillmentCenterId: ").Append(FulfillmentCenterId).Append("\n");
            sb.Append("  ReturnToAddress: ").Append(ReturnToAddress).Append("\n");
            sb.Append("  AmazonRmaId: ").Append(AmazonRmaId).Append("\n");
            sb.Append("  RmaPageURL: ").Append(RmaPageURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
