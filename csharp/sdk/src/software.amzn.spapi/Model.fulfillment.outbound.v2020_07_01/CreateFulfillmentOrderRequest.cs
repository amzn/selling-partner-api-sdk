/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// The request body schema for the &#x60;createFulfillmentOrder&#x60; operation.
    /// </summary>
    [DataContract(Name = "CreateFulfillmentOrderRequest")]
    public partial class CreateFulfillmentOrderRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ShippingSpeedCategory
        /// </summary>
        [DataMember(Name = "shippingSpeedCategory", IsRequired = true, EmitDefaultValue = true)]
        public ShippingSpeedCategory ShippingSpeedCategory { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentAction
        /// </summary>
        [DataMember(Name = "fulfillmentAction", EmitDefaultValue = false)]
        public FulfillmentAction? FulfillmentAction { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentPolicy
        /// </summary>
        [DataMember(Name = "fulfillmentPolicy", EmitDefaultValue = false)]
        public FulfillmentPolicy? FulfillmentPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFulfillmentOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateFulfillmentOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFulfillmentOrderRequest" /> class.
        /// </summary>
        /// <param name="marketplaceId">The marketplace the fulfillment order is placed against..</param>
        /// <param name="sellerFulfillmentOrderId">A fulfillment order identifier that the seller creates to track their fulfillment order. The &#x60;SellerFulfillmentOrderId&#x60; must be unique for each fulfillment order that a seller creates. If the seller&#39;s system already creates unique order identifiers, then these might be good values for them to use. (required).</param>
        /// <param name="displayableOrderId">A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of &#x60;DisplayableOrderId&#x60; should match the order identifier that the seller provides to the recipient. The seller can use the &#x60;SellerFulfillmentOrderId&#x60; for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.  The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length. Cannot contain two spaces in a row. Leading and trailing white space is removed. (required).</param>
        /// <param name="displayableOrderDate">Date timestamp (required).</param>
        /// <param name="displayableOrderComment">Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip. (required).</param>
        /// <param name="shippingSpeedCategory">shippingSpeedCategory (required).</param>
        /// <param name="deliveryWindow">deliveryWindow.</param>
        /// <param name="destinationAddress">destinationAddress (required).</param>
        /// <param name="deliveryPreferences">deliveryPreferences.</param>
        /// <param name="fulfillmentAction">fulfillmentAction.</param>
        /// <param name="fulfillmentPolicy">fulfillmentPolicy.</param>
        /// <param name="codSettings">codSettings.</param>
        /// <param name="shipFromCountryCode">The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format..</param>
        /// <param name="notificationEmails">A list of email addresses that the seller provides that are used by Amazon to send ship-complete notifications to recipients on behalf of the seller..</param>
        /// <param name="featureConstraints">A list of features and their fulfillment policies to apply to the order..</param>
        /// <param name="items">An array of item information for creating a fulfillment order. (required).</param>
        /// <param name="paymentInformation">An array of various payment attributes related to this fulfillment order..</param>
        public CreateFulfillmentOrderRequest(string marketplaceId = default(string), string sellerFulfillmentOrderId = default(string), string displayableOrderId = default(string), DateTime displayableOrderDate = default(DateTime), string displayableOrderComment = default(string), ShippingSpeedCategory shippingSpeedCategory = default(ShippingSpeedCategory), DeliveryWindow deliveryWindow = default(DeliveryWindow), Address destinationAddress = default(Address), DeliveryPreferences deliveryPreferences = default(DeliveryPreferences), FulfillmentAction? fulfillmentAction = default(FulfillmentAction?), FulfillmentPolicy? fulfillmentPolicy = default(FulfillmentPolicy?), CODSettings codSettings = default(CODSettings), string shipFromCountryCode = default(string), List<string> notificationEmails = default(List<string>), List<FeatureSettings> featureConstraints = default(List<FeatureSettings>), List<CreateFulfillmentOrderItem> items = default(List<CreateFulfillmentOrderItem>), List<PaymentInformation> paymentInformation = default(List<PaymentInformation>))
        {
            // to ensure "sellerFulfillmentOrderId" is required (not null)
            if (sellerFulfillmentOrderId == null)
            {
                throw new ArgumentNullException("sellerFulfillmentOrderId is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            this.SellerFulfillmentOrderId = sellerFulfillmentOrderId;
            // to ensure "displayableOrderId" is required (not null)
            if (displayableOrderId == null)
            {
                throw new ArgumentNullException("displayableOrderId is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            this.DisplayableOrderId = displayableOrderId;
            this.DisplayableOrderDate = displayableOrderDate;
            // to ensure "displayableOrderComment" is required (not null)
            if (displayableOrderComment == null)
            {
                throw new ArgumentNullException("displayableOrderComment is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            this.DisplayableOrderComment = displayableOrderComment;
            this.ShippingSpeedCategory = shippingSpeedCategory;
            // to ensure "destinationAddress" is required (not null)
            if (destinationAddress == null)
            {
                throw new ArgumentNullException("destinationAddress is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            this.DestinationAddress = destinationAddress;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for CreateFulfillmentOrderRequest and cannot be null");
            }
            this.Items = items;
            this.MarketplaceId = marketplaceId;
            this.DeliveryWindow = deliveryWindow;
            this.DeliveryPreferences = deliveryPreferences;
            this.FulfillmentAction = fulfillmentAction;
            this.FulfillmentPolicy = fulfillmentPolicy;
            this.CodSettings = codSettings;
            this.ShipFromCountryCode = shipFromCountryCode;
            this.NotificationEmails = notificationEmails;
            this.FeatureConstraints = featureConstraints;
            this.PaymentInformation = paymentInformation;
        }

        /// <summary>
        /// The marketplace the fulfillment order is placed against.
        /// </summary>
        /// <value>The marketplace the fulfillment order is placed against.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A fulfillment order identifier that the seller creates to track their fulfillment order. The &#x60;SellerFulfillmentOrderId&#x60; must be unique for each fulfillment order that a seller creates. If the seller&#39;s system already creates unique order identifiers, then these might be good values for them to use.
        /// </summary>
        /// <value>A fulfillment order identifier that the seller creates to track their fulfillment order. The &#x60;SellerFulfillmentOrderId&#x60; must be unique for each fulfillment order that a seller creates. If the seller&#39;s system already creates unique order identifiers, then these might be good values for them to use.</value>
        [DataMember(Name = "sellerFulfillmentOrderId", IsRequired = true, EmitDefaultValue = true)]
        public string SellerFulfillmentOrderId { get; set; }

        /// <summary>
        /// A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of &#x60;DisplayableOrderId&#x60; should match the order identifier that the seller provides to the recipient. The seller can use the &#x60;SellerFulfillmentOrderId&#x60; for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.  The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length. Cannot contain two spaces in a row. Leading and trailing white space is removed.
        /// </summary>
        /// <value>A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of &#x60;DisplayableOrderId&#x60; should match the order identifier that the seller provides to the recipient. The seller can use the &#x60;SellerFulfillmentOrderId&#x60; for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.  The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length. Cannot contain two spaces in a row. Leading and trailing white space is removed.</value>
        [DataMember(Name = "displayableOrderId", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayableOrderId { get; set; }

        /// <summary>
        /// Date timestamp
        /// </summary>
        /// <value>Date timestamp</value>
        [DataMember(Name = "displayableOrderDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DisplayableOrderDate { get; set; }

        /// <summary>
        /// Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.
        /// </summary>
        /// <value>Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.</value>
        [DataMember(Name = "displayableOrderComment", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayableOrderComment { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryWindow
        /// </summary>
        [DataMember(Name = "deliveryWindow", EmitDefaultValue = false)]
        public DeliveryWindow DeliveryWindow { get; set; }

        /// <summary>
        /// Gets or Sets DestinationAddress
        /// </summary>
        [DataMember(Name = "destinationAddress", IsRequired = true, EmitDefaultValue = true)]
        public Address DestinationAddress { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryPreferences
        /// </summary>
        [DataMember(Name = "deliveryPreferences", EmitDefaultValue = false)]
        public DeliveryPreferences DeliveryPreferences { get; set; }

        /// <summary>
        /// Gets or Sets CodSettings
        /// </summary>
        [DataMember(Name = "codSettings", EmitDefaultValue = false)]
        public CODSettings CodSettings { get; set; }

        /// <summary>
        /// The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.
        /// </summary>
        /// <value>The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.</value>
        [DataMember(Name = "shipFromCountryCode", EmitDefaultValue = false)]
        public string ShipFromCountryCode { get; set; }

        /// <summary>
        /// A list of email addresses that the seller provides that are used by Amazon to send ship-complete notifications to recipients on behalf of the seller.
        /// </summary>
        /// <value>A list of email addresses that the seller provides that are used by Amazon to send ship-complete notifications to recipients on behalf of the seller.</value>
        [DataMember(Name = "notificationEmails", EmitDefaultValue = false)]
        public List<string> NotificationEmails { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        /// <value>A list of features and their fulfillment policies to apply to the order.</value>
        [DataMember(Name = "featureConstraints", EmitDefaultValue = false)]
        public List<FeatureSettings> FeatureConstraints { get; set; }

        /// <summary>
        /// An array of item information for creating a fulfillment order.
        /// </summary>
        /// <value>An array of item information for creating a fulfillment order.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<CreateFulfillmentOrderItem> Items { get; set; }

        /// <summary>
        /// An array of various payment attributes related to this fulfillment order.
        /// </summary>
        /// <value>An array of various payment attributes related to this fulfillment order.</value>
        [DataMember(Name = "paymentInformation", EmitDefaultValue = false)]
        public List<PaymentInformation> PaymentInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFulfillmentOrderRequest {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  SellerFulfillmentOrderId: ").Append(SellerFulfillmentOrderId).Append("\n");
            sb.Append("  DisplayableOrderId: ").Append(DisplayableOrderId).Append("\n");
            sb.Append("  DisplayableOrderDate: ").Append(DisplayableOrderDate).Append("\n");
            sb.Append("  DisplayableOrderComment: ").Append(DisplayableOrderComment).Append("\n");
            sb.Append("  ShippingSpeedCategory: ").Append(ShippingSpeedCategory).Append("\n");
            sb.Append("  DeliveryWindow: ").Append(DeliveryWindow).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  DeliveryPreferences: ").Append(DeliveryPreferences).Append("\n");
            sb.Append("  FulfillmentAction: ").Append(FulfillmentAction).Append("\n");
            sb.Append("  FulfillmentPolicy: ").Append(FulfillmentPolicy).Append("\n");
            sb.Append("  CodSettings: ").Append(CodSettings).Append("\n");
            sb.Append("  ShipFromCountryCode: ").Append(ShipFromCountryCode).Append("\n");
            sb.Append("  NotificationEmails: ").Append(NotificationEmails).Append("\n");
            sb.Append("  FeatureConstraints: ").Append(FeatureConstraints).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PaymentInformation: ").Append(PaymentInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SellerFulfillmentOrderId (string) maxLength
            if (this.SellerFulfillmentOrderId != null && this.SellerFulfillmentOrderId.Length > 40)
            {
                yield return new ValidationResult("Invalid value for SellerFulfillmentOrderId, length must be less than 40.", new [] { "SellerFulfillmentOrderId" });
            }

            // DisplayableOrderId (string) maxLength
            if (this.DisplayableOrderId != null && this.DisplayableOrderId.Length > 40)
            {
                yield return new ValidationResult("Invalid value for DisplayableOrderId, length must be less than 40.", new [] { "DisplayableOrderId" });
            }

            // DisplayableOrderComment (string) maxLength
            if (this.DisplayableOrderComment != null && this.DisplayableOrderComment.Length > 750)
            {
                yield return new ValidationResult("Invalid value for DisplayableOrderComment, length must be less than 750.", new [] { "DisplayableOrderComment" });
            }

            yield break;
        }
    }

}
