/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// &#x60;FeatureSettings&#x60; allows users to apply fulfillment features to an order. To block an order from being shipped using Amazon Logistics (AMZL) and an AMZL tracking number, use &#x60;featureName&#x60; as &#x60;BLOCK_AMZL&#x60; and &#x60;featureFulfillmentPolicy&#x60; as &#x60;Required&#x60;. Blocking AMZL will incur an additional fee surcharge on your MCF orders and increase the risk of some of your orders being unfulfilled or delivered late if there are no alternative carriers available. Using &#x60;BLOCK_AMZL&#x60; in an order request will take precedence over your Seller Central account setting. To ship in non-Amazon branded packaging (blank boxes), use featureName &#x60;BLANK_BOX&#x60;.
    /// </summary>
    [DataContract(Name = "FeatureSettings")]
    public partial class FeatureSettings : IValidatableObject
    {
        /// <summary>
        /// Specifies the policy to use when fulfilling an order.
        /// </summary>
        /// <value>Specifies the policy to use when fulfilling an order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FeatureFulfillmentPolicyEnum
        {
            /// <summary>
            /// Enum Required for value: Required
            /// </summary>
            [EnumMember(Value = "Required")]
            Required = 1,

            /// <summary>
            /// Enum NotRequired for value: NotRequired
            /// </summary>
            [EnumMember(Value = "NotRequired")]
            NotRequired = 2
        }


        /// <summary>
        /// Specifies the policy to use when fulfilling an order.
        /// </summary>
        /// <value>Specifies the policy to use when fulfilling an order.</value>
        [DataMember(Name = "featureFulfillmentPolicy", EmitDefaultValue = false)]
        public FeatureFulfillmentPolicyEnum? FeatureFulfillmentPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureSettings" /> class.
        /// </summary>
        /// <param name="featureName">The name of the feature..</param>
        /// <param name="featureFulfillmentPolicy">Specifies the policy to use when fulfilling an order..</param>
        public FeatureSettings(string featureName = default(string), FeatureFulfillmentPolicyEnum? featureFulfillmentPolicy = default(FeatureFulfillmentPolicyEnum?))
        {
            this.FeatureName = featureName;
            this.FeatureFulfillmentPolicy = featureFulfillmentPolicy;
        }

        /// <summary>
        /// The name of the feature.
        /// </summary>
        /// <value>The name of the feature.</value>
        [DataMember(Name = "featureName", EmitDefaultValue = false)]
        public string FeatureName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeatureSettings {\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  FeatureFulfillmentPolicy: ").Append(FeatureFulfillmentPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
