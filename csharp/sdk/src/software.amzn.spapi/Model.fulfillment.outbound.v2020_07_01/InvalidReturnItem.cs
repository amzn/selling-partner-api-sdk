/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// An item that is invalid for return.
    /// </summary>
    [DataContract(Name = "InvalidReturnItem")]
    public partial class InvalidReturnItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidReturnItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvalidReturnItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidReturnItem" /> class.
        /// </summary>
        /// <param name="sellerReturnItemId">An identifier assigned by the seller to the return item. (required).</param>
        /// <param name="sellerFulfillmentOrderItemId">The identifier assigned to the item by the seller when the fulfillment order was created. (required).</param>
        /// <param name="invalidItemReason">invalidItemReason (required).</param>
        public InvalidReturnItem(string sellerReturnItemId = default(string), string sellerFulfillmentOrderItemId = default(string), InvalidItemReason invalidItemReason = default(InvalidItemReason))
        {
            // to ensure "sellerReturnItemId" is required (not null)
            if (sellerReturnItemId == null)
            {
                throw new ArgumentNullException("sellerReturnItemId is a required property for InvalidReturnItem and cannot be null");
            }
            this.SellerReturnItemId = sellerReturnItemId;
            // to ensure "sellerFulfillmentOrderItemId" is required (not null)
            if (sellerFulfillmentOrderItemId == null)
            {
                throw new ArgumentNullException("sellerFulfillmentOrderItemId is a required property for InvalidReturnItem and cannot be null");
            }
            this.SellerFulfillmentOrderItemId = sellerFulfillmentOrderItemId;
            // to ensure "invalidItemReason" is required (not null)
            if (invalidItemReason == null)
            {
                throw new ArgumentNullException("invalidItemReason is a required property for InvalidReturnItem and cannot be null");
            }
            this.InvalidItemReason = invalidItemReason;
        }

        /// <summary>
        /// An identifier assigned by the seller to the return item.
        /// </summary>
        /// <value>An identifier assigned by the seller to the return item.</value>
        [DataMember(Name = "sellerReturnItemId", IsRequired = true, EmitDefaultValue = true)]
        public string SellerReturnItemId { get; set; }

        /// <summary>
        /// The identifier assigned to the item by the seller when the fulfillment order was created.
        /// </summary>
        /// <value>The identifier assigned to the item by the seller when the fulfillment order was created.</value>
        [DataMember(Name = "sellerFulfillmentOrderItemId", IsRequired = true, EmitDefaultValue = true)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// Gets or Sets InvalidItemReason
        /// </summary>
        [DataMember(Name = "invalidItemReason", IsRequired = true, EmitDefaultValue = true)]
        public InvalidItemReason InvalidItemReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvalidReturnItem {\n");
            sb.Append("  SellerReturnItemId: ").Append(SellerReturnItemId).Append("\n");
            sb.Append("  SellerFulfillmentOrderItemId: ").Append(SellerFulfillmentOrderItemId).Append("\n");
            sb.Append("  InvalidItemReason: ").Append(InvalidItemReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
