/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// Fee type and cost.
    /// </summary>
    [DataContract(Name = "Fee")]
    public partial class Fee : IValidatableObject
    {
        /// <summary>
        /// The type of fee.
        /// </summary>
        /// <value>The type of fee.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum FBAPerUnitFulfillmentFee for value: FBAPerUnitFulfillmentFee
            /// </summary>
            [EnumMember(Value = "FBAPerUnitFulfillmentFee")]
            FBAPerUnitFulfillmentFee = 1,

            /// <summary>
            /// Enum FBAPerOrderFulfillmentFee for value: FBAPerOrderFulfillmentFee
            /// </summary>
            [EnumMember(Value = "FBAPerOrderFulfillmentFee")]
            FBAPerOrderFulfillmentFee = 2,

            /// <summary>
            /// Enum FBATransportationFee for value: FBATransportationFee
            /// </summary>
            [EnumMember(Value = "FBATransportationFee")]
            FBATransportationFee = 3,

            /// <summary>
            /// Enum FBAFulfillmentCODFee for value: FBAFulfillmentCODFee
            /// </summary>
            [EnumMember(Value = "FBAFulfillmentCODFee")]
            FBAFulfillmentCODFee = 4
        }


        /// <summary>
        /// The type of fee.
        /// </summary>
        /// <value>The type of fee.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public NameEnum Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        /// <param name="name">The type of fee. (required).</param>
        /// <param name="amount">amount (required).</param>
        public Fee(NameEnum name = default(NameEnum), Money amount = default(Money))
        {
            this.Name = name;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for Fee and cannot be null");
            }
            this.Amount = amount;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public Money Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Fee {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
