/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// Tracking details of package
    /// </summary>
    [DataContract(Name = "PackageTrackingDetails")]
    public partial class PackageTrackingDetails : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CurrentStatus
        /// </summary>
        [DataMember(Name = "currentStatus", EmitDefaultValue = false)]
        public CurrentStatus? CurrentStatus { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalLocationInfo
        /// </summary>
        [DataMember(Name = "additionalLocationInfo", EmitDefaultValue = false)]
        public AdditionalLocationInfo? AdditionalLocationInfo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageTrackingDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PackageTrackingDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageTrackingDetails" /> class.
        /// </summary>
        /// <param name="packageNumber">The package identifier. (required).</param>
        /// <param name="trackingNumber">The tracking number for the package..</param>
        /// <param name="customerTrackingLink">Link on swiship.com that allows customers to track the package..</param>
        /// <param name="carrierCode">The name of the carrier..</param>
        /// <param name="carrierPhoneNumber">The phone number of the carrier..</param>
        /// <param name="carrierURL">The URL of the carrier&#39;s website..</param>
        /// <param name="shipDate">Date timestamp.</param>
        /// <param name="estimatedArrivalDate">Date timestamp.</param>
        /// <param name="shipToAddress">shipToAddress.</param>
        /// <param name="currentStatus">currentStatus.</param>
        /// <param name="currentStatusDescription">Description corresponding to the CurrentStatus value..</param>
        /// <param name="deliveryWindow">deliveryWindow.</param>
        /// <param name="signedForBy">The name of the person who signed for the package..</param>
        /// <param name="additionalLocationInfo">additionalLocationInfo.</param>
        /// <param name="trackingEvents">An array of tracking event information..</param>
        public PackageTrackingDetails(int packageNumber = default(int), string trackingNumber = default(string), string customerTrackingLink = default(string), string carrierCode = default(string), string carrierPhoneNumber = default(string), string carrierURL = default(string), DateTime shipDate = default(DateTime), DateTime estimatedArrivalDate = default(DateTime), TrackingAddress shipToAddress = default(TrackingAddress), CurrentStatus? currentStatus = default(CurrentStatus?), string currentStatusDescription = default(string), DateRange deliveryWindow = default(DateRange), string signedForBy = default(string), AdditionalLocationInfo? additionalLocationInfo = default(AdditionalLocationInfo?), List<TrackingEvent> trackingEvents = default(List<TrackingEvent>))
        {
            this.PackageNumber = packageNumber;
            this.TrackingNumber = trackingNumber;
            this.CustomerTrackingLink = customerTrackingLink;
            this.CarrierCode = carrierCode;
            this.CarrierPhoneNumber = carrierPhoneNumber;
            this.CarrierURL = carrierURL;
            this.ShipDate = shipDate;
            this.EstimatedArrivalDate = estimatedArrivalDate;
            this.ShipToAddress = shipToAddress;
            this.CurrentStatus = currentStatus;
            this.CurrentStatusDescription = currentStatusDescription;
            this.DeliveryWindow = deliveryWindow;
            this.SignedForBy = signedForBy;
            this.AdditionalLocationInfo = additionalLocationInfo;
            this.TrackingEvents = trackingEvents;
        }

        /// <summary>
        /// The package identifier.
        /// </summary>
        /// <value>The package identifier.</value>
        [DataMember(Name = "packageNumber", IsRequired = true, EmitDefaultValue = true)]
        public int PackageNumber { get; set; }

        /// <summary>
        /// The tracking number for the package.
        /// </summary>
        /// <value>The tracking number for the package.</value>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Link on swiship.com that allows customers to track the package.
        /// </summary>
        /// <value>Link on swiship.com that allows customers to track the package.</value>
        [DataMember(Name = "customerTrackingLink", EmitDefaultValue = false)]
        public string CustomerTrackingLink { get; set; }

        /// <summary>
        /// The name of the carrier.
        /// </summary>
        /// <value>The name of the carrier.</value>
        [DataMember(Name = "carrierCode", EmitDefaultValue = false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The phone number of the carrier.
        /// </summary>
        /// <value>The phone number of the carrier.</value>
        [DataMember(Name = "carrierPhoneNumber", EmitDefaultValue = false)]
        public string CarrierPhoneNumber { get; set; }

        /// <summary>
        /// The URL of the carrier&#39;s website.
        /// </summary>
        /// <value>The URL of the carrier&#39;s website.</value>
        [DataMember(Name = "carrierURL", EmitDefaultValue = false)]
        public string CarrierURL { get; set; }

        /// <summary>
        /// Date timestamp
        /// </summary>
        /// <value>Date timestamp</value>
        [DataMember(Name = "shipDate", EmitDefaultValue = false)]
        public DateTime ShipDate { get; set; }

        /// <summary>
        /// Date timestamp
        /// </summary>
        /// <value>Date timestamp</value>
        [DataMember(Name = "estimatedArrivalDate", EmitDefaultValue = false)]
        public DateTime EstimatedArrivalDate { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddress
        /// </summary>
        [DataMember(Name = "shipToAddress", EmitDefaultValue = false)]
        public TrackingAddress ShipToAddress { get; set; }

        /// <summary>
        /// Description corresponding to the CurrentStatus value.
        /// </summary>
        /// <value>Description corresponding to the CurrentStatus value.</value>
        [DataMember(Name = "currentStatusDescription", EmitDefaultValue = false)]
        public string CurrentStatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryWindow
        /// </summary>
        [DataMember(Name = "deliveryWindow", EmitDefaultValue = false)]
        public DateRange DeliveryWindow { get; set; }

        /// <summary>
        /// The name of the person who signed for the package.
        /// </summary>
        /// <value>The name of the person who signed for the package.</value>
        [DataMember(Name = "signedForBy", EmitDefaultValue = false)]
        public string SignedForBy { get; set; }

        /// <summary>
        /// An array of tracking event information.
        /// </summary>
        /// <value>An array of tracking event information.</value>
        [DataMember(Name = "trackingEvents", EmitDefaultValue = false)]
        public List<TrackingEvent> TrackingEvents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageTrackingDetails {\n");
            sb.Append("  PackageNumber: ").Append(PackageNumber).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  CustomerTrackingLink: ").Append(CustomerTrackingLink).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  CarrierPhoneNumber: ").Append(CarrierPhoneNumber).Append("\n");
            sb.Append("  CarrierURL: ").Append(CarrierURL).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  EstimatedArrivalDate: ").Append(EstimatedArrivalDate).Append("\n");
            sb.Append("  ShipToAddress: ").Append(ShipToAddress).Append("\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  CurrentStatusDescription: ").Append(CurrentStatusDescription).Append("\n");
            sb.Append("  DeliveryWindow: ").Append(DeliveryWindow).Append("\n");
            sb.Append("  SignedForBy: ").Append(SignedForBy).Append("\n");
            sb.Append("  AdditionalLocationInfo: ").Append(AdditionalLocationInfo).Append("\n");
            sb.Append("  TrackingEvents: ").Append(TrackingEvents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
