/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// Delivery and item information for a shipment in a fulfillment order.
    /// </summary>
    [DataContract(Name = "FulfillmentShipment")]
    public partial class FulfillmentShipment : IValidatableObject
    {
        /// <summary>
        /// The current status of the shipment.
        /// </summary>
        /// <value>The current status of the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentShipmentStatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum SHIPPED for value: SHIPPED
            /// </summary>
            [EnumMember(Value = "SHIPPED")]
            SHIPPED = 2,

            /// <summary>
            /// Enum CANCELLEDBYFULFILLER for value: CANCELLED_BY_FULFILLER
            /// </summary>
            [EnumMember(Value = "CANCELLED_BY_FULFILLER")]
            CANCELLEDBYFULFILLER = 3,

            /// <summary>
            /// Enum CANCELLEDBYSELLER for value: CANCELLED_BY_SELLER
            /// </summary>
            [EnumMember(Value = "CANCELLED_BY_SELLER")]
            CANCELLEDBYSELLER = 4
        }


        /// <summary>
        /// The current status of the shipment.
        /// </summary>
        /// <value>The current status of the shipment.</value>
        [DataMember(Name = "fulfillmentShipmentStatus", IsRequired = true, EmitDefaultValue = true)]
        public FulfillmentShipmentStatusEnum FulfillmentShipmentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentShipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipment" /> class.
        /// </summary>
        /// <param name="amazonShipmentId">A shipment identifier assigned by Amazon. (required).</param>
        /// <param name="fulfillmentCenterId">An identifier for the fulfillment center that the shipment will be sent from. (required).</param>
        /// <param name="fulfillmentShipmentStatus">The current status of the shipment. (required).</param>
        /// <param name="shippingDate">Date timestamp.</param>
        /// <param name="estimatedArrivalDate">Date timestamp.</param>
        /// <param name="shippingNotes">Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren&#39;t available..</param>
        /// <param name="fulfillmentShipmentItem">An array of fulfillment shipment item information. (required).</param>
        /// <param name="fulfillmentShipmentPackage">An array of fulfillment shipment package information..</param>
        public FulfillmentShipment(string amazonShipmentId = default(string), string fulfillmentCenterId = default(string), FulfillmentShipmentStatusEnum fulfillmentShipmentStatus = default(FulfillmentShipmentStatusEnum), DateTime shippingDate = default(DateTime), DateTime estimatedArrivalDate = default(DateTime), List<string> shippingNotes = default(List<string>), List<FulfillmentShipmentItem> fulfillmentShipmentItem = default(List<FulfillmentShipmentItem>), List<FulfillmentShipmentPackage> fulfillmentShipmentPackage = default(List<FulfillmentShipmentPackage>))
        {
            // to ensure "amazonShipmentId" is required (not null)
            if (amazonShipmentId == null)
            {
                throw new ArgumentNullException("amazonShipmentId is a required property for FulfillmentShipment and cannot be null");
            }
            this.AmazonShipmentId = amazonShipmentId;
            // to ensure "fulfillmentCenterId" is required (not null)
            if (fulfillmentCenterId == null)
            {
                throw new ArgumentNullException("fulfillmentCenterId is a required property for FulfillmentShipment and cannot be null");
            }
            this.FulfillmentCenterId = fulfillmentCenterId;
            this.FulfillmentShipmentStatus = fulfillmentShipmentStatus;
            // to ensure "fulfillmentShipmentItem" is required (not null)
            if (fulfillmentShipmentItem == null)
            {
                throw new ArgumentNullException("fulfillmentShipmentItem is a required property for FulfillmentShipment and cannot be null");
            }
            this.FulfillmentShipmentItem = fulfillmentShipmentItem;
            this.ShippingDate = shippingDate;
            this.EstimatedArrivalDate = estimatedArrivalDate;
            this.ShippingNotes = shippingNotes;
            this.FulfillmentShipmentPackage = fulfillmentShipmentPackage;
        }

        /// <summary>
        /// A shipment identifier assigned by Amazon.
        /// </summary>
        /// <value>A shipment identifier assigned by Amazon.</value>
        [DataMember(Name = "amazonShipmentId", IsRequired = true, EmitDefaultValue = true)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        /// An identifier for the fulfillment center that the shipment will be sent from.
        /// </summary>
        /// <value>An identifier for the fulfillment center that the shipment will be sent from.</value>
        [DataMember(Name = "fulfillmentCenterId", IsRequired = true, EmitDefaultValue = true)]
        public string FulfillmentCenterId { get; set; }

        /// <summary>
        /// Date timestamp
        /// </summary>
        /// <value>Date timestamp</value>
        [DataMember(Name = "shippingDate", EmitDefaultValue = false)]
        public DateTime ShippingDate { get; set; }

        /// <summary>
        /// Date timestamp
        /// </summary>
        /// <value>Date timestamp</value>
        [DataMember(Name = "estimatedArrivalDate", EmitDefaultValue = false)]
        public DateTime EstimatedArrivalDate { get; set; }

        /// <summary>
        /// Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren&#39;t available.
        /// </summary>
        /// <value>Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren&#39;t available.</value>
        [DataMember(Name = "shippingNotes", EmitDefaultValue = false)]
        public List<string> ShippingNotes { get; set; }

        /// <summary>
        /// An array of fulfillment shipment item information.
        /// </summary>
        /// <value>An array of fulfillment shipment item information.</value>
        [DataMember(Name = "fulfillmentShipmentItem", IsRequired = true, EmitDefaultValue = true)]
        public List<FulfillmentShipmentItem> FulfillmentShipmentItem { get; set; }

        /// <summary>
        /// An array of fulfillment shipment package information.
        /// </summary>
        /// <value>An array of fulfillment shipment package information.</value>
        [DataMember(Name = "fulfillmentShipmentPackage", EmitDefaultValue = false)]
        public List<FulfillmentShipmentPackage> FulfillmentShipmentPackage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentShipment {\n");
            sb.Append("  AmazonShipmentId: ").Append(AmazonShipmentId).Append("\n");
            sb.Append("  FulfillmentCenterId: ").Append(FulfillmentCenterId).Append("\n");
            sb.Append("  FulfillmentShipmentStatus: ").Append(FulfillmentShipmentStatus).Append("\n");
            sb.Append("  ShippingDate: ").Append(ShippingDate).Append("\n");
            sb.Append("  EstimatedArrivalDate: ").Append(EstimatedArrivalDate).Append("\n");
            sb.Append("  ShippingNotes: ").Append(ShippingNotes).Append("\n");
            sb.Append("  FulfillmentShipmentItem: ").Append(FulfillmentShipmentItem).Append("\n");
            sb.Append("  FulfillmentShipmentPackage: ").Append(FulfillmentShipmentPackage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
