/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// Delivery information for a scheduled delivery. This is only available in the JP marketplace.
    /// </summary>
    [DataContract(Name = "ScheduledDeliveryInfo")]
    public partial class ScheduledDeliveryInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledDeliveryInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScheduledDeliveryInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledDeliveryInfo" /> class.
        /// </summary>
        /// <param name="deliveryTimeZone">The time zone of the destination address for the fulfillment order preview. Must be an IANA time zone name. Example: Asia/Tokyo. (required).</param>
        /// <param name="deliveryWindows">An array of delivery windows. (required).</param>
        public ScheduledDeliveryInfo(string deliveryTimeZone = default(string), List<DeliveryWindow> deliveryWindows = default(List<DeliveryWindow>))
        {
            // to ensure "deliveryTimeZone" is required (not null)
            if (deliveryTimeZone == null)
            {
                throw new ArgumentNullException("deliveryTimeZone is a required property for ScheduledDeliveryInfo and cannot be null");
            }
            this.DeliveryTimeZone = deliveryTimeZone;
            // to ensure "deliveryWindows" is required (not null)
            if (deliveryWindows == null)
            {
                throw new ArgumentNullException("deliveryWindows is a required property for ScheduledDeliveryInfo and cannot be null");
            }
            this.DeliveryWindows = deliveryWindows;
        }

        /// <summary>
        /// The time zone of the destination address for the fulfillment order preview. Must be an IANA time zone name. Example: Asia/Tokyo.
        /// </summary>
        /// <value>The time zone of the destination address for the fulfillment order preview. Must be an IANA time zone name. Example: Asia/Tokyo.</value>
        [DataMember(Name = "deliveryTimeZone", IsRequired = true, EmitDefaultValue = true)]
        public string DeliveryTimeZone { get; set; }

        /// <summary>
        /// An array of delivery windows.
        /// </summary>
        /// <value>An array of delivery windows.</value>
        [DataMember(Name = "deliveryWindows", IsRequired = true, EmitDefaultValue = true)]
        public List<DeliveryWindow> DeliveryWindows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduledDeliveryInfo {\n");
            sb.Append("  DeliveryTimeZone: ").Append(DeliveryTimeZone).Append("\n");
            sb.Append("  DeliveryWindows: ").Append(DeliveryWindows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
