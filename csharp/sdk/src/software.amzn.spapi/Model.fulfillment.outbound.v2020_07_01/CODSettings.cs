/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// The COD (Cash On Delivery) charges that you associate with a COD fulfillment order.
    /// </summary>
    [DataContract(Name = "CODSettings")]
    public partial class CODSettings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CODSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CODSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CODSettings" /> class.
        /// </summary>
        /// <param name="isCodRequired">When true, this fulfillment order requires a COD (Cash On Delivery) payment. (required).</param>
        /// <param name="codCharge">codCharge.</param>
        /// <param name="codChargeTax">codChargeTax.</param>
        /// <param name="shippingCharge">shippingCharge.</param>
        /// <param name="shippingChargeTax">shippingChargeTax.</param>
        public CODSettings(bool isCodRequired = default(bool), Money codCharge = default(Money), Money codChargeTax = default(Money), Money shippingCharge = default(Money), Money shippingChargeTax = default(Money))
        {
            this.IsCodRequired = isCodRequired;
            this.CodCharge = codCharge;
            this.CodChargeTax = codChargeTax;
            this.ShippingCharge = shippingCharge;
            this.ShippingChargeTax = shippingChargeTax;
        }

        /// <summary>
        /// When true, this fulfillment order requires a COD (Cash On Delivery) payment.
        /// </summary>
        /// <value>When true, this fulfillment order requires a COD (Cash On Delivery) payment.</value>
        [DataMember(Name = "isCodRequired", IsRequired = true, EmitDefaultValue = true)]
        public bool IsCodRequired { get; set; }

        /// <summary>
        /// Gets or Sets CodCharge
        /// </summary>
        [DataMember(Name = "codCharge", EmitDefaultValue = false)]
        public Money CodCharge { get; set; }

        /// <summary>
        /// Gets or Sets CodChargeTax
        /// </summary>
        [DataMember(Name = "codChargeTax", EmitDefaultValue = false)]
        public Money CodChargeTax { get; set; }

        /// <summary>
        /// Gets or Sets ShippingCharge
        /// </summary>
        [DataMember(Name = "shippingCharge", EmitDefaultValue = false)]
        public Money ShippingCharge { get; set; }

        /// <summary>
        /// Gets or Sets ShippingChargeTax
        /// </summary>
        [DataMember(Name = "shippingChargeTax", EmitDefaultValue = false)]
        public Money ShippingChargeTax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CODSettings {\n");
            sb.Append("  IsCodRequired: ").Append(IsCodRequired).Append("\n");
            sb.Append("  CodCharge: ").Append(CodCharge).Append("\n");
            sb.Append("  CodChargeTax: ").Append(CodChargeTax).Append("\n");
            sb.Append("  ShippingCharge: ").Append(ShippingCharge).Append("\n");
            sb.Append("  ShippingChargeTax: ").Append(ShippingChargeTax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
