/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// The request body schema for the &#x60;getFulfillmentPreview&#x60; operation.
    /// </summary>
    [DataContract(Name = "GetFulfillmentPreviewRequest")]
    public partial class GetFulfillmentPreviewRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFulfillmentPreviewRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetFulfillmentPreviewRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFulfillmentPreviewRequest" /> class.
        /// </summary>
        /// <param name="marketplaceId">The marketplace the fulfillment order is placed against..</param>
        /// <param name="address">address (required).</param>
        /// <param name="items">An array of fulfillment preview item information. (required).</param>
        /// <param name="shippingSpeedCategories">ShippingSpeedCategory List.</param>
        /// <param name="includeCODFulfillmentPreview">When true, returns all fulfillment order previews both for COD and not for COD. Otherwise, returns only fulfillment order previews that are not for COD..</param>
        /// <param name="includeDeliveryWindows">When true, returns the &#x60;ScheduledDeliveryInfo&#x60; response object, which contains the available delivery windows for a Scheduled Delivery. The &#x60;ScheduledDeliveryInfo&#x60; response object can only be returned for fulfillment order previews with &#x60;ShippingSpeedCategories&#x60; &#x3D; &#x60;ScheduledDelivery&#x60;..</param>
        /// <param name="featureConstraints">A list of features and their fulfillment policies to apply to the order..</param>
        public GetFulfillmentPreviewRequest(string marketplaceId = default(string), Address address = default(Address), List<GetFulfillmentPreviewItem> items = default(List<GetFulfillmentPreviewItem>), List<ShippingSpeedCategory> shippingSpeedCategories = default(List<ShippingSpeedCategory>), bool includeCODFulfillmentPreview = default(bool), bool includeDeliveryWindows = default(bool), List<FeatureSettings> featureConstraints = default(List<FeatureSettings>))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for GetFulfillmentPreviewRequest and cannot be null");
            }
            this.Address = address;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for GetFulfillmentPreviewRequest and cannot be null");
            }
            this.Items = items;
            this.MarketplaceId = marketplaceId;
            this.ShippingSpeedCategories = shippingSpeedCategories;
            this.IncludeCODFulfillmentPreview = includeCODFulfillmentPreview;
            this.IncludeDeliveryWindows = includeDeliveryWindows;
            this.FeatureConstraints = featureConstraints;
        }

        /// <summary>
        /// The marketplace the fulfillment order is placed against.
        /// </summary>
        /// <value>The marketplace the fulfillment order is placed against.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public Address Address { get; set; }

        /// <summary>
        /// An array of fulfillment preview item information.
        /// </summary>
        /// <value>An array of fulfillment preview item information.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<GetFulfillmentPreviewItem> Items { get; set; }

        /// <summary>
        /// ShippingSpeedCategory List
        /// </summary>
        /// <value>ShippingSpeedCategory List</value>
        [DataMember(Name = "shippingSpeedCategories", EmitDefaultValue = false)]
        public List<ShippingSpeedCategory> ShippingSpeedCategories { get; set; }

        /// <summary>
        /// When true, returns all fulfillment order previews both for COD and not for COD. Otherwise, returns only fulfillment order previews that are not for COD.
        /// </summary>
        /// <value>When true, returns all fulfillment order previews both for COD and not for COD. Otherwise, returns only fulfillment order previews that are not for COD.</value>
        [DataMember(Name = "includeCODFulfillmentPreview", EmitDefaultValue = true)]
        public bool IncludeCODFulfillmentPreview { get; set; }

        /// <summary>
        /// When true, returns the &#x60;ScheduledDeliveryInfo&#x60; response object, which contains the available delivery windows for a Scheduled Delivery. The &#x60;ScheduledDeliveryInfo&#x60; response object can only be returned for fulfillment order previews with &#x60;ShippingSpeedCategories&#x60; &#x3D; &#x60;ScheduledDelivery&#x60;.
        /// </summary>
        /// <value>When true, returns the &#x60;ScheduledDeliveryInfo&#x60; response object, which contains the available delivery windows for a Scheduled Delivery. The &#x60;ScheduledDeliveryInfo&#x60; response object can only be returned for fulfillment order previews with &#x60;ShippingSpeedCategories&#x60; &#x3D; &#x60;ScheduledDelivery&#x60;.</value>
        [DataMember(Name = "includeDeliveryWindows", EmitDefaultValue = true)]
        public bool IncludeDeliveryWindows { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        /// <value>A list of features and their fulfillment policies to apply to the order.</value>
        [DataMember(Name = "featureConstraints", EmitDefaultValue = false)]
        public List<FeatureSettings> FeatureConstraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetFulfillmentPreviewRequest {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ShippingSpeedCategories: ").Append(ShippingSpeedCategories).Append("\n");
            sb.Append("  IncludeCODFulfillmentPreview: ").Append(IncludeCODFulfillmentPreview).Append("\n");
            sb.Append("  IncludeDeliveryWindows: ").Append(IncludeDeliveryWindows).Append("\n");
            sb.Append("  FeatureConstraints: ").Append(FeatureConstraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
