/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// Information about a fulfillment order preview, including delivery and fee information based on shipping method.
    /// </summary>
    [DataContract(Name = "FulfillmentPreview")]
    public partial class FulfillmentPreview : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ShippingSpeedCategory
        /// </summary>
        [DataMember(Name = "shippingSpeedCategory", IsRequired = true, EmitDefaultValue = true)]
        public ShippingSpeedCategory ShippingSpeedCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPreview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentPreview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPreview" /> class.
        /// </summary>
        /// <param name="shippingSpeedCategory">shippingSpeedCategory (required).</param>
        /// <param name="scheduledDeliveryInfo">scheduledDeliveryInfo.</param>
        /// <param name="isFulfillable">When true, this fulfillment order preview is fulfillable. (required).</param>
        /// <param name="isCODCapable">When true, this fulfillment order preview is for COD (Cash On Delivery). (required).</param>
        /// <param name="estimatedShippingWeight">estimatedShippingWeight.</param>
        /// <param name="estimatedFees">An array of fee type and cost pairs..</param>
        /// <param name="fulfillmentPreviewShipments">An array of fulfillment preview shipment information..</param>
        /// <param name="unfulfillablePreviewItems">An array of unfulfillable preview item information..</param>
        /// <param name="orderUnfulfillableReasons">String list.</param>
        /// <param name="marketplaceId">The marketplace the fulfillment order is placed against. (required).</param>
        /// <param name="featureConstraints">A list of features and their fulfillment policies to apply to the order..</param>
        public FulfillmentPreview(ShippingSpeedCategory shippingSpeedCategory = default(ShippingSpeedCategory), ScheduledDeliveryInfo scheduledDeliveryInfo = default(ScheduledDeliveryInfo), bool isFulfillable = default(bool), bool isCODCapable = default(bool), Weight estimatedShippingWeight = default(Weight), List<Fee> estimatedFees = default(List<Fee>), List<FulfillmentPreviewShipment> fulfillmentPreviewShipments = default(List<FulfillmentPreviewShipment>), List<UnfulfillablePreviewItem> unfulfillablePreviewItems = default(List<UnfulfillablePreviewItem>), List<string> orderUnfulfillableReasons = default(List<string>), string marketplaceId = default(string), List<FeatureSettings> featureConstraints = default(List<FeatureSettings>))
        {
            this.ShippingSpeedCategory = shippingSpeedCategory;
            this.IsFulfillable = isFulfillable;
            this.IsCODCapable = isCODCapable;
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for FulfillmentPreview and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            this.ScheduledDeliveryInfo = scheduledDeliveryInfo;
            this.EstimatedShippingWeight = estimatedShippingWeight;
            this.EstimatedFees = estimatedFees;
            this.FulfillmentPreviewShipments = fulfillmentPreviewShipments;
            this.UnfulfillablePreviewItems = unfulfillablePreviewItems;
            this.OrderUnfulfillableReasons = orderUnfulfillableReasons;
            this.FeatureConstraints = featureConstraints;
        }

        /// <summary>
        /// Gets or Sets ScheduledDeliveryInfo
        /// </summary>
        [DataMember(Name = "scheduledDeliveryInfo", EmitDefaultValue = false)]
        public ScheduledDeliveryInfo ScheduledDeliveryInfo { get; set; }

        /// <summary>
        /// When true, this fulfillment order preview is fulfillable.
        /// </summary>
        /// <value>When true, this fulfillment order preview is fulfillable.</value>
        [DataMember(Name = "isFulfillable", IsRequired = true, EmitDefaultValue = true)]
        public bool IsFulfillable { get; set; }

        /// <summary>
        /// When true, this fulfillment order preview is for COD (Cash On Delivery).
        /// </summary>
        /// <value>When true, this fulfillment order preview is for COD (Cash On Delivery).</value>
        [DataMember(Name = "isCODCapable", IsRequired = true, EmitDefaultValue = true)]
        public bool IsCODCapable { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedShippingWeight
        /// </summary>
        [DataMember(Name = "estimatedShippingWeight", EmitDefaultValue = false)]
        public Weight EstimatedShippingWeight { get; set; }

        /// <summary>
        /// An array of fee type and cost pairs.
        /// </summary>
        /// <value>An array of fee type and cost pairs.</value>
        [DataMember(Name = "estimatedFees", EmitDefaultValue = false)]
        public List<Fee> EstimatedFees { get; set; }

        /// <summary>
        /// An array of fulfillment preview shipment information.
        /// </summary>
        /// <value>An array of fulfillment preview shipment information.</value>
        [DataMember(Name = "fulfillmentPreviewShipments", EmitDefaultValue = false)]
        public List<FulfillmentPreviewShipment> FulfillmentPreviewShipments { get; set; }

        /// <summary>
        /// An array of unfulfillable preview item information.
        /// </summary>
        /// <value>An array of unfulfillable preview item information.</value>
        [DataMember(Name = "unfulfillablePreviewItems", EmitDefaultValue = false)]
        public List<UnfulfillablePreviewItem> UnfulfillablePreviewItems { get; set; }

        /// <summary>
        /// String list
        /// </summary>
        /// <value>String list</value>
        [DataMember(Name = "orderUnfulfillableReasons", EmitDefaultValue = false)]
        public List<string> OrderUnfulfillableReasons { get; set; }

        /// <summary>
        /// The marketplace the fulfillment order is placed against.
        /// </summary>
        /// <value>The marketplace the fulfillment order is placed against.</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A list of features and their fulfillment policies to apply to the order.
        /// </summary>
        /// <value>A list of features and their fulfillment policies to apply to the order.</value>
        [DataMember(Name = "featureConstraints", EmitDefaultValue = false)]
        public List<FeatureSettings> FeatureConstraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentPreview {\n");
            sb.Append("  ShippingSpeedCategory: ").Append(ShippingSpeedCategory).Append("\n");
            sb.Append("  ScheduledDeliveryInfo: ").Append(ScheduledDeliveryInfo).Append("\n");
            sb.Append("  IsFulfillable: ").Append(IsFulfillable).Append("\n");
            sb.Append("  IsCODCapable: ").Append(IsCODCapable).Append("\n");
            sb.Append("  EstimatedShippingWeight: ").Append(EstimatedShippingWeight).Append("\n");
            sb.Append("  EstimatedFees: ").Append(EstimatedFees).Append("\n");
            sb.Append("  FulfillmentPreviewShipments: ").Append(FulfillmentPreviewShipments).Append("\n");
            sb.Append("  UnfulfillablePreviewItems: ").Append(UnfulfillablePreviewItems).Append("\n");
            sb.Append("  OrderUnfulfillableReasons: ").Append(OrderUnfulfillableReasons).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  FeatureConstraints: ").Append(FeatureConstraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
