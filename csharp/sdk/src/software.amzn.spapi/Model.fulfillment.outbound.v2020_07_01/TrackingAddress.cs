/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// Address information for tracking the package.
    /// </summary>
    [DataContract(Name = "TrackingAddress")]
    public partial class TrackingAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrackingAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingAddress" /> class.
        /// </summary>
        /// <param name="city">The city. (required).</param>
        /// <param name="state">The state. (required).</param>
        /// <param name="country">The country. (required).</param>
        public TrackingAddress(string city = default(string), string state = default(string), string country = default(string))
        {
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for TrackingAddress and cannot be null");
            }
            this.City = city;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for TrackingAddress and cannot be null");
            }
            this.State = state;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for TrackingAddress and cannot be null");
            }
            this.Country = country;
        }

        /// <summary>
        /// The city.
        /// </summary>
        /// <value>The city.</value>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// The state.
        /// </summary>
        /// <value>The state.</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// The country.
        /// </summary>
        /// <value>The country.</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackingAddress {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // City (string) maxLength
            if (this.City != null && this.City.Length > 150)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 150.", new [] { "City" });
            }

            // State (string) maxLength
            if (this.State != null && this.State.Length > 150)
            {
                yield return new ValidationResult("Invalid value for State, length must be less than 150.", new [] { "State" });
            }

            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 6)
            {
                yield return new ValidationResult("Invalid value for Country, length must be less than 6.", new [] { "Country" });
            }

            yield break;
        }
    }

}
