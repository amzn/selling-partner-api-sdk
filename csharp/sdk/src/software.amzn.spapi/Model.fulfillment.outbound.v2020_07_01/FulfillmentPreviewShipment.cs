/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.fulfillment.outbound.v2020_07_01
{
    /// <summary>
    /// Delivery and item information for a shipment in a fulfillment order preview.
    /// </summary>
    [DataContract(Name = "FulfillmentPreviewShipment")]
    public partial class FulfillmentPreviewShipment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPreviewShipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentPreviewShipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPreviewShipment" /> class.
        /// </summary>
        /// <param name="earliestShipDate">Date timestamp.</param>
        /// <param name="latestShipDate">Date timestamp.</param>
        /// <param name="earliestArrivalDate">Date timestamp.</param>
        /// <param name="latestArrivalDate">Date timestamp.</param>
        /// <param name="shippingNotes">Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed..</param>
        /// <param name="fulfillmentPreviewItems">An array of fulfillment preview item information. (required).</param>
        public FulfillmentPreviewShipment(DateTime earliestShipDate = default(DateTime), DateTime latestShipDate = default(DateTime), DateTime earliestArrivalDate = default(DateTime), DateTime latestArrivalDate = default(DateTime), List<string> shippingNotes = default(List<string>), List<FulfillmentPreviewItem> fulfillmentPreviewItems = default(List<FulfillmentPreviewItem>))
        {
            // to ensure "fulfillmentPreviewItems" is required (not null)
            if (fulfillmentPreviewItems == null)
            {
                throw new ArgumentNullException("fulfillmentPreviewItems is a required property for FulfillmentPreviewShipment and cannot be null");
            }
            this.FulfillmentPreviewItems = fulfillmentPreviewItems;
            this.EarliestShipDate = earliestShipDate;
            this.LatestShipDate = latestShipDate;
            this.EarliestArrivalDate = earliestArrivalDate;
            this.LatestArrivalDate = latestArrivalDate;
            this.ShippingNotes = shippingNotes;
        }

        /// <summary>
        /// Date timestamp
        /// </summary>
        /// <value>Date timestamp</value>
        [DataMember(Name = "earliestShipDate", EmitDefaultValue = false)]
        public DateTime EarliestShipDate { get; set; }

        /// <summary>
        /// Date timestamp
        /// </summary>
        /// <value>Date timestamp</value>
        [DataMember(Name = "latestShipDate", EmitDefaultValue = false)]
        public DateTime LatestShipDate { get; set; }

        /// <summary>
        /// Date timestamp
        /// </summary>
        /// <value>Date timestamp</value>
        [DataMember(Name = "earliestArrivalDate", EmitDefaultValue = false)]
        public DateTime EarliestArrivalDate { get; set; }

        /// <summary>
        /// Date timestamp
        /// </summary>
        /// <value>Date timestamp</value>
        [DataMember(Name = "latestArrivalDate", EmitDefaultValue = false)]
        public DateTime LatestArrivalDate { get; set; }

        /// <summary>
        /// Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed.
        /// </summary>
        /// <value>Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed.</value>
        [DataMember(Name = "shippingNotes", EmitDefaultValue = false)]
        public List<string> ShippingNotes { get; set; }

        /// <summary>
        /// An array of fulfillment preview item information.
        /// </summary>
        /// <value>An array of fulfillment preview item information.</value>
        [DataMember(Name = "fulfillmentPreviewItems", IsRequired = true, EmitDefaultValue = true)]
        public List<FulfillmentPreviewItem> FulfillmentPreviewItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentPreviewShipment {\n");
            sb.Append("  EarliestShipDate: ").Append(EarliestShipDate).Append("\n");
            sb.Append("  LatestShipDate: ").Append(LatestShipDate).Append("\n");
            sb.Append("  EarliestArrivalDate: ").Append(EarliestArrivalDate).Append("\n");
            sb.Append("  LatestArrivalDate: ").Append(LatestArrivalDate).Append("\n");
            sb.Append("  ShippingNotes: ").Append(ShippingNotes).Append("\n");
            sb.Append("  FulfillmentPreviewItems: ").Append(FulfillmentPreviewItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
