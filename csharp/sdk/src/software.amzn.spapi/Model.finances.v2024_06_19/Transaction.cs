/*
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v2024_06_19
{
    /// <summary>
    /// Contains all information related to the transaction.
    /// </summary>
    [DataContract(Name = "Transaction")]
    public partial class Transaction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="sellingPartnerMetadata">sellingPartnerMetadata.</param>
        /// <param name="relatedIdentifiers">Related business identifiers of the transaction..</param>
        /// <param name="transactionType">The type of transaction.  Possible values:  * Shipment.</param>
        /// <param name="transactionId">The unique identifier for the transaction..</param>
        /// <param name="transactionStatus">The status of the transaction.  **Possible values:**  * &#x60;DEFERRED&#x60;: the transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. * &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. The status of a deferred transaction is updated to &#x60;DEFERRED_RELEASED&#x60; when the transaction is released..</param>
        /// <param name="description">Describes the reasons for the transaction.  Example: &#39;Order Payment&#39;,&#39;Refund Order&#39;.</param>
        /// <param name="postedDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="marketplaceDetails">marketplaceDetails.</param>
        /// <param name="items">List of items in the transaction.</param>
        /// <param name="contexts">List of additional Information about the item..</param>
        /// <param name="breakdowns">A list of breakdowns that detail how the total amount is calculated for the transaction..</param>
        public Transaction(SellingPartnerMetadata sellingPartnerMetadata = default(SellingPartnerMetadata), List<RelatedIdentifier> relatedIdentifiers = default(List<RelatedIdentifier>), string transactionType = default(string), string transactionId = default(string), string transactionStatus = default(string), string description = default(string), DateTime postedDate = default(DateTime), Currency totalAmount = default(Currency), MarketplaceDetails marketplaceDetails = default(MarketplaceDetails), List<Item> items = default(List<Item>), List<Context> contexts = default(List<Context>), List<Breakdown> breakdowns = default(List<Breakdown>))
        {
            this.SellingPartnerMetadata = sellingPartnerMetadata;
            this.RelatedIdentifiers = relatedIdentifiers;
            this.TransactionType = transactionType;
            this.TransactionId = transactionId;
            this.TransactionStatus = transactionStatus;
            this.Description = description;
            this.PostedDate = postedDate;
            this.TotalAmount = totalAmount;
            this.MarketplaceDetails = marketplaceDetails;
            this.Items = items;
            this.Contexts = contexts;
            this.Breakdowns = breakdowns;
        }

        /// <summary>
        /// Gets or Sets SellingPartnerMetadata
        /// </summary>
        [DataMember(Name = "sellingPartnerMetadata", EmitDefaultValue = false)]
        public SellingPartnerMetadata SellingPartnerMetadata { get; set; }

        /// <summary>
        /// Related business identifiers of the transaction.
        /// </summary>
        /// <value>Related business identifiers of the transaction.</value>
        [DataMember(Name = "relatedIdentifiers", EmitDefaultValue = false)]
        public List<RelatedIdentifier> RelatedIdentifiers { get; set; }

        /// <summary>
        /// The type of transaction.  Possible values:  * Shipment
        /// </summary>
        /// <value>The type of transaction.  Possible values:  * Shipment</value>
        [DataMember(Name = "transactionType", EmitDefaultValue = false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// The unique identifier for the transaction.
        /// </summary>
        /// <value>The unique identifier for the transaction.</value>
        [DataMember(Name = "transactionId", EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// The status of the transaction.  **Possible values:**  * &#x60;DEFERRED&#x60;: the transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. * &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. The status of a deferred transaction is updated to &#x60;DEFERRED_RELEASED&#x60; when the transaction is released.
        /// </summary>
        /// <value>The status of the transaction.  **Possible values:**  * &#x60;DEFERRED&#x60;: the transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. * &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. The status of a deferred transaction is updated to &#x60;DEFERRED_RELEASED&#x60; when the transaction is released.</value>
        [DataMember(Name = "transactionStatus", EmitDefaultValue = false)]
        public string TransactionStatus { get; set; }

        /// <summary>
        /// Describes the reasons for the transaction.  Example: &#39;Order Payment&#39;,&#39;Refund Order&#39;
        /// </summary>
        /// <value>Describes the reasons for the transaction.  Example: &#39;Order Payment&#39;,&#39;Refund Order&#39;</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "postedDate", EmitDefaultValue = false)]
        public DateTime PostedDate { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "totalAmount", EmitDefaultValue = false)]
        public Currency TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceDetails
        /// </summary>
        [DataMember(Name = "marketplaceDetails", EmitDefaultValue = false)]
        public MarketplaceDetails MarketplaceDetails { get; set; }

        /// <summary>
        /// List of items in the transaction
        /// </summary>
        /// <value>List of items in the transaction</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<Item> Items { get; set; }

        /// <summary>
        /// List of additional Information about the item.
        /// </summary>
        /// <value>List of additional Information about the item.</value>
        [DataMember(Name = "contexts", EmitDefaultValue = false)]
        public List<Context> Contexts { get; set; }

        /// <summary>
        /// A list of breakdowns that detail how the total amount is calculated for the transaction.
        /// </summary>
        /// <value>A list of breakdowns that detail how the total amount is calculated for the transaction.</value>
        [DataMember(Name = "breakdowns", EmitDefaultValue = false)]
        public List<Breakdown> Breakdowns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  SellingPartnerMetadata: ").Append(SellingPartnerMetadata).Append("\n");
            sb.Append("  RelatedIdentifiers: ").Append(RelatedIdentifiers).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  MarketplaceDetails: ").Append(MarketplaceDetails).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Contexts: ").Append(Contexts).Append("\n");
            sb.Append("  Breakdowns: ").Append(Breakdowns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
