/*
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v2024_06_19
{
    /// <summary>
    /// Additional information related to the product.
    /// </summary>
    [DataContract(Name = "ProductContext")]
    public partial class ProductContext : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductContext" /> class.
        /// </summary>
        /// <param name="asin">Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="sku">Stock keeping unit (SKU) of the item..</param>
        /// <param name="quantityShipped">Quantity of the item shipped..</param>
        /// <param name="fulfillmentNetwork">Fulfillment network of the item..</param>
        public ProductContext(string asin = default(string), string sku = default(string), int quantityShipped = default(int), string fulfillmentNetwork = default(string))
        {
            this.Asin = asin;
            this.Sku = sku;
            this.QuantityShipped = quantityShipped;
            this.FulfillmentNetwork = fulfillmentNetwork;
        }

        /// <summary>
        /// Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        /// Stock keeping unit (SKU) of the item.
        /// </summary>
        /// <value>Stock keeping unit (SKU) of the item.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// Quantity of the item shipped.
        /// </summary>
        /// <value>Quantity of the item shipped.</value>
        [DataMember(Name = "quantityShipped", EmitDefaultValue = false)]
        public int QuantityShipped { get; set; }

        /// <summary>
        /// Fulfillment network of the item.
        /// </summary>
        /// <value>Fulfillment network of the item.</value>
        [DataMember(Name = "fulfillmentNetwork", EmitDefaultValue = false)]
        public string FulfillmentNetwork { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductContext {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  QuantityShipped: ").Append(QuantityShipped).Append("\n");
            sb.Append("  FulfillmentNetwork: ").Append(FulfillmentNetwork).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
