/*
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v2024_06_19
{
    /// <summary>
    /// Additional information related to Payments related transactions.
    /// </summary>
    [DataContract(Name = "PaymentsContext")]
    public partial class PaymentsContext : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsContext" /> class.
        /// </summary>
        /// <param name="paymentType">Type of payment made..</param>
        /// <param name="paymentMethod">Method of payment made..</param>
        /// <param name="paymentReference">Reference number of payment made..</param>
        /// <param name="paymentDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        public PaymentsContext(string paymentType = default(string), string paymentMethod = default(string), string paymentReference = default(string), DateTime paymentDate = default(DateTime))
        {
            this.PaymentType = paymentType;
            this.PaymentMethod = paymentMethod;
            this.PaymentReference = paymentReference;
            this.PaymentDate = paymentDate;
        }

        /// <summary>
        /// Type of payment made.
        /// </summary>
        /// <value>Type of payment made.</value>
        [DataMember(Name = "paymentType", EmitDefaultValue = false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Method of payment made.
        /// </summary>
        /// <value>Method of payment made.</value>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Reference number of payment made.
        /// </summary>
        /// <value>Reference number of payment made.</value>
        [DataMember(Name = "paymentReference", EmitDefaultValue = false)]
        public string PaymentReference { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "paymentDate", EmitDefaultValue = false)]
        public DateTime PaymentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentsContext {\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentReference: ").Append(PaymentReference).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
