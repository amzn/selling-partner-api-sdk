/*
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v2024_06_19
{
    /// <summary>
    /// Additional Information about the item.
    /// </summary>
    [DataContract(Name = "Context")]
    public partial class Context : IValidatableObject
    {
        /// <summary>
        /// The store name associated with the transaction.
        /// </summary>
        /// <value>The store name associated with the transaction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StoreNameEnum
        {
            /// <summary>
            /// Enum AMAZONHAUL for value: AMAZON_HAUL
            /// </summary>
            [EnumMember(Value = "AMAZON_HAUL")]
            AMAZONHAUL = 1
        }


        /// <summary>
        /// The store name associated with the transaction.
        /// </summary>
        /// <value>The store name associated with the transaction.</value>
        [DataMember(Name = "storeName", EmitDefaultValue = false)]
        public StoreNameEnum? StoreName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Context" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Context() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Context" /> class.
        /// </summary>
        /// <param name="storeName">The store name associated with the transaction..</param>
        /// <param name="orderType">Order type of the transaction..</param>
        /// <param name="channel">Channel details of related transaction..</param>
        /// <param name="asin">Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="sku">Stock keeping unit (SKU) of the item..</param>
        /// <param name="quantityShipped">Quantity of the item shipped..</param>
        /// <param name="fulfillmentNetwork">Fulfillment network of the item..</param>
        /// <param name="paymentType">Type of payment made..</param>
        /// <param name="paymentMethod">Method of payment made..</param>
        /// <param name="paymentReference">Reference number of payment made..</param>
        /// <param name="paymentDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="deferralReason">The deferral policy applied to the transaction.  **Examples:** &#x60;B2B&#x60; (invoiced orders), &#x60;DD7&#x60; (delivery date policy).</param>
        /// <param name="maturityDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="startTime">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="endTime">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="contextType">contextType (required).</param>
        public Context(StoreNameEnum? storeName = default(StoreNameEnum?), string orderType = default(string), string channel = default(string), string asin = default(string), string sku = default(string), int quantityShipped = default(int), string fulfillmentNetwork = default(string), string paymentType = default(string), string paymentMethod = default(string), string paymentReference = default(string), DateTime paymentDate = default(DateTime), string deferralReason = default(string), DateTime maturityDate = default(DateTime), DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), string contextType = default(string))
        {
            // to ensure "contextType" is required (not null)
            if (contextType == null)
            {
                throw new ArgumentNullException("contextType is a required property for Context and cannot be null");
            }
            this.ContextType = contextType;
            this.StoreName = storeName;
            this.OrderType = orderType;
            this.Channel = channel;
            this.Asin = asin;
            this.Sku = sku;
            this.QuantityShipped = quantityShipped;
            this.FulfillmentNetwork = fulfillmentNetwork;
            this.PaymentType = paymentType;
            this.PaymentMethod = paymentMethod;
            this.PaymentReference = paymentReference;
            this.PaymentDate = paymentDate;
            this.DeferralReason = deferralReason;
            this.MaturityDate = maturityDate;
            this.StartTime = startTime;
            this.EndTime = endTime;
        }

        /// <summary>
        /// Order type of the transaction.
        /// </summary>
        /// <value>Order type of the transaction.</value>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Channel details of related transaction.
        /// </summary>
        /// <value>Channel details of related transaction.</value>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string Channel { get; set; }

        /// <summary>
        /// Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "asin", EmitDefaultValue = false)]
        public string Asin { get; set; }

        /// <summary>
        /// Stock keeping unit (SKU) of the item.
        /// </summary>
        /// <value>Stock keeping unit (SKU) of the item.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// Quantity of the item shipped.
        /// </summary>
        /// <value>Quantity of the item shipped.</value>
        [DataMember(Name = "quantityShipped", EmitDefaultValue = false)]
        public int QuantityShipped { get; set; }

        /// <summary>
        /// Fulfillment network of the item.
        /// </summary>
        /// <value>Fulfillment network of the item.</value>
        [DataMember(Name = "fulfillmentNetwork", EmitDefaultValue = false)]
        public string FulfillmentNetwork { get; set; }

        /// <summary>
        /// Type of payment made.
        /// </summary>
        /// <value>Type of payment made.</value>
        [DataMember(Name = "paymentType", EmitDefaultValue = false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Method of payment made.
        /// </summary>
        /// <value>Method of payment made.</value>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Reference number of payment made.
        /// </summary>
        /// <value>Reference number of payment made.</value>
        [DataMember(Name = "paymentReference", EmitDefaultValue = false)]
        public string PaymentReference { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "paymentDate", EmitDefaultValue = false)]
        public DateTime PaymentDate { get; set; }

        /// <summary>
        /// The deferral policy applied to the transaction.  **Examples:** &#x60;B2B&#x60; (invoiced orders), &#x60;DD7&#x60; (delivery date policy)
        /// </summary>
        /// <value>The deferral policy applied to the transaction.  **Examples:** &#x60;B2B&#x60; (invoiced orders), &#x60;DD7&#x60; (delivery date policy)</value>
        [DataMember(Name = "deferralReason", EmitDefaultValue = false)]
        public string DeferralReason { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "maturityDate", EmitDefaultValue = false)]
        public DateTime MaturityDate { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets ContextType
        /// </summary>
        [DataMember(Name = "contextType", IsRequired = true, EmitDefaultValue = true)]
        public string ContextType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Context {\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  QuantityShipped: ").Append(QuantityShipped).Append("\n");
            sb.Append("  FulfillmentNetwork: ").Append(FulfillmentNetwork).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentReference: ").Append(PaymentReference).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  DeferralReason: ").Append(DeferralReason).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ContextType: ").Append(ContextType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
