/*
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v2024_06_19
{
    /// <summary>
    /// Information about the line of business associated with a transaction.
    /// </summary>
    [DataContract(Name = "BusinessContext")]
    public partial class BusinessContext : IValidatableObject
    {
        /// <summary>
        /// The store name associated with the transaction.
        /// </summary>
        /// <value>The store name associated with the transaction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StoreNameEnum
        {
            /// <summary>
            /// Enum AMAZONHAUL for value: AMAZON_HAUL
            /// </summary>
            [EnumMember(Value = "AMAZON_HAUL")]
            AMAZONHAUL = 1
        }


        /// <summary>
        /// The store name associated with the transaction.
        /// </summary>
        /// <value>The store name associated with the transaction.</value>
        [DataMember(Name = "storeName", EmitDefaultValue = false)]
        public StoreNameEnum? StoreName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessContext" /> class.
        /// </summary>
        /// <param name="storeName">The store name associated with the transaction..</param>
        public BusinessContext(StoreNameEnum? storeName = default(StoreNameEnum?))
        {
            this.StoreName = storeName;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BusinessContext {\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
