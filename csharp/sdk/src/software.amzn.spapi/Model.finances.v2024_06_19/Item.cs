/*
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v2024_06_19
{
    /// <summary>
    /// Additional information about the items in Transaction.
    /// </summary>
    [DataContract(Name = "Item")]
    public partial class Item : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="description">Description of items in the transaction.</param>
        /// <param name="relatedIdentifiers">Related Business identifiers of the item in Transaction..</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="breakdowns">A list of breakdowns that detail how the total amount is calculated for the transaction..</param>
        /// <param name="contexts">List of additional Information about the item..</param>
        public Item(string description = default(string), List<ItemRelatedIdentifier> relatedIdentifiers = default(List<ItemRelatedIdentifier>), Currency totalAmount = default(Currency), List<Breakdown> breakdowns = default(List<Breakdown>), List<Context> contexts = default(List<Context>))
        {
            this.Description = description;
            this.RelatedIdentifiers = relatedIdentifiers;
            this.TotalAmount = totalAmount;
            this.Breakdowns = breakdowns;
            this.Contexts = contexts;
        }

        /// <summary>
        /// Description of items in the transaction
        /// </summary>
        /// <value>Description of items in the transaction</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Related Business identifiers of the item in Transaction.
        /// </summary>
        /// <value>Related Business identifiers of the item in Transaction.</value>
        [DataMember(Name = "relatedIdentifiers", EmitDefaultValue = false)]
        public List<ItemRelatedIdentifier> RelatedIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "totalAmount", EmitDefaultValue = false)]
        public Currency TotalAmount { get; set; }

        /// <summary>
        /// A list of breakdowns that detail how the total amount is calculated for the transaction.
        /// </summary>
        /// <value>A list of breakdowns that detail how the total amount is calculated for the transaction.</value>
        [DataMember(Name = "breakdowns", EmitDefaultValue = false)]
        public List<Breakdown> Breakdowns { get; set; }

        /// <summary>
        /// List of additional Information about the item.
        /// </summary>
        /// <value>List of additional Information about the item.</value>
        [DataMember(Name = "contexts", EmitDefaultValue = false)]
        public List<Context> Contexts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RelatedIdentifiers: ").Append(RelatedIdentifiers).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Breakdowns: ").Append(Breakdowns).Append("\n");
            sb.Append("  Contexts: ").Append(Contexts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
