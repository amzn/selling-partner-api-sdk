/*
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v2024_06_19
{
    /// <summary>
    /// Additional information related to Amazon Pay.
    /// </summary>
    [DataContract(Name = "AmazonPayContext")]
    public partial class AmazonPayContext : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AmazonPayContext" /> class.
        /// </summary>
        /// <param name="storeName">Store name related to transaction..</param>
        /// <param name="orderType">Order type of the transaction..</param>
        /// <param name="channel">Channel details of related transaction..</param>
        public AmazonPayContext(string storeName = default(string), string orderType = default(string), string channel = default(string))
        {
            this.StoreName = storeName;
            this.OrderType = orderType;
            this.Channel = channel;
        }

        /// <summary>
        /// Store name related to transaction.
        /// </summary>
        /// <value>Store name related to transaction.</value>
        [DataMember(Name = "storeName", EmitDefaultValue = false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Order type of the transaction.
        /// </summary>
        /// <value>Order type of the transaction.</value>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Channel details of related transaction.
        /// </summary>
        /// <value>Channel details of related transaction.</value>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string Channel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AmazonPayContext {\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
