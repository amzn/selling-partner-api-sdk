/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// A service fee on the seller&#39;s account.
    /// </summary>
    [DataContract(Name = "ServiceFeeEvent")]
    public partial class ServiceFeeEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceFeeEvent" /> class.
        /// </summary>
        /// <param name="amazonOrderId">An Amazon-defined identifier for an order..</param>
        /// <param name="feeReason">A short description of the service fee reason..</param>
        /// <param name="feeList">A list of fee component information..</param>
        /// <param name="sellerSKU">The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with every call to the Selling Partner API..</param>
        /// <param name="fnSKU">A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center..</param>
        /// <param name="feeDescription">A short description of the service fee event..</param>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="storeName">The name of the store where the event occurred..</param>
        public ServiceFeeEvent(string amazonOrderId = default(string), string feeReason = default(string), List<FeeComponent> feeList = default(List<FeeComponent>), string sellerSKU = default(string), string fnSKU = default(string), string feeDescription = default(string), string aSIN = default(string), string storeName = default(string))
        {
            this.AmazonOrderId = amazonOrderId;
            this.FeeReason = feeReason;
            this.FeeList = feeList;
            this.SellerSKU = sellerSKU;
            this.FnSKU = fnSKU;
            this.FeeDescription = feeDescription;
            this.ASIN = aSIN;
            this.StoreName = storeName;
        }

        /// <summary>
        /// An Amazon-defined identifier for an order.
        /// </summary>
        /// <value>An Amazon-defined identifier for an order.</value>
        [DataMember(Name = "AmazonOrderId", EmitDefaultValue = false)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// A short description of the service fee reason.
        /// </summary>
        /// <value>A short description of the service fee reason.</value>
        [DataMember(Name = "FeeReason", EmitDefaultValue = false)]
        public string FeeReason { get; set; }

        /// <summary>
        /// A list of fee component information.
        /// </summary>
        /// <value>A list of fee component information.</value>
        [DataMember(Name = "FeeList", EmitDefaultValue = false)]
        public List<FeeComponent> FeeList { get; set; }

        /// <summary>
        /// The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with every call to the Selling Partner API.
        /// </summary>
        /// <value>The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with every call to the Selling Partner API.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center.
        /// </summary>
        /// <value>A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center.</value>
        [DataMember(Name = "FnSKU", EmitDefaultValue = false)]
        public string FnSKU { get; set; }

        /// <summary>
        /// A short description of the service fee event.
        /// </summary>
        /// <value>A short description of the service fee event.</value>
        [DataMember(Name = "FeeDescription", EmitDefaultValue = false)]
        public string FeeDescription { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }

        /// <summary>
        /// The name of the store where the event occurred.
        /// </summary>
        /// <value>The name of the store where the event occurred.</value>
        [DataMember(Name = "StoreName", EmitDefaultValue = false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceFeeEvent {\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  FeeReason: ").Append(FeeReason).Append("\n");
            sb.Append("  FeeList: ").Append(FeeList).Append("\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  FnSKU: ").Append(FnSKU).Append("\n");
            sb.Append("  FeeDescription: ").Append(FeeDescription).Append("\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
