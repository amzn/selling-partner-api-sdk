/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// An event related to a rental transaction.
    /// </summary>
    [DataContract(Name = "RentalTransactionEvent")]
    public partial class RentalTransactionEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RentalTransactionEvent" /> class.
        /// </summary>
        /// <param name="amazonOrderId">An Amazon-defined identifier for an order..</param>
        /// <param name="rentalEventType">The type of rental event.  Possible values:  * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.  * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.  * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.  * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.  * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.  * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.  * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item..</param>
        /// <param name="extensionLength">The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events..</param>
        /// <param name="postedDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="rentalChargeList">A list of charge information on the seller&#39;s account..</param>
        /// <param name="rentalFeeList">A list of fee component information..</param>
        /// <param name="marketplaceName">The name of the marketplace..</param>
        /// <param name="rentalInitialValue">rentalInitialValue.</param>
        /// <param name="rentalReimbursement">rentalReimbursement.</param>
        /// <param name="rentalTaxWithheldList">A list of information about taxes withheld..</param>
        public RentalTransactionEvent(string amazonOrderId = default(string), string rentalEventType = default(string), int extensionLength = default(int), DateTime postedDate = default(DateTime), List<ChargeComponent> rentalChargeList = default(List<ChargeComponent>), List<FeeComponent> rentalFeeList = default(List<FeeComponent>), string marketplaceName = default(string), Currency rentalInitialValue = default(Currency), Currency rentalReimbursement = default(Currency), List<TaxWithheldComponent> rentalTaxWithheldList = default(List<TaxWithheldComponent>))
        {
            this.AmazonOrderId = amazonOrderId;
            this.RentalEventType = rentalEventType;
            this.ExtensionLength = extensionLength;
            this.PostedDate = postedDate;
            this.RentalChargeList = rentalChargeList;
            this.RentalFeeList = rentalFeeList;
            this.MarketplaceName = marketplaceName;
            this.RentalInitialValue = rentalInitialValue;
            this.RentalReimbursement = rentalReimbursement;
            this.RentalTaxWithheldList = rentalTaxWithheldList;
        }

        /// <summary>
        /// An Amazon-defined identifier for an order.
        /// </summary>
        /// <value>An Amazon-defined identifier for an order.</value>
        [DataMember(Name = "AmazonOrderId", EmitDefaultValue = false)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// The type of rental event.  Possible values:  * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.  * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.  * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.  * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.  * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.  * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.  * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item.
        /// </summary>
        /// <value>The type of rental event.  Possible values:  * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.  * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.  * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.  * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.  * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.  * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.  * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item.</value>
        [DataMember(Name = "RentalEventType", EmitDefaultValue = false)]
        public string RentalEventType { get; set; }

        /// <summary>
        /// The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.
        /// </summary>
        /// <value>The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.</value>
        [DataMember(Name = "ExtensionLength", EmitDefaultValue = false)]
        public int ExtensionLength { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime PostedDate { get; set; }

        /// <summary>
        /// A list of charge information on the seller&#39;s account.
        /// </summary>
        /// <value>A list of charge information on the seller&#39;s account.</value>
        [DataMember(Name = "RentalChargeList", EmitDefaultValue = false)]
        public List<ChargeComponent> RentalChargeList { get; set; }

        /// <summary>
        /// A list of fee component information.
        /// </summary>
        /// <value>A list of fee component information.</value>
        [DataMember(Name = "RentalFeeList", EmitDefaultValue = false)]
        public List<FeeComponent> RentalFeeList { get; set; }

        /// <summary>
        /// The name of the marketplace.
        /// </summary>
        /// <value>The name of the marketplace.</value>
        [DataMember(Name = "MarketplaceName", EmitDefaultValue = false)]
        public string MarketplaceName { get; set; }

        /// <summary>
        /// Gets or Sets RentalInitialValue
        /// </summary>
        [DataMember(Name = "RentalInitialValue", EmitDefaultValue = false)]
        public Currency RentalInitialValue { get; set; }

        /// <summary>
        /// Gets or Sets RentalReimbursement
        /// </summary>
        [DataMember(Name = "RentalReimbursement", EmitDefaultValue = false)]
        public Currency RentalReimbursement { get; set; }

        /// <summary>
        /// A list of information about taxes withheld.
        /// </summary>
        /// <value>A list of information about taxes withheld.</value>
        [DataMember(Name = "RentalTaxWithheldList", EmitDefaultValue = false)]
        public List<TaxWithheldComponent> RentalTaxWithheldList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RentalTransactionEvent {\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  RentalEventType: ").Append(RentalEventType).Append("\n");
            sb.Append("  ExtensionLength: ").Append(ExtensionLength).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  RentalChargeList: ").Append(RentalChargeList).Append("\n");
            sb.Append("  RentalFeeList: ").Append(RentalFeeList).Append("\n");
            sb.Append("  MarketplaceName: ").Append(MarketplaceName).Append("\n");
            sb.Append("  RentalInitialValue: ").Append(RentalInitialValue).Append("\n");
            sb.Append("  RentalReimbursement: ").Append(RentalReimbursement).Append("\n");
            sb.Append("  RentalTaxWithheldList: ").Append(RentalTaxWithheldList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
