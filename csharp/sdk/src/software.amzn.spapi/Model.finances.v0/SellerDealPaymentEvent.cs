/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// An event linked to the payment of a fee related to the specified deal.
    /// </summary>
    [DataContract(Name = "SellerDealPaymentEvent")]
    public partial class SellerDealPaymentEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SellerDealPaymentEvent" /> class.
        /// </summary>
        /// <param name="postedDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="dealId">The unique identifier of the deal..</param>
        /// <param name="dealDescription">The internal description of the deal..</param>
        /// <param name="eventType">The type of event: SellerDealComplete..</param>
        /// <param name="feeType">The type of fee: RunLightningDealFee..</param>
        /// <param name="feeAmount">feeAmount.</param>
        /// <param name="taxAmount">taxAmount.</param>
        /// <param name="totalAmount">totalAmount.</param>
        public SellerDealPaymentEvent(DateTime postedDate = default(DateTime), string dealId = default(string), string dealDescription = default(string), string eventType = default(string), string feeType = default(string), Currency feeAmount = default(Currency), Currency taxAmount = default(Currency), Currency totalAmount = default(Currency))
        {
            this.PostedDate = postedDate;
            this.DealId = dealId;
            this.DealDescription = dealDescription;
            this.EventType = eventType;
            this.FeeType = feeType;
            this.FeeAmount = feeAmount;
            this.TaxAmount = taxAmount;
            this.TotalAmount = totalAmount;
        }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "postedDate", EmitDefaultValue = false)]
        public DateTime PostedDate { get; set; }

        /// <summary>
        /// The unique identifier of the deal.
        /// </summary>
        /// <value>The unique identifier of the deal.</value>
        [DataMember(Name = "dealId", EmitDefaultValue = false)]
        public string DealId { get; set; }

        /// <summary>
        /// The internal description of the deal.
        /// </summary>
        /// <value>The internal description of the deal.</value>
        [DataMember(Name = "dealDescription", EmitDefaultValue = false)]
        public string DealDescription { get; set; }

        /// <summary>
        /// The type of event: SellerDealComplete.
        /// </summary>
        /// <value>The type of event: SellerDealComplete.</value>
        [DataMember(Name = "eventType", EmitDefaultValue = false)]
        public string EventType { get; set; }

        /// <summary>
        /// The type of fee: RunLightningDealFee.
        /// </summary>
        /// <value>The type of fee: RunLightningDealFee.</value>
        [DataMember(Name = "feeType", EmitDefaultValue = false)]
        public string FeeType { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmount
        /// </summary>
        [DataMember(Name = "feeAmount", EmitDefaultValue = false)]
        public Currency FeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name = "taxAmount", EmitDefaultValue = false)]
        public Currency TaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "totalAmount", EmitDefaultValue = false)]
        public Currency TotalAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SellerDealPaymentEvent {\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  DealId: ").Append(DealId).Append("\n");
            sb.Append("  DealDescription: ").Append(DealDescription).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
