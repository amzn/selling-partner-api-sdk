/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// An event related to the seller&#39;s Pay with Amazon account.
    /// </summary>
    [DataContract(Name = "PayWithAmazonEvent")]
    public partial class PayWithAmazonEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayWithAmazonEvent" /> class.
        /// </summary>
        /// <param name="sellerOrderId">An order identifier that is specified by the seller..</param>
        /// <param name="transactionPostedDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="businessObjectType">The type of business object..</param>
        /// <param name="salesChannel">The sales channel for the transaction..</param>
        /// <param name="charge">charge.</param>
        /// <param name="feeList">A list of fee component information..</param>
        /// <param name="paymentAmountType">The type of payment.  Possible values:  * Sales.</param>
        /// <param name="amountDescription">A short description of this payment event..</param>
        /// <param name="fulfillmentChannel">The fulfillment channel.  Possible values:  * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)  * MFN - Merchant Fulfillment Network (self-fulfilled).</param>
        /// <param name="storeName">The store name where the event occurred..</param>
        public PayWithAmazonEvent(string sellerOrderId = default(string), DateTime transactionPostedDate = default(DateTime), string businessObjectType = default(string), string salesChannel = default(string), ChargeComponent charge = default(ChargeComponent), List<FeeComponent> feeList = default(List<FeeComponent>), string paymentAmountType = default(string), string amountDescription = default(string), string fulfillmentChannel = default(string), string storeName = default(string))
        {
            this.SellerOrderId = sellerOrderId;
            this.TransactionPostedDate = transactionPostedDate;
            this.BusinessObjectType = businessObjectType;
            this.SalesChannel = salesChannel;
            this.Charge = charge;
            this.FeeList = feeList;
            this.PaymentAmountType = paymentAmountType;
            this.AmountDescription = amountDescription;
            this.FulfillmentChannel = fulfillmentChannel;
            this.StoreName = storeName;
        }

        /// <summary>
        /// An order identifier that is specified by the seller.
        /// </summary>
        /// <value>An order identifier that is specified by the seller.</value>
        [DataMember(Name = "SellerOrderId", EmitDefaultValue = false)]
        public string SellerOrderId { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "TransactionPostedDate", EmitDefaultValue = false)]
        public DateTime TransactionPostedDate { get; set; }

        /// <summary>
        /// The type of business object.
        /// </summary>
        /// <value>The type of business object.</value>
        [DataMember(Name = "BusinessObjectType", EmitDefaultValue = false)]
        public string BusinessObjectType { get; set; }

        /// <summary>
        /// The sales channel for the transaction.
        /// </summary>
        /// <value>The sales channel for the transaction.</value>
        [DataMember(Name = "SalesChannel", EmitDefaultValue = false)]
        public string SalesChannel { get; set; }

        /// <summary>
        /// Gets or Sets Charge
        /// </summary>
        [DataMember(Name = "Charge", EmitDefaultValue = false)]
        public ChargeComponent Charge { get; set; }

        /// <summary>
        /// A list of fee component information.
        /// </summary>
        /// <value>A list of fee component information.</value>
        [DataMember(Name = "FeeList", EmitDefaultValue = false)]
        public List<FeeComponent> FeeList { get; set; }

        /// <summary>
        /// The type of payment.  Possible values:  * Sales
        /// </summary>
        /// <value>The type of payment.  Possible values:  * Sales</value>
        [DataMember(Name = "PaymentAmountType", EmitDefaultValue = false)]
        public string PaymentAmountType { get; set; }

        /// <summary>
        /// A short description of this payment event.
        /// </summary>
        /// <value>A short description of this payment event.</value>
        [DataMember(Name = "AmountDescription", EmitDefaultValue = false)]
        public string AmountDescription { get; set; }

        /// <summary>
        /// The fulfillment channel.  Possible values:  * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)  * MFN - Merchant Fulfillment Network (self-fulfilled)
        /// </summary>
        /// <value>The fulfillment channel.  Possible values:  * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)  * MFN - Merchant Fulfillment Network (self-fulfilled)</value>
        [DataMember(Name = "FulfillmentChannel", EmitDefaultValue = false)]
        public string FulfillmentChannel { get; set; }

        /// <summary>
        /// The store name where the event occurred.
        /// </summary>
        /// <value>The store name where the event occurred.</value>
        [DataMember(Name = "StoreName", EmitDefaultValue = false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayWithAmazonEvent {\n");
            sb.Append("  SellerOrderId: ").Append(SellerOrderId).Append("\n");
            sb.Append("  TransactionPostedDate: ").Append(TransactionPostedDate).Append("\n");
            sb.Append("  BusinessObjectType: ").Append(BusinessObjectType).Append("\n");
            sb.Append("  SalesChannel: ").Append(SalesChannel).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("  FeeList: ").Append(FeeList).Append("\n");
            sb.Append("  PaymentAmountType: ").Append(PaymentAmountType).Append("\n");
            sb.Append("  AmountDescription: ").Append(AmountDescription).Append("\n");
            sb.Append("  FulfillmentChannel: ").Append(FulfillmentChannel).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
