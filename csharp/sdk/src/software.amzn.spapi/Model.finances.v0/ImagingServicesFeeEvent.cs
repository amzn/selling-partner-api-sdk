/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// A fee event related to Amazon Imaging services.
    /// </summary>
    [DataContract(Name = "ImagingServicesFeeEvent")]
    public partial class ImagingServicesFeeEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagingServicesFeeEvent" /> class.
        /// </summary>
        /// <param name="imagingRequestBillingItemID">The identifier for the imaging services request..</param>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested..</param>
        /// <param name="postedDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="feeList">A list of fee component information..</param>
        public ImagingServicesFeeEvent(string imagingRequestBillingItemID = default(string), string aSIN = default(string), DateTime postedDate = default(DateTime), List<FeeComponent> feeList = default(List<FeeComponent>))
        {
            this.ImagingRequestBillingItemID = imagingRequestBillingItemID;
            this.ASIN = aSIN;
            this.PostedDate = postedDate;
            this.FeeList = feeList;
        }

        /// <summary>
        /// The identifier for the imaging services request.
        /// </summary>
        /// <value>The identifier for the imaging services request.</value>
        [DataMember(Name = "ImagingRequestBillingItemID", EmitDefaultValue = false)]
        public string ImagingRequestBillingItemID { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime PostedDate { get; set; }

        /// <summary>
        /// A list of fee component information.
        /// </summary>
        /// <value>A list of fee component information.</value>
        [DataMember(Name = "FeeList", EmitDefaultValue = false)]
        public List<FeeComponent> FeeList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImagingServicesFeeEvent {\n");
            sb.Append("  ImagingRequestBillingItemID: ").Append(ImagingRequestBillingItemID).Append("\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  FeeList: ").Append(FeeList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
