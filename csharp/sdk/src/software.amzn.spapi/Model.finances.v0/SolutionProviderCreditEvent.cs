/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// A credit given to a solution provider.
    /// </summary>
    [DataContract(Name = "SolutionProviderCreditEvent")]
    public partial class SolutionProviderCreditEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionProviderCreditEvent" /> class.
        /// </summary>
        /// <param name="providerTransactionType">The transaction type..</param>
        /// <param name="sellerOrderId">A seller-defined identifier for an order..</param>
        /// <param name="marketplaceId">The identifier of the marketplace where the order was placed..</param>
        /// <param name="marketplaceCountryCode">The two-letter country code of the country associated with the marketplace where the order was placed..</param>
        /// <param name="sellerId">The Amazon-defined identifier of the seller..</param>
        /// <param name="sellerStoreName">The store name where the payment event occurred..</param>
        /// <param name="providerId">The Amazon-defined identifier of the solution provider..</param>
        /// <param name="providerStoreName">The store name where the payment event occurred..</param>
        /// <param name="transactionAmount">transactionAmount.</param>
        /// <param name="transactionCreationDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        public SolutionProviderCreditEvent(string providerTransactionType = default(string), string sellerOrderId = default(string), string marketplaceId = default(string), string marketplaceCountryCode = default(string), string sellerId = default(string), string sellerStoreName = default(string), string providerId = default(string), string providerStoreName = default(string), Currency transactionAmount = default(Currency), DateTime transactionCreationDate = default(DateTime))
        {
            this.ProviderTransactionType = providerTransactionType;
            this.SellerOrderId = sellerOrderId;
            this.MarketplaceId = marketplaceId;
            this.MarketplaceCountryCode = marketplaceCountryCode;
            this.SellerId = sellerId;
            this.SellerStoreName = sellerStoreName;
            this.ProviderId = providerId;
            this.ProviderStoreName = providerStoreName;
            this.TransactionAmount = transactionAmount;
            this.TransactionCreationDate = transactionCreationDate;
        }

        /// <summary>
        /// The transaction type.
        /// </summary>
        /// <value>The transaction type.</value>
        [DataMember(Name = "ProviderTransactionType", EmitDefaultValue = false)]
        public string ProviderTransactionType { get; set; }

        /// <summary>
        /// A seller-defined identifier for an order.
        /// </summary>
        /// <value>A seller-defined identifier for an order.</value>
        [DataMember(Name = "SellerOrderId", EmitDefaultValue = false)]
        public string SellerOrderId { get; set; }

        /// <summary>
        /// The identifier of the marketplace where the order was placed.
        /// </summary>
        /// <value>The identifier of the marketplace where the order was placed.</value>
        [DataMember(Name = "MarketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The two-letter country code of the country associated with the marketplace where the order was placed.
        /// </summary>
        /// <value>The two-letter country code of the country associated with the marketplace where the order was placed.</value>
        [DataMember(Name = "MarketplaceCountryCode", EmitDefaultValue = false)]
        public string MarketplaceCountryCode { get; set; }

        /// <summary>
        /// The Amazon-defined identifier of the seller.
        /// </summary>
        /// <value>The Amazon-defined identifier of the seller.</value>
        [DataMember(Name = "SellerId", EmitDefaultValue = false)]
        public string SellerId { get; set; }

        /// <summary>
        /// The store name where the payment event occurred.
        /// </summary>
        /// <value>The store name where the payment event occurred.</value>
        [DataMember(Name = "SellerStoreName", EmitDefaultValue = false)]
        public string SellerStoreName { get; set; }

        /// <summary>
        /// The Amazon-defined identifier of the solution provider.
        /// </summary>
        /// <value>The Amazon-defined identifier of the solution provider.</value>
        [DataMember(Name = "ProviderId", EmitDefaultValue = false)]
        public string ProviderId { get; set; }

        /// <summary>
        /// The store name where the payment event occurred.
        /// </summary>
        /// <value>The store name where the payment event occurred.</value>
        [DataMember(Name = "ProviderStoreName", EmitDefaultValue = false)]
        public string ProviderStoreName { get; set; }

        /// <summary>
        /// Gets or Sets TransactionAmount
        /// </summary>
        [DataMember(Name = "TransactionAmount", EmitDefaultValue = false)]
        public Currency TransactionAmount { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "TransactionCreationDate", EmitDefaultValue = false)]
        public DateTime TransactionCreationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SolutionProviderCreditEvent {\n");
            sb.Append("  ProviderTransactionType: ").Append(ProviderTransactionType).Append("\n");
            sb.Append("  SellerOrderId: ").Append(SellerOrderId).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  MarketplaceCountryCode: ").Append(MarketplaceCountryCode).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  SellerStoreName: ").Append(SellerStoreName).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  ProviderStoreName: ").Append(ProviderStoreName).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  TransactionCreationDate: ").Append(TransactionCreationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
