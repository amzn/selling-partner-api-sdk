/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// An expense related to an affordability promotion.
    /// </summary>
    [DataContract(Name = "AffordabilityExpenseEvent")]
    public partial class AffordabilityExpenseEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AffordabilityExpenseEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AffordabilityExpenseEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AffordabilityExpenseEvent" /> class.
        /// </summary>
        /// <param name="amazonOrderId">An Amazon-defined identifier for an order..</param>
        /// <param name="postedDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="marketplaceId">An encrypted, Amazon-defined marketplace identifier..</param>
        /// <param name="transactionType">Indicates the type of transaction.   Possible values:  * Charge - For an affordability promotion expense.  * Refund - For an affordability promotion expense reversal..</param>
        /// <param name="baseExpense">baseExpense.</param>
        /// <param name="taxTypeCGST">taxTypeCGST (required).</param>
        /// <param name="taxTypeSGST">taxTypeSGST (required).</param>
        /// <param name="taxTypeIGST">taxTypeIGST (required).</param>
        /// <param name="totalExpense">totalExpense.</param>
        public AffordabilityExpenseEvent(string amazonOrderId = default(string), DateTime postedDate = default(DateTime), string marketplaceId = default(string), string transactionType = default(string), Currency baseExpense = default(Currency), Currency taxTypeCGST = default(Currency), Currency taxTypeSGST = default(Currency), Currency taxTypeIGST = default(Currency), Currency totalExpense = default(Currency))
        {
            // to ensure "taxTypeCGST" is required (not null)
            if (taxTypeCGST == null)
            {
                throw new ArgumentNullException("taxTypeCGST is a required property for AffordabilityExpenseEvent and cannot be null");
            }
            this.TaxTypeCGST = taxTypeCGST;
            // to ensure "taxTypeSGST" is required (not null)
            if (taxTypeSGST == null)
            {
                throw new ArgumentNullException("taxTypeSGST is a required property for AffordabilityExpenseEvent and cannot be null");
            }
            this.TaxTypeSGST = taxTypeSGST;
            // to ensure "taxTypeIGST" is required (not null)
            if (taxTypeIGST == null)
            {
                throw new ArgumentNullException("taxTypeIGST is a required property for AffordabilityExpenseEvent and cannot be null");
            }
            this.TaxTypeIGST = taxTypeIGST;
            this.AmazonOrderId = amazonOrderId;
            this.PostedDate = postedDate;
            this.MarketplaceId = marketplaceId;
            this.TransactionType = transactionType;
            this.BaseExpense = baseExpense;
            this.TotalExpense = totalExpense;
        }

        /// <summary>
        /// An Amazon-defined identifier for an order.
        /// </summary>
        /// <value>An Amazon-defined identifier for an order.</value>
        [DataMember(Name = "AmazonOrderId", EmitDefaultValue = false)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime PostedDate { get; set; }

        /// <summary>
        /// An encrypted, Amazon-defined marketplace identifier.
        /// </summary>
        /// <value>An encrypted, Amazon-defined marketplace identifier.</value>
        [DataMember(Name = "MarketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Indicates the type of transaction.   Possible values:  * Charge - For an affordability promotion expense.  * Refund - For an affordability promotion expense reversal.
        /// </summary>
        /// <value>Indicates the type of transaction.   Possible values:  * Charge - For an affordability promotion expense.  * Refund - For an affordability promotion expense reversal.</value>
        [DataMember(Name = "TransactionType", EmitDefaultValue = false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets BaseExpense
        /// </summary>
        [DataMember(Name = "BaseExpense", EmitDefaultValue = false)]
        public Currency BaseExpense { get; set; }

        /// <summary>
        /// Gets or Sets TaxTypeCGST
        /// </summary>
        [DataMember(Name = "TaxTypeCGST", IsRequired = true, EmitDefaultValue = true)]
        public Currency TaxTypeCGST { get; set; }

        /// <summary>
        /// Gets or Sets TaxTypeSGST
        /// </summary>
        [DataMember(Name = "TaxTypeSGST", IsRequired = true, EmitDefaultValue = true)]
        public Currency TaxTypeSGST { get; set; }

        /// <summary>
        /// Gets or Sets TaxTypeIGST
        /// </summary>
        [DataMember(Name = "TaxTypeIGST", IsRequired = true, EmitDefaultValue = true)]
        public Currency TaxTypeIGST { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpense
        /// </summary>
        [DataMember(Name = "TotalExpense", EmitDefaultValue = false)]
        public Currency TotalExpense { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AffordabilityExpenseEvent {\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  BaseExpense: ").Append(BaseExpense).Append("\n");
            sb.Append("  TaxTypeCGST: ").Append(TaxTypeCGST).Append("\n");
            sb.Append("  TaxTypeSGST: ").Append(TaxTypeSGST).Append("\n");
            sb.Append("  TaxTypeIGST: ").Append(TaxTypeIGST).Append("\n");
            sb.Append("  TotalExpense: ").Append(TotalExpense).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
