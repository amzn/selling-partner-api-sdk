/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// An item from a SAFE-T claim reimbursement.
    /// </summary>
    [DataContract(Name = "SAFETReimbursementItem")]
    public partial class SAFETReimbursementItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SAFETReimbursementItem" /> class.
        /// </summary>
        /// <param name="itemChargeList">A list of charge information on the seller&#39;s account..</param>
        /// <param name="productDescription">The description of the item as shown on the product detail page on the retail website..</param>
        /// <param name="quantity">The number of units of the item being reimbursed..</param>
        public SAFETReimbursementItem(List<ChargeComponent> itemChargeList = default(List<ChargeComponent>), string productDescription = default(string), string quantity = default(string))
        {
            this.ItemChargeList = itemChargeList;
            this.ProductDescription = productDescription;
            this.Quantity = quantity;
        }

        /// <summary>
        /// A list of charge information on the seller&#39;s account.
        /// </summary>
        /// <value>A list of charge information on the seller&#39;s account.</value>
        [DataMember(Name = "itemChargeList", EmitDefaultValue = false)]
        public List<ChargeComponent> ItemChargeList { get; set; }

        /// <summary>
        /// The description of the item as shown on the product detail page on the retail website.
        /// </summary>
        /// <value>The description of the item as shown on the product detail page on the retail website.</value>
        [DataMember(Name = "productDescription", EmitDefaultValue = false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// The number of units of the item being reimbursed.
        /// </summary>
        /// <value>The number of units of the item being reimbursed.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public string Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SAFETReimbursementItem {\n");
            sb.Append("  ItemChargeList: ").Append(ItemChargeList).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
