/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// An item of a shipment, refund, guarantee claim, or chargeback.
    /// </summary>
    [DataContract(Name = "ShipmentItem")]
    public partial class ShipmentItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentItem" /> class.
        /// </summary>
        /// <param name="sellerSKU">The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with every call to the Selling Partner API..</param>
        /// <param name="orderItemId">An Amazon-defined order item identifier..</param>
        /// <param name="orderAdjustmentItemId">An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events..</param>
        /// <param name="quantityShipped">The number of items shipped..</param>
        /// <param name="itemChargeList">A list of charge information on the seller&#39;s account..</param>
        /// <param name="itemChargeAdjustmentList">A list of charge information on the seller&#39;s account..</param>
        /// <param name="itemFeeList">A list of fee component information..</param>
        /// <param name="itemFeeAdjustmentList">A list of fee component information..</param>
        /// <param name="itemTaxWithheldList">A list of information about taxes withheld..</param>
        /// <param name="promotionList">A list of promotions..</param>
        /// <param name="promotionAdjustmentList">A list of promotions..</param>
        /// <param name="costOfPointsGranted">costOfPointsGranted.</param>
        /// <param name="costOfPointsReturned">costOfPointsReturned.</param>
        public ShipmentItem(string sellerSKU = default(string), string orderItemId = default(string), string orderAdjustmentItemId = default(string), int quantityShipped = default(int), List<ChargeComponent> itemChargeList = default(List<ChargeComponent>), List<ChargeComponent> itemChargeAdjustmentList = default(List<ChargeComponent>), List<FeeComponent> itemFeeList = default(List<FeeComponent>), List<FeeComponent> itemFeeAdjustmentList = default(List<FeeComponent>), List<TaxWithheldComponent> itemTaxWithheldList = default(List<TaxWithheldComponent>), List<Promotion> promotionList = default(List<Promotion>), List<Promotion> promotionAdjustmentList = default(List<Promotion>), Currency costOfPointsGranted = default(Currency), Currency costOfPointsReturned = default(Currency))
        {
            this.SellerSKU = sellerSKU;
            this.OrderItemId = orderItemId;
            this.OrderAdjustmentItemId = orderAdjustmentItemId;
            this.QuantityShipped = quantityShipped;
            this.ItemChargeList = itemChargeList;
            this.ItemChargeAdjustmentList = itemChargeAdjustmentList;
            this.ItemFeeList = itemFeeList;
            this.ItemFeeAdjustmentList = itemFeeAdjustmentList;
            this.ItemTaxWithheldList = itemTaxWithheldList;
            this.PromotionList = promotionList;
            this.PromotionAdjustmentList = promotionAdjustmentList;
            this.CostOfPointsGranted = costOfPointsGranted;
            this.CostOfPointsReturned = costOfPointsReturned;
        }

        /// <summary>
        /// The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with every call to the Selling Partner API.
        /// </summary>
        /// <value>The seller SKU of the item. The seller SKU is qualified by the seller&#39;s seller ID, which is included with every call to the Selling Partner API.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// An Amazon-defined order item identifier.
        /// </summary>
        /// <value>An Amazon-defined order item identifier.</value>
        [DataMember(Name = "OrderItemId", EmitDefaultValue = false)]
        public string OrderItemId { get; set; }

        /// <summary>
        /// An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events.
        /// </summary>
        /// <value>An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events.</value>
        [DataMember(Name = "OrderAdjustmentItemId", EmitDefaultValue = false)]
        public string OrderAdjustmentItemId { get; set; }

        /// <summary>
        /// The number of items shipped.
        /// </summary>
        /// <value>The number of items shipped.</value>
        [DataMember(Name = "QuantityShipped", EmitDefaultValue = false)]
        public int QuantityShipped { get; set; }

        /// <summary>
        /// A list of charge information on the seller&#39;s account.
        /// </summary>
        /// <value>A list of charge information on the seller&#39;s account.</value>
        [DataMember(Name = "ItemChargeList", EmitDefaultValue = false)]
        public List<ChargeComponent> ItemChargeList { get; set; }

        /// <summary>
        /// A list of charge information on the seller&#39;s account.
        /// </summary>
        /// <value>A list of charge information on the seller&#39;s account.</value>
        [DataMember(Name = "ItemChargeAdjustmentList", EmitDefaultValue = false)]
        public List<ChargeComponent> ItemChargeAdjustmentList { get; set; }

        /// <summary>
        /// A list of fee component information.
        /// </summary>
        /// <value>A list of fee component information.</value>
        [DataMember(Name = "ItemFeeList", EmitDefaultValue = false)]
        public List<FeeComponent> ItemFeeList { get; set; }

        /// <summary>
        /// A list of fee component information.
        /// </summary>
        /// <value>A list of fee component information.</value>
        [DataMember(Name = "ItemFeeAdjustmentList", EmitDefaultValue = false)]
        public List<FeeComponent> ItemFeeAdjustmentList { get; set; }

        /// <summary>
        /// A list of information about taxes withheld.
        /// </summary>
        /// <value>A list of information about taxes withheld.</value>
        [DataMember(Name = "ItemTaxWithheldList", EmitDefaultValue = false)]
        public List<TaxWithheldComponent> ItemTaxWithheldList { get; set; }

        /// <summary>
        /// A list of promotions.
        /// </summary>
        /// <value>A list of promotions.</value>
        [DataMember(Name = "PromotionList", EmitDefaultValue = false)]
        public List<Promotion> PromotionList { get; set; }

        /// <summary>
        /// A list of promotions.
        /// </summary>
        /// <value>A list of promotions.</value>
        [DataMember(Name = "PromotionAdjustmentList", EmitDefaultValue = false)]
        public List<Promotion> PromotionAdjustmentList { get; set; }

        /// <summary>
        /// Gets or Sets CostOfPointsGranted
        /// </summary>
        [DataMember(Name = "CostOfPointsGranted", EmitDefaultValue = false)]
        public Currency CostOfPointsGranted { get; set; }

        /// <summary>
        /// Gets or Sets CostOfPointsReturned
        /// </summary>
        [DataMember(Name = "CostOfPointsReturned", EmitDefaultValue = false)]
        public Currency CostOfPointsReturned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentItem {\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  OrderItemId: ").Append(OrderItemId).Append("\n");
            sb.Append("  OrderAdjustmentItemId: ").Append(OrderAdjustmentItemId).Append("\n");
            sb.Append("  QuantityShipped: ").Append(QuantityShipped).Append("\n");
            sb.Append("  ItemChargeList: ").Append(ItemChargeList).Append("\n");
            sb.Append("  ItemChargeAdjustmentList: ").Append(ItemChargeAdjustmentList).Append("\n");
            sb.Append("  ItemFeeList: ").Append(ItemFeeList).Append("\n");
            sb.Append("  ItemFeeAdjustmentList: ").Append(ItemFeeAdjustmentList).Append("\n");
            sb.Append("  ItemTaxWithheldList: ").Append(ItemTaxWithheldList).Append("\n");
            sb.Append("  PromotionList: ").Append(PromotionList).Append("\n");
            sb.Append("  PromotionAdjustmentList: ").Append(PromotionAdjustmentList).Append("\n");
            sb.Append("  CostOfPointsGranted: ").Append(CostOfPointsGranted).Append("\n");
            sb.Append("  CostOfPointsReturned: ").Append(CostOfPointsReturned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
