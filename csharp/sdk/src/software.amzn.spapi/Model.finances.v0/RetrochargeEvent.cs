/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// A retrocharge or retrocharge reversal.
    /// </summary>
    [DataContract(Name = "RetrochargeEvent")]
    public partial class RetrochargeEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrochargeEvent" /> class.
        /// </summary>
        /// <param name="retrochargeEventType">The type of event.  Possible values:  * Retrocharge  * RetrochargeReversal.</param>
        /// <param name="amazonOrderId">An Amazon-defined identifier for an order..</param>
        /// <param name="postedDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="baseTax">baseTax.</param>
        /// <param name="shippingTax">shippingTax.</param>
        /// <param name="marketplaceName">The name of the marketplace where the retrocharge event occurred..</param>
        /// <param name="retrochargeTaxWithheldList">A list of information about taxes withheld..</param>
        public RetrochargeEvent(string retrochargeEventType = default(string), string amazonOrderId = default(string), DateTime postedDate = default(DateTime), Currency baseTax = default(Currency), Currency shippingTax = default(Currency), string marketplaceName = default(string), List<TaxWithheldComponent> retrochargeTaxWithheldList = default(List<TaxWithheldComponent>))
        {
            this.RetrochargeEventType = retrochargeEventType;
            this.AmazonOrderId = amazonOrderId;
            this.PostedDate = postedDate;
            this.BaseTax = baseTax;
            this.ShippingTax = shippingTax;
            this.MarketplaceName = marketplaceName;
            this.RetrochargeTaxWithheldList = retrochargeTaxWithheldList;
        }

        /// <summary>
        /// The type of event.  Possible values:  * Retrocharge  * RetrochargeReversal
        /// </summary>
        /// <value>The type of event.  Possible values:  * Retrocharge  * RetrochargeReversal</value>
        [DataMember(Name = "RetrochargeEventType", EmitDefaultValue = false)]
        public string RetrochargeEventType { get; set; }

        /// <summary>
        /// An Amazon-defined identifier for an order.
        /// </summary>
        /// <value>An Amazon-defined identifier for an order.</value>
        [DataMember(Name = "AmazonOrderId", EmitDefaultValue = false)]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime PostedDate { get; set; }

        /// <summary>
        /// Gets or Sets BaseTax
        /// </summary>
        [DataMember(Name = "BaseTax", EmitDefaultValue = false)]
        public Currency BaseTax { get; set; }

        /// <summary>
        /// Gets or Sets ShippingTax
        /// </summary>
        [DataMember(Name = "ShippingTax", EmitDefaultValue = false)]
        public Currency ShippingTax { get; set; }

        /// <summary>
        /// The name of the marketplace where the retrocharge event occurred.
        /// </summary>
        /// <value>The name of the marketplace where the retrocharge event occurred.</value>
        [DataMember(Name = "MarketplaceName", EmitDefaultValue = false)]
        public string MarketplaceName { get; set; }

        /// <summary>
        /// A list of information about taxes withheld.
        /// </summary>
        /// <value>A list of information about taxes withheld.</value>
        [DataMember(Name = "RetrochargeTaxWithheldList", EmitDefaultValue = false)]
        public List<TaxWithheldComponent> RetrochargeTaxWithheldList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RetrochargeEvent {\n");
            sb.Append("  RetrochargeEventType: ").Append(RetrochargeEventType).Append("\n");
            sb.Append("  AmazonOrderId: ").Append(AmazonOrderId).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  BaseTax: ").Append(BaseTax).Append("\n");
            sb.Append("  ShippingTax: ").Append(ShippingTax).Append("\n");
            sb.Append("  MarketplaceName: ").Append(MarketplaceName).Append("\n");
            sb.Append("  RetrochargeTaxWithheldList: ").Append(RetrochargeTaxWithheldList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
