/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// A network commingling transaction event.
    /// </summary>
    [DataContract(Name = "NetworkComminglingTransactionEvent")]
    public partial class NetworkComminglingTransactionEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkComminglingTransactionEvent" /> class.
        /// </summary>
        /// <param name="transactionType">The type of network item swap.  Possible values:  * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.  * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces..</param>
        /// <param name="postedDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="netCoTransactionID">The identifier for the network item swap..</param>
        /// <param name="swapReason">The reason for the network item swap..</param>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN) of the swapped item..</param>
        /// <param name="marketplaceId">The marketplace in which the event took place..</param>
        /// <param name="taxExclusiveAmount">taxExclusiveAmount.</param>
        /// <param name="taxAmount">taxAmount.</param>
        public NetworkComminglingTransactionEvent(string transactionType = default(string), DateTime postedDate = default(DateTime), string netCoTransactionID = default(string), string swapReason = default(string), string aSIN = default(string), string marketplaceId = default(string), Currency taxExclusiveAmount = default(Currency), Currency taxAmount = default(Currency))
        {
            this.TransactionType = transactionType;
            this.PostedDate = postedDate;
            this.NetCoTransactionID = netCoTransactionID;
            this.SwapReason = swapReason;
            this.ASIN = aSIN;
            this.MarketplaceId = marketplaceId;
            this.TaxExclusiveAmount = taxExclusiveAmount;
            this.TaxAmount = taxAmount;
        }

        /// <summary>
        /// The type of network item swap.  Possible values:  * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.  * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces.
        /// </summary>
        /// <value>The type of network item swap.  Possible values:  * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.  * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces.</value>
        [DataMember(Name = "TransactionType", EmitDefaultValue = false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime PostedDate { get; set; }

        /// <summary>
        /// The identifier for the network item swap.
        /// </summary>
        /// <value>The identifier for the network item swap.</value>
        [DataMember(Name = "NetCoTransactionID", EmitDefaultValue = false)]
        public string NetCoTransactionID { get; set; }

        /// <summary>
        /// The reason for the network item swap.
        /// </summary>
        /// <value>The reason for the network item swap.</value>
        [DataMember(Name = "SwapReason", EmitDefaultValue = false)]
        public string SwapReason { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the swapped item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the swapped item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }

        /// <summary>
        /// The marketplace in which the event took place.
        /// </summary>
        /// <value>The marketplace in which the event took place.</value>
        [DataMember(Name = "MarketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets TaxExclusiveAmount
        /// </summary>
        [DataMember(Name = "TaxExclusiveAmount", EmitDefaultValue = false)]
        public Currency TaxExclusiveAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name = "TaxAmount", EmitDefaultValue = false)]
        public Currency TaxAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NetworkComminglingTransactionEvent {\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  NetCoTransactionID: ").Append(NetCoTransactionID).Append("\n");
            sb.Append("  SwapReason: ").Append(SwapReason).Append("\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  TaxExclusiveAmount: ").Append(TaxExclusiveAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
