/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// Failed ad hoc disbursement event list.
    /// </summary>
    [DataContract(Name = "FailedAdhocDisbursementEvent")]
    public partial class FailedAdhocDisbursementEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FailedAdhocDisbursementEvent" /> class.
        /// </summary>
        /// <param name="fundsTransfersType">The type of fund transfer.   Example \&quot;Refund\&quot;.</param>
        /// <param name="transferId">The transfer identifier..</param>
        /// <param name="disbursementId">The disbursement identifier..</param>
        /// <param name="paymentDisbursementType">The type of payment for disbursement.   Example &#x60;CREDIT_CARD&#x60;.</param>
        /// <param name="status">The status of the failed &#x60;AdhocDisbursement&#x60;.   Example &#x60;HARD_DECLINED&#x60;.</param>
        /// <param name="transferAmount">transferAmount.</param>
        /// <param name="postedDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        public FailedAdhocDisbursementEvent(string fundsTransfersType = default(string), string transferId = default(string), string disbursementId = default(string), string paymentDisbursementType = default(string), string status = default(string), Currency transferAmount = default(Currency), DateTime postedDate = default(DateTime))
        {
            this.FundsTransfersType = fundsTransfersType;
            this.TransferId = transferId;
            this.DisbursementId = disbursementId;
            this.PaymentDisbursementType = paymentDisbursementType;
            this.Status = status;
            this.TransferAmount = transferAmount;
            this.PostedDate = postedDate;
        }

        /// <summary>
        /// The type of fund transfer.   Example \&quot;Refund\&quot;
        /// </summary>
        /// <value>The type of fund transfer.   Example \&quot;Refund\&quot;</value>
        [DataMember(Name = "FundsTransfersType", EmitDefaultValue = false)]
        public string FundsTransfersType { get; set; }

        /// <summary>
        /// The transfer identifier.
        /// </summary>
        /// <value>The transfer identifier.</value>
        [DataMember(Name = "TransferId", EmitDefaultValue = false)]
        public string TransferId { get; set; }

        /// <summary>
        /// The disbursement identifier.
        /// </summary>
        /// <value>The disbursement identifier.</value>
        [DataMember(Name = "DisbursementId", EmitDefaultValue = false)]
        public string DisbursementId { get; set; }

        /// <summary>
        /// The type of payment for disbursement.   Example &#x60;CREDIT_CARD&#x60;
        /// </summary>
        /// <value>The type of payment for disbursement.   Example &#x60;CREDIT_CARD&#x60;</value>
        [DataMember(Name = "PaymentDisbursementType", EmitDefaultValue = false)]
        public string PaymentDisbursementType { get; set; }

        /// <summary>
        /// The status of the failed &#x60;AdhocDisbursement&#x60;.   Example &#x60;HARD_DECLINED&#x60;
        /// </summary>
        /// <value>The status of the failed &#x60;AdhocDisbursement&#x60;.   Example &#x60;HARD_DECLINED&#x60;</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TransferAmount
        /// </summary>
        [DataMember(Name = "TransferAmount", EmitDefaultValue = false)]
        public Currency TransferAmount { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime PostedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FailedAdhocDisbursementEvent {\n");
            sb.Append("  FundsTransfersType: ").Append(FundsTransfersType).Append("\n");
            sb.Append("  TransferId: ").Append(TransferId).Append("\n");
            sb.Append("  DisbursementId: ").Append(DisbursementId).Append("\n");
            sb.Append("  PaymentDisbursementType: ").Append(PaymentDisbursementType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransferAmount: ").Append(TransferAmount).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
