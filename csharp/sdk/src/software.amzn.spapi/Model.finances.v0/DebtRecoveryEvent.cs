/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// A debt payment or debt adjustment.
    /// </summary>
    [DataContract(Name = "DebtRecoveryEvent")]
    public partial class DebtRecoveryEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebtRecoveryEvent" /> class.
        /// </summary>
        /// <param name="debtRecoveryType">The debt recovery type.  Possible values:  * DebtPayment  * DebtPaymentFailure  * DebtAdjustment.</param>
        /// <param name="recoveryAmount">recoveryAmount.</param>
        /// <param name="overPaymentCredit">overPaymentCredit.</param>
        /// <param name="debtRecoveryItemList">A list of debt recovery item information..</param>
        /// <param name="chargeInstrumentList">A list of payment instruments..</param>
        public DebtRecoveryEvent(string debtRecoveryType = default(string), Currency recoveryAmount = default(Currency), Currency overPaymentCredit = default(Currency), List<DebtRecoveryItem> debtRecoveryItemList = default(List<DebtRecoveryItem>), List<ChargeInstrument> chargeInstrumentList = default(List<ChargeInstrument>))
        {
            this.DebtRecoveryType = debtRecoveryType;
            this.RecoveryAmount = recoveryAmount;
            this.OverPaymentCredit = overPaymentCredit;
            this.DebtRecoveryItemList = debtRecoveryItemList;
            this.ChargeInstrumentList = chargeInstrumentList;
        }

        /// <summary>
        /// The debt recovery type.  Possible values:  * DebtPayment  * DebtPaymentFailure  * DebtAdjustment
        /// </summary>
        /// <value>The debt recovery type.  Possible values:  * DebtPayment  * DebtPaymentFailure  * DebtAdjustment</value>
        [DataMember(Name = "DebtRecoveryType", EmitDefaultValue = false)]
        public string DebtRecoveryType { get; set; }

        /// <summary>
        /// Gets or Sets RecoveryAmount
        /// </summary>
        [DataMember(Name = "RecoveryAmount", EmitDefaultValue = false)]
        public Currency RecoveryAmount { get; set; }

        /// <summary>
        /// Gets or Sets OverPaymentCredit
        /// </summary>
        [DataMember(Name = "OverPaymentCredit", EmitDefaultValue = false)]
        public Currency OverPaymentCredit { get; set; }

        /// <summary>
        /// A list of debt recovery item information.
        /// </summary>
        /// <value>A list of debt recovery item information.</value>
        [DataMember(Name = "DebtRecoveryItemList", EmitDefaultValue = false)]
        public List<DebtRecoveryItem> DebtRecoveryItemList { get; set; }

        /// <summary>
        /// A list of payment instruments.
        /// </summary>
        /// <value>A list of payment instruments.</value>
        [DataMember(Name = "ChargeInstrumentList", EmitDefaultValue = false)]
        public List<ChargeInstrument> ChargeInstrumentList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DebtRecoveryEvent {\n");
            sb.Append("  DebtRecoveryType: ").Append(DebtRecoveryType).Append("\n");
            sb.Append("  RecoveryAmount: ").Append(RecoveryAmount).Append("\n");
            sb.Append("  OverPaymentCredit: ").Append(OverPaymentCredit).Append("\n");
            sb.Append("  DebtRecoveryItemList: ").Append(DebtRecoveryItemList).Append("\n");
            sb.Append("  ChargeInstrumentList: ").Append(ChargeInstrumentList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
