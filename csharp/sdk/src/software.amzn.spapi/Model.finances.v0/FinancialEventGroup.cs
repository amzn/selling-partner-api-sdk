/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.finances.v0
{
    /// <summary>
    /// Information related to a financial event group.
    /// </summary>
    [DataContract(Name = "FinancialEventGroup")]
    public partial class FinancialEventGroup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialEventGroup" /> class.
        /// </summary>
        /// <param name="financialEventGroupId">A unique identifier for the financial event group..</param>
        /// <param name="processingStatus">The processing status of the financial event group indicates whether the balance of the financial event group is settled.  Possible values:  * Open  * Closed.</param>
        /// <param name="fundTransferStatus">The status of the fund transfer..</param>
        /// <param name="originalTotal">originalTotal.</param>
        /// <param name="convertedTotal">convertedTotal.</param>
        /// <param name="fundTransferDate">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="traceId">The trace identifier used by sellers to look up transactions externally..</param>
        /// <param name="accountTail">The account tail of the payment instrument..</param>
        /// <param name="beginningBalance">beginningBalance.</param>
        /// <param name="financialEventGroupStart">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        /// <param name="financialEventGroupEnd">Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate)..</param>
        public FinancialEventGroup(string financialEventGroupId = default(string), string processingStatus = default(string), string fundTransferStatus = default(string), Currency originalTotal = default(Currency), Currency convertedTotal = default(Currency), DateTime fundTransferDate = default(DateTime), string traceId = default(string), string accountTail = default(string), Currency beginningBalance = default(Currency), DateTime financialEventGroupStart = default(DateTime), DateTime financialEventGroupEnd = default(DateTime))
        {
            this.FinancialEventGroupId = financialEventGroupId;
            this.ProcessingStatus = processingStatus;
            this.FundTransferStatus = fundTransferStatus;
            this.OriginalTotal = originalTotal;
            this.ConvertedTotal = convertedTotal;
            this.FundTransferDate = fundTransferDate;
            this.TraceId = traceId;
            this.AccountTail = accountTail;
            this.BeginningBalance = beginningBalance;
            this.FinancialEventGroupStart = financialEventGroupStart;
            this.FinancialEventGroupEnd = financialEventGroupEnd;
        }

        /// <summary>
        /// A unique identifier for the financial event group.
        /// </summary>
        /// <value>A unique identifier for the financial event group.</value>
        [DataMember(Name = "FinancialEventGroupId", EmitDefaultValue = false)]
        public string FinancialEventGroupId { get; set; }

        /// <summary>
        /// The processing status of the financial event group indicates whether the balance of the financial event group is settled.  Possible values:  * Open  * Closed
        /// </summary>
        /// <value>The processing status of the financial event group indicates whether the balance of the financial event group is settled.  Possible values:  * Open  * Closed</value>
        [DataMember(Name = "ProcessingStatus", EmitDefaultValue = false)]
        public string ProcessingStatus { get; set; }

        /// <summary>
        /// The status of the fund transfer.
        /// </summary>
        /// <value>The status of the fund transfer.</value>
        [DataMember(Name = "FundTransferStatus", EmitDefaultValue = false)]
        public string FundTransferStatus { get; set; }

        /// <summary>
        /// Gets or Sets OriginalTotal
        /// </summary>
        [DataMember(Name = "OriginalTotal", EmitDefaultValue = false)]
        public Currency OriginalTotal { get; set; }

        /// <summary>
        /// Gets or Sets ConvertedTotal
        /// </summary>
        [DataMember(Name = "ConvertedTotal", EmitDefaultValue = false)]
        public Currency ConvertedTotal { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "FundTransferDate", EmitDefaultValue = false)]
        public DateTime FundTransferDate { get; set; }

        /// <summary>
        /// The trace identifier used by sellers to look up transactions externally.
        /// </summary>
        /// <value>The trace identifier used by sellers to look up transactions externally.</value>
        [DataMember(Name = "TraceId", EmitDefaultValue = false)]
        public string TraceId { get; set; }

        /// <summary>
        /// The account tail of the payment instrument.
        /// </summary>
        /// <value>The account tail of the payment instrument.</value>
        [DataMember(Name = "AccountTail", EmitDefaultValue = false)]
        public string AccountTail { get; set; }

        /// <summary>
        /// Gets or Sets BeginningBalance
        /// </summary>
        [DataMember(Name = "BeginningBalance", EmitDefaultValue = false)]
        public Currency BeginningBalance { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "FinancialEventGroupStart", EmitDefaultValue = false)]
        public DateTime FinancialEventGroupStart { get; set; }

        /// <summary>
        /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
        /// </summary>
        /// <value>Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).</value>
        [DataMember(Name = "FinancialEventGroupEnd", EmitDefaultValue = false)]
        public DateTime FinancialEventGroupEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinancialEventGroup {\n");
            sb.Append("  FinancialEventGroupId: ").Append(FinancialEventGroupId).Append("\n");
            sb.Append("  ProcessingStatus: ").Append(ProcessingStatus).Append("\n");
            sb.Append("  FundTransferStatus: ").Append(FundTransferStatus).Append("\n");
            sb.Append("  OriginalTotal: ").Append(OriginalTotal).Append("\n");
            sb.Append("  ConvertedTotal: ").Append(ConvertedTotal).Append("\n");
            sb.Append("  FundTransferDate: ").Append(FundTransferDate).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  AccountTail: ").Append(AccountTail).Append("\n");
            sb.Append("  BeginningBalance: ").Append(BeginningBalance).Append("\n");
            sb.Append("  FinancialEventGroupStart: ").Append(FinancialEventGroupStart).Append("\n");
            sb.Append("  FinancialEventGroupEnd: ").Append(FinancialEventGroupEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
