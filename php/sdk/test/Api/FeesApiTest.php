<?php
/**
 * FeesApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\FeesApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use OpenAPI\Client\ObjectSerializer;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * FeesApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FeesApiTest extends TestCase
{
    private FeesApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('FeesApi', $this->getName());
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new FeesApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $this->assertEquals($responseParams, $response);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for getMyFeesEstimateForASIN_200
     */
    public function testGetMyFeesEstimateForASIN200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetMyFeesEstimateForASIN200', 'FeesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetMyFeesEstimateResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;FeesEstimateRequest&quot; : {
                &quot;MarketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
                &quot;IsAmazonFulfilled&quot; : false,
                &quot;PriceToEstimateFees&quot; : {
                  &quot;ListingPrice&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Amount&quot; : 10
                  },
                  &quot;Shipping&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Amount&quot; : 10
                  },
                  &quot;Points&quot; : {
                    &quot;PointsNumber&quot; : 0,
                    &quot;PointsMonetaryValue&quot; : {
                      &quot;CurrencyCode&quot; : &quot;USD&quot;,
                      &quot;Amount&quot; : 0
                    }
                  }
                },
                &quot;Identifier&quot; : &quot;UmaS1&quot;
              }
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;FeesEstimateResult&quot; : {
            &quot;Status&quot; : &quot;Success&quot;,
            &quot;FeesEstimateIdentifier&quot; : {
              &quot;MarketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
              &quot;IdType&quot; : &quot;ASIN&quot;,
              &quot;SellerId&quot; : &quot;AXXXXXXXXXXXXX&quot;,
              &quot;SellerInputIdentifier&quot; : &quot;UmaS1&quot;,
              &quot;IsAmazonFulfilled&quot; : false,
              &quot;IdValue&quot; : &quot;B00V5DG6IQ&quot;,
              &quot;PriceToEstimateFees&quot; : {
                &quot;ListingPrice&quot; : {
                  &quot;CurrencyCode&quot; : &quot;USD&quot;,
                  &quot;Amount&quot; : 10
                },
                &quot;Shipping&quot; : {
                  &quot;CurrencyCode&quot; : &quot;USD&quot;,
                  &quot;Amount&quot; : 10
                },
                &quot;Points&quot; : {
                  &quot;PointsNumber&quot; : 0,
                  &quot;PointsMonetaryValue&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Amount&quot; : 0
                  }
                }
              }
            },
            &quot;FeesEstimate&quot; : {
              &quot;TimeOfFeesEstimation&quot; : &quot;Mon Oct 28 18:49:32 UTC 2019&quot;,
              &quot;TotalFeesEstimate&quot; : {
                &quot;CurrencyCode&quot; : &quot;USD&quot;,
                &quot;Amount&quot; : 3.0
              },
              &quot;FeeDetailList&quot; : [ ]
            },
            &quot;Error&quot; : {
              &quot;Type&quot; : &quot;&quot;,
              &quot;Code&quot; : &quot;&quot;,
              &quot;Message&quot; : &quot;&quot;,
              &quot;Detail&quot; : [ ]
            }
          }
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getMyFeesEstimateForASIN'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FeesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getMyFeesEstimateForASINWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getMyFeesEstimateForASIN_400
     */
    public function testGetMyFeesEstimateForASIN400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetMyFeesEstimateForASIN400', 'FeesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetMyFeesEstimateResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;FeesEstimateRequest&quot; : {
                &quot;MarketplaceId&quot; : &quot;WRNGMRKTPLCE&quot;
              }
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Incorrect Marketplace identifier.&quot;,
          &quot;details&quot; : &quot;&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getMyFeesEstimateForASIN'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FeesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getMyFeesEstimateForASINWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getMyFeesEstimateForASIN_401
     */
    public function testGetMyFeesEstimateForASIN401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForASIN_403
     */
    public function testGetMyFeesEstimateForASIN403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForASIN_404
     */
    public function testGetMyFeesEstimateForASIN404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForASIN_429
     */
    public function testGetMyFeesEstimateForASIN429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForASIN_500
     */
    public function testGetMyFeesEstimateForASIN500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForASIN_503
     */
    public function testGetMyFeesEstimateForASIN503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForSKU_200
     */
    public function testGetMyFeesEstimateForSKU200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetMyFeesEstimateForSKU200', 'FeesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetMyFeesEstimateResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;FeesEstimateRequest&quot; : {
                &quot;MarketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
                &quot;IsAmazonFulfilled&quot; : false,
                &quot;PriceToEstimateFees&quot; : {
                  &quot;ListingPrice&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Amount&quot; : 10
                  },
                  &quot;Shipping&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Amount&quot; : 10
                  },
                  &quot;Points&quot; : {
                    &quot;PointsNumber&quot; : 0,
                    &quot;PointsMonetaryValue&quot; : {
                      &quot;CurrencyCode&quot; : &quot;USD&quot;,
                      &quot;Amount&quot; : 0
                    }
                  }
                },
                &quot;Identifier&quot; : &quot;UmaS1&quot;
              }
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;FeesEstimateResult&quot; : {
            &quot;Status&quot; : &quot;Success&quot;,
            &quot;FeesEstimateIdentifier&quot; : {
              &quot;MarketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
              &quot;IdType&quot; : &quot;ASIN&quot;,
              &quot;SellerId&quot; : &quot;AXXXXXXXXXXXXX&quot;,
              &quot;SellerInputIdentifier&quot; : &quot;UmaS1&quot;,
              &quot;IsAmazonFulfilled&quot; : false,
              &quot;IdValue&quot; : &quot;B00V5DG6IQ&quot;,
              &quot;PriceToEstimateFees&quot; : {
                &quot;ListingPrice&quot; : {
                  &quot;CurrencyCode&quot; : &quot;USD&quot;,
                  &quot;Amount&quot; : 10
                },
                &quot;Shipping&quot; : {
                  &quot;CurrencyCode&quot; : &quot;USD&quot;,
                  &quot;Amount&quot; : 10
                },
                &quot;Points&quot; : {
                  &quot;PointsNumber&quot; : 0,
                  &quot;PointsMonetaryValue&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Amount&quot; : 0
                  }
                }
              }
            },
            &quot;FeesEstimate&quot; : {
              &quot;TimeOfFeesEstimation&quot; : &quot;Mon Oct 28 18:49:32 UTC 2019&quot;,
              &quot;TotalFeesEstimate&quot; : {
                &quot;CurrencyCode&quot; : &quot;USD&quot;,
                &quot;Amount&quot; : 3.0
              },
              &quot;FeeDetailList&quot; : [ ]
            },
            &quot;Error&quot; : {
              &quot;Type&quot; : &quot;&quot;,
              &quot;Code&quot; : &quot;&quot;,
              &quot;Message&quot; : &quot;&quot;,
              &quot;Detail&quot; : [ ]
            }
          }
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getMyFeesEstimateForSKU'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FeesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getMyFeesEstimateForSKUWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getMyFeesEstimateForSKU_400
     */
    public function testGetMyFeesEstimateForSKU400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetMyFeesEstimateForSKU400', 'FeesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetMyFeesEstimateResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;FeesEstimateRequest&quot; : {
                &quot;MarketplaceId&quot; : &quot;WRNGMRKTPLCE&quot;
              }
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Incorrect Marketplace identifier.&quot;,
          &quot;details&quot; : &quot;&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getMyFeesEstimateForSKU'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FeesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getMyFeesEstimateForSKUWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getMyFeesEstimateForSKU_401
     */
    public function testGetMyFeesEstimateForSKU401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForSKU_403
     */
    public function testGetMyFeesEstimateForSKU403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForSKU_404
     */
    public function testGetMyFeesEstimateForSKU404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForSKU_429
     */
    public function testGetMyFeesEstimateForSKU429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForSKU_500
     */
    public function testGetMyFeesEstimateForSKU500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimateForSKU_503
     */
    public function testGetMyFeesEstimateForSKU503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimates_200
     */
    public function testGetMyFeesEstimates200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetMyFeesEstimates200', 'FeesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetMyFeesEstimatesResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : [ {
              &quot;FeesEstimateRequest&quot; : {
                &quot;MarketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
                &quot;IsAmazonFulfilled&quot; : false,
                &quot;PriceToEstimateFees&quot; : {
                  &quot;ListingPrice&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Amount&quot; : 10
                  },
                  &quot;Shipping&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Amount&quot; : 10
                  },
                  &quot;Points&quot; : {
                    &quot;PointsNumber&quot; : 0,
                    &quot;PointsMonetaryValue&quot; : {
                      &quot;CurrencyCode&quot; : &quot;USD&quot;,
                      &quot;Amount&quot; : 0
                    }
                  }
                },
                &quot;Identifier&quot; : &quot;UmaS1&quot;
              },
              &quot;IdType&quot; : &quot;ASIN&quot;,
              &quot;IdValue&quot; : &quot;asin123&quot;
            }, {
              &quot;FeesEstimateRequest&quot; : {
                &quot;MarketplaceId&quot; : &quot;A1AM78C64UM0Y8&quot;,
                &quot;IsAmazonFulfilled&quot; : true,
                &quot;PriceToEstimateFees&quot; : {
                  &quot;ListingPrice&quot; : {
                    &quot;CurrencyCode&quot; : &quot;MXN&quot;,
                    &quot;Amount&quot; : 10
                  },
                  &quot;Shipping&quot; : {
                    &quot;CurrencyCode&quot; : &quot;MXN&quot;,
                    &quot;Amount&quot; : 10
                  },
                  &quot;Points&quot; : {
                    &quot;PointsNumber&quot; : 0,
                    &quot;PointsMonetaryValue&quot; : {
                      &quot;CurrencyCode&quot; : &quot;MXN&quot;,
                      &quot;Amount&quot; : 0
                    }
                  }
                },
                &quot;Identifier&quot; : &quot;UmaS2&quot;
              },
              &quot;IdType&quot; : &quot;SellerSKU&quot;,
              &quot;IdValue&quot; : &quot;sku123&quot;
            } ]
          }
        }
      },
      &quot;response&quot; : [ {
        &quot;Status&quot; : &quot;Success&quot;,
        &quot;FeesEstimateIdentifier&quot; : {
          &quot;MarketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
          &quot;IdType&quot; : &quot;ASIN&quot;,
          &quot;SellerId&quot; : &quot;AXXXXXXXXXXXXX&quot;,
          &quot;SellerInputIdentifier&quot; : &quot;UmaS1&quot;,
          &quot;IsAmazonFulfilled&quot; : false,
          &quot;IdValue&quot; : &quot;asin123&quot;,
          &quot;PriceToEstimateFees&quot; : {
            &quot;ListingPrice&quot; : {
              &quot;CurrencyCode&quot; : &quot;USD&quot;,
              &quot;Amount&quot; : 10
            },
            &quot;Shipping&quot; : {
              &quot;CurrencyCode&quot; : &quot;USD&quot;,
              &quot;Amount&quot; : 10
            },
            &quot;Points&quot; : {
              &quot;PointsNumber&quot; : 0,
              &quot;PointsMonetaryValue&quot; : {
                &quot;CurrencyCode&quot; : &quot;USD&quot;,
                &quot;Amount&quot; : 0
              }
            }
          }
        },
        &quot;FeesEstimate&quot; : {
          &quot;TimeOfFeesEstimation&quot; : &quot;Mon Oct 28 18:49:32 UTC 2019&quot;,
          &quot;TotalFeesEstimate&quot; : {
            &quot;CurrencyCode&quot; : &quot;USD&quot;,
            &quot;Amount&quot; : 3.0
          },
          &quot;FeeDetailList&quot; : [ ]
        },
        &quot;Error&quot; : {
          &quot;Type&quot; : &quot;&quot;,
          &quot;Code&quot; : &quot;&quot;,
          &quot;Message&quot; : &quot;&quot;,
          &quot;Detail&quot; : [ ]
        }
      }, {
        &quot;Status&quot; : &quot;Success&quot;,
        &quot;FeesEstimateIdentifier&quot; : {
          &quot;MarketplaceId&quot; : &quot;A1AM78C64UM0Y8&quot;,
          &quot;IdType&quot; : &quot;SellerSKU&quot;,
          &quot;SellerId&quot; : &quot;AXXXXXXXXXXXXX&quot;,
          &quot;SellerInputIdentifier&quot; : &quot;UmaS2&quot;,
          &quot;IsAmazonFulfilled&quot; : false,
          &quot;IdValue&quot; : &quot;sku123&quot;,
          &quot;PriceToEstimateFees&quot; : {
            &quot;ListingPrice&quot; : {
              &quot;CurrencyCode&quot; : &quot;MXN&quot;,
              &quot;Amount&quot; : 10
            },
            &quot;Shipping&quot; : {
              &quot;CurrencyCode&quot; : &quot;MXN&quot;,
              &quot;Amount&quot; : 10
            },
            &quot;Points&quot; : {
              &quot;PointsNumber&quot; : 0,
              &quot;PointsMonetaryValue&quot; : {
                &quot;CurrencyCode&quot; : &quot;MXN&quot;,
                &quot;Amount&quot; : 0
              }
            }
          }
        },
        &quot;FeesEstimate&quot; : {
          &quot;TimeOfFeesEstimation&quot; : &quot;Mon Oct 28 18:49:32 UTC 2019&quot;,
          &quot;TotalFeesEstimate&quot; : {
            &quot;CurrencyCode&quot; : &quot;MXN&quot;,
            &quot;Amount&quot; : 3.0
          },
          &quot;FeeDetailList&quot; : [ ]
        },
        &quot;Error&quot; : {
          &quot;Type&quot; : &quot;&quot;,
          &quot;Code&quot; : &quot;&quot;,
          &quot;Message&quot; : &quot;&quot;,
          &quot;Detail&quot; : [ ]
        }
      } ]
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getMyFeesEstimates'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FeesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getMyFeesEstimatesWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getMyFeesEstimates_400
     */
    public function testGetMyFeesEstimates400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetMyFeesEstimates400', 'FeesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetMyFeesEstimatesErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : [ {
              &quot;FeesEstimateRequest&quot; : {
                &quot;MarketplaceId&quot; : &quot;INVALIDMARKETPLACEID&quot;,
                &quot;IsAmazonFulfilled&quot; : false,
                &quot;PriceToEstimateFees&quot; : {
                  &quot;ListingPrice&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Amount&quot; : 10
                  },
                  &quot;Shipping&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Amount&quot; : 10
                  },
                  &quot;Points&quot; : {
                    &quot;PointsNumber&quot; : 0,
                    &quot;PointsMonetaryValue&quot; : {
                      &quot;CurrencyCode&quot; : &quot;USD&quot;,
                      &quot;Amount&quot; : 0
                    }
                  }
                },
                &quot;Identifier&quot; : &quot;UmaS1&quot;
              },
              &quot;IdType&quot; : &quot;ASIN&quot;,
              &quot;IdValue&quot; : &quot;asin123&quot;
            } ]
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Incorrect Marketplace identifier.&quot;,
          &quot;details&quot; : &quot;&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getMyFeesEstimates'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FeesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getMyFeesEstimatesWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getMyFeesEstimates_401
     */
    public function testGetMyFeesEstimates401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimates_403
     */
    public function testGetMyFeesEstimates403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimates_404
     */
    public function testGetMyFeesEstimates404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimates_429
     */
    public function testGetMyFeesEstimates429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimates_500
     */
    public function testGetMyFeesEstimates500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getMyFeesEstimates_503
     */
    public function testGetMyFeesEstimates503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
}
