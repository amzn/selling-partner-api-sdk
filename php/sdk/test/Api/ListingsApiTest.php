<?php
/**
 * ListingsApiTest
 * PHP version 8.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Listings Restrictions
 *
 * The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\ApiException;
use OpenAPI\Client\Api\listings\restrictions\ListingsApi;
use OpenAPI\Client\ObjectSerializer;

/**
 * ListingsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ListingsApiTest extends BaseTestCase
{
    private ListingsApi $apiInstance;
    public function setUp(): void
    {
        parent::setUp();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('ListingsApi', $this->getName());
        $this->apiInstance = new ListingsApi($this->config, null, null);
        // Change Time Format if it requires
        $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
        if ($specificTimeFormat) {
            ObjectSerializer::setDateTimeFormat($specificTimeFormat);
        }
    }

    /**
     * Test case for getListingsRestrictions_200
     */
    public function testGetListingsRestrictions200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetListingsRestrictions200', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Successfully retrieved the listings restrictions.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/RestrictionList&quot;
      },
      &quot;example&quot; : {
        &quot;restrictions&quot; : [ {
          &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
          &quot;conditionType&quot; : &quot;used_acceptable&quot;,
          &quot;reasons&quot; : [ {
            &quot;message&quot; : &quot;You cannot list the product in this condition.&quot;,
            &quot;links&quot; : [ {
              &quot;resource&quot; : &quot;https://sellercentral.amazon.com/hz/approvalrequest/restrictions/approve?asin&#x3D;B0000ASIN1&quot;,
              &quot;verb&quot; : &quot;GET&quot;,
              &quot;title&quot; : &quot;Request Approval via Seller Central.&quot;,
              &quot;type&quot; : &quot;text/html&quot;
            } ]
          } ]
        } ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : { }
        }
      },
      &quot;response&quot; : {
        &quot;restrictions&quot; : [ {
          &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
          &quot;conditionType&quot; : &quot;used_acceptable&quot;,
          &quot;reasons&quot; : [ {
            &quot;message&quot; : &quot;You cannot list the product in this condition.&quot;,
            &quot;links&quot; : [ {
              &quot;resource&quot; : &quot;https://sellercentral.amazon.com/hz/approvalrequest/restrictions/approve?asin&#x3D;B0000ASIN1&quot;,
              &quot;verb&quot; : &quot;GET&quot;,
              &quot;title&quot; : &quot;Request Approval via Seller Central.&quot;,
              &quot;type&quot; : &quot;text/html&quot;
            } ]
          } ]
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getListingsRestrictions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getListingsRestrictionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getListingsRestrictions_400
     */
    public function testGetListingsRestrictions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetListingsRestrictions400', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;asin&quot; : {
            &quot;value&quot; : &quot;BAD_ASIN&quot;
          }
        }
      },
      &quot;response&quot; : [ {
        &quot;code&quot; : &quot;BAD_REQUEST&quot;,
        &quot;message&quot; : &quot;Invalid &#39;asin&#39; provided.&quot;
      } ]
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getListingsRestrictions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getListingsRestrictionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getListingsRestrictions_403
     */
    public function testGetListingsRestrictions403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsRestrictions_404
     */
    public function testGetListingsRestrictions404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsRestrictions_413
     */
    public function testGetListingsRestrictions413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsRestrictions_415
     */
    public function testGetListingsRestrictions415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsRestrictions_429
     */
    public function testGetListingsRestrictions429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsRestrictions_500
     */
    public function testGetListingsRestrictions500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsRestrictions_503
     */
    public function testGetListingsRestrictions503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
}
