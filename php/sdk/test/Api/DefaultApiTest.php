<?php
/**
 * DefaultApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\DefaultApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{
    private DefaultApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new DefaultApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for listFinancialEventGroups_200
     * .
     */
    public function testListFinancialEventGroups200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListFinancialEventGroups200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{MaxResultsPerPage&#x3D;{value&#x3D;1}, FinancialEventGroupStartedBefore&#x3D;{value&#x3D;2019-10-31}, FinancialEventGroupStartedAfter&#x3D;{value&#x3D;2019-10-13}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listFinancialEventGroups',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{NextToken&#x3D;3493805734095308457308475, FinancialEventGroupList&#x3D;[{FinancialEventGroupId&#x3D;1, ProcessingStatus&#x3D;PROCESSED, FundTransferStatus&#x3D;TRANSFERED, OriginalTotal&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;10.34}, ConvertedTotal&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;39.43}, FundTransferDate&#x3D;2020-02-07T14:38:42.128Z, TraceId&#x3D;34550454504545, AccountTail&#x3D;4854564857, BeginningBalance&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;55.33}, FinancialEventGroupStart&#x3D;2020-02-07T14:38:42.128Z, FinancialEventGroupEnd&#x3D;2020-02-07T14:38:42.128Z}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listFinancialEventGroups',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listFinancialEventGroupsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listFinancialEventGroups_400
     * .
     */
    public function testListFinancialEventGroups400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListFinancialEventGroups400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{MaxResultsPerPage&#x3D;{value&#x3D;10}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listFinancialEventGroups',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Date range is invalid.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listFinancialEventGroups',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listFinancialEventGroupsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listFinancialEventGroups_403
     * .
     */
    public function testListFinancialEventGroups403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventGroups_404
     * .
     */
    public function testListFinancialEventGroups404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventGroups_429
     * .
     */
    public function testListFinancialEventGroups429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventGroups_500
     * .
     */
    public function testListFinancialEventGroups500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventGroups_503
     * .
     */
    public function testListFinancialEventGroups503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEvents_200
     * .
     */
    public function testListFinancialEvents200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListFinancialEvents200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{MaxResultsPerPage&#x3D;{value&#x3D;10}, NextToken&#x3D;{value&#x3D;jehgri34yo7jr9e8f984tr9i4o}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listFinancialEvents',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{NextToken&#x3D;Next token value, FinancialEvents&#x3D;{PayWithAmazonEventList&#x3D;[{SellerOrderId&#x3D;454645645656456, TransactionPostedDate&#x3D;2020-02-05T13:56:00.363Z, BusinessObjectType&#x3D;Free, SalesChannel&#x3D;None, Charge&#x3D;{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}, FeeList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], PaymentAmountType&#x3D;Tax, AmountDescription&#x3D;Tax, FulfillmentChannel&#x3D;FulfillmentChannel, StoreName&#x3D;Etsy}], ServiceProviderCreditEventList&#x3D;[{ProviderTransactionType&#x3D;Free, SellerOrderId&#x3D;454645645656456, MarketplaceId&#x3D;1, MarketplaceCountryCode&#x3D;US, SellerId&#x3D;4564565546, SellerStoreName&#x3D;Etsy, ProviderId&#x3D;1, ProviderStoreName&#x3D;Etsy, TransactionAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, TransactionCreationDate&#x3D;2020-02-05T13:56:00.363Z}], RentalTransactionEventList&#x3D;[{AmazonOrderId&#x3D;444-555-3343433, RentalEventType&#x3D;string, ExtensionLength&#x3D;0, PostedDate&#x3D;2020-02-05T13:56:00.363Z, RentalChargeList&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], RentalFeeList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], MarketplaceName&#x3D;1, RentalInitialValue&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, RentalReimbursement&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, RentalTaxWithheldList&#x3D;[{TaxCollectionModel&#x3D;Free, TaxesWithheld&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}]}]}], ProductAdsPaymentEventList&#x3D;[{postedDate&#x3D;2020-02-05T13:56:00.363Z, transactionType&#x3D;Free, invoiceId&#x3D;3454535453, baseValue&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, taxValue&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, transactionValue&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}]}}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listFinancialEvents',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listFinancialEventsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listFinancialEvents_400
     * .
     */
    public function testListFinancialEvents400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListFinancialEvents400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{MaxResultsPerPage&#x3D;{value&#x3D;2}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listFinancialEvents',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Input not valid.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listFinancialEvents',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listFinancialEventsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listFinancialEvents_403
     * .
     */
    public function testListFinancialEvents403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEvents_404
     * .
     */
    public function testListFinancialEvents404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEvents_429
     * .
     */
    public function testListFinancialEvents429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEvents_500
     * .
     */
    public function testListFinancialEvents500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEvents_503
     * .
     */
    public function testListFinancialEvents503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventsByGroupId_200
     * .
     */
    public function testListFinancialEventsByGroupId200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListFinancialEventsByGroupId200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{MaxResultsPerPage&#x3D;{value&#x3D;10}, eventGroupId&#x3D;{value&#x3D;485734534857}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listFinancialEventsByGroupId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{NextToken&#x3D;Next token value, FinancialEvents&#x3D;{ChargebackEventList&#x3D;[{AmazonOrderId&#x3D;444-555-3343433, SellerOrderId&#x3D;454645645656456, MarketplaceName&#x3D;1, OrderChargeList&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], OrderChargeAdjustmentList&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ShipmentFeeList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ShipmentFeeAdjustmentList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], OrderFeeList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], OrderFeeAdjustmentList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], DirectPaymentList&#x3D;[{DirectPaymentType&#x3D;StoredValueCardRevenue, DirectPaymentAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], PostedDate&#x3D;2020-02-05T13:56:00.363Z, ShipmentItemList&#x3D;[{SellerSKU&#x3D;456454455464, OrderItemId&#x3D;4565465645646, OrderAdjustmentItemId&#x3D;456456465464, QuantityShipped&#x3D;0, ItemChargeList&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ItemChargeAdjustmentList&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ItemFeeList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ItemFeeAdjustmentList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ItemTaxWithheldList&#x3D;[{TaxCollectionModel&#x3D;Free, TaxesWithheld&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}]}], PromotionList&#x3D;[{PromotionType&#x3D;Free, PromotionId&#x3D;546564565, PromotionAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], PromotionAdjustmentList&#x3D;[{PromotionType&#x3D;Free, PromotionId&#x3D;546564565, PromotionAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], CostOfPointsGranted&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, CostOfPointsReturned&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ShipmentItemAdjustmentList&#x3D;[{SellerSKU&#x3D;456454455464, OrderItemId&#x3D;4565465645646, OrderAdjustmentItemId&#x3D;456456465464, QuantityShipped&#x3D;0, ItemChargeList&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ItemChargeAdjustmentList&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ItemFeeList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ItemFeeAdjustmentList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ItemTaxWithheldList&#x3D;[{TaxCollectionModel&#x3D;Free, TaxesWithheld&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}]}], PromotionList&#x3D;[{PromotionType&#x3D;Free, PromotionId&#x3D;546564565, PromotionAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], PromotionAdjustmentList&#x3D;[{PromotionType&#x3D;Free, PromotionId&#x3D;546564565, PromotionAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], CostOfPointsGranted&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, CostOfPointsReturned&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}]}], ImagingServicesFeeEventList&#x3D;[{ImagingRequestBillingItemID&#x3D;456456456, ASIN&#x3D;4564565456456546456, PostedDate&#x3D;2020-02-05T13:56:00.363Z, FeeList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}]}], NetworkComminglingTransactionEventList&#x3D;[{TransactionType&#x3D;Free, PostedDate&#x3D;2020-02-05T13:56:00.363Z, NetCoTransactionID&#x3D;4565645, SwapReason&#x3D;None, ASIN&#x3D;464567656576, MarketplaceId&#x3D;string, TaxExclusiveAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, TaxAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], AffordabilityExpenseReversalEventList&#x3D;[{AmazonOrderId&#x3D;444-555-3343433, PostedDate&#x3D;2020-02-05T13:56:00.363Z, MarketplaceId&#x3D;1, TransactionType&#x3D;Free, BaseExpense&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, TaxTypeCGST&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, TaxTypeSGST&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, TaxTypeIGST&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, TotalExpense&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], TrialShipmentEventList&#x3D;[{AmazonOrderId&#x3D;444-555-3343433, FinancialEventGroupId&#x3D;1, PostedDate&#x3D;2020-02-05T13:56:00.363Z, SKU&#x3D;456454455464, FeeList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}]}], TaxWithholdingEventList&#x3D;[{PostedDate&#x3D;2020-02-05T13:56:00.363Z, BaseAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, WithheldAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, TaxWithholdingPeriod&#x3D;{StartDate&#x3D;2020-02-05T13:56:00.363Z, EndDate&#x3D;2020-02-05T13:56:00.363Z}}]}}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listFinancialEventsByGroupId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listFinancialEventsByGroupIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listFinancialEventsByGroupId_400
     * .
     */
    public function testListFinancialEventsByGroupId400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListFinancialEventsByGroupId400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{eventGroupId&#x3D;{value&#x3D;BADID}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listFinancialEventsByGroupId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Bad event group ID provided.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listFinancialEventsByGroupId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listFinancialEventsByGroupIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listFinancialEventsByGroupId_403
     * .
     */
    public function testListFinancialEventsByGroupId403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventsByGroupId_404
     * .
     */
    public function testListFinancialEventsByGroupId404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventsByGroupId_429
     * .
     */
    public function testListFinancialEventsByGroupId429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventsByGroupId_500
     * .
     */
    public function testListFinancialEventsByGroupId500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventsByGroupId_503
     * .
     */
    public function testListFinancialEventsByGroupId503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventsByOrderId_200
     * .
     */
    public function testListFinancialEventsByOrderId200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListFinancialEventsByOrderId200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{MaxResultsPerPage&#x3D;{value&#x3D;10}, orderId&#x3D;{value&#x3D;485-734-5434857}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listFinancialEventsByOrderId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{NextToken&#x3D;Next token value, FinancialEvents&#x3D;{RetrochargeEventList&#x3D;[{RetrochargeEventType&#x3D;Retrocharge, AmazonOrderId&#x3D;444-555-3343433, PostedDate&#x3D;2020-02-05T13:56:00.363Z, BaseTax&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, ShippingTax&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, MarketplaceName&#x3D;1, RetrochargeTaxWithheldList&#x3D;[{TaxCollectionModel&#x3D;Free, TaxesWithheld&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}]}]}], RentalTransactionEventList&#x3D;[{AmazonOrderId&#x3D;444-555-3343433, RentalEventType&#x3D;string, ExtensionLength&#x3D;0, PostedDate&#x3D;2020-02-05T13:56:00.363Z, RentalChargeList&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], RentalFeeList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], MarketplaceName&#x3D;1, RentalInitialValue&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, RentalReimbursement&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, RentalTaxWithheldList&#x3D;[{TaxCollectionModel&#x3D;Free, TaxesWithheld&#x3D;[{ChargeType&#x3D;Tax, ChargeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}]}]}], ProductAdsPaymentEventList&#x3D;[{postedDate&#x3D;2020-02-05T13:56:00.363Z, transactionType&#x3D;Free, invoiceId&#x3D;3454535453, baseValue&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, taxValue&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}, transactionValue&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], ServiceFeeEventList&#x3D;[{AmazonOrderId&#x3D;444-555-3343433, FeeReason&#x3D;Free, FeeList&#x3D;[{FeeType&#x3D;FixedClosingFee, FeeAmount&#x3D;{CurrencyCode&#x3D;USD, CurrencyAmount&#x3D;25.37}}], SellerSKU&#x3D;456454455464, FnSKU&#x3D;Fn134, FeeDescription&#x3D;FeeDescription, ASIN&#x3D;KJHJ457648GHD}]}}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listFinancialEventsByOrderId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listFinancialEventsByOrderIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listFinancialEventsByOrderId_400
     * .
     */
    public function testListFinancialEventsByOrderId400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListFinancialEventsByOrderId400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;BAD-ORDER}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listFinancialEventsByOrderId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Bad order ID provided.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listFinancialEventsByOrderId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listFinancialEventsByOrderIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listFinancialEventsByOrderId_403
     * .
     */
    public function testListFinancialEventsByOrderId403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventsByOrderId_404
     * .
     */
    public function testListFinancialEventsByOrderId404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventsByOrderId_429
     * .
     */
    public function testListFinancialEventsByOrderId429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventsByOrderId_500
     * .
     */
    public function testListFinancialEventsByOrderId500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listFinancialEventsByOrderId_503
     * .
     */
    public function testListFinancialEventsByOrderId503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
