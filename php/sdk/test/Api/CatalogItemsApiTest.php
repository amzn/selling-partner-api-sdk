<?php
/**
 * CatalogItemsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catalog Items v2022-04-01
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\CatalogItemsApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * CatalogItemsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CatalogItemsApiTest extends TestCase
{
    private CatalogItemsApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new CatalogItemsApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for getCatalogItem_200
     * .
     */
    public function testGetCatalogItem200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetCatalogItem200')) {
                $this->assertTrue(true);
                return;
            }

            //ã€€Build Request Json for Request to static SandBox
            $invalidRequestJson = '{asin&#x3D;{value&#x3D;B07N4M94X4}, marketplaceIds&#x3D;{value&#x3D;[ATVPDKIKX0DER]}, includedData&#x3D;{value&#x3D;[classifications, dimensions, identifiers, images, productTypes, relationships, salesRanks, summaries, vendorDetails]}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getCatalogItem',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{asin&#x3D;B07N4M94X4, classifications&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, classifications&#x3D;[{displayName&#x3D;QLED TVs, classificationId&#x3D;21489946011, parent&#x3D;{displayName&#x3D;Televisions, classificationId&#x3D;172659, parent&#x3D;{displayName&#x3D;Television &amp; Video, classificationId&#x3D;1266092011, parent&#x3D;{displayName&#x3D;Electronics, classificationId&#x3D;172282}}}}]}], dimensions&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, item&#x3D;{height&#x3D;{unit&#x3D;inches, value&#x3D;41.4}, length&#x3D;{unit&#x3D;inches, value&#x3D;2.4}, weight&#x3D;{unit&#x3D;pounds, value&#x3D;107.6}, width&#x3D;{unit&#x3D;inches, value&#x3D;72.4}}, package&#x3D;{height&#x3D;{unit&#x3D;inches, value&#x3D;10.49999998929}, length&#x3D;{unit&#x3D;inches, value&#x3D;79.9999999184}, weight&#x3D;{unit&#x3D;kilograms, value&#x3D;62.142}, width&#x3D;{unit&#x3D;inches, value&#x3D;47.99999995104}}}], identifiers&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, identifiers&#x3D;[{identifier&#x3D;0887276302195, identifierType&#x3D;EAN}, {identifier&#x3D;00887276302195, identifierType&#x3D;GTIN}, {identifier&#x3D;887276302195, identifierType&#x3D;UPC}]}], images&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, images&#x3D;[{variant&#x3D;MAIN, link&#x3D;https://m.media-amazon.com/images/I/91uohwV+k3L.jpg, height&#x3D;1707, width&#x3D;2560}, {variant&#x3D;MAIN, link&#x3D;https://m.media-amazon.com/images/I/51DZzp3w3vL.jpg, height&#x3D;333, width&#x3D;500}, {variant&#x3D;PT01, link&#x3D;https://m.media-amazon.com/images/I/81w2rTVShlL.jpg, height&#x3D;2560, width&#x3D;2560}, {variant&#x3D;PT01, link&#x3D;https://m.media-amazon.com/images/I/41Px9eq9tkL.jpg, height&#x3D;500, width&#x3D;500}, {variant&#x3D;PT02, link&#x3D;https://m.media-amazon.com/images/I/51NTNhdhPyL.jpg, height&#x3D;375, width&#x3D;500}, {variant&#x3D;PT03, link&#x3D;https://m.media-amazon.com/images/I/51o4zpL+A3L.jpg, height&#x3D;375, width&#x3D;500}, {variant&#x3D;PT04, link&#x3D;https://m.media-amazon.com/images/I/71ux2k9GAZL.jpg, height&#x3D;1000, width&#x3D;1000}, {variant&#x3D;PT04, link&#x3D;https://m.media-amazon.com/images/I/61UUX63yw1L.jpg, height&#x3D;500, width&#x3D;500}, {variant&#x3D;PT05, link&#x3D;https://m.media-amazon.com/images/I/61LwHkljX-L.jpg, height&#x3D;1000, width&#x3D;1000}, {variant&#x3D;PT05, link&#x3D;https://m.media-amazon.com/images/I/51wJTQty3PL.jpg, height&#x3D;500, width&#x3D;500}, {variant&#x3D;PT06, link&#x3D;https://m.media-amazon.com/images/I/61uvoB4VvoL.jpg, height&#x3D;1000, width&#x3D;1000}, {variant&#x3D;PT06, link&#x3D;https://m.media-amazon.com/images/I/51ZexIO628L.jpg, height&#x3D;500, width&#x3D;500}, {variant&#x3D;PT07, link&#x3D;https://m.media-amazon.com/images/I/7121MGd2ncL.jpg, height&#x3D;1000, width&#x3D;1000}, {variant&#x3D;PT07, link&#x3D;https://m.media-amazon.com/images/I/61QK+JBMrGL.jpg, height&#x3D;500, width&#x3D;500}, {variant&#x3D;PT08, link&#x3D;https://m.media-amazon.com/images/I/61ECcGlG4IL.jpg, height&#x3D;1080, width&#x3D;1920}, {variant&#x3D;PT08, link&#x3D;https://m.media-amazon.com/images/I/31TxwfqvB5L.jpg, height&#x3D;281, width&#x3D;500}, {variant&#x3D;PT09, link&#x3D;https://m.media-amazon.com/images/I/41B5vgmp4IL.jpg, height&#x3D;375, width&#x3D;500}, {variant&#x3D;PT10, link&#x3D;https://m.media-amazon.com/images/I/51S5IY3AV0L.jpg, height&#x3D;375, width&#x3D;500}, {variant&#x3D;PT11, link&#x3D;https://m.media-amazon.com/images/I/41-6bmPtUlL.jpg, height&#x3D;375, width&#x3D;500}, {variant&#x3D;PT12, link&#x3D;https://m.media-amazon.com/images/I/41s9Q6gWJ7L.jpg, height&#x3D;448, width&#x3D;500}, {variant&#x3D;PT13, link&#x3D;https://m.media-amazon.com/images/I/519nG0mRzuL.jpg, height&#x3D;314, width&#x3D;500}, {variant&#x3D;PT14, link&#x3D;https://m.media-amazon.com/images/I/71sHhrGMc7L.jpg, height&#x3D;1097, width&#x3D;1500}, {variant&#x3D;PT14, link&#x3D;https://m.media-amazon.com/images/I/41CH6gKtU5L.jpg, height&#x3D;366, width&#x3D;500}, {variant&#x3D;PT15, link&#x3D;https://m.media-amazon.com/images/I/21-s7QYrTxL.jpg, height&#x3D;500, width&#x3D;175}, {variant&#x3D;EEGL, link&#x3D;https://m.media-amazon.com/images/I/61i3dsKD09L.jpg, height&#x3D;1375, width&#x3D;370}, {variant&#x3D;EEGL, link&#x3D;https://m.media-amazon.com/images/I/41E7ku-qdGL.jpg, height&#x3D;500, width&#x3D;135}, {variant&#x3D;EGUS, link&#x3D;https://m.media-amazon.com/images/I/61i3dsKD09L.jpg, height&#x3D;1375, width&#x3D;370}, {variant&#x3D;EGUS, link&#x3D;https://m.media-amazon.com/images/I/41E7ku-qdGL.jpg, height&#x3D;500, width&#x3D;135}]}], productTypes&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, productType&#x3D;TELEVISION}], salesRanks&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, classificationRanks&#x3D;[{classificationId&#x3D;21489946011, title&#x3D;QLED TVs, link&#x3D;http://www.amazon.com/gp/bestsellers/electronics/21489946011, rank&#x3D;113}], displayGroupRanks&#x3D;[{websiteDisplayGroup&#x3D;ce_display_on_website, title&#x3D;Electronics, link&#x3D;http://www.amazon.com/gp/bestsellers/electronics, rank&#x3D;72855}]}], summaries&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, brand&#x3D;SAMSUNG, browseClassification&#x3D;{displayName&#x3D;QLED TVs, classificationId&#x3D;21489946011}, color&#x3D;Black, itemClassification&#x3D;BASE_PRODUCT, itemName&#x3D;Samsung QN82Q60RAFXZA Flat 82-Inch QLED 4K Q60 Series (2019) Ultra HD Smart TV with HDR and Alexa Compatibility, manufacturer&#x3D;Samsung, modelNumber&#x3D;QN82Q60RAFXZA, packageQuantity&#x3D;1, partNumber&#x3D;QN82Q60RAFXZA, size&#x3D;82-Inch, style&#x3D;TV only, websiteDisplayGroup&#x3D;home_theater_display_on_website, websiteDisplayGroupName&#x3D;Home Theater}], relationships&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, relationships&#x3D;[{type&#x3D;VARIATION, parentAsins&#x3D;[B08J7TQ9FL], variationTheme&#x3D;{attributes&#x3D;[color, size], theme&#x3D;SIZE_NAME/COLOR_NAME}}]}], vendorDetails&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, brandCode&#x3D;SAMF9, manufacturerCode&#x3D;SAMF9, manufacturerCodeParent&#x3D;SAMF9, productCategory&#x3D;{displayName&#x3D;Televisions, value&#x3D;50400100}, productGroup&#x3D;Home Entertainment, productSubcategory&#x3D;{displayName&#x3D;Plasma TVs, value&#x3D;50400120}, replenishmentCategory&#x3D;OBSOLETE}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getCatalogItem',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getCatalogItemWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getCatalogItem_400
     * .
     */
    public function testGetCatalogItem400()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCatalogItem_403
     * .
     */
    public function testGetCatalogItem403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCatalogItem_404
     * .
     */
    public function testGetCatalogItem404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCatalogItem_413
     * .
     */
    public function testGetCatalogItem413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCatalogItem_415
     * .
     */
    public function testGetCatalogItem415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCatalogItem_429
     * .
     */
    public function testGetCatalogItem429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCatalogItem_500
     * .
     */
    public function testGetCatalogItem500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCatalogItem_503
     * .
     */
    public function testGetCatalogItem503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for searchCatalogItems_200
     * .
     */
    public function testSearchCatalogItems200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSearchCatalogItems200')) {
                $this->assertTrue(true);
                return;
            }

            //ã€€Build Request Json for Request to static SandBox
            $invalidRequestJson = '{keywords&#x3D;{value&#x3D;[samsung, tv]}, marketplaceIds&#x3D;{value&#x3D;[ATVPDKIKX0DER]}, includedData&#x3D;{value&#x3D;[classifications, dimensions, identifiers, images, productTypes, relationships, salesRanks, summaries, vendorDetails]}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'searchCatalogItems',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{numberOfResults&#x3D;1, pagination&#x3D;{nextToken&#x3D;xsdflkj324lkjsdlkj3423klkjsdfkljlk2j34klj2l3k4jlksdjl234, previousToken&#x3D;ilkjsdflkj234lkjds234234lkjl234lksjdflkj234234lkjsfsdflkj333d}, refinements&#x3D;{brands&#x3D;[{numberOfResults&#x3D;1, brandName&#x3D;SAMSUNG}], classifications&#x3D;[{numberOfResults&#x3D;1, displayName&#x3D;Electronics, classificationId&#x3D;493964}]}, items&#x3D;[{asin&#x3D;B07N4M94X4, classifications&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, classifications&#x3D;[{displayName&#x3D;QLED TVs, classificationId&#x3D;21489946011, parent&#x3D;{displayName&#x3D;Televisions, classificationId&#x3D;172659, parent&#x3D;{displayName&#x3D;Television &amp; Video, classificationId&#x3D;1266092011, parent&#x3D;{displayName&#x3D;Electronics, classificationId&#x3D;172282}}}}]}], dimensions&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, item&#x3D;{height&#x3D;{unit&#x3D;inches, value&#x3D;41.4}, length&#x3D;{unit&#x3D;inches, value&#x3D;2.4}, weight&#x3D;{unit&#x3D;pounds, value&#x3D;107.6}, width&#x3D;{unit&#x3D;inches, value&#x3D;72.4}}, package&#x3D;{height&#x3D;{unit&#x3D;inches, value&#x3D;10.49999998929}, length&#x3D;{unit&#x3D;inches, value&#x3D;79.9999999184}, weight&#x3D;{unit&#x3D;kilograms, value&#x3D;62.142}, width&#x3D;{unit&#x3D;inches, value&#x3D;47.99999995104}}}], identifiers&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, identifiers&#x3D;[{identifier&#x3D;0887276302195, identifierType&#x3D;EAN}, {identifier&#x3D;00887276302195, identifierType&#x3D;GTIN}, {identifier&#x3D;887276302195, identifierType&#x3D;UPC}]}], images&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, images&#x3D;[{variant&#x3D;MAIN, link&#x3D;https://m.media-amazon.com/images/I/91uohwV+k3L.jpg, height&#x3D;1707, width&#x3D;2560}, {variant&#x3D;MAIN, link&#x3D;https://m.media-amazon.com/images/I/51DZzp3w3vL.jpg, height&#x3D;333, width&#x3D;500}, {variant&#x3D;PT01, link&#x3D;https://m.media-amazon.com/images/I/81w2rTVShlL.jpg, height&#x3D;2560, width&#x3D;2560}, {variant&#x3D;PT01, link&#x3D;https://m.media-amazon.com/images/I/41Px9eq9tkL.jpg, height&#x3D;500, width&#x3D;500}, {variant&#x3D;PT02, link&#x3D;https://m.media-amazon.com/images/I/51NTNhdhPyL.jpg, height&#x3D;375, width&#x3D;500}, {variant&#x3D;PT03, link&#x3D;https://m.media-amazon.com/images/I/51o4zpL+A3L.jpg, height&#x3D;375, width&#x3D;500}, {variant&#x3D;PT04, link&#x3D;https://m.media-amazon.com/images/I/71ux2k9GAZL.jpg, height&#x3D;1000, width&#x3D;1000}, {variant&#x3D;PT04, link&#x3D;https://m.media-amazon.com/images/I/61UUX63yw1L.jpg, height&#x3D;500, width&#x3D;500}, {variant&#x3D;PT05, link&#x3D;https://m.media-amazon.com/images/I/61LwHkljX-L.jpg, height&#x3D;1000, width&#x3D;1000}, {variant&#x3D;PT05, link&#x3D;https://m.media-amazon.com/images/I/51wJTQty3PL.jpg, height&#x3D;500, width&#x3D;500}, {variant&#x3D;PT06, link&#x3D;https://m.media-amazon.com/images/I/61uvoB4VvoL.jpg, height&#x3D;1000, width&#x3D;1000}, {variant&#x3D;PT06, link&#x3D;https://m.media-amazon.com/images/I/51ZexIO628L.jpg, height&#x3D;500, width&#x3D;500}, {variant&#x3D;PT07, link&#x3D;https://m.media-amazon.com/images/I/7121MGd2ncL.jpg, height&#x3D;1000, width&#x3D;1000}, {variant&#x3D;PT07, link&#x3D;https://m.media-amazon.com/images/I/61QK+JBMrGL.jpg, height&#x3D;500, width&#x3D;500}, {variant&#x3D;PT08, link&#x3D;https://m.media-amazon.com/images/I/61ECcGlG4IL.jpg, height&#x3D;1080, width&#x3D;1920}, {variant&#x3D;PT08, link&#x3D;https://m.media-amazon.com/images/I/31TxwfqvB5L.jpg, height&#x3D;281, width&#x3D;500}, {variant&#x3D;PT09, link&#x3D;https://m.media-amazon.com/images/I/41B5vgmp4IL.jpg, height&#x3D;375, width&#x3D;500}, {variant&#x3D;PT10, link&#x3D;https://m.media-amazon.com/images/I/51S5IY3AV0L.jpg, height&#x3D;375, width&#x3D;500}, {variant&#x3D;PT11, link&#x3D;https://m.media-amazon.com/images/I/41-6bmPtUlL.jpg, height&#x3D;375, width&#x3D;500}, {variant&#x3D;PT12, link&#x3D;https://m.media-amazon.com/images/I/41s9Q6gWJ7L.jpg, height&#x3D;448, width&#x3D;500}, {variant&#x3D;PT13, link&#x3D;https://m.media-amazon.com/images/I/519nG0mRzuL.jpg, height&#x3D;314, width&#x3D;500}, {variant&#x3D;PT14, link&#x3D;https://m.media-amazon.com/images/I/71sHhrGMc7L.jpg, height&#x3D;1097, width&#x3D;1500}, {variant&#x3D;PT14, link&#x3D;https://m.media-amazon.com/images/I/41CH6gKtU5L.jpg, height&#x3D;366, width&#x3D;500}, {variant&#x3D;PT15, link&#x3D;https://m.media-amazon.com/images/I/21-s7QYrTxL.jpg, height&#x3D;500, width&#x3D;175}, {variant&#x3D;EEGL, link&#x3D;https://m.media-amazon.com/images/I/61i3dsKD09L.jpg, height&#x3D;1375, width&#x3D;370}, {variant&#x3D;EEGL, link&#x3D;https://m.media-amazon.com/images/I/41E7ku-qdGL.jpg, height&#x3D;500, width&#x3D;135}, {variant&#x3D;EGUS, link&#x3D;https://m.media-amazon.com/images/I/61i3dsKD09L.jpg, height&#x3D;1375, width&#x3D;370}, {variant&#x3D;EGUS, link&#x3D;https://m.media-amazon.com/images/I/41E7ku-qdGL.jpg, height&#x3D;500, width&#x3D;135}]}], productTypes&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, productType&#x3D;TELEVISION}], salesRanks&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, classificationRanks&#x3D;[{classificationId&#x3D;21489946011, title&#x3D;QLED TVs, link&#x3D;http://www.amazon.com/gp/bestsellers/electronics/21489946011, rank&#x3D;113}], displayGroupRanks&#x3D;[{websiteDisplayGroup&#x3D;ce_display_on_website, title&#x3D;Electronics, link&#x3D;http://www.amazon.com/gp/bestsellers/electronics, rank&#x3D;72855}]}], summaries&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, brand&#x3D;SAMSUNG, browseClassification&#x3D;{displayName&#x3D;QLED TVs, classificationId&#x3D;21489946011}, color&#x3D;Black, itemClassification&#x3D;BASE_PRODUCT, itemName&#x3D;Samsung QN82Q60RAFXZA Flat 82-Inch QLED 4K Q60 Series (2019) Ultra HD Smart TV with HDR and Alexa Compatibility, manufacturer&#x3D;Samsung, modelNumber&#x3D;QN82Q60RAFXZA, packageQuantity&#x3D;1, partNumber&#x3D;QN82Q60RAFXZA, size&#x3D;82-Inch, style&#x3D;TV only, websiteDisplayGroup&#x3D;home_theater_display_on_website, websiteDisplayGroupName&#x3D;Home Theater}], relationships&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, relationships&#x3D;[{type&#x3D;VARIATION, parentAsins&#x3D;[B08J7TQ9FL], variationTheme&#x3D;{attributes&#x3D;[color, size], theme&#x3D;SIZE_NAME/COLOR_NAME}}]}], vendorDetails&#x3D;[{marketplaceId&#x3D;ATVPDKIKX0DER, brandCode&#x3D;SAMF9, manufacturerCode&#x3D;SAMF9, manufacturerCodeParent&#x3D;SAMF9, productCategory&#x3D;{displayName&#x3D;Televisions, value&#x3D;50400100}, productGroup&#x3D;Home Entertainment, productSubcategory&#x3D;{displayName&#x3D;Plasma TVs, value&#x3D;50400120}, replenishmentCategory&#x3D;OBSOLETE}]}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'searchCatalogItems',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->searchCatalogItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for searchCatalogItems_400
     * .
     */
    public function testSearchCatalogItems400()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for searchCatalogItems_403
     * .
     */
    public function testSearchCatalogItems403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for searchCatalogItems_404
     * .
     */
    public function testSearchCatalogItems404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for searchCatalogItems_413
     * .
     */
    public function testSearchCatalogItems413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for searchCatalogItems_415
     * .
     */
    public function testSearchCatalogItems415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for searchCatalogItems_429
     * .
     */
    public function testSearchCatalogItems429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for searchCatalogItems_500
     * .
     */
    public function testSearchCatalogItems500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for searchCatalogItems_503
     * .
     */
    public function testSearchCatalogItems503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
