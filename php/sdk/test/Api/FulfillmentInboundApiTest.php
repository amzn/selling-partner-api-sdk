<?php
/**
 * FulfillmentInboundApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fulfillment Inbound v2024-03-20
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\FulfillmentInboundApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * FulfillmentInboundApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FulfillmentInboundApiTest extends TestCase
{
    private FulfillmentInboundApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new FulfillmentInboundApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for cancelInboundPlan_202
     * .
     */
    public function testCancelInboundPlan202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelInboundPlan202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelInboundPlan',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelInboundPlan',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelInboundPlanWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelInboundPlan_400
     * .
     */
    public function testCancelInboundPlan400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelInboundPlan400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wfbad4abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelInboundPlan',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The inbound plan is already cancelled.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelInboundPlan',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelInboundPlanWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelInboundPlan_403
     * .
     */
    public function testCancelInboundPlan403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelInboundPlan_404
     * .
     */
    public function testCancelInboundPlan404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelInboundPlan_413
     * .
     */
    public function testCancelInboundPlan413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelInboundPlan_415
     * .
     */
    public function testCancelInboundPlan415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelInboundPlan_429
     * .
     */
    public function testCancelInboundPlan429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelInboundPlan_500
     * .
     */
    public function testCancelInboundPlan500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelInboundPlan_503
     * .
     */
    public function testCancelInboundPlan503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelSelfShipAppointment_202
     * .
     */
    public function testCancelSelfShipAppointment202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelSelfShipAppointment202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{reasonComment&#x3D;OTHER}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelSelfShipAppointment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelSelfShipAppointment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelSelfShipAppointmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelSelfShipAppointment_400
     * .
     */
    public function testCancelSelfShipAppointment400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelSelfShipAppointment400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{reasonComment&#x3D;OTHER}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelSelfShipAppointment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelSelfShipAppointment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelSelfShipAppointmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelSelfShipAppointment_403
     * .
     */
    public function testCancelSelfShipAppointment403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelSelfShipAppointment_404
     * .
     */
    public function testCancelSelfShipAppointment404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelSelfShipAppointment_413
     * .
     */
    public function testCancelSelfShipAppointment413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelSelfShipAppointment_415
     * .
     */
    public function testCancelSelfShipAppointment415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelSelfShipAppointment_429
     * .
     */
    public function testCancelSelfShipAppointment429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelSelfShipAppointment_500
     * .
     */
    public function testCancelSelfShipAppointment500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelSelfShipAppointment_503
     * .
     */
    public function testCancelSelfShipAppointment503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmDeliveryWindowOptions_202
     * .
     */
    public function testConfirmDeliveryWindowOptions202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmDeliveryWindowOptions202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, deliveryWindowOptionId&#x3D;{value&#x3D;dw1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmDeliveryWindowOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmDeliveryWindowOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmDeliveryWindowOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmDeliveryWindowOptions_400
     * .
     */
    public function testConfirmDeliveryWindowOptions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmDeliveryWindowOptions400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, deliveryWindowOptionId&#x3D;{value&#x3D;dw1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmDeliveryWindowOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist under the associated inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmDeliveryWindowOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmDeliveryWindowOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmDeliveryWindowOptions_403
     * .
     */
    public function testConfirmDeliveryWindowOptions403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmDeliveryWindowOptions_404
     * .
     */
    public function testConfirmDeliveryWindowOptions404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmDeliveryWindowOptions_413
     * .
     */
    public function testConfirmDeliveryWindowOptions413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmDeliveryWindowOptions_415
     * .
     */
    public function testConfirmDeliveryWindowOptions415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmDeliveryWindowOptions_429
     * .
     */
    public function testConfirmDeliveryWindowOptions429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmDeliveryWindowOptions_500
     * .
     */
    public function testConfirmDeliveryWindowOptions500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmDeliveryWindowOptions_503
     * .
     */
    public function testConfirmDeliveryWindowOptions503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPackingOption_202
     * .
     */
    public function testConfirmPackingOption202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmPackingOption202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, packingOptionId&#x3D;{value&#x3D;po1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmPackingOption',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmPackingOption',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmPackingOptionWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmPackingOption_400
     * .
     */
    public function testConfirmPackingOption400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmPackingOption400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, packingOptionId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmPackingOption',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested packingOptionId does not exist for the given inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmPackingOption',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmPackingOptionWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmPackingOption_403
     * .
     */
    public function testConfirmPackingOption403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPackingOption_404
     * .
     */
    public function testConfirmPackingOption404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPackingOption_413
     * .
     */
    public function testConfirmPackingOption413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPackingOption_415
     * .
     */
    public function testConfirmPackingOption415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPackingOption_429
     * .
     */
    public function testConfirmPackingOption429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPackingOption_500
     * .
     */
    public function testConfirmPackingOption500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPackingOption_503
     * .
     */
    public function testConfirmPackingOption503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPlacementOption_202
     * .
     */
    public function testConfirmPlacementOption202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmPlacementOption202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, placementOptionId&#x3D;{value&#x3D;pl1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmPlacementOption',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmPlacementOption',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmPlacementOptionWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmPlacementOption_400
     * .
     */
    public function testConfirmPlacementOption400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmPlacementOption400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, placementOptionId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmPlacementOption',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested placementOptionId does not exist for the given inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmPlacementOption',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmPlacementOptionWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmPlacementOption_403
     * .
     */
    public function testConfirmPlacementOption403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPlacementOption_404
     * .
     */
    public function testConfirmPlacementOption404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPlacementOption_413
     * .
     */
    public function testConfirmPlacementOption413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPlacementOption_415
     * .
     */
    public function testConfirmPlacementOption415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPlacementOption_429
     * .
     */
    public function testConfirmPlacementOption429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPlacementOption_500
     * .
     */
    public function testConfirmPlacementOption500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmPlacementOption_503
     * .
     */
    public function testConfirmPlacementOption503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipmentContentUpdatePreview_202
     * .
     */
    public function testConfirmShipmentContentUpdatePreview202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmShipmentContentUpdatePreview202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, contentUpdatePreviewId&#x3D;{value&#x3D;cu1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmShipmentContentUpdatePreview',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmShipmentContentUpdatePreview',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmShipmentContentUpdatePreviewWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmShipmentContentUpdatePreview_400
     * .
     */
    public function testConfirmShipmentContentUpdatePreview400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmShipmentContentUpdatePreview400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, contentUpdatePreviewId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmShipmentContentUpdatePreview',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested contentUpdatePreviewId does not exist for the given shipment.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmShipmentContentUpdatePreview',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmShipmentContentUpdatePreviewWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmShipmentContentUpdatePreview_403
     * .
     */
    public function testConfirmShipmentContentUpdatePreview403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipmentContentUpdatePreview_404
     * .
     */
    public function testConfirmShipmentContentUpdatePreview404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipmentContentUpdatePreview_413
     * .
     */
    public function testConfirmShipmentContentUpdatePreview413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipmentContentUpdatePreview_415
     * .
     */
    public function testConfirmShipmentContentUpdatePreview415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipmentContentUpdatePreview_429
     * .
     */
    public function testConfirmShipmentContentUpdatePreview429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipmentContentUpdatePreview_500
     * .
     */
    public function testConfirmShipmentContentUpdatePreview500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipmentContentUpdatePreview_503
     * .
     */
    public function testConfirmShipmentContentUpdatePreview503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmTransportationOptions_202
     * .
     */
    public function testConfirmTransportationOptions202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmTransportationOptions202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{transportationSelections&#x3D;[{shipmentId&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678, transportationOptionId&#x3D;to1234abcd-1234-abcd-5678-1234abcd5678, contactInformation&#x3D;{name&#x3D;name, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmTransportationOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmTransportationOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmTransportationOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmTransportationOptions_400
     * .
     */
    public function testConfirmTransportationOptions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmTransportationOptions400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wfbad4abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{transportationSelections&#x3D;[{shipmentId&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678, transportationOptionId&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678, contactInformation&#x3D;{name&#x3D;name, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmTransportationOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested transportationOptionId does not exist under the associated shipment.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmTransportationOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmTransportationOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmTransportationOptions_403
     * .
     */
    public function testConfirmTransportationOptions403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmTransportationOptions_404
     * .
     */
    public function testConfirmTransportationOptions404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmTransportationOptions_413
     * .
     */
    public function testConfirmTransportationOptions413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmTransportationOptions_415
     * .
     */
    public function testConfirmTransportationOptions415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmTransportationOptions_429
     * .
     */
    public function testConfirmTransportationOptions429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmTransportationOptions_500
     * .
     */
    public function testConfirmTransportationOptions500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmTransportationOptions_503
     * .
     */
    public function testConfirmTransportationOptions503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createInboundPlan_202
     * .
     */
    public function testCreateInboundPlan202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateInboundPlan202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{name&#x3D;FBA (03/20/2024, 12:01 PM), sourceAddress&#x3D;{name&#x3D;name, companyName&#x3D;Acme, addressLine1&#x3D;123 example street, addressLine2&#x3D;Unit 102, city&#x3D;Toronto, countryCode&#x3D;CA, stateOrProvinceCode&#x3D;ON, postalCode&#x3D;M1M1M1, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}, destinationMarketplaces&#x3D;[A2EUQ1WTGCTBG2], items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createInboundPlan',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{inboundPlanId&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678, operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createInboundPlan',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createInboundPlanWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createInboundPlan_400
     * .
     */
    public function testCreateInboundPlan400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateInboundPlan400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{name&#x3D;FBA (03/20/2024, 12:01 PM), sourceAddress&#x3D;{name&#x3D;name, companyName&#x3D;Acme, addressLine1&#x3D;123 example street, addressLine2&#x3D;Unit 102, city&#x3D;Toronto, countryCode&#x3D;CA, stateOrProvinceCode&#x3D;ON, postalCode&#x3D;M1M1M1, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}, destinationMarketplaces&#x3D;[badMarketplace], items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createInboundPlan',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;Invalid destinationMarketplace provided.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createInboundPlan',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createInboundPlanWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createInboundPlan_403
     * .
     */
    public function testCreateInboundPlan403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createInboundPlan_404
     * .
     */
    public function testCreateInboundPlan404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createInboundPlan_413
     * .
     */
    public function testCreateInboundPlan413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createInboundPlan_415
     * .
     */
    public function testCreateInboundPlan415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createInboundPlan_429
     * .
     */
    public function testCreateInboundPlan429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createInboundPlan_500
     * .
     */
    public function testCreateInboundPlan500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createInboundPlan_503
     * .
     */
    public function testCreateInboundPlan503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createMarketplaceItemLabels_200
     * .
     */
    public function testCreateMarketplaceItemLabels200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateMarketplaceItemLabels200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{marketplaceId&#x3D;ATVPDKIKX0DER, mskuQuantities&#x3D;[{msku&#x3D;msku1, quantity&#x3D;1}, {msku&#x3D;msku2, quantity&#x3D;1}], labelType&#x3D;STANDARD_FORMAT, pageType&#x3D;A4_21, localeCode&#x3D;en_US}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createMarketplaceItemLabels',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{documentDownloads&#x3D;[{uri&#x3D;https://s3.amazonaws.com/bucket, downloadType&#x3D;URL, expiration&#x3D;2024-01-01T00:00:00.000Z}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createMarketplaceItemLabels',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createMarketplaceItemLabelsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createMarketplaceItemLabels_400
     * .
     */
    public function testCreateMarketplaceItemLabels400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateMarketplaceItemLabels400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{marketplaceId&#x3D;ATVPDKIKX0DER, mskuQuantities&#x3D;[{msku&#x3D;badMsku, quantity&#x3D;1}], labelType&#x3D;THERMAL_PRINTING, height&#x3D;25, width&#x3D;100, localeCode&#x3D;en_US}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createMarketplaceItemLabels',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested MSKU is not valid.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createMarketplaceItemLabels',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createMarketplaceItemLabelsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createMarketplaceItemLabels_403
     * .
     */
    public function testCreateMarketplaceItemLabels403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createMarketplaceItemLabels_404
     * .
     */
    public function testCreateMarketplaceItemLabels404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createMarketplaceItemLabels_413
     * .
     */
    public function testCreateMarketplaceItemLabels413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createMarketplaceItemLabels_415
     * .
     */
    public function testCreateMarketplaceItemLabels415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createMarketplaceItemLabels_429
     * .
     */
    public function testCreateMarketplaceItemLabels429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createMarketplaceItemLabels_500
     * .
     */
    public function testCreateMarketplaceItemLabels500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createMarketplaceItemLabels_503
     * .
     */
    public function testCreateMarketplaceItemLabels503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateDeliveryWindowOptions_202
     * .
     */
    public function testGenerateDeliveryWindowOptions202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGenerateDeliveryWindowOptions202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generateDeliveryWindowOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generateDeliveryWindowOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generateDeliveryWindowOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generateDeliveryWindowOptions_400
     * .
     */
    public function testGenerateDeliveryWindowOptions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGenerateDeliveryWindowOptions400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generateDeliveryWindowOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The provided shipmentId is not valid for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generateDeliveryWindowOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generateDeliveryWindowOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generateDeliveryWindowOptions_403
     * .
     */
    public function testGenerateDeliveryWindowOptions403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateDeliveryWindowOptions_404
     * .
     */
    public function testGenerateDeliveryWindowOptions404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateDeliveryWindowOptions_413
     * .
     */
    public function testGenerateDeliveryWindowOptions413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateDeliveryWindowOptions_415
     * .
     */
    public function testGenerateDeliveryWindowOptions415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateDeliveryWindowOptions_429
     * .
     */
    public function testGenerateDeliveryWindowOptions429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateDeliveryWindowOptions_500
     * .
     */
    public function testGenerateDeliveryWindowOptions500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateDeliveryWindowOptions_503
     * .
     */
    public function testGenerateDeliveryWindowOptions503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePackingOptions_202
     * .
     */
    public function testGeneratePackingOptions202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGeneratePackingOptions202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generatePackingOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generatePackingOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generatePackingOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generatePackingOptions_400
     * .
     */
    public function testGeneratePackingOptions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGeneratePackingOptions400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wfbad4abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generatePackingOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The inbound plan is not in a valid state to generate packing options.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generatePackingOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generatePackingOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generatePackingOptions_403
     * .
     */
    public function testGeneratePackingOptions403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePackingOptions_404
     * .
     */
    public function testGeneratePackingOptions404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePackingOptions_413
     * .
     */
    public function testGeneratePackingOptions413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePackingOptions_415
     * .
     */
    public function testGeneratePackingOptions415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePackingOptions_429
     * .
     */
    public function testGeneratePackingOptions429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePackingOptions_500
     * .
     */
    public function testGeneratePackingOptions500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePackingOptions_503
     * .
     */
    public function testGeneratePackingOptions503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePlacementOptions_202
     * .
     */
    public function testGeneratePlacementOptions202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGeneratePlacementOptions202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{customPlacement&#x3D;[{warehouseId&#x3D;warehouseId, items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}]}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generatePlacementOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generatePlacementOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generatePlacementOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generatePlacementOptions_400
     * .
     */
    public function testGeneratePlacementOptions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGeneratePlacementOptions400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{customPlacement&#x3D;[{warehouseId&#x3D;badWarehouseId, items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}]}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generatePlacementOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The inbound plan is not in a valid state to generate placement options.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generatePlacementOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generatePlacementOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generatePlacementOptions_403
     * .
     */
    public function testGeneratePlacementOptions403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePlacementOptions_404
     * .
     */
    public function testGeneratePlacementOptions404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePlacementOptions_413
     * .
     */
    public function testGeneratePlacementOptions413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePlacementOptions_415
     * .
     */
    public function testGeneratePlacementOptions415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePlacementOptions_429
     * .
     */
    public function testGeneratePlacementOptions429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePlacementOptions_500
     * .
     */
    public function testGeneratePlacementOptions500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generatePlacementOptions_503
     * .
     */
    public function testGeneratePlacementOptions503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateSelfShipAppointmentSlots_201
     * .
     */
    public function testGenerateSelfShipAppointmentSlots201()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGenerateSelfShipAppointmentSlots201')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{desiredEndDate&#x3D;2024-01-15T00:00:00.000Z, desiredStartDate&#x3D;2024-01-16T00:00:00.000Z}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generateSelfShipAppointmentSlots',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generateSelfShipAppointmentSlots',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generateSelfShipAppointmentSlotsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(201, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 201, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 201);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generateSelfShipAppointmentSlots_400
     * .
     */
    public function testGenerateSelfShipAppointmentSlots400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGenerateSelfShipAppointmentSlots400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{desiredEndDate&#x3D;2024-01-15T00:00:00.000Z, desiredStartDate&#x3D;2024-01-16T00:00:00.000Z}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generateSelfShipAppointmentSlots',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist in the inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generateSelfShipAppointmentSlots',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generateSelfShipAppointmentSlotsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generateSelfShipAppointmentSlots_403
     * .
     */
    public function testGenerateSelfShipAppointmentSlots403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateSelfShipAppointmentSlots_404
     * .
     */
    public function testGenerateSelfShipAppointmentSlots404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateSelfShipAppointmentSlots_413
     * .
     */
    public function testGenerateSelfShipAppointmentSlots413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateSelfShipAppointmentSlots_415
     * .
     */
    public function testGenerateSelfShipAppointmentSlots415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateSelfShipAppointmentSlots_429
     * .
     */
    public function testGenerateSelfShipAppointmentSlots429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateSelfShipAppointmentSlots_500
     * .
     */
    public function testGenerateSelfShipAppointmentSlots500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateSelfShipAppointmentSlots_503
     * .
     */
    public function testGenerateSelfShipAppointmentSlots503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateShipmentContentUpdatePreviews_202
     * .
     */
    public function testGenerateShipmentContentUpdatePreviews202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGenerateShipmentContentUpdatePreviews202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{boxes&#x3D;[{packageId&#x3D;pk1234abcd-1234-abcd-5678-1234abcd5678, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;1, items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}], contentInformationSource&#x3D;BOX_CONTENT_PROVIDED}], items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generateShipmentContentUpdatePreviews',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generateShipmentContentUpdatePreviews',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generateShipmentContentUpdatePreviewsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generateShipmentContentUpdatePreviews_400
     * .
     */
    public function testGenerateShipmentContentUpdatePreviews400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGenerateShipmentContentUpdatePreviews400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{boxes&#x3D;[{packageId&#x3D;pk1234abcd-1234-abcd-5678-1234abcd5678, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;1, items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}], contentInformationSource&#x3D;BOX_CONTENT_PROVIDED}], items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generateShipmentContentUpdatePreviews',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipment does not exist under the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generateShipmentContentUpdatePreviews',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generateShipmentContentUpdatePreviewsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generateShipmentContentUpdatePreviews_403
     * .
     */
    public function testGenerateShipmentContentUpdatePreviews403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateShipmentContentUpdatePreviews_404
     * .
     */
    public function testGenerateShipmentContentUpdatePreviews404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateShipmentContentUpdatePreviews_413
     * .
     */
    public function testGenerateShipmentContentUpdatePreviews413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateShipmentContentUpdatePreviews_415
     * .
     */
    public function testGenerateShipmentContentUpdatePreviews415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateShipmentContentUpdatePreviews_429
     * .
     */
    public function testGenerateShipmentContentUpdatePreviews429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateShipmentContentUpdatePreviews_500
     * .
     */
    public function testGenerateShipmentContentUpdatePreviews500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateShipmentContentUpdatePreviews_503
     * .
     */
    public function testGenerateShipmentContentUpdatePreviews503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateTransportationOptions_202
     * .
     */
    public function testGenerateTransportationOptions202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGenerateTransportationOptions202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{placementOptionId&#x3D;pl1234abcd-1234-abcd-5678-1234abcd5678, shipmentTransportationConfigurations&#x3D;[{shipmentId&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678, readyToShipWindow&#x3D;{start&#x3D;2024-01-01T00:00Z}, contactInformation&#x3D;{name&#x3D;name, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}, freightInformation&#x3D;{freightClass&#x3D;FC_50, declaredValue&#x3D;{code&#x3D;USD, amount&#x3D;500}}, pallets&#x3D;[{stackability&#x3D;STACKABLE, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;2}]}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generateTransportationOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generateTransportationOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generateTransportationOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generateTransportationOptions_400
     * .
     */
    public function testGenerateTransportationOptions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGenerateTransportationOptions400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{placementOptionId&#x3D;pl1234abcd-1234-abcd-5678-1234abcd5678, shipmentTransportationConfigurations&#x3D;[{shipmentId&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678, readyToShipWindow&#x3D;{start&#x3D;2024-01-01T00:00Z}, contactInformation&#x3D;{name&#x3D;name, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}, freightInformation&#x3D;{freightClass&#x3D;FC_50, declaredValue&#x3D;{code&#x3D;USD, amount&#x3D;500}}, pallets&#x3D;[{stackability&#x3D;STACKABLE, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;2}]}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'generateTransportationOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist under the provided placement option.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'generateTransportationOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->generateTransportationOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for generateTransportationOptions_403
     * .
     */
    public function testGenerateTransportationOptions403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateTransportationOptions_404
     * .
     */
    public function testGenerateTransportationOptions404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateTransportationOptions_413
     * .
     */
    public function testGenerateTransportationOptions413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateTransportationOptions_415
     * .
     */
    public function testGenerateTransportationOptions415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateTransportationOptions_429
     * .
     */
    public function testGenerateTransportationOptions429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateTransportationOptions_500
     * .
     */
    public function testGenerateTransportationOptions500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for generateTransportationOptions_503
     * .
     */
    public function testGenerateTransportationOptions503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getDeliveryChallanDocument_200
     * .
     */
    public function testGetDeliveryChallanDocument200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetDeliveryChallanDocument200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getDeliveryChallanDocument',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{documentDownload&#x3D;{uri&#x3D;https://s3.amazonaws.com/bucket, downloadType&#x3D;URL, expiration&#x3D;2024-01-01T00:00:00.000Z}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getDeliveryChallanDocument',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getDeliveryChallanDocumentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getDeliveryChallanDocument_400
     * .
     */
    public function testGetDeliveryChallanDocument400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetDeliveryChallanDocument400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getDeliveryChallanDocument',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getDeliveryChallanDocument',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getDeliveryChallanDocumentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getDeliveryChallanDocument_403
     * .
     */
    public function testGetDeliveryChallanDocument403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getDeliveryChallanDocument_404
     * .
     */
    public function testGetDeliveryChallanDocument404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getDeliveryChallanDocument_413
     * .
     */
    public function testGetDeliveryChallanDocument413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getDeliveryChallanDocument_415
     * .
     */
    public function testGetDeliveryChallanDocument415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getDeliveryChallanDocument_429
     * .
     */
    public function testGetDeliveryChallanDocument429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getDeliveryChallanDocument_500
     * .
     */
    public function testGetDeliveryChallanDocument500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getDeliveryChallanDocument_503
     * .
     */
    public function testGetDeliveryChallanDocument503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundOperationStatus_200
     * .
     */
    public function testGetInboundOperationStatus200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetInboundOperationStatus200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{operationId&#x3D;{value&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getInboundOperationStatus',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;a440f2ff-cb08-416a-99e1-67a04eee88f6, operation&#x3D;operationName, operationStatus&#x3D;SUCCESS, operationProblems&#x3D;[{code&#x3D;DimensionMismatch, message&#x3D;The dimension does not match what is expected., details&#x3D;, severity&#x3D;WARNING}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getInboundOperationStatus',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getInboundOperationStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getInboundOperationStatus_400
     * .
     */
    public function testGetInboundOperationStatus400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetInboundOperationStatus400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{operationId&#x3D;{value&#x3D;bad4abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getInboundOperationStatus',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The operationId is malformed.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getInboundOperationStatus',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getInboundOperationStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getInboundOperationStatus_403
     * .
     */
    public function testGetInboundOperationStatus403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundOperationStatus_404
     * .
     */
    public function testGetInboundOperationStatus404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundOperationStatus_413
     * .
     */
    public function testGetInboundOperationStatus413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundOperationStatus_415
     * .
     */
    public function testGetInboundOperationStatus415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundOperationStatus_429
     * .
     */
    public function testGetInboundOperationStatus429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundOperationStatus_500
     * .
     */
    public function testGetInboundOperationStatus500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundOperationStatus_503
     * .
     */
    public function testGetInboundOperationStatus503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundPlan_200
     * .
     */
    public function testGetInboundPlan200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetInboundPlan200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getInboundPlan',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{inboundPlanId&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678, name&#x3D;FBA (03/20/2024, 12:01 PM), createdAt&#x3D;2024-03-20T12:01:00Z, lastUpdatedAt&#x3D;2024-03-28T13:15:30Z, status&#x3D;ACTIVE, marketplaceIds&#x3D;[A2EUQ1WTGCTBG2], packingOptions&#x3D;[], placementOptions&#x3D;[], shipments&#x3D;[], sourceAddress&#x3D;{name&#x3D;name, companyName&#x3D;Acme, addressLine1&#x3D;123 example street, addressLine2&#x3D;Unit 102, city&#x3D;Toronto, countryCode&#x3D;CA, stateOrProvinceCode&#x3D;ON, postalCode&#x3D;M1M1M1, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getInboundPlan',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getInboundPlanWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getInboundPlan_400
     * .
     */
    public function testGetInboundPlan400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetInboundPlan400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wfbad4abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getInboundPlan',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The inboundPlanId is malformed.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getInboundPlan',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getInboundPlanWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getInboundPlan_403
     * .
     */
    public function testGetInboundPlan403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundPlan_404
     * .
     */
    public function testGetInboundPlan404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundPlan_413
     * .
     */
    public function testGetInboundPlan413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundPlan_415
     * .
     */
    public function testGetInboundPlan415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundPlan_429
     * .
     */
    public function testGetInboundPlan429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundPlan_500
     * .
     */
    public function testGetInboundPlan500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInboundPlan_503
     * .
     */
    public function testGetInboundPlan503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSelfShipAppointmentSlots_200
     * .
     */
    public function testGetSelfShipAppointmentSlots200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetSelfShipAppointmentSlots200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getSelfShipAppointmentSlots',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{selfShipAppointmentSlotsAvailability&#x3D;{expiresAt&#x3D;2024-01-02T00:00:00.000Z, slots&#x3D;[{slotId&#x3D;aa1234abcd-1234-abcd-5678-1234abcd5678, slotTime&#x3D;{startTime&#x3D;2024-01-01T00:00:00.000Z, endTime&#x3D;2024-01-02T00:00:00.000Z}}]}, pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getSelfShipAppointmentSlots',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getSelfShipAppointmentSlotsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getSelfShipAppointmentSlots_400
     * .
     */
    public function testGetSelfShipAppointmentSlots400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetSelfShipAppointmentSlots400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getSelfShipAppointmentSlots',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist for the given inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getSelfShipAppointmentSlots',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getSelfShipAppointmentSlotsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getSelfShipAppointmentSlots_403
     * .
     */
    public function testGetSelfShipAppointmentSlots403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSelfShipAppointmentSlots_404
     * .
     */
    public function testGetSelfShipAppointmentSlots404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSelfShipAppointmentSlots_413
     * .
     */
    public function testGetSelfShipAppointmentSlots413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSelfShipAppointmentSlots_415
     * .
     */
    public function testGetSelfShipAppointmentSlots415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSelfShipAppointmentSlots_429
     * .
     */
    public function testGetSelfShipAppointmentSlots429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSelfShipAppointmentSlots_500
     * .
     */
    public function testGetSelfShipAppointmentSlots500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSelfShipAppointmentSlots_503
     * .
     */
    public function testGetSelfShipAppointmentSlots503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_200
     * .
     */
    public function testGetShipment200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipment200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getShipment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{placementOptionId&#x3D;pl1234abcd-1234-abcd-5678-1234abcd5678, shipmentId&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678, shipmentConfirmationId&#x3D;FBA1234ABCD, amazonReferenceId&#x3D;amazonReferenceId, selectedTransportationOptionId&#x3D;to1234abcd-1234-abcd-5678-1234abcd5678, selectedDeliveryWindow&#x3D;{startDate&#x3D;2024-01-01T00:00:00.000Z, endDate&#x3D;2024-01-01T06:00:00.000Z, editableUntil&#x3D;2024-01-01T06:00:00.000Z, availabilityType&#x3D;AVAILABLE, deliveryWindowOptionId&#x3D;dw1234abcd-1234-abcd-5678-1234abcd5678}, name&#x3D;FBA (10/02/2023 20:07)-ABC1, source&#x3D;{sourceType&#x3D;SELLER_FACILITY, address&#x3D;{name&#x3D;name, companyName&#x3D;Acme, addressLine1&#x3D;123 example street, addressLine2&#x3D;Unit 102, city&#x3D;Toronto, countryCode&#x3D;CA, stateOrProvinceCode&#x3D;ON, postalCode&#x3D;M1M1M1, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}}, destination&#x3D;{destinationType&#x3D;AMAZON_WAREHOUSE, address&#x3D;{name&#x3D;name, companyName&#x3D;Acme, addressLine1&#x3D;123 example street, addressLine2&#x3D;Unit 102, city&#x3D;Toronto, countryCode&#x3D;CA, stateOrProvinceCode&#x3D;ON, postalCode&#x3D;M1M1M1, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}, warehouseId&#x3D;YYZ5}, dates&#x3D;{readyToShipWindow&#x3D;{start&#x3D;2024-01-01T00:00Z, end&#x3D;2024-01-08T00:00Z, editableUntil&#x3D;2024-01-07T00:00Z}}, status&#x3D;WORKING, trackingDetails&#x3D;{spdTrackingDetail&#x3D;{spdTrackingItems&#x3D;[{boxId&#x3D;boxId, trackingId&#x3D;trackingId, trackingNumberValidationStatus&#x3D;VALIDATED}]}, ltlTrackingDetail&#x3D;{freightBillNumber&#x3D;[freightBillNumber1], billOfLadingNumber&#x3D;billOfLadingNumber}}, freightInformation&#x3D;{freightClass&#x3D;FC_50, declaredValue&#x3D;{code&#x3D;USD, amount&#x3D;500}}, contactInformation&#x3D;{name&#x3D;name, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}, selfShipAppointmentDetails&#x3D;[{appointmentId&#x3D;1, appointmentSlotTime&#x3D;{startTime&#x3D;2024-01-01T00:00:00.000Z, endTime&#x3D;2024-01-01T00:00:00.000Z}, appointmentStatus&#x3D;appointmentStatus}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getShipment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipment_400
     * .
     */
    public function testGetShipment400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipment400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getShipment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipment does not exist for the provided inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getShipment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipment_403
     * .
     */
    public function testGetShipment403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_404
     * .
     */
    public function testGetShipment404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_413
     * .
     */
    public function testGetShipment413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_415
     * .
     */
    public function testGetShipment415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_429
     * .
     */
    public function testGetShipment429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_500
     * .
     */
    public function testGetShipment500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_503
     * .
     */
    public function testGetShipment503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentContentUpdatePreview_200
     * .
     */
    public function testGetShipmentContentUpdatePreview200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipmentContentUpdatePreview200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, contentUpdatePreviewId&#x3D;{value&#x3D;cu1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getShipmentContentUpdatePreview',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{contentUpdatePreviewId&#x3D;cu1234abcd-1234-abcd-5678-1234abcd5678, expiration&#x3D;2024-01-01T01:01:00.000Z, transportationOption&#x3D;{shipmentId&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678, transportationOptionId&#x3D;to1234abcd-1234-abcd-5678-1234abcd5678, shippingSolution&#x3D;AMAZON_PARTNERED_CARRIER, carrier&#x3D;{name&#x3D;name, alphaCode&#x3D;USPS}, shippingMode&#x3D;GROUND_SMALL_PARCEL, quote&#x3D;{cost&#x3D;{code&#x3D;USD, amount&#x3D;500}, voidableUntil&#x3D;2024-01-01T00:00:00.000Z, expiration&#x3D;2024-01-01T00:00:00.000Z}, carrierAppointment&#x3D;{startTime&#x3D;2024-01-01T00:00:00.000Z, endTime&#x3D;2024-01-01T00:00:00.000Z}, preconditions&#x3D;[CONFIRMED_DELIVERY_WINDOW]}, requestedUpdates&#x3D;{boxes&#x3D;[{packageId&#x3D;pk1234abcd-1234-abcd-5678-1234abcd5678, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;1, items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}], contentInformationSource&#x3D;BOX_CONTENT_PROVIDED}], items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getShipmentContentUpdatePreview',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentContentUpdatePreviewWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipmentContentUpdatePreview_400
     * .
     */
    public function testGetShipmentContentUpdatePreview400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipmentContentUpdatePreview400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, contentUpdatePreviewId&#x3D;{value&#x3D;cu1234abcd-1234-abcd-5678-1234abcd5678}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getShipmentContentUpdatePreview',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inbound plan does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getShipmentContentUpdatePreview',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentContentUpdatePreviewWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipmentContentUpdatePreview_403
     * .
     */
    public function testGetShipmentContentUpdatePreview403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentContentUpdatePreview_404
     * .
     */
    public function testGetShipmentContentUpdatePreview404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentContentUpdatePreview_413
     * .
     */
    public function testGetShipmentContentUpdatePreview413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentContentUpdatePreview_415
     * .
     */
    public function testGetShipmentContentUpdatePreview415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentContentUpdatePreview_429
     * .
     */
    public function testGetShipmentContentUpdatePreview429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentContentUpdatePreview_500
     * .
     */
    public function testGetShipmentContentUpdatePreview500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentContentUpdatePreview_503
     * .
     */
    public function testGetShipmentContentUpdatePreview503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listDeliveryWindowOptions_200
     * .
     */
    public function testListDeliveryWindowOptions200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListDeliveryWindowOptions200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listDeliveryWindowOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{deliveryWindowOptions&#x3D;[{deliveryWindowOptionId&#x3D;dw1234abcd-1234-abcd-5678-1234abcd5678, startDate&#x3D;2024-01-01T00:00:00.000Z, endDate&#x3D;2024-01-01T06:00:00.000Z, availabilityType&#x3D;AVAILABLE, validUntil&#x3D;2024-01-01T06:00:00.000Z}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listDeliveryWindowOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listDeliveryWindowOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listDeliveryWindowOptions_400
     * .
     */
    public function testListDeliveryWindowOptions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListDeliveryWindowOptions400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listDeliveryWindowOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listDeliveryWindowOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listDeliveryWindowOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listDeliveryWindowOptions_403
     * .
     */
    public function testListDeliveryWindowOptions403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listDeliveryWindowOptions_404
     * .
     */
    public function testListDeliveryWindowOptions404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listDeliveryWindowOptions_413
     * .
     */
    public function testListDeliveryWindowOptions413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listDeliveryWindowOptions_415
     * .
     */
    public function testListDeliveryWindowOptions415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listDeliveryWindowOptions_429
     * .
     */
    public function testListDeliveryWindowOptions429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listDeliveryWindowOptions_500
     * .
     */
    public function testListDeliveryWindowOptions500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listDeliveryWindowOptions_503
     * .
     */
    public function testListDeliveryWindowOptions503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanBoxes_200
     * .
     */
    public function testListInboundPlanBoxes200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListInboundPlanBoxes200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listInboundPlanBoxes',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{boxes&#x3D;[{packageId&#x3D;pk1234abcd-1234-abcd-5678-1234abcd5678, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;2, boxId&#x3D;boxId, templateName&#x3D;templateName, items&#x3D;[{quantity&#x3D;5, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;manufacturingLotCode, prepInstructions&#x3D;[{prepType&#x3D;ITEM_POLYBAGGING, prepOwner&#x3D;AMAZON, fee&#x3D;{code&#x3D;USD, amount&#x3D;10}}], msku&#x3D;msku, asin&#x3D;asin, fnsku&#x3D;fnsku, labelOwner&#x3D;AMAZON}], destinationRegion&#x3D;{countryCode&#x3D;US, state&#x3D;CA, warehouseId&#x3D;ABC1}, contentInformationSource&#x3D;BOX_CONTENT_PROVIDED}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listInboundPlanBoxes',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listInboundPlanBoxesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listInboundPlanBoxes_400
     * .
     */
    public function testListInboundPlanBoxes400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListInboundPlanBoxes400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listInboundPlanBoxes',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inboundPlanId does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listInboundPlanBoxes',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listInboundPlanBoxesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listInboundPlanBoxes_403
     * .
     */
    public function testListInboundPlanBoxes403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanBoxes_404
     * .
     */
    public function testListInboundPlanBoxes404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanBoxes_413
     * .
     */
    public function testListInboundPlanBoxes413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanBoxes_415
     * .
     */
    public function testListInboundPlanBoxes415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanBoxes_429
     * .
     */
    public function testListInboundPlanBoxes429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanBoxes_500
     * .
     */
    public function testListInboundPlanBoxes500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanBoxes_503
     * .
     */
    public function testListInboundPlanBoxes503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanItems_200
     * .
     */
    public function testListInboundPlanItems200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListInboundPlanItems200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listInboundPlanItems',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{items&#x3D;[{quantity&#x3D;5, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;manufacturingLotCode, prepInstructions&#x3D;[{prepType&#x3D;ITEM_POLYBAGGING, prepOwner&#x3D;AMAZON, fee&#x3D;{code&#x3D;USD, amount&#x3D;10}}], msku&#x3D;msku, asin&#x3D;asin, fnsku&#x3D;fnsku, labelOwner&#x3D;AMAZON}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listInboundPlanItems',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listInboundPlanItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listInboundPlanItems_400
     * .
     */
    public function testListInboundPlanItems400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListInboundPlanItems400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wfbad4abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;1}, paginationToken&#x3D;{value&#x3D;}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listInboundPlanItems',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inbound plan does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listInboundPlanItems',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listInboundPlanItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listInboundPlanItems_403
     * .
     */
    public function testListInboundPlanItems403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanItems_404
     * .
     */
    public function testListInboundPlanItems404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanItems_413
     * .
     */
    public function testListInboundPlanItems413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanItems_415
     * .
     */
    public function testListInboundPlanItems415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanItems_429
     * .
     */
    public function testListInboundPlanItems429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanItems_500
     * .
     */
    public function testListInboundPlanItems500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanItems_503
     * .
     */
    public function testListInboundPlanItems503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanPallets_200
     * .
     */
    public function testListInboundPlanPallets200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListInboundPlanPallets200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listInboundPlanPallets',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{pallets&#x3D;[{stackability&#x3D;STACKABLE, packageId&#x3D;pk1234abcd-1234-abcd-5678-1234abcd5678, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;2}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listInboundPlanPallets',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listInboundPlanPalletsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listInboundPlanPallets_400
     * .
     */
    public function testListInboundPlanPallets400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListInboundPlanPallets400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listInboundPlanPallets',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inbound plan does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listInboundPlanPallets',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listInboundPlanPalletsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listInboundPlanPallets_403
     * .
     */
    public function testListInboundPlanPallets403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanPallets_404
     * .
     */
    public function testListInboundPlanPallets404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanPallets_413
     * .
     */
    public function testListInboundPlanPallets413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanPallets_415
     * .
     */
    public function testListInboundPlanPallets415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanPallets_429
     * .
     */
    public function testListInboundPlanPallets429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanPallets_500
     * .
     */
    public function testListInboundPlanPallets500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlanPallets_503
     * .
     */
    public function testListInboundPlanPallets503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlans_200
     * .
     */
    public function testListInboundPlans200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListInboundPlans200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{status&#x3D;{value&#x3D;ACTIVE}, sortBy&#x3D;{value&#x3D;LAST_UPDATED_TIME}, sortOrder&#x3D;{value&#x3D;ASC}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listInboundPlans',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{inboundPlans&#x3D;[{inboundPlanId&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678, name&#x3D;FBA (03/08/2023, 01:15 PM), createdAt&#x3D;2023-03-08T13:15:30Z, lastUpdatedAt&#x3D;2023-03-08T13:15:30Z, status&#x3D;ACTIVE, marketplaceIds&#x3D;[A2EUQ1WTGCTBG2], sourceAddress&#x3D;{name&#x3D;name, companyName&#x3D;Acme, addressLine1&#x3D;123 example street, addressLine2&#x3D;Unit 102, city&#x3D;Toronto, countryCode&#x3D;CA, stateOrProvinceCode&#x3D;ON, postalCode&#x3D;M1M1M1, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}}, {inboundPlanId&#x3D;wf2234abcd-1234-abcd-5678-1234abcd5678, name&#x3D;FBA (03/08/2023, 01:15 PM), createdAt&#x3D;2023-03-08T13:15:30Z, lastUpdatedAt&#x3D;2023-03-08T13:15:30Z, status&#x3D;ACTIVE, marketplaceIds&#x3D;[A2EUQ1WTGCTBG2], sourceAddress&#x3D;{name&#x3D;name, companyName&#x3D;Acme, addressLine1&#x3D;123 example street, addressLine2&#x3D;Unit 102, city&#x3D;Toronto, countryCode&#x3D;CA, stateOrProvinceCode&#x3D;ON, postalCode&#x3D;M1M1M1, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listInboundPlans',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listInboundPlansWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listInboundPlans_400
     * .
     */
    public function testListInboundPlans400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListInboundPlans400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{status&#x3D;{value&#x3D;badStatus}, sortBy&#x3D;{value&#x3D;LAST_UPDATED_TIME}, sortOrder&#x3D;{value&#x3D;ASC}, pageSize&#x3D;{value&#x3D;5}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listInboundPlans',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The status is invalid.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listInboundPlans',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listInboundPlansWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listInboundPlans_403
     * .
     */
    public function testListInboundPlans403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlans_404
     * .
     */
    public function testListInboundPlans404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlans_413
     * .
     */
    public function testListInboundPlans413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlans_415
     * .
     */
    public function testListInboundPlans415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlans_429
     * .
     */
    public function testListInboundPlans429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlans_500
     * .
     */
    public function testListInboundPlans500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listInboundPlans_503
     * .
     */
    public function testListInboundPlans503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listItemComplianceDetails_200
     * .
     */
    public function testListItemComplianceDetails200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListItemComplianceDetails200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{mskus&#x3D;{value&#x3D;[msku1, msku2]}, marketplaceId&#x3D;{value&#x3D;ATVPDKIKX0DER}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listItemComplianceDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{complianceDetails&#x3D;[{msku&#x3D;msku1, fnsku&#x3D;fnsku1, asin&#x3D;asin1, taxDetails&#x3D;{hsnCode&#x3D;720299, declaredValue&#x3D;{code&#x3D;USD, amount&#x3D;50}, taxRates&#x3D;[{taxType&#x3D;TOTAL_TAX, gstRate&#x3D;1, cessRate&#x3D;1}]}}, {msku&#x3D;msku2, fnsku&#x3D;fnsku2, asin&#x3D;asin2, taxDetails&#x3D;{hsnCode&#x3D;720299, declaredValue&#x3D;{code&#x3D;USD, amount&#x3D;50}, taxRates&#x3D;[{taxType&#x3D;TOTAL_TAX, gstRate&#x3D;1, cessRate&#x3D;1}]}}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listItemComplianceDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listItemComplianceDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listItemComplianceDetails_400
     * .
     */
    public function testListItemComplianceDetails400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListItemComplianceDetails400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{mskus&#x3D;{value&#x3D;[badmsku]}, marketplaceId&#x3D;{value&#x3D;ATVPDKIKX0DER}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listItemComplianceDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested MSKU is not valid.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listItemComplianceDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listItemComplianceDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listItemComplianceDetails_403
     * .
     */
    public function testListItemComplianceDetails403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listItemComplianceDetails_404
     * .
     */
    public function testListItemComplianceDetails404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listItemComplianceDetails_413
     * .
     */
    public function testListItemComplianceDetails413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listItemComplianceDetails_415
     * .
     */
    public function testListItemComplianceDetails415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listItemComplianceDetails_429
     * .
     */
    public function testListItemComplianceDetails429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listItemComplianceDetails_500
     * .
     */
    public function testListItemComplianceDetails500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listItemComplianceDetails_503
     * .
     */
    public function testListItemComplianceDetails503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupBoxes_200
     * .
     */
    public function testListPackingGroupBoxes200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListPackingGroupBoxes200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, packingGroupId&#x3D;{value&#x3D;pg1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listPackingGroupBoxes',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{boxes&#x3D;[{packageId&#x3D;pk1234abcd-1234-abcd-5678-1234abcd5678, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;2, boxId&#x3D;boxId, templateName&#x3D;templateName, items&#x3D;[{quantity&#x3D;5, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;manufacturingLotCode, prepInstructions&#x3D;[{prepType&#x3D;ITEM_POLYBAGGING, prepOwner&#x3D;AMAZON, fee&#x3D;{code&#x3D;USD, amount&#x3D;10}}], msku&#x3D;msku, asin&#x3D;asin, fnsku&#x3D;fnsku, labelOwner&#x3D;AMAZON}], destinationRegion&#x3D;{countryCode&#x3D;US, state&#x3D;CA, warehouseId&#x3D;ABC1}, contentInformationSource&#x3D;BOX_CONTENT_PROVIDED}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listPackingGroupBoxes',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listPackingGroupBoxesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listPackingGroupBoxes_400
     * .
     */
    public function testListPackingGroupBoxes400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListPackingGroupBoxes400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, packingGroupId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listPackingGroupBoxes',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested packingGroupId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listPackingGroupBoxes',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listPackingGroupBoxesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listPackingGroupBoxes_403
     * .
     */
    public function testListPackingGroupBoxes403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupBoxes_404
     * .
     */
    public function testListPackingGroupBoxes404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupBoxes_413
     * .
     */
    public function testListPackingGroupBoxes413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupBoxes_415
     * .
     */
    public function testListPackingGroupBoxes415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupBoxes_429
     * .
     */
    public function testListPackingGroupBoxes429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupBoxes_500
     * .
     */
    public function testListPackingGroupBoxes500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupBoxes_503
     * .
     */
    public function testListPackingGroupBoxes503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupItems_200
     * .
     */
    public function testListPackingGroupItems200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListPackingGroupItems200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, packingGroupId&#x3D;{value&#x3D;pg1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listPackingGroupItems',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{items&#x3D;[{quantity&#x3D;5, prepInstructions&#x3D;[{prepType&#x3D;ITEM_POLYBAGGING, prepOwner&#x3D;AMAZON, fee&#x3D;{code&#x3D;USD, amount&#x3D;10}}], msku&#x3D;msku, asin&#x3D;asin, fnsku&#x3D;fnsku, labelOwner&#x3D;AMAZON}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listPackingGroupItems',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listPackingGroupItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listPackingGroupItems_400
     * .
     */
    public function testListPackingGroupItems400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListPackingGroupItems400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, packingGroupId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listPackingGroupItems',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested packingGroupId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listPackingGroupItems',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listPackingGroupItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listPackingGroupItems_403
     * .
     */
    public function testListPackingGroupItems403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupItems_404
     * .
     */
    public function testListPackingGroupItems404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupItems_413
     * .
     */
    public function testListPackingGroupItems413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupItems_415
     * .
     */
    public function testListPackingGroupItems415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupItems_429
     * .
     */
    public function testListPackingGroupItems429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupItems_500
     * .
     */
    public function testListPackingGroupItems500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingGroupItems_503
     * .
     */
    public function testListPackingGroupItems503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingOptions_200
     * .
     */
    public function testListPackingOptions200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListPackingOptions200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listPackingOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{packingOptions&#x3D;[{packingOptionId&#x3D;po1234abcd-1234-abcd-5678-1234abcd5678, packingGroups&#x3D;[pg1234abcd-1234-abcd-5678-1234abcd5678], fees&#x3D;[{value&#x3D;{code&#x3D;USD, amount&#x3D;1}, type&#x3D;FEE, target&#x3D;Placement Services, description&#x3D;description}], discounts&#x3D;[{value&#x3D;{code&#x3D;USD, amount&#x3D;1}, type&#x3D;DISCOUNT, target&#x3D;Placement Services, description&#x3D;description}], expiration&#x3D;2024-01-01T00:00:00.000Z, status&#x3D;OFFERED, supportedShippingConfigurations&#x3D;[{shippingSolution&#x3D;AMAZON_PARTNERED_CARRIER, shippingMode&#x3D;GROUND_SMALL_PARCEL}]}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listPackingOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listPackingOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listPackingOptions_400
     * .
     */
    public function testListPackingOptions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListPackingOptions400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listPackingOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inbound plan does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listPackingOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listPackingOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listPackingOptions_403
     * .
     */
    public function testListPackingOptions403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingOptions_404
     * .
     */
    public function testListPackingOptions404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingOptions_413
     * .
     */
    public function testListPackingOptions413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingOptions_415
     * .
     */
    public function testListPackingOptions415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingOptions_429
     * .
     */
    public function testListPackingOptions429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingOptions_500
     * .
     */
    public function testListPackingOptions500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPackingOptions_503
     * .
     */
    public function testListPackingOptions503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPlacementOptions_200
     * .
     */
    public function testListPlacementOptions200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListPlacementOptions200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listPlacementOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{placementOptions&#x3D;[{placementOptionId&#x3D;pl1234abcd-1234-abcd-5678-1234abcd5678, status&#x3D;OFFERED, fees&#x3D;[{value&#x3D;{code&#x3D;USD, amount&#x3D;1}, type&#x3D;FEE, target&#x3D;Placement Services, description&#x3D;description}], discounts&#x3D;[{value&#x3D;{code&#x3D;USD, amount&#x3D;1}, type&#x3D;DISCOUNT, target&#x3D;Placement Services, description&#x3D;description}], expiration&#x3D;2024-01-01T00:00:00.000Z, shipmentIds&#x3D;[sh1234abcd-1234-abcd-5678-1234abcd5678]}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listPlacementOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listPlacementOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listPlacementOptions_400
     * .
     */
    public function testListPlacementOptions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListPlacementOptions400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listPlacementOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inbound plan does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listPlacementOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listPlacementOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listPlacementOptions_403
     * .
     */
    public function testListPlacementOptions403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPlacementOptions_404
     * .
     */
    public function testListPlacementOptions404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPlacementOptions_413
     * .
     */
    public function testListPlacementOptions413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPlacementOptions_415
     * .
     */
    public function testListPlacementOptions415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPlacementOptions_429
     * .
     */
    public function testListPlacementOptions429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPlacementOptions_500
     * .
     */
    public function testListPlacementOptions500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPlacementOptions_503
     * .
     */
    public function testListPlacementOptions503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPrepDetails_200
     * .
     */
    public function testListPrepDetails200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListPrepDetails200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{marketplaceId&#x3D;{value&#x3D;ATVPDKIKX0DER}, mskus&#x3D;{value&#x3D;[msku1, msku2]}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listPrepDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{mskuPrepDetails&#x3D;[{msku&#x3D;msku1, prepCategory&#x3D;TEXTILE, prepTypes&#x3D;[ITEM_LABELING, ITEM_POLYBAGGING], prepOwnerConstraint&#x3D;AMAZON_ONLY, labelOwnerConstraint&#x3D;AMAZON_ONLY, allOwnersConstraint&#x3D;MUST_MATCH}, {msku&#x3D;msku2, prepCategory&#x3D;FRAGILE, prepTypes&#x3D;[ITEM_LABELING, ITEM_BUBBLEWRAP], allOwnersConstraint&#x3D;MUST_MATCH}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listPrepDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listPrepDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listPrepDetails_400
     * .
     */
    public function testListPrepDetails400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListPrepDetails400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{marketplaceId&#x3D;{value&#x3D;ATVPDKIKX0DER}, mskus&#x3D;{value&#x3D;[badmsku]}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listPrepDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested MSKU is not valid.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listPrepDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listPrepDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listPrepDetails_403
     * .
     */
    public function testListPrepDetails403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPrepDetails_404
     * .
     */
    public function testListPrepDetails404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPrepDetails_413
     * .
     */
    public function testListPrepDetails413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPrepDetails_415
     * .
     */
    public function testListPrepDetails415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPrepDetails_429
     * .
     */
    public function testListPrepDetails429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPrepDetails_500
     * .
     */
    public function testListPrepDetails500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listPrepDetails_503
     * .
     */
    public function testListPrepDetails503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentBoxes_200
     * .
     */
    public function testListShipmentBoxes200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListShipmentBoxes200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listShipmentBoxes',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{boxes&#x3D;[{packageId&#x3D;pk1234abcd-1234-abcd-5678-1234abcd5678, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;2, boxId&#x3D;boxId, templateName&#x3D;templateName, items&#x3D;[{quantity&#x3D;5, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;manufacturingLotCode, prepInstructions&#x3D;[{prepType&#x3D;ITEM_POLYBAGGING, prepOwner&#x3D;AMAZON, fee&#x3D;{code&#x3D;USD, amount&#x3D;10}}], msku&#x3D;msku, asin&#x3D;asin, fnsku&#x3D;fnsku, labelOwner&#x3D;AMAZON}], destinationRegion&#x3D;{countryCode&#x3D;US, state&#x3D;CA, warehouseId&#x3D;ABC1}, contentInformationSource&#x3D;BOX_CONTENT_PROVIDED}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listShipmentBoxes',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listShipmentBoxesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listShipmentBoxes_400
     * .
     */
    public function testListShipmentBoxes400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListShipmentBoxes400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listShipmentBoxes',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inboundPlanId does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listShipmentBoxes',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listShipmentBoxesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listShipmentBoxes_403
     * .
     */
    public function testListShipmentBoxes403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentBoxes_404
     * .
     */
    public function testListShipmentBoxes404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentBoxes_413
     * .
     */
    public function testListShipmentBoxes413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentBoxes_415
     * .
     */
    public function testListShipmentBoxes415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentBoxes_429
     * .
     */
    public function testListShipmentBoxes429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentBoxes_500
     * .
     */
    public function testListShipmentBoxes500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentBoxes_503
     * .
     */
    public function testListShipmentBoxes503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentContentUpdatePreviews_200
     * .
     */
    public function testListShipmentContentUpdatePreviews200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListShipmentContentUpdatePreviews200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listShipmentContentUpdatePreviews',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{contentUpdatePreviews&#x3D;[{contentUpdatePreviewId&#x3D;cu1234abcd-1234-abcd-5678-1234abcd5678, expiration&#x3D;2024-01-01T01:01:00.000Z, transportationOption&#x3D;{shipmentId&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678, transportationOptionId&#x3D;to1234abcd-1234-abcd-5678-1234abcd5678, shippingSolution&#x3D;AMAZON_PARTNERED_CARRIER, carrier&#x3D;{name&#x3D;name, alphaCode&#x3D;USPS}, shippingMode&#x3D;GROUND_SMALL_PARCEL, quote&#x3D;{cost&#x3D;{code&#x3D;USD, amount&#x3D;500}, voidableUntil&#x3D;2024-01-01T00:00:00.000Z, expiration&#x3D;2024-01-01T00:00:00.000Z}, carrierAppointment&#x3D;{startTime&#x3D;2024-01-01T00:00:00.000Z, endTime&#x3D;2024-01-02T00:00:00.000Z}, preconditions&#x3D;[CONFIRMED_DELIVERY_WINDOW]}, requestedUpdates&#x3D;{boxes&#x3D;[{packageId&#x3D;pk1234abcd-1234-abcd-5678-1234abcd5678, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;1, items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}], contentInformationSource&#x3D;BOX_CONTENT_PROVIDED}], items&#x3D;[{msku&#x3D;msku, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, quantity&#x3D;2, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;lotCode}]}}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listShipmentContentUpdatePreviews',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listShipmentContentUpdatePreviewsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listShipmentContentUpdatePreviews_400
     * .
     */
    public function testListShipmentContentUpdatePreviews400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListShipmentContentUpdatePreviews400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listShipmentContentUpdatePreviews',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inbound plan does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listShipmentContentUpdatePreviews',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listShipmentContentUpdatePreviewsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listShipmentContentUpdatePreviews_403
     * .
     */
    public function testListShipmentContentUpdatePreviews403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentContentUpdatePreviews_404
     * .
     */
    public function testListShipmentContentUpdatePreviews404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentContentUpdatePreviews_413
     * .
     */
    public function testListShipmentContentUpdatePreviews413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentContentUpdatePreviews_415
     * .
     */
    public function testListShipmentContentUpdatePreviews415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentContentUpdatePreviews_429
     * .
     */
    public function testListShipmentContentUpdatePreviews429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentContentUpdatePreviews_500
     * .
     */
    public function testListShipmentContentUpdatePreviews500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentContentUpdatePreviews_503
     * .
     */
    public function testListShipmentContentUpdatePreviews503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentItems_200
     * .
     */
    public function testListShipmentItems200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListShipmentItems200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listShipmentItems',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{items&#x3D;[{quantity&#x3D;5, expiration&#x3D;2024-01-01, manufacturingLotCode&#x3D;manufacturingLotCode, prepInstructions&#x3D;[{prepType&#x3D;ITEM_POLYBAGGING, prepOwner&#x3D;AMAZON, fee&#x3D;{code&#x3D;USD, amount&#x3D;10}}], msku&#x3D;msku, asin&#x3D;asin, fnsku&#x3D;fnsku, labelOwner&#x3D;AMAZON}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listShipmentItems',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listShipmentItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listShipmentItems_400
     * .
     */
    public function testListShipmentItems400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListShipmentItems400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wfbad4abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;1}, paginationToken&#x3D;{value&#x3D;}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listShipmentItems',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inbound plan does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listShipmentItems',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listShipmentItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listShipmentItems_403
     * .
     */
    public function testListShipmentItems403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentItems_404
     * .
     */
    public function testListShipmentItems404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentItems_413
     * .
     */
    public function testListShipmentItems413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentItems_415
     * .
     */
    public function testListShipmentItems415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentItems_429
     * .
     */
    public function testListShipmentItems429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentItems_500
     * .
     */
    public function testListShipmentItems500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentItems_503
     * .
     */
    public function testListShipmentItems503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentPallets_200
     * .
     */
    public function testListShipmentPallets200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListShipmentPallets200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listShipmentPallets',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{pallets&#x3D;[{stackability&#x3D;STACKABLE, packageId&#x3D;pk1234abcd-1234-abcd-5678-1234abcd5678, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;2}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listShipmentPallets',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listShipmentPalletsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listShipmentPallets_400
     * .
     */
    public function testListShipmentPallets400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListShipmentPallets400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listShipmentPallets',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inbound plan does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listShipmentPallets',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listShipmentPalletsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listShipmentPallets_403
     * .
     */
    public function testListShipmentPallets403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentPallets_404
     * .
     */
    public function testListShipmentPallets404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentPallets_413
     * .
     */
    public function testListShipmentPallets413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentPallets_415
     * .
     */
    public function testListShipmentPallets415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentPallets_429
     * .
     */
    public function testListShipmentPallets429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentPallets_500
     * .
     */
    public function testListShipmentPallets500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listShipmentPallets_503
     * .
     */
    public function testListShipmentPallets503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listTransportationOptions_200
     * .
     */
    public function testListTransportationOptions200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListTransportationOptions200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, placementOptionId&#x3D;{value&#x3D;pl1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listTransportationOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{transportationOptions&#x3D;[{shipmentId&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678, transportationOptionId&#x3D;to1234abcd-1234-abcd-5678-1234abcd5678, shippingSolution&#x3D;AMAZON_PARTNERED_CARRIER, carrier&#x3D;{name&#x3D;name, alphaCode&#x3D;USPS}, shippingMode&#x3D;GROUND_SMALL_PARCEL, quote&#x3D;{cost&#x3D;{code&#x3D;USD, amount&#x3D;500}, voidableUntil&#x3D;2024-01-01T00:00:00.000Z, expiration&#x3D;2024-01-01T00:00:00.000Z}, carrierAppointment&#x3D;{startTime&#x3D;2024-01-01T00:00:00.000Z, endTime&#x3D;2024-01-02T00:00:00.000Z}, preconditions&#x3D;[CONFIRMED_DELIVERY_WINDOW]}], pagination&#x3D;{nextToken&#x3D;nextPaginationToken}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listTransportationOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listTransportationOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listTransportationOptions_400
     * .
     */
    public function testListTransportationOptions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListTransportationOptions400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, placementOptionId&#x3D;{value&#x3D;pl1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, pageSize&#x3D;{value&#x3D;2}, paginationToken&#x3D;{value&#x3D;paginationToken}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listTransportationOptions',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listTransportationOptions',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listTransportationOptionsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listTransportationOptions_403
     * .
     */
    public function testListTransportationOptions403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listTransportationOptions_404
     * .
     */
    public function testListTransportationOptions404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listTransportationOptions_413
     * .
     */
    public function testListTransportationOptions413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listTransportationOptions_415
     * .
     */
    public function testListTransportationOptions415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listTransportationOptions_429
     * .
     */
    public function testListTransportationOptions429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listTransportationOptions_500
     * .
     */
    public function testListTransportationOptions500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listTransportationOptions_503
     * .
     */
    public function testListTransportationOptions503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for scheduleSelfShipAppointment_200
     * .
     */
    public function testScheduleSelfShipAppointment200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testScheduleSelfShipAppointment200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, slotId&#x3D;{value&#x3D;aa1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{reasonComment&#x3D;OTHER}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'scheduleSelfShipAppointment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{selfShipAppointmentDetails&#x3D;{appointmentId&#x3D;1000, appointmentSlotTime&#x3D;{startTime&#x3D;2023-03-08T13:15:30Z, endTime&#x3D;2023-03-09T13:15:30Z}, appointmentStatus&#x3D;ARRIVAL_SCHEDULED}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'scheduleSelfShipAppointment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->scheduleSelfShipAppointmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for scheduleSelfShipAppointment_400
     * .
     */
    public function testScheduleSelfShipAppointment400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testScheduleSelfShipAppointment400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, slotId&#x3D;{value&#x3D;aa1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{reasonComment&#x3D;OTHER}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'scheduleSelfShipAppointment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'scheduleSelfShipAppointment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->scheduleSelfShipAppointmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for scheduleSelfShipAppointment_403
     * .
     */
    public function testScheduleSelfShipAppointment403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for scheduleSelfShipAppointment_404
     * .
     */
    public function testScheduleSelfShipAppointment404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for scheduleSelfShipAppointment_413
     * .
     */
    public function testScheduleSelfShipAppointment413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for scheduleSelfShipAppointment_415
     * .
     */
    public function testScheduleSelfShipAppointment415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for scheduleSelfShipAppointment_429
     * .
     */
    public function testScheduleSelfShipAppointment429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for scheduleSelfShipAppointment_500
     * .
     */
    public function testScheduleSelfShipAppointment500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for scheduleSelfShipAppointment_503
     * .
     */
    public function testScheduleSelfShipAppointment503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPackingInformation_202
     * .
     */
    public function testSetPackingInformation202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSetPackingInformation202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{packageGroupings&#x3D;[{shipmentId&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678, packingGroupId&#x3D;pg1234abcd-1234-abcd-5678-1234abcd5678, boxes&#x3D;[{items&#x3D;[{msku&#x3D;msku, quantity&#x3D;5, expiration&#x3D;2024-01-01, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, manufacturingLotCode&#x3D;manufacturingLotCode}], contentInformationSource&#x3D;BOX_CONTENT_PROVIDED, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;2}]}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'setPackingInformation',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'setPackingInformation',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->setPackingInformationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for setPackingInformation_400
     * .
     */
    public function testSetPackingInformation400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSetPackingInformation400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{packageGroupings&#x3D;[{shipmentId&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678, packingGroupId&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678, boxes&#x3D;[{items&#x3D;[{msku&#x3D;msku, quantity&#x3D;5, expiration&#x3D;2024-01-01, prepOwner&#x3D;AMAZON, labelOwner&#x3D;AMAZON, manufacturingLotCode&#x3D;manufacturingLotCode}], contentInformationSource&#x3D;BOX_CONTENT_PROVIDED, weight&#x3D;{unit&#x3D;KG, value&#x3D;5.5}, dimensions&#x3D;{unitOfMeasurement&#x3D;CM, length&#x3D;3, width&#x3D;4, height&#x3D;5}, quantity&#x3D;2}]}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'setPackingInformation',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested packingGroupId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'setPackingInformation',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->setPackingInformationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for setPackingInformation_403
     * .
     */
    public function testSetPackingInformation403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPackingInformation_404
     * .
     */
    public function testSetPackingInformation404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPackingInformation_413
     * .
     */
    public function testSetPackingInformation413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPackingInformation_415
     * .
     */
    public function testSetPackingInformation415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPackingInformation_429
     * .
     */
    public function testSetPackingInformation429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPackingInformation_500
     * .
     */
    public function testSetPackingInformation500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPackingInformation_503
     * .
     */
    public function testSetPackingInformation503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPrepDetails_202
     * .
     */
    public function testSetPrepDetails202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSetPrepDetails202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{marketplaceId&#x3D;ATVPDKIKX0DER, mskuPrepDetails&#x3D;[{msku&#x3D;msku, prepCategory&#x3D;TEXTILE, prepTypes&#x3D;[ITEM_LABELING, ITEM_POLYBAGGING]}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'setPrepDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'setPrepDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->setPrepDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for setPrepDetails_400
     * .
     */
    public function testSetPrepDetails400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSetPrepDetails400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{marketplaceId&#x3D;ATVPDKIKX0DER, mskuPrepDetails&#x3D;[{msku&#x3D;badSku, prepCategory&#x3D;TEXTILE, prepTypes&#x3D;[ITEM_LABELING, ITEM_POLYBAGGING]}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'setPrepDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested MSKU is not valid.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'setPrepDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->setPrepDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for setPrepDetails_403
     * .
     */
    public function testSetPrepDetails403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPrepDetails_404
     * .
     */
    public function testSetPrepDetails404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPrepDetails_413
     * .
     */
    public function testSetPrepDetails413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPrepDetails_415
     * .
     */
    public function testSetPrepDetails415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPrepDetails_429
     * .
     */
    public function testSetPrepDetails429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPrepDetails_500
     * .
     */
    public function testSetPrepDetails500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setPrepDetails_503
     * .
     */
    public function testSetPrepDetails503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateInboundPlanName_204
     * .
     */
    public function testUpdateInboundPlanName204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateInboundPlanName204')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{name&#x3D;updatedInboundPlanName}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateInboundPlanName',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateInboundPlanName',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateInboundPlanNameWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateInboundPlanName_400
     * .
     */
    public function testUpdateInboundPlanName400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateInboundPlanName400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wfbad4abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{name&#x3D;name}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateInboundPlanName',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested inbound plan does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateInboundPlanName',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateInboundPlanNameWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateInboundPlanName_403
     * .
     */
    public function testUpdateInboundPlanName403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateInboundPlanName_404
     * .
     */
    public function testUpdateInboundPlanName404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateInboundPlanName_413
     * .
     */
    public function testUpdateInboundPlanName413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateInboundPlanName_415
     * .
     */
    public function testUpdateInboundPlanName415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateInboundPlanName_429
     * .
     */
    public function testUpdateInboundPlanName429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateInboundPlanName_500
     * .
     */
    public function testUpdateInboundPlanName500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateInboundPlanName_503
     * .
     */
    public function testUpdateInboundPlanName503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateItemComplianceDetails_202
     * .
     */
    public function testUpdateItemComplianceDetails202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateItemComplianceDetails202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{marketplaceId&#x3D;{value&#x3D;ATVPDKIKX0DER}, body&#x3D;{value&#x3D;{msku&#x3D;msku, taxDetails&#x3D;{hsnCode&#x3D;720299, declaredValue&#x3D;{code&#x3D;USD, amount&#x3D;50}, taxRates&#x3D;[{taxType&#x3D;TOTAL_TAX, gstRate&#x3D;1, cessRate&#x3D;1}]}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateItemComplianceDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateItemComplianceDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateItemComplianceDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateItemComplianceDetails_400
     * .
     */
    public function testUpdateItemComplianceDetails400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateItemComplianceDetails400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{marketplaceId&#x3D;{value&#x3D;ATVPDKIKX0DER}, body&#x3D;{value&#x3D;{msku&#x3D;badmsku, taxDetails&#x3D;{hsnCode&#x3D;720299, declaredValue&#x3D;{code&#x3D;USD, amount&#x3D;50}, taxRates&#x3D;[{taxType&#x3D;TOTAL_TAX, gstRate&#x3D;1, cessRate&#x3D;1}]}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateItemComplianceDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested msku does not exist for the specified marketplace.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateItemComplianceDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateItemComplianceDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateItemComplianceDetails_403
     * .
     */
    public function testUpdateItemComplianceDetails403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateItemComplianceDetails_404
     * .
     */
    public function testUpdateItemComplianceDetails404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateItemComplianceDetails_413
     * .
     */
    public function testUpdateItemComplianceDetails413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateItemComplianceDetails_415
     * .
     */
    public function testUpdateItemComplianceDetails415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateItemComplianceDetails_429
     * .
     */
    public function testUpdateItemComplianceDetails429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateItemComplianceDetails_500
     * .
     */
    public function testUpdateItemComplianceDetails500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateItemComplianceDetails_503
     * .
     */
    public function testUpdateItemComplianceDetails503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentName_204
     * .
     */
    public function testUpdateShipmentName204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateShipmentName204')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{name&#x3D;updatedShipmentName}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateShipmentName',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateShipmentName',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateShipmentNameWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateShipmentName_400
     * .
     */
    public function testUpdateShipmentName400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateShipmentName400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{name&#x3D;updatedShipmentName}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateShipmentName',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateShipmentName',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateShipmentNameWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateShipmentName_403
     * .
     */
    public function testUpdateShipmentName403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentName_404
     * .
     */
    public function testUpdateShipmentName404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentName_413
     * .
     */
    public function testUpdateShipmentName413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentName_415
     * .
     */
    public function testUpdateShipmentName415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentName_429
     * .
     */
    public function testUpdateShipmentName429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentName_500
     * .
     */
    public function testUpdateShipmentName500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentName_503
     * .
     */
    public function testUpdateShipmentName503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentSourceAddress_202
     * .
     */
    public function testUpdateShipmentSourceAddress202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateShipmentSourceAddress202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{address&#x3D;{name&#x3D;name, companyName&#x3D;Acme, addressLine1&#x3D;123 example street, addressLine2&#x3D;Unit 102, city&#x3D;Toronto, countryCode&#x3D;CA, stateOrProvinceCode&#x3D;ON, postalCode&#x3D;M1M1M1, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateShipmentSourceAddress',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateShipmentSourceAddress',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateShipmentSourceAddressWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateShipmentSourceAddress_400
     * .
     */
    public function testUpdateShipmentSourceAddress400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateShipmentSourceAddress400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{address&#x3D;{name&#x3D;name, companyName&#x3D;Acme, addressLine1&#x3D;123 example street, addressLine2&#x3D;Unit 102, city&#x3D;Toronto, countryCode&#x3D;CA, stateOrProvinceCode&#x3D;ON, postalCode&#x3D;M1M1M1, phoneNumber&#x3D;1234567890, email&#x3D;email@email.com}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateShipmentSourceAddress',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateShipmentSourceAddress',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateShipmentSourceAddressWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateShipmentSourceAddress_403
     * .
     */
    public function testUpdateShipmentSourceAddress403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentSourceAddress_404
     * .
     */
    public function testUpdateShipmentSourceAddress404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentSourceAddress_413
     * .
     */
    public function testUpdateShipmentSourceAddress413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentSourceAddress_415
     * .
     */
    public function testUpdateShipmentSourceAddress415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentSourceAddress_429
     * .
     */
    public function testUpdateShipmentSourceAddress429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentSourceAddress_500
     * .
     */
    public function testUpdateShipmentSourceAddress500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentSourceAddress_503
     * .
     */
    public function testUpdateShipmentSourceAddress503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentTrackingDetails_202
     * .
     */
    public function testUpdateShipmentTrackingDetails202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateShipmentTrackingDetails202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;sh1234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{trackingDetails&#x3D;{ltlTrackingDetail&#x3D;{freightBillNumber&#x3D;[freightBillNumber1], billOfLadingNumber&#x3D;billOfLadingNumber}, spdTrackingDetail&#x3D;{spdTrackingItems&#x3D;[{boxId&#x3D;boxId, trackingId&#x3D;trackingId}]}}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateShipmentTrackingDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{operationId&#x3D;1234abcd-1234-abcd-5678-1234abcd5678}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateShipmentTrackingDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateShipmentTrackingDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateShipmentTrackingDetails_400
     * .
     */
    public function testUpdateShipmentTrackingDetails400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateShipmentTrackingDetails400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{inboundPlanId&#x3D;{value&#x3D;wf1234abcd-1234-abcd-5678-1234abcd5678}, shipmentId&#x3D;{value&#x3D;bad234abcd-1234-abcd-5678-1234abcd5678}, body&#x3D;{value&#x3D;{trackingDetails&#x3D;{ltlTrackingDetail&#x3D;{freightBillNumber&#x3D;[freightBillNumber1], billOfLadingNumber&#x3D;billOfLadingNumber}, spdTrackingDetail&#x3D;{spdTrackingItems&#x3D;[{boxId&#x3D;boxId, trackingId&#x3D;trackingId}]}}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateShipmentTrackingDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;BadRequest, message&#x3D;The requested shipmentId does not exist for the specified inbound plan.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateShipmentTrackingDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateShipmentTrackingDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateShipmentTrackingDetails_403
     * .
     */
    public function testUpdateShipmentTrackingDetails403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentTrackingDetails_404
     * .
     */
    public function testUpdateShipmentTrackingDetails404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentTrackingDetails_413
     * .
     */
    public function testUpdateShipmentTrackingDetails413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentTrackingDetails_415
     * .
     */
    public function testUpdateShipmentTrackingDetails415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentTrackingDetails_429
     * .
     */
    public function testUpdateShipmentTrackingDetails429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentTrackingDetails_500
     * .
     */
    public function testUpdateShipmentTrackingDetails500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentTrackingDetails_503
     * .
     */
    public function testUpdateShipmentTrackingDetails503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
