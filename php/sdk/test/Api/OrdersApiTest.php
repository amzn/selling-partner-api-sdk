<?php
/**
 * OrdersApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders v0
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\OrdersApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * OrdersApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApiTest extends TestCase
{
    private OrdersApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new OrdersApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for confirmShipment_204
     * .
     */
    public function testConfirmShipment204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmShipment204')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;902-1106328-1059050}, body&#x3D;{value&#x3D;{marketplaceId&#x3D;ATVPDKIKX0DER, packageDetail&#x3D;{packageReferenceId&#x3D;1, carrierCode&#x3D;FedEx, carrierName&#x3D;FedEx, shippingMethod&#x3D;FedEx Ground, trackingNumber&#x3D;112345678, shipDate&#x3D;2022-02-11T01:00:00.000Z, shipFromSupplySourceId&#x3D;057d3fcc-b750-419f-bbcd-4d340c60c430, orderItems&#x3D;[{orderItemId&#x3D;79039765272157, quantity&#x3D;1, transparencyCodes&#x3D;[09876543211234567890]}]}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmShipment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmShipment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmShipment_400
     * .
     */
    public function testConfirmShipment400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmShipment400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;902-1106328-1059050}, body&#x3D;{value&#x3D;{marketplaceId&#x3D;ATVPDKIKX0DER, packageDetail&#x3D;{packageReferenceId&#x3D;1, carrierCode&#x3D;FedEx, carrierName&#x3D;FedEx, shippingMethod&#x3D;FedEx Ground, trackingNumber&#x3D;112345678, shipDate&#x3D;02/21/2022, shipFromSupplySourceId&#x3D;057d3fcc-b750-419f-bbcd-4d340c60c430, orderItems&#x3D;[{orderItemId&#x3D;79039765272157, quantity&#x3D;1, transparencyCodes&#x3D;[09876543211234567890]}]}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'confirmShipment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;Invalid Input, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'confirmShipment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmShipment_401
     * .
     */
    public function testConfirmShipment401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipment_403
     * .
     */
    public function testConfirmShipment403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipment_404
     * .
     */
    public function testConfirmShipment404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipment_429
     * .
     */
    public function testConfirmShipment429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipment_500
     * .
     */
    public function testConfirmShipment500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for confirmShipment_503
     * .
     */
    public function testConfirmShipment503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrder_200
     * .
     */
    public function testGetOrder200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrder200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_200}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrder',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{AmazonOrderId&#x3D;902-1845936-5435065, PurchaseDate&#x3D;1970-01-19T03:58:30Z, LastUpdateDate&#x3D;1970-01-19T03:58:32Z, OrderStatus&#x3D;Unshipped, FulfillmentChannel&#x3D;MFN, SalesChannel&#x3D;Amazon.com, ShipServiceLevel&#x3D;Std US D2D Dom, OrderTotal&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;11.01}, NumberOfItemsShipped&#x3D;0, NumberOfItemsUnshipped&#x3D;1, PaymentMethod&#x3D;Other, PaymentMethodDetails&#x3D;[Standard], IsReplacementOrder&#x3D;false, MarketplaceId&#x3D;ATVPDKIKX0DER, ShipmentServiceLevelCategory&#x3D;Standard, OrderType&#x3D;StandardOrder, EarliestShipDate&#x3D;1970-01-19T03:59:27Z, LatestShipDate&#x3D;1970-01-19T04:05:13Z, EarliestDeliveryDate&#x3D;1970-01-19T04:06:39Z, LatestDeliveryDate&#x3D;1970-01-19T04:15:17Z, IsBusinessOrder&#x3D;false, IsPrime&#x3D;false, IsGlobalExpressEnabled&#x3D;false, IsPremiumOrder&#x3D;false, IsSoldByAB&#x3D;false, IsIBA&#x3D;false, DefaultShipFromLocationAddress&#x3D;{Name&#x3D;MFNIntegrationTestMerchant, AddressLine1&#x3D;2201 WESTLAKE AVE, City&#x3D;SEATTLE, StateOrRegion&#x3D;WA, PostalCode&#x3D;98121-2778, CountryCode&#x3D;US, Phone&#x3D;+1 480-386-0930 ext. 73824, AddressType&#x3D;Commercial}, FulfillmentInstruction&#x3D;{FulfillmentSupplySourceId&#x3D;sampleSupplySourceId}, IsISPU&#x3D;false, IsAccessPointOrder&#x3D;false, AutomatedShippingSettings&#x3D;{HasAutomatedShippingSettings&#x3D;false}, EasyShipShipmentStatus&#x3D;PendingPickUp, ElectronicInvoiceStatus&#x3D;NotRequired}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrder',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrder_400
     * .
     */
    public function testGetOrder400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrder400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrder',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrder',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrder_403
     * .
     */
    public function testGetOrder403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrder_404
     * .
     */
    public function testGetOrder404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrder_429
     * .
     */
    public function testGetOrder429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrder_500
     * .
     */
    public function testGetOrder500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrder_503
     * .
     */
    public function testGetOrder503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderAddress_200
     * .
     */
    public function testGetOrderAddress200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrderAddress200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_200}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrderAddress',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{AmazonOrderId&#x3D;902-1845936-5435065, ShippingAddress&#x3D;{Name&#x3D;MFNIntegrationTestMerchant, AddressLine1&#x3D;2201 WESTLAKE AVE, City&#x3D;SEATTLE, StateOrRegion&#x3D;WA, PostalCode&#x3D;98121-2778, CountryCode&#x3D;US, Phone&#x3D;+1 480-386-0930 ext. 73824, AddressType&#x3D;Commercial}}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrderAddress',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderAddressWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrderAddress_400
     * .
     */
    public function testGetOrderAddress400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrderAddress400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrderAddress',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrderAddress',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderAddressWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrderAddress_403
     * .
     */
    public function testGetOrderAddress403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderAddress_404
     * .
     */
    public function testGetOrderAddress404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderAddress_429
     * .
     */
    public function testGetOrderAddress429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderAddress_500
     * .
     */
    public function testGetOrderAddress500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderAddress_503
     * .
     */
    public function testGetOrderAddress503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderBuyerInfo_200
     * .
     */
    public function testGetOrderBuyerInfo200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrderBuyerInfo200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_200}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrderBuyerInfo',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{AmazonOrderId&#x3D;902-1845936-5435065, BuyerEmail&#x3D;fzyrv6gwkhbb15c@example.com, BuyerName&#x3D;MFNIntegrationTestMerchant}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrderBuyerInfo',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderBuyerInfoWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrderBuyerInfo_400
     * .
     */
    public function testGetOrderBuyerInfo400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrderBuyerInfo400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrderBuyerInfo',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrderBuyerInfo',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderBuyerInfoWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrderBuyerInfo_403
     * .
     */
    public function testGetOrderBuyerInfo403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderBuyerInfo_404
     * .
     */
    public function testGetOrderBuyerInfo404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderBuyerInfo_429
     * .
     */
    public function testGetOrderBuyerInfo429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderBuyerInfo_500
     * .
     */
    public function testGetOrderBuyerInfo500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderBuyerInfo_503
     * .
     */
    public function testGetOrderBuyerInfo503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderItems_200
     * .
     */
    public function testGetOrderItems200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrderItems200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_200}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrderItems',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{AmazonOrderId&#x3D;902-1845936-5435065, OrderItems&#x3D;[{ASIN&#x3D;B00551Q3CS, OrderItemId&#x3D;05015851154158, SellerSKU&#x3D;NABetaASINB00551Q3CS, Title&#x3D;B00551Q3CS [Card Book], QuantityOrdered&#x3D;1, QuantityShipped&#x3D;0, ProductInfo&#x3D;{NumberOfItems&#x3D;1}, ItemPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.00}, ItemTax&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1.01}, PromotionDiscount&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.00}, IsGift&#x3D;false, ConditionId&#x3D;New, ConditionSubtypeId&#x3D;New, IsTransparency&#x3D;false, SerialNumberRequired&#x3D;false, IossNumber&#x3D;, DeemedResellerCategory&#x3D;IOSS, StoreChainStoreId&#x3D;ISPU_StoreId, BuyerRequestedCancel&#x3D;{IsBuyerRequestedCancel&#x3D;true, BuyerCancelReason&#x3D;Found cheaper somewhere else.}}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrderItems',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrderItems_400
     * .
     */
    public function testGetOrderItems400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrderItems400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrderItems',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrderItems',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrderItems_403
     * .
     */
    public function testGetOrderItems403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderItems_404
     * .
     */
    public function testGetOrderItems404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderItems_429
     * .
     */
    public function testGetOrderItems429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderItems_500
     * .
     */
    public function testGetOrderItems500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderItems_503
     * .
     */
    public function testGetOrderItems503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderItemsBuyerInfo_200
     * .
     */
    public function testGetOrderItemsBuyerInfo200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrderItemsBuyerInfo200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_200}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrderItemsBuyerInfo',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{AmazonOrderId&#x3D;902-1845936-5435065, OrderItems&#x3D;[{BuyerCustomizedInfo&#x3D;{CustomizedURL&#x3D;https://zme-caps.amazon.com/t/bR6qHkzSOxuB/J8nbWhze0Bd3DkajkOdY-XQbWkFralegp2sr_QZiKEE/1}, GiftMessageText&#x3D;Et toi!, GiftWrapPrice&#x3D;{CurrencyCode&#x3D;JPY, Amount&#x3D;1.99}, GiftWrapLevel&#x3D;Classic}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrderItemsBuyerInfo',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderItemsBuyerInfoWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrderItemsBuyerInfo_400
     * .
     */
    public function testGetOrderItemsBuyerInfo400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrderItemsBuyerInfo400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrderItemsBuyerInfo',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrderItemsBuyerInfo',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderItemsBuyerInfoWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrderItemsBuyerInfo_403
     * .
     */
    public function testGetOrderItemsBuyerInfo403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderItemsBuyerInfo_404
     * .
     */
    public function testGetOrderItemsBuyerInfo404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderItemsBuyerInfo_429
     * .
     */
    public function testGetOrderItemsBuyerInfo429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderItemsBuyerInfo_500
     * .
     */
    public function testGetOrderItemsBuyerInfo500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderItemsBuyerInfo_503
     * .
     */
    public function testGetOrderItemsBuyerInfo503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderRegulatedInfo_200
     * .
     */
    public function testGetOrderRegulatedInfo200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrderRegulatedInfo200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;902-3159896-1390916}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrderRegulatedInfo',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{AmazonOrderId&#x3D;902-3159896-1390916, RequiresDosageLabel&#x3D;false, RegulatedInformation&#x3D;{Fields&#x3D;[{FieldId&#x3D;pet_prescription_name, FieldLabel&#x3D;Name, FieldType&#x3D;Text, FieldValue&#x3D;Ruffus}, {FieldId&#x3D;pet_prescription_species, FieldLabel&#x3D;Species, FieldType&#x3D;Text, FieldValue&#x3D;Dog}]}, RegulatedOrderVerificationStatus&#x3D;{Status&#x3D;Pending, RequiresMerchantAction&#x3D;true, ValidRejectionReasons&#x3D;[{RejectionReasonId&#x3D;shield_pom_vps_reject_product, RejectionReasonDescription&#x3D;This medicine is not suitable for your pet.}, {RejectionReasonId&#x3D;shield_pom_vps_reject_age, RejectionReasonDescription&#x3D;Your pet is too young for this medicine.}, {RejectionReasonId&#x3D;shield_pom_vps_reject_incorrect_weight, RejectionReasonDescription&#x3D;Your pet&#39;s weight does not match ordered size.}]}}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrderRegulatedInfo',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderRegulatedInfoWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrderRegulatedInfo_400
     * .
     */
    public function testGetOrderRegulatedInfo400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrderRegulatedInfo400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrderRegulatedInfo',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrderRegulatedInfo',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrderRegulatedInfoWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrderRegulatedInfo_403
     * .
     */
    public function testGetOrderRegulatedInfo403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderRegulatedInfo_404
     * .
     */
    public function testGetOrderRegulatedInfo404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderRegulatedInfo_429
     * .
     */
    public function testGetOrderRegulatedInfo429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderRegulatedInfo_500
     * .
     */
    public function testGetOrderRegulatedInfo500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrderRegulatedInfo_503
     * .
     */
    public function testGetOrderRegulatedInfo503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrders_200
     * .
     */
    public function testGetOrders200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrders200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{CreatedAfter&#x3D;{value&#x3D;TEST_CASE_200}, MarketplaceIds&#x3D;{value&#x3D;[ATVPDKIKX0DER]}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrders',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{CreatedBefore&#x3D;1.569521782042E9, Orders&#x3D;[{AmazonOrderId&#x3D;902-1845936-5435065, PurchaseDate&#x3D;1970-01-19T03:58:30Z, LastUpdateDate&#x3D;1970-01-19T03:58:32Z, OrderStatus&#x3D;Unshipped, FulfillmentChannel&#x3D;MFN, SalesChannel&#x3D;Amazon.com, ShipServiceLevel&#x3D;Std US D2D Dom, OrderTotal&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;11.01}, NumberOfItemsShipped&#x3D;0, NumberOfItemsUnshipped&#x3D;1, PaymentMethod&#x3D;Other, PaymentMethodDetails&#x3D;[Standard], IsReplacementOrder&#x3D;false, MarketplaceId&#x3D;ATVPDKIKX0DER, ShipmentServiceLevelCategory&#x3D;Standard, OrderType&#x3D;StandardOrder, EarliestShipDate&#x3D;1970-01-19T03:59:27Z, LatestShipDate&#x3D;1970-01-19T04:05:13Z, EarliestDeliveryDate&#x3D;1970-01-19T04:06:39Z, LatestDeliveryDate&#x3D;1970-01-19T04:15:17Z, IsBusinessOrder&#x3D;false, IsPrime&#x3D;false, IsGlobalExpressEnabled&#x3D;false, IsPremiumOrder&#x3D;false, IsSoldByAB&#x3D;false, IsIBA&#x3D;false, DefaultShipFromLocationAddress&#x3D;{Name&#x3D;MFNIntegrationTestMerchant, AddressLine1&#x3D;2201 WESTLAKE AVE, City&#x3D;SEATTLE, StateOrRegion&#x3D;WA, PostalCode&#x3D;98121-2778, CountryCode&#x3D;US, Phone&#x3D;+1 480-386-0930 ext. 73824, AddressType&#x3D;Commercial}, FulfillmentInstruction&#x3D;{FulfillmentSupplySourceId&#x3D;sampleSupplySourceId}, IsISPU&#x3D;false, IsAccessPointOrder&#x3D;false, AutomatedShippingSettings&#x3D;{HasAutomatedShippingSettings&#x3D;false}, EasyShipShipmentStatus&#x3D;PendingPickUp, ElectronicInvoiceStatus&#x3D;NotRequired}, {AmazonOrderId&#x3D;902-8745147-1934268, PurchaseDate&#x3D;1970-01-19T03:58:30Z, LastUpdateDate&#x3D;1970-01-19T03:58:32Z, OrderStatus&#x3D;Unshipped, FulfillmentChannel&#x3D;MFN, SalesChannel&#x3D;Amazon.com, ShipServiceLevel&#x3D;Std US D2D Dom, OrderTotal&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;11.01}, NumberOfItemsShipped&#x3D;0, NumberOfItemsUnshipped&#x3D;1, PaymentMethod&#x3D;Other, PaymentMethodDetails&#x3D;[Standard], IsReplacementOrder&#x3D;false, MarketplaceId&#x3D;ATVPDKIKX0DER, ShipmentServiceLevelCategory&#x3D;Standard, OrderType&#x3D;StandardOrder, EarliestShipDate&#x3D;1970-01-19T03:59:27Z, LatestShipDate&#x3D;1970-01-19T04:05:13Z, EarliestDeliveryDate&#x3D;1970-01-19T04:06:39Z, LatestDeliveryDate&#x3D;1970-01-19T04:15:17Z, IsBusinessOrder&#x3D;false, IsPrime&#x3D;false, IsAccessPointOrder&#x3D;false, IsGlobalExpressEnabled&#x3D;false, IsPremiumOrder&#x3D;false, IsSoldByAB&#x3D;false, IsIBA&#x3D;false, EasyShipShipmentStatus&#x3D;PendingPickUp, ElectronicInvoiceStatus&#x3D;NotRequired}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrders',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrdersWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrders_400
     * .
     */
    public function testGetOrders400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetOrders400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{CreatedAfter&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getOrders',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getOrders',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getOrdersWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getOrders_403
     * .
     */
    public function testGetOrders403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrders_404
     * .
     */
    public function testGetOrders404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrders_429
     * .
     */
    public function testGetOrders429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrders_500
     * .
     */
    public function testGetOrders500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getOrders_503
     * .
     */
    public function testGetOrders503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentStatus_204
     * .
     */
    public function testUpdateShipmentStatus204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateShipmentStatus204')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateShipmentStatus',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateShipmentStatus',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateShipmentStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateShipmentStatus_400
     * .
     */
    public function testUpdateShipmentStatus400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateShipmentStatus400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{marketplaceId&#x3D;1, shipmentStatus&#x3D;ReadyForPickup}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateShipmentStatus',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Marketplace ID is not defined, details&#x3D;1001}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateShipmentStatus',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateShipmentStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateShipmentStatus_403
     * .
     */
    public function testUpdateShipmentStatus403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentStatus_404
     * .
     */
    public function testUpdateShipmentStatus404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentStatus_413
     * .
     */
    public function testUpdateShipmentStatus413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentStatus_415
     * .
     */
    public function testUpdateShipmentStatus415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentStatus_429
     * .
     */
    public function testUpdateShipmentStatus429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentStatus_500
     * .
     */
    public function testUpdateShipmentStatus500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateShipmentStatus_503
     * .
     */
    public function testUpdateShipmentStatus503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateVerificationStatus_204
     * .
     */
    public function testUpdateVerificationStatus204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateVerificationStatus204')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;902-3159896-1390916}, body&#x3D;{value&#x3D;{regulatedOrderVerificationStatus&#x3D;{status&#x3D;Rejected, externalReviewerId&#x3D;reviewer1234, rejectionReasonId&#x3D;shield_pom_vps_reject_incorrect_weight}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateVerificationStatus',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateVerificationStatus',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateVerificationStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateVerificationStatus_400
     * .
     */
    public function testUpdateVerificationStatus400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateVerificationStatus400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{orderId&#x3D;{value&#x3D;902-3159896-1390916}, body&#x3D;{value&#x3D;{regulatedOrderVerificationStatus&#x3D;{status&#x3D;Rejected}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateVerificationStatus',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Missing request parameter: rejectionReasonId.}, {code&#x3D;InvalidInput, message&#x3D;Missing request parameter: externalReviewerId.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateVerificationStatus',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateVerificationStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateVerificationStatus_403
     * .
     */
    public function testUpdateVerificationStatus403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateVerificationStatus_404
     * .
     */
    public function testUpdateVerificationStatus404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateVerificationStatus_413
     * .
     */
    public function testUpdateVerificationStatus413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateVerificationStatus_415
     * .
     */
    public function testUpdateVerificationStatus415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateVerificationStatus_429
     * .
     */
    public function testUpdateVerificationStatus429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateVerificationStatus_500
     * .
     */
    public function testUpdateVerificationStatus500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateVerificationStatus_503
     * .
     */
    public function testUpdateVerificationStatus503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
