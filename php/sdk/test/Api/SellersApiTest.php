<?php

/**
* SellersApiTest
* PHP version 7.4
*
* @category Class
* @package  OpenAPI\Client
* @author   OpenAPI Generator team
* @link     https://openapi-generator.tech
*/



/**
 * Selling Partner API for Sellers
 *
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Please update the test case below to test the endpoint.
*/

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\SellersApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();


/**
* SellersApiTest Class Doc Comment
*
* @category Class
* @package  OpenAPI\Client
* @author   OpenAPI Generator team
* @link     https://openapi-generator.tech
*/
    class SellersApiTest extends TestCase
    {
    private SellersApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
    $lwaAuthorizationCredentials = new LWAAuthorizationCredentials([
    "clientId" => $_ENV['SP_API_CLIENT_ID'],
    "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
    "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
    "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
    ]);
    $config = new Configuration([], $lwaAuthorizationCredentials);
    $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
    $this->apiInstance = new SellersApi($config, null, null);
    $this->testHelper = new TestHelper();
    }

    /**
    * Handles the response based on the expected HTTP status code.
    *
    * @param mixed $response The API response.
    * @param int $statusCode The actual HTTP status code.
    * @param int $expectedStatusCode The expected HTTP status code.
    * @throws \ReflectionException
    */
    private function handleResponse($response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
    switch ($expectedStatusCode) {
    case 200:
    $payload = $response->getPayload();
    $this->assertNotNull($payload);
    $returnTypeInfo = $this->testHelper->getReturnTypeInfo($response);
    if ($returnTypeInfo) {
    [$returnTypeName, $isNullable] = $returnTypeInfo;
    if (class_exists($returnTypeName)) {
    $expectedInstance = new $returnTypeName();
    $this->testHelper->mapAttributes($expectedInstance, $responseParams['payload'] ?? []);
    $this->assertEquals($expectedInstance, $payload);
    } else {
    echo "Class $returnTypeName does not exist.";
    }
    } else {
    echo "No return type specified for getPayload.";
    }
    break;

    case 204:
    $this->assertTrue(true);
    echo "Response is empty as expected for status code 204.";
    break;

    case 400:
    $this->assertArrayHasKey('errors', $responseParams);
    $this->assertEquals($responseParams['errors'], $response->getErrors());
    break;

    default:
    $this->fail("Unhandled response code: $expectedStatusCode");
    break;
    }
    }

    /**
    * Handles exceptions thrown during the API call.
    *
    * @param ApiException $e The exception thrown by the API.
    */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
    if ($e->getCode() == $expectedCode) {
    $this->assertTrue(true);
    } else {
    $this->fail('Unexpected error code: ' . $e->getCode());
    }
    }

            /**
            * Test case for getAccount_200
            * .
            */
            public function testGetAccount200()
            {
                try {
                // Get RequestParameter using ReflectionMethod
                $reflection = $this->testHelper->getReflectionMethod($this->apiInstance, 'getAccountWithHttpInfo');
                $params = $reflection->getParameters();

                //　Build Request Json for Request to static SandBox
                $invalidRequestJson = ';';
                $requestParameters = $this->testHelper->convertCodegenResponseToJson($invalidRequestJson);

                // Prepare Request Parameters
                $requestParams = $this->testHelper->prepareRequestParams($params, $requestParameters);

                //Build Expected Response Json for Assert
                $invalidResponseJson = '{payload&#x3D;{marketplaceLevelAttributes&#x3D;[{marketplace&#x3D;{id&#x3D;ATVPDKIKX0DER, name&#x3D;United States, countryCode&#x3D;US, domainName&#x3D;www.amazon.com}, storeName&#x3D;BestSellerStore, listingStatus&#x3D;ACTIVE, sellingPlan&#x3D;PROFESSIONAL}], businessType&#x3D;SOLE_PROPRIETORSHIP, business&#x3D;{name&#x3D;BestSeller Inc., registeredBusinessAddress&#x3D;{addressLine1&#x3D;123 Main St, addressLine2&#x3D;Suite 500, city&#x3D;Seattle, stateOrProvinceCode&#x3D;WA, postalCode&#x3D;98101, countryCode&#x3D;US}, companyTaxIdentificationNumber&#x3D;TAX123456}, primaryContact&#x3D;{name&#x3D;John Doe, nonLatinName&#x3D;ジョン・ドゥ, address&#x3D;{addressLine1&#x3D;456 Oak St, addressLine2&#x3D;Apt 12, city&#x3D;Seattle, stateOrProvinceCode&#x3D;WA, postalCode&#x3D;98102, countryCode&#x3D;US}}}}';
                $expectedResponse = $this->testHelper->convertCodegenResponseToJson($invalidResponseJson);
                $responseParams = $this->testHelper->getResponseParams($expectedResponse);

                // Act: Call API
                list($response, $statusCode, $headers) =
                $this->apiInstance->getAccountWithHttpInfo(...array_values($requestParams));

                // Assert Http response code
                $expectedStatusCode = 200;
                $this->assertEquals($expectedStatusCode, $statusCode);

                // Handle different response codes
                $this->handleResponse($response, $statusCode, $expectedStatusCode, $responseParams);
                } catch (ApiException $e) {
                $this->handleApiException($e, 200);
                } catch (\ReflectionException $e) {
                $this->fail("Reflection exception: " . $e->getMessage());
                }
            }
            /**
            * Test case for getAccount_400
            * .
            */
            public function testGetAccount400()
            {
                try {
                // Get RequestParameter using ReflectionMethod
                $reflection = $this->testHelper->getReflectionMethod($this->apiInstance, 'getAccountWithHttpInfo');
                $params = $reflection->getParameters();

                //　Build Request Json for Request to static SandBox
                $invalidRequestJson = ';';
                $requestParameters = $this->testHelper->convertCodegenResponseToJson($invalidRequestJson);

                // Prepare Request Parameters
                $requestParams = $this->testHelper->prepareRequestParams($params, $requestParameters);

                //Build Expected Response Json for Assert
                $invalidResponseJson = '{errors&#x3D;[{code&#x3D;400, message&#x3D;Validation failed for obfuscatedId:ACUULBDVZHYZ1}]}';
                $expectedResponse = $this->testHelper->convertCodegenResponseToJson($invalidResponseJson);
                $responseParams = $this->testHelper->getResponseParams($expectedResponse);

                // Act: Call API
                list($response, $statusCode, $headers) =
                $this->apiInstance->getAccountWithHttpInfo(...array_values($requestParams));

                // Assert Http response code
                $expectedStatusCode = 400;
                $this->assertEquals($expectedStatusCode, $statusCode);

                // Handle different response codes
                $this->handleResponse($response, $statusCode, $expectedStatusCode, $responseParams);
                } catch (ApiException $e) {
                $this->handleApiException($e, 400);
                } catch (\ReflectionException $e) {
                $this->fail("Reflection exception: " . $e->getMessage());
                }
            }
            /**
            * Test case for getAccount_403
            * .
            */
            public function testGetAccount403()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getAccount_404
            * .
            */
            public function testGetAccount404()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getAccount_413
            * .
            */
            public function testGetAccount413()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getAccount_415
            * .
            */
            public function testGetAccount415()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getAccount_429
            * .
            */
            public function testGetAccount429()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getAccount_500
            * .
            */
            public function testGetAccount500()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getAccount_503
            * .
            */
            public function testGetAccount503()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getMarketplaceParticipations_200
            * .
            */
            public function testGetMarketplaceParticipations200()
            {
                try {
                // Get RequestParameter using ReflectionMethod
                $reflection = $this->testHelper->getReflectionMethod($this->apiInstance, 'getMarketplaceParticipationsWithHttpInfo');
                $params = $reflection->getParameters();

                //　Build Request Json for Request to static SandBox
                $invalidRequestJson = '{};';
                $requestParameters = $this->testHelper->convertCodegenResponseToJson($invalidRequestJson);

                // Prepare Request Parameters
                $requestParams = $this->testHelper->prepareRequestParams($params, $requestParameters);

                //Build Expected Response Json for Assert
                $invalidResponseJson = '{payload&#x3D;[{marketplace&#x3D;{id&#x3D;ATVPDKIKX0DER, countryCode&#x3D;US, name&#x3D;Amazon.com, defaultCurrencyCode&#x3D;USD, defaultLanguageCode&#x3D;en_US, domainName&#x3D;www.amazon.com}, participation&#x3D;{isParticipating&#x3D;true, hasSuspendedListings&#x3D;false}}]}';
                $expectedResponse = $this->testHelper->convertCodegenResponseToJson($invalidResponseJson);
                $responseParams = $this->testHelper->getResponseParams($expectedResponse);

                // Act: Call API
                list($response, $statusCode, $headers) =
                $this->apiInstance->getMarketplaceParticipationsWithHttpInfo(...array_values($requestParams));

                // Assert Http response code
                $expectedStatusCode = 200;
                $this->assertEquals($expectedStatusCode, $statusCode);

                // Handle different response codes
                $this->handleResponse($response, $statusCode, $expectedStatusCode, $responseParams);
                } catch (ApiException $e) {
                $this->handleApiException($e, 200);
                } catch (\ReflectionException $e) {
                $this->fail("Reflection exception: " . $e->getMessage());
                }
            }
            /**
            * Test case for getMarketplaceParticipations_400
            * .
            */
            public function testGetMarketplaceParticipations400()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getMarketplaceParticipations_403
            * .
            */
            public function testGetMarketplaceParticipations403()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getMarketplaceParticipations_404
            * .
            */
            public function testGetMarketplaceParticipations404()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getMarketplaceParticipations_413
            * .
            */
            public function testGetMarketplaceParticipations413()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getMarketplaceParticipations_415
            * .
            */
            public function testGetMarketplaceParticipations415()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getMarketplaceParticipations_429
            * .
            */
            public function testGetMarketplaceParticipations429()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getMarketplaceParticipations_500
            * .
            */
            public function testGetMarketplaceParticipations500()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
            /**
            * Test case for getMarketplaceParticipations_503
            * .
            */
            public function testGetMarketplaceParticipations503()
            {
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            }
    }
