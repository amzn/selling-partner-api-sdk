<?php
/**
 * SupplySourcesApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\SupplySourcesApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * SupplySourcesApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SupplySourcesApiTest extends TestCase
{
    private SupplySourcesApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new SupplySourcesApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for archiveSupplySource_204
     * .
     */
    public function testArchiveSupplySource204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testArchiveSupplySource204')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'archiveSupplySource',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'archiveSupplySource',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->archiveSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for archiveSupplySource_400
     * .
     */
    public function testArchiveSupplySource400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testArchiveSupplySource400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{supplySourceId&#x3D;{value&#x3D;cf146560-392a-43e6-bf99-2ca3b5d42b5c}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'archiveSupplySource',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Supply Source has been archived and cannot be modified., details&#x3D;1005}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'archiveSupplySource',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->archiveSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for archiveSupplySource_403
     * .
     */
    public function testArchiveSupplySource403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for archiveSupplySource_404
     * .
     */
    public function testArchiveSupplySource404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for archiveSupplySource_413
     * .
     */
    public function testArchiveSupplySource413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for archiveSupplySource_415
     * .
     */
    public function testArchiveSupplySource415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for archiveSupplySource_429
     * .
     */
    public function testArchiveSupplySource429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for archiveSupplySource_500
     * .
     */
    public function testArchiveSupplySource500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for archiveSupplySource_503
     * .
     */
    public function testArchiveSupplySource503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createSupplySource_200
     * .
     */
    public function testCreateSupplySource200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateSupplySource200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createSupplySource',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{supplySourceId&#x3D;ed85fcf9-798c-4b63-a47e-8d4f0d273ddb, supplySourceCode&#x3D;owner_s2cs_test_010101_aaaas}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createSupplySource',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createSupplySource_400
     * .
     */
    public function testCreateSupplySource400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateSupplySource400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{supplySourceCode&#x3D;owner_s2cs_test_010101_aaaab, alias&#x3D;alias_jksjdkf_aaaab, address&#x3D;{name&#x3D;name, addressLine1&#x3D;addresline 1234 010101 asaaab, city&#x3D;Red, county&#x3D;King, stateOrRegion&#x3D;string, postalCode&#x3D;99999, countryCode&#x3D;US, phone&#x3D;string}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createSupplySource',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Supply Source with given Code already exists, details&#x3D;1004}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createSupplySource',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createSupplySource_403
     * .
     */
    public function testCreateSupplySource403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createSupplySource_404
     * .
     */
    public function testCreateSupplySource404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createSupplySource_413
     * .
     */
    public function testCreateSupplySource413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createSupplySource_415
     * .
     */
    public function testCreateSupplySource415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createSupplySource_429
     * .
     */
    public function testCreateSupplySource429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createSupplySource_500
     * .
     */
    public function testCreateSupplySource500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createSupplySource_503
     * .
     */
    public function testCreateSupplySource503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySource_200
     * .
     */
    public function testGetSupplySource200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetSupplySource200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getSupplySource',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{supplySourceId&#x3D;cbc976e5-1e55-4d33-855b-35e6254f5a58, supplySourceCode&#x3D;test-gw-435dgh2o39, alias&#x3D;test-gw-ssss, status&#x3D;Inactive, address&#x3D;{addressLine1&#x3D;tst-addressLine1-423, addressLine2&#x3D;tes-addressLine2-gew, addressLine3&#x3D;Rufus, city&#x3D;Gekl, county&#x3D;, district&#x3D;, stateOrRegion&#x3D;WA, postalCode&#x3D;59202, countryCode&#x3D;US}, configuration&#x3D;{operationalConfiguration&#x3D;{contactDetails&#x3D;{primary&#x3D;{email&#x3D;test324@gmail.com, phone&#x3D;4813924781}}, throughputConfig&#x3D;{throughputCap&#x3D;{value&#x3D;1, timeUnit&#x3D;Days}, throughputUnit&#x3D;ORDER}, handlingTime&#x3D;{value&#x3D;1, timeUnit&#x3D;Hours}, operatingHoursByDay&#x3D;{monday&#x3D;[{startTime&#x3D;00:59, endTime&#x3D;06:01}], tuesday&#x3D;[{startTime&#x3D;19:03, endTime&#x3D;23:25}], wednesday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], thursday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], friday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], saturday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], sunday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}]}}, timezone&#x3D;Africa/Accra}, capabilities&#x3D;{outbound&#x3D;{isSupported&#x3D;true, operationalConfiguration&#x3D;{contactDetails&#x3D;{primary&#x3D;{email&#x3D;tet@gmail.com, phone&#x3D;4281937491}}, throughputConfig&#x3D;{throughputCap&#x3D;{value&#x3D;1, timeUnit&#x3D;Days}, throughputUnit&#x3D;ORDER}, handlingTime&#x3D;{value&#x3D;1, timeUnit&#x3D;Hours}, operatingHoursByDay&#x3D;{monday&#x3D;[{startTime&#x3D;00:43, endTime&#x3D;04:05}], tuesday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], wednesday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], thursday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], friday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], saturday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], sunday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}]}}, deliveryChannel&#x3D;{isSupported&#x3D;false, operationalConfiguration&#x3D;{contactDetails&#x3D;{primary&#x3D;{email&#x3D;, phone&#x3D;}}, throughputConfig&#x3D;{throughputCap&#x3D;{value&#x3D;1, timeUnit&#x3D;Days}, throughputUnit&#x3D;ORDER}, handlingTime&#x3D;{value&#x3D;1, timeUnit&#x3D;Hours}}}, pickupChannel&#x3D;{isSupported&#x3D;true, inventoryHoldPeriod&#x3D;{value&#x3D;452, timeUnit&#x3D;Minutes}, operationalConfiguration&#x3D;{contactDetails&#x3D;{primary&#x3D;{email&#x3D;yre4@gmail.com, phone&#x3D;4381232840}}, throughputConfig&#x3D;{throughputCap&#x3D;{value&#x3D;1, timeUnit&#x3D;Days}, throughputUnit&#x3D;ORDER}, handlingTime&#x3D;{value&#x3D;1, timeUnit&#x3D;Hours}}}}, services&#x3D;{isSupported&#x3D;true, operationalConfiguration&#x3D;{contactDetails&#x3D;{primary&#x3D;{email&#x3D;testservices@gmail.com, phone&#x3D;4281937491}}, operatingHoursByDay&#x3D;{monday&#x3D;[{startTime&#x3D;00:43, endTime&#x3D;04:05}], tuesday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], wednesday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], thursday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], friday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], saturday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}], sunday&#x3D;[{startTime&#x3D;00:00, endTime&#x3D;00:00}]}}}}, createdAt&#x3D;1.596578152E9, updatedAt&#x3D;1.596842808E9}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getSupplySource',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getSupplySource_400
     * .
     */
    public function testGetSupplySource400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetSupplySource400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{supplySourceId&#x3D;{value&#x3D;cbc976e5-1e55-4d33-855b-35e6254f5a5}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getSupplySource',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getSupplySource',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getSupplySource_403
     * .
     */
    public function testGetSupplySource403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySource_404
     * .
     */
    public function testGetSupplySource404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySource_413
     * .
     */
    public function testGetSupplySource413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySource_415
     * .
     */
    public function testGetSupplySource415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySource_429
     * .
     */
    public function testGetSupplySource429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySource_500
     * .
     */
    public function testGetSupplySource500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySource_503
     * .
     */
    public function testGetSupplySource503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySources_200
     * .
     */
    public function testGetSupplySources200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetSupplySources200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getSupplySources',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{supplySources&#x3D;[{supplySourceId&#x3D;ed85fcf9-798c-4b63-a47e-8d4f0d273ddb, supplySourceCode&#x3D;owner_s2cs_test_010101_aaaas, alias&#x3D;alias_jksjdkf_aaaas, address&#x3D;{addressLine1&#x3D;addresline 1234 010101 asaaab, city&#x3D;Red, stateOrRegion&#x3D;string, postalCode&#x3D;99999, countryCode&#x3D;US}}], nextPageToken&#x3D;eyJzMl9zb3J0X2tleSI6eyJzIjoic3VwcGx5U291cmNlQ29kZSNvd25lcl9zMmNzX3Rlc3RfMDEwMTAxX2FhYWFzIiwibiI6bnVsbCwiYiI6bnVsbCwibSI6bnVsbCwibCI6bnVsbCwiYnMiOm51bGwsIm5zIjpudWxsLCJzcyI6bnVsbCwibnVsbCI6bnVsbCwiYm9vbCI6bnVsbH0sInMyX3ByaW1hcnlfa2V5Ijp7InMiOiJvd25lciNNZXJjaGFudDpBMU1QWVFRSjVUVThRVSIsIm4iOm51bGwsImIiOm51bGwsIm0iOm51bGwsImwiOm51bGwsImJzIjpudWxsLCJucyI6bnVsbCwic3MiOm51bGwsIm51bGwiOm51bGwsImJvb2wiOm51bGx9LCJsc2lTS0xpdmVDcmVhdGVkVGltZSI6eyJzIjpudWxsLCJuIjoiMTU5NzEyNjU2MSIsImIiOm51bGwsIm0iOm51bGwsImwiOm51bGwsImJzIjpudWxsLCJucyI6bnVsbCwic3MiOm51bGwsIm51bGwiOm51bGwsImJvb2wiOm51bGx9fQ&#x3D;&#x3D;}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getSupplySources',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getSupplySourcesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getSupplySources_400
     * .
     */
    public function testGetSupplySources400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetSupplySources400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{pageSize&#x3D;{value&#x3D;3}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getSupplySources',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid or malformed address Id., details&#x3D;1012}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getSupplySources',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getSupplySourcesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getSupplySources_403
     * .
     */
    public function testGetSupplySources403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySources_404
     * .
     */
    public function testGetSupplySources404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySources_413
     * .
     */
    public function testGetSupplySources413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySources_415
     * .
     */
    public function testGetSupplySources415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySources_429
     * .
     */
    public function testGetSupplySources429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySources_500
     * .
     */
    public function testGetSupplySources500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getSupplySources_503
     * .
     */
    public function testGetSupplySources503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySource_204
     * .
     */
    public function testUpdateSupplySource204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateSupplySource204')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateSupplySource',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateSupplySource',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateSupplySource_400
     * .
     */
    public function testUpdateSupplySource400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateSupplySource400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{supplySourceId&#x3D;{value&#x3D;cf146560-392a-43e6-bf99-2ca3b5d42b5c}, body&#x3D;{value&#x3D;{alias&#x3D;test-config, configuration&#x3D;{operationalConfiguration&#x3D;{contactDetails&#x3D;{primary&#x3D;{email&#x3D;111@gmail.com, phone&#x3D;111}}, operatingHoursByDay&#x3D;{monday&#x3D;[{startTime&#x3D;01:30, endTime&#x3D;02:40}], tuesday&#x3D;[{startTime&#x3D;2:00, endTime&#x3D;2:00}]}, throughputConfig&#x3D;{throughputCap&#x3D;{value&#x3D;17, timeUnit&#x3D;Hours}}, handlingTime&#x3D;{value&#x3D;1, timeUnit&#x3D;Hours}}, timezone&#x3D;Africa/Accra}, capabilities&#x3D;{outbound&#x3D;{isSupported&#x3D;true, operationalConfiguration&#x3D;{contactDetails&#x3D;{primary&#x3D;{email&#x3D;outbound@gmail.com, phone&#x3D;222}}, operatingHoursByDay&#x3D;{wednesday&#x3D;[{startTime&#x3D;03:30, endTime&#x3D;03:40}], thursday&#x3D;[{startTime&#x3D;4:00, endTime&#x3D;4:00}]}, throughputConfig&#x3D;{throughputCap&#x3D;{value&#x3D;10, timeUnit&#x3D;Hours}}, handlingTime&#x3D;{value&#x3D;1, timeUnit&#x3D;Hours}}, returnLocation&#x3D;{addressWithContact&#x3D;{address&#x3D;{addressLine1&#x3D;returnLocation, countryCode&#x3D;na}, contactDetails&#x3D;{primary&#x3D;{email&#x3D;returnLocation@gmail.com, phone&#x3D;333}}}, supplySourceId&#x3D;cbb1658a-949e-4c42-9d29-6c38ac1c4746}, deliveryChannel&#x3D;{isSupported&#x3D;true, operationalConfiguration&#x3D;{contactDetails&#x3D;{primary&#x3D;{email&#x3D;deliveryChannel@gmail.com, phone&#x3D;444}}, operatingHoursByDay&#x3D;{friday&#x3D;[{startTime&#x3D;03:30, endTime&#x3D;03:40}], thursday&#x3D;[{startTime&#x3D;4:00, endTime&#x3D;4:00}]}, throughputConfig&#x3D;{throughputCap&#x3D;{value&#x3D;4, timeUnit&#x3D;Hours}}, handlingTime&#x3D;{value&#x3D;1, timeUnit&#x3D;Hours}}}, pickupChannel&#x3D;{isSupported&#x3D;true, inventoryHoldPeriod&#x3D;{value&#x3D;4, timeUnit&#x3D;Minutes}, operationalConfiguration&#x3D;{contactDetails&#x3D;{primary&#x3D;{email&#x3D;pickupChannel@gmail.com, phone&#x3D;555}}, operatingHoursByDay&#x3D;{saturday&#x3D;[{startTime&#x3D;12:30, endTime&#x3D;03:40}], sunday&#x3D;[{startTime&#x3D;5:00, endTime&#x3D;23:30}]}, throughputConfig&#x3D;{throughputCap&#x3D;{value&#x3D;3, timeUnit&#x3D;Hours}}, handlingTime&#x3D;{value&#x3D;1, timeUnit&#x3D;Hours}}}}, services&#x3D;{isSupported&#x3D;true, operationalConfiguration&#x3D;{contactDetails&#x3D;{primary&#x3D;{email&#x3D;services@gmail.com, phone&#x3D;222}}, operatingHoursByDay&#x3D;{wednesday&#x3D;[{startTime&#x3D;03:30, endTime&#x3D;03:40}], thursday&#x3D;[{startTime&#x3D;4:00, endTime&#x3D;4:00}]}}}}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateSupplySource',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Supply Source has been archived and cannot be modified., details&#x3D;1005}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateSupplySource',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateSupplySource_403
     * .
     */
    public function testUpdateSupplySource403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySource_404
     * .
     */
    public function testUpdateSupplySource404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySource_413
     * .
     */
    public function testUpdateSupplySource413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySource_415
     * .
     */
    public function testUpdateSupplySource415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySource_429
     * .
     */
    public function testUpdateSupplySource429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySource_500
     * .
     */
    public function testUpdateSupplySource500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySource_503
     * .
     */
    public function testUpdateSupplySource503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_204
     * .
     */
    public function testUpdateSupplySourceStatus204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateSupplySourceStatus204')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateSupplySourceStatus',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateSupplySourceStatus',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateSupplySourceStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateSupplySourceStatus_400
     * .
     */
    public function testUpdateSupplySourceStatus400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateSupplySourceStatus400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{supplySourceId&#x3D;{value&#x3D;cf146560-392a-43e6-bf99-2ca3b5d42b5c}, body&#x3D;{value&#x3D;{status&#x3D;Inactive}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateSupplySourceStatus',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Supply Source has been archived and cannot be modified., details&#x3D;1005}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateSupplySourceStatus',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateSupplySourceStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateSupplySourceStatus_403
     * .
     */
    public function testUpdateSupplySourceStatus403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_404
     * .
     */
    public function testUpdateSupplySourceStatus404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_413
     * .
     */
    public function testUpdateSupplySourceStatus413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_415
     * .
     */
    public function testUpdateSupplySourceStatus415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_429
     * .
     */
    public function testUpdateSupplySourceStatus429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_500
     * .
     */
    public function testUpdateSupplySourceStatus500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_503
     * .
     */
    public function testUpdateSupplySourceStatus503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
