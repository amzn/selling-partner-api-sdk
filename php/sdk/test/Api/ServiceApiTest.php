<?php
/**
 * ServiceApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\ServiceApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * ServiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ServiceApiTest extends TestCase
{
    private ServiceApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new ServiceApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for addAppointmentForServiceJobByServiceJobId_200
     * .
     */
    public function testAddAppointmentForServiceJobByServiceJobId200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testAddAppointmentForServiceJobByServiceJobId200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;validJobId-1-9cb9bc29-3d7d-5e49-5709-efb693d34468}, body&#x3D;{value&#x3D;{appointmentTime&#x3D;{startTime&#x3D;2021-01-01T10:00:00.000Z}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'addAppointmentForServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{appointmentId&#x3D;validJobId-1-9cb9bc29-3d7d-5e49-5709-efb693d34468_00b9d5f2-839d-c13e-b8cd-dae1c3995b2a}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'addAppointmentForServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->addAppointmentForServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for addAppointmentForServiceJobByServiceJobId_400
     * .
     */
    public function testAddAppointmentForServiceJobByServiceJobId400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testAddAppointmentForServiceJobByServiceJobId400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;nullJobId}, body&#x3D;{value&#x3D;{appointmentTime&#x3D;{startTime&#x3D;2021-01-01T10:00:00.000Z, durationInMinutes&#x3D;60}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'addAppointmentForServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Missing or invalid request parameters: [serviceJobId], details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'addAppointmentForServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->addAppointmentForServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for addAppointmentForServiceJobByServiceJobId_403
     * .
     */
    public function testAddAppointmentForServiceJobByServiceJobId403()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testAddAppointmentForServiceJobByServiceJobId403')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;unauthorizedJobId-9cb9bc29-3d7d-5e49-5709-efb693d34468}, body&#x3D;{value&#x3D;{appointmentTime&#x3D;{startTime&#x3D;2021-01-01T10:00:00.000Z}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'addAppointmentForServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;UnauthorizedAction, message&#x3D;Not authorized to access this resource. Please check your input again., details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'addAppointmentForServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->addAppointmentForServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(403, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 403, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 403);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for addAppointmentForServiceJobByServiceJobId_404
     * .
     */
    public function testAddAppointmentForServiceJobByServiceJobId404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for addAppointmentForServiceJobByServiceJobId_413
     * .
     */
    public function testAddAppointmentForServiceJobByServiceJobId413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for addAppointmentForServiceJobByServiceJobId_415
     * .
     */
    public function testAddAppointmentForServiceJobByServiceJobId415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for addAppointmentForServiceJobByServiceJobId_422
     * .
     */
    public function testAddAppointmentForServiceJobByServiceJobId422()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testAddAppointmentForServiceJobByServiceJobId422')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;validJobId-9cb9bc29-3d7d-5e49-5709-efb693d34468}, body&#x3D;{value&#x3D;{appointmentTime&#x3D;{startTime&#x3D;2021-01-01T10:00:00.000+05:30}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'addAppointmentForServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;ISO8601 time 2021-01-01T10:00:00.000+05:30 is not in UTC., details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'addAppointmentForServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->addAppointmentForServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(422, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 422, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 422);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for addAppointmentForServiceJobByServiceJobId_429
     * .
     */
    public function testAddAppointmentForServiceJobByServiceJobId429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for addAppointmentForServiceJobByServiceJobId_500
     * .
     */
    public function testAddAppointmentForServiceJobByServiceJobId500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for addAppointmentForServiceJobByServiceJobId_503
     * .
     */
    public function testAddAppointmentForServiceJobByServiceJobId503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for assignAppointmentResources_200
     * .
     */
    public function testAssignAppointmentResources200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testAssignAppointmentResources200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;validJobId-1-9cb9bc29-3d7d-5e49-5709-efb693t25687}, appointmentId&#x3D;{value&#x3D;validAppointmentId-1-9cb9bc29-3d7d-5e49-5709-efb693t25687_87b9d5f2-839d-y13e-sd4d-dae1c3996s3d}, body&#x3D;{value&#x3D;{resources&#x3D;[{resourceId&#x3D;validResourceId-A8B3M999LMHF2}, {resourceId&#x3D;validResourceId-AMIDIAX1H5V}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'assignAppointmentResources',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'assignAppointmentResources',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->assignAppointmentResourcesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for assignAppointmentResources_400
     * .
     */
    public function testAssignAppointmentResources400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testAssignAppointmentResources400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;nullJobId}, appointmentId&#x3D;{value&#x3D;validAppointmentId-1-9cb9bc29-3d7d-5e49-5709-efb693t25687_87b9d5f2-839d-y13e-sd4d-dae1c3996s3d}, body&#x3D;{value&#x3D;{resources&#x3D;[{resourceId&#x3D;validResourceId-A8B3M999LMHF2}, {resourceId&#x3D;validResourceId-AMIDIAX1H5V}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'assignAppointmentResources',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Missing or invalid request parameters: [serviceJobId], details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'assignAppointmentResources',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->assignAppointmentResourcesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for assignAppointmentResources_403
     * .
     */
    public function testAssignAppointmentResources403()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testAssignAppointmentResources403')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;unauthorizedJobId-1-9cb9bc29-3d7d-5e49-5709-efb693t25687}, appointmentId&#x3D;{value&#x3D;validAppointmentId-1-9cb9bc29-3d7d-5e49-5709-efb693t25687_87b9d5f2-839d-y13e-sd4d-dae1c3996s3d}, body&#x3D;{value&#x3D;{resources&#x3D;[{resourceId&#x3D;validResourceId-A8B3M999LMHF2}, {resourceId&#x3D;validResourceId-AMIDIAX1H5V}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'assignAppointmentResources',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;UnauthorizedAction, message&#x3D;Not authorized to access this resource. Please check your input again., details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'assignAppointmentResources',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->assignAppointmentResourcesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(403, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 403, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 403);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for assignAppointmentResources_404
     * .
     */
    public function testAssignAppointmentResources404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for assignAppointmentResources_413
     * .
     */
    public function testAssignAppointmentResources413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for assignAppointmentResources_415
     * .
     */
    public function testAssignAppointmentResources415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for assignAppointmentResources_422
     * .
     */
    public function testAssignAppointmentResources422()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testAssignAppointmentResources422')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;invalidJobId-1-9cb9bc29-3d7d-5e49-5709-efb693t25687}, appointmentId&#x3D;{value&#x3D;validAppointmentId-1-9cb9bc29-3d7d-5e49-5709-efb693t25687_87b9d5f2-839d-y13e-sd4d-dae1c3996s3d}, body&#x3D;{value&#x3D;{resources&#x3D;[{resourceId&#x3D;validResourceId-A8B3M999LMHF2}, {resourceId&#x3D;validResourceId-AMIDIAX1H5V}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'assignAppointmentResources',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;No job exists with jobId : invalidJobId-1-9cb9bc29-3d7d-5e49-5709-efb693t25687, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'assignAppointmentResources',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->assignAppointmentResourcesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(422, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 422, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 422);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for assignAppointmentResources_429
     * .
     */
    public function testAssignAppointmentResources429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for assignAppointmentResources_500
     * .
     */
    public function testAssignAppointmentResources500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for assignAppointmentResources_503
     * .
     */
    public function testAssignAppointmentResources503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelReservation_204
     * .
     */
    public function testCancelReservation204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelReservation204')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{reservationId&#x3D;{value&#x3D;validReservationId-9c156c44-8315-4aeb-bb36-e056fa827e36}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelReservation',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelReservation',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelReservationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelReservation_400
     * .
     */
    public function testCancelReservation400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelReservation400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{reservationId&#x3D;{value&#x3D;invalidReservationId-a654baa-8315-4aeb-bb36-e056fa827e36}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelReservation',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{message&#x3D;Missing or invalid request parameters: [reservationId], code&#x3D;InvalidInput}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelReservation',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelReservationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelReservation_403
     * .
     */
    public function testCancelReservation403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelReservation_404
     * .
     */
    public function testCancelReservation404()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelReservation404')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{reservationId&#x3D;{value&#x3D;nonExistingReservationId-a3726c44-8315-4aeb-bb36-e056fa827e36}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelReservation',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{message&#x3D;Reservation does not exist, code&#x3D;InvalidInput}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelReservation',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelReservationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(404, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 404, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 404);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelReservation_413
     * .
     */
    public function testCancelReservation413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelReservation_415
     * .
     */
    public function testCancelReservation415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelReservation_429
     * .
     */
    public function testCancelReservation429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelReservation_500
     * .
     */
    public function testCancelReservation500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelReservation_503
     * .
     */
    public function testCancelReservation503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelServiceJobByServiceJobId_200
     * .
     */
    public function testCancelServiceJobByServiceJobId200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelServiceJobByServiceJobId200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;validJobId-48b6d5a3-b708-dbe9-038d-dd95e8d74iut}, cancellationReasonCode&#x3D;{value&#x3D;V1}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelServiceJobByServiceJobId_400
     * .
     */
    public function testCancelServiceJobByServiceJobId400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelServiceJobByServiceJobId400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;nullJobId}, cancellationReasonCode&#x3D;{value&#x3D;V1}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Missing or invalid request parameters: [serviceJobId], details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelServiceJobByServiceJobId_403
     * .
     */
    public function testCancelServiceJobByServiceJobId403()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelServiceJobByServiceJobId403')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;unauthorizedJobId-48b6d5a3-b708-dbe9-038d-dd95e8d74iut}, cancellationReasonCode&#x3D;{value&#x3D;V1}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;UnauthorizedAction, message&#x3D;Not authorized to access this resource.Please check your input again, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(403, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 403, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 403);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelServiceJobByServiceJobId_404
     * .
     */
    public function testCancelServiceJobByServiceJobId404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelServiceJobByServiceJobId_413
     * .
     */
    public function testCancelServiceJobByServiceJobId413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelServiceJobByServiceJobId_415
     * .
     */
    public function testCancelServiceJobByServiceJobId415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelServiceJobByServiceJobId_422
     * .
     */
    public function testCancelServiceJobByServiceJobId422()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelServiceJobByServiceJobId422')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;completedJobId-48b6d5a3-b708-dbe9-038d-dd95e8d74iut}, cancellationReasonCode&#x3D;{value&#x3D;V1}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Job with jobId completedJobId-48b6d5a3-b708-dbe9-038d-dd95e8d74iut and jobStatus COMPLETED cannot be cancelled, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(422, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 422, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 422);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelServiceJobByServiceJobId_429
     * .
     */
    public function testCancelServiceJobByServiceJobId429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelServiceJobByServiceJobId_500
     * .
     */
    public function testCancelServiceJobByServiceJobId500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelServiceJobByServiceJobId_503
     * .
     */
    public function testCancelServiceJobByServiceJobId503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for completeServiceJobByServiceJobId_200
     * .
     */
    public function testCompleteServiceJobByServiceJobId200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCompleteServiceJobByServiceJobId200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;validJobId-48b6d5a3-b708-dbe9-038d-dd95e8d74iut}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'completeServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'completeServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->completeServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for completeServiceJobByServiceJobId_400
     * .
     */
    public function testCompleteServiceJobByServiceJobId400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCompleteServiceJobByServiceJobId400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;nullJobId}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'completeServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Missing or invalid request parameters: [serviceJobId], details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'completeServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->completeServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for completeServiceJobByServiceJobId_403
     * .
     */
    public function testCompleteServiceJobByServiceJobId403()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCompleteServiceJobByServiceJobId403')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;unauthorizedJobId-48b6d5a3-b708-dbe9-038d-dd95e8d74iut}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'completeServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;UnauthorizedAction, message&#x3D;Not authorized to access this resource.Please check your input again, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'completeServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->completeServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(403, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 403, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 403);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for completeServiceJobByServiceJobId_404
     * .
     */
    public function testCompleteServiceJobByServiceJobId404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for completeServiceJobByServiceJobId_413
     * .
     */
    public function testCompleteServiceJobByServiceJobId413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for completeServiceJobByServiceJobId_415
     * .
     */
    public function testCompleteServiceJobByServiceJobId415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for completeServiceJobByServiceJobId_422
     * .
     */
    public function testCompleteServiceJobByServiceJobId422()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCompleteServiceJobByServiceJobId422')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;cancelledJobId-48b6d5a3-b708-dbe9-038d-dd95e8d74iut}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'completeServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Operation not allowed on job with jobId : cancelledJobId-48b6d5a3-b708-dbe9-038d-dd95e8d74iut and jobState : CANCELLED, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'completeServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->completeServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(422, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 422, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 422);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for completeServiceJobByServiceJobId_429
     * .
     */
    public function testCompleteServiceJobByServiceJobId429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for completeServiceJobByServiceJobId_500
     * .
     */
    public function testCompleteServiceJobByServiceJobId500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for completeServiceJobByServiceJobId_503
     * .
     */
    public function testCompleteServiceJobByServiceJobId503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createReservation_200
     * .
     */
    public function testCreateReservation200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateReservation200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{resourceId&#x3D;validResourceId-9c156c44-8315-4aeb-bb36-e056fa827e36, reservation&#x3D;{availability&#x3D;{startTime&#x3D;2020-04-01T10:00:00.00-07, endTime&#x3D;2020-04-01T11:00:00.00-07}, type&#x3D;BREAK}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createReservation',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{reservation&#x3D;{reservationId&#x3D;457}}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createReservation',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createReservationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createReservation_400
     * .
     */
    public function testCreateReservation400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateReservation400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{resourceId&#x3D;null, reservation&#x3D;{}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createReservation',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{message&#x3D;Missing or invalid request parameters: [resourceId], code&#x3D;InvalidInput}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createReservation',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createReservationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createReservation_403
     * .
     */
    public function testCreateReservation403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createReservation_404
     * .
     */
    public function testCreateReservation404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createReservation_413
     * .
     */
    public function testCreateReservation413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createReservation_415
     * .
     */
    public function testCreateReservation415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createReservation_429
     * .
     */
    public function testCreateReservation429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createReservation_500
     * .
     */
    public function testCreateReservation500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createReservation_503
     * .
     */
    public function testCreateReservation503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createServiceDocumentUploadDestination_200
     * .
     */
    public function testCreateServiceDocumentUploadDestination200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateServiceDocumentUploadDestination200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{contentType&#x3D;PNG, contentLength&#x3D;1386437, contentMD5&#x3D;97WrSKv9ffHkDopCdB32mw&#x3D;&#x3D;}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createServiceDocumentUploadDestination',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{encryptionDetails&#x3D;{standard&#x3D;AES, initializationVector&#x3D;paPlpo1iBBLmyOhU0mIo5g&#x3D;&#x3D;, key&#x3D;PDuDJm2l+0ydObrRpS48tB+t2qbtOmWhSEOiFWKnH2k&#x3D;}, uploadDestinationId&#x3D;amzn1.tortuga.3.15ba627d-8e24-42ad-89d1-5eb01f5ba0af.T15MXQRST78UTC&lt;-&gt;amzn1.tortuga.1.token.DizquVc+EoX/lWAV/7WTlw&#x3D;&#x3D;, url&#x3D;https://tortuga-devo.s3-us-west-2.amazonaws.com/%2FThirtyDays/amzn1.tortuga.3.15ba627d-8e24-42ad-89d1-5eb01f5ba0af.T15MXQRST78UTC?X-Amz-Algorithm&#x3D;AWS4-HMAC-SHA256&amp;X-Amz-Date&#x3D;20210108T103450Z&amp;X-Amz-SignedHeaders&#x3D;content-type%3Bhost&amp;X-Amz-Expires&#x3D;300&amp;X-Amz-Credential&#x3D;AKIAUR3X5C6O5CADVWED%2F20210108%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature&#x3D;dd2fefe6c6102aba14bab1481b33cf07dcc0385bd49f7eb5796d77b082ea5ba3}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createServiceDocumentUploadDestination',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createServiceDocumentUploadDestinationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createServiceDocumentUploadDestination_400
     * .
     */
    public function testCreateServiceDocumentUploadDestination400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateServiceDocumentUploadDestination400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createServiceDocumentUploadDestination',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Missing or invalid request parameters: [contentType, contentLength]., details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createServiceDocumentUploadDestination',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createServiceDocumentUploadDestinationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createServiceDocumentUploadDestination_403
     * .
     */
    public function testCreateServiceDocumentUploadDestination403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createServiceDocumentUploadDestination_404
     * .
     */
    public function testCreateServiceDocumentUploadDestination404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createServiceDocumentUploadDestination_413
     * .
     */
    public function testCreateServiceDocumentUploadDestination413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createServiceDocumentUploadDestination_415
     * .
     */
    public function testCreateServiceDocumentUploadDestination415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createServiceDocumentUploadDestination_422
     * .
     */
    public function testCreateServiceDocumentUploadDestination422()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateServiceDocumentUploadDestination422')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{contentType&#x3D;PNGr, contentLength&#x3D;1386437, contentMD5&#x3D;97WrSKv9ffHkDopCdB32mw&#x3D;&#x3D;}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createServiceDocumentUploadDestination',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;contentType parameter is invalid. Use one of [&#39;TIFF&#39;, &#39;JPG&#39;, &#39;PNG&#39;, &#39;JPEG&#39;, &#39;GIF&#39;, &#39;PDF&#39;], details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createServiceDocumentUploadDestination',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createServiceDocumentUploadDestinationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(422, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 422, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 422);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createServiceDocumentUploadDestination_429
     * .
     */
    public function testCreateServiceDocumentUploadDestination429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createServiceDocumentUploadDestination_500
     * .
     */
    public function testCreateServiceDocumentUploadDestination500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createServiceDocumentUploadDestination_503
     * .
     */
    public function testCreateServiceDocumentUploadDestination503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmentSlots_200
     * .
     */
    public function testGetAppointmentSlots200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetAppointmentSlots200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{asin&#x3D;{value&#x3D;B07BB1RGT5}, storeId&#x3D;{value&#x3D;53694163-6dc8-4f80-b6b1-ec47b7b9747e}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getAppointmentSlots',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{startTime&#x3D;2021-04-04T00:00:00Z, endTime&#x3D;2021-04-04T02:00:00Z, schedulingType&#x3D;REAL_TIME_SCHEDULING, appointmentSlots&#x3D;[{startTime&#x3D;2021-04-04T00:00:00Z, endTime&#x3D;2021-04-04T01:0:00Z, capacity&#x3D;20}, {startTime&#x3D;2021-04-04T01:00:00Z, endTime&#x3D;2021-04-04T02:0:00Z, capacity&#x3D;0}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getAppointmentSlots',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getAppointmentSlotsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getAppointmentSlots_400
     * .
     */
    public function testGetAppointmentSlots400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetAppointmentSlots400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{asin&#x3D;{value&#x3D;nullValue}, storeId&#x3D;{value&#x3D;53694163-6dc8-4f80-b6b1-ec47b7b9747e}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getAppointmentSlots',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Missing or invalid request parameters: [asin]}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getAppointmentSlots',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getAppointmentSlotsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getAppointmentSlots_403
     * .
     */
    public function testGetAppointmentSlots403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmentSlots_404
     * .
     */
    public function testGetAppointmentSlots404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmentSlots_415
     * .
     */
    public function testGetAppointmentSlots415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmentSlots_422
     * .
     */
    public function testGetAppointmentSlots422()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmentSlots_429
     * .
     */
    public function testGetAppointmentSlots429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmentSlots_500
     * .
     */
    public function testGetAppointmentSlots500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmentSlots_503
     * .
     */
    public function testGetAppointmentSlots503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmmentSlotsByJobId_200
     * .
     */
    public function testGetAppointmmentSlotsByJobId200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetAppointmmentSlotsByJobId200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;validJob-9c156c44-8315-4aeb-bb36-e056fa827e36}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getAppointmmentSlotsByJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{startTime&#x3D;2021-04-04T00:00:00Z, endTime&#x3D;2021-04-04T02:00:00Z, schedulingType&#x3D;REAL_TIME_SCHEDULING, appointmentSlots&#x3D;[{startTime&#x3D;2021-04-04T00:00:00Z, endTime&#x3D;2021-04-04T01:0:00Z, capacity&#x3D;20}, {startTime&#x3D;2021-04-04T01:00:00Z, endTime&#x3D;2021-04-04T02:0:00Z, capacity&#x3D;0}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getAppointmmentSlotsByJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getAppointmmentSlotsByJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getAppointmmentSlotsByJobId_400
     * .
     */
    public function testGetAppointmmentSlotsByJobId400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetAppointmmentSlotsByJobId400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;nullJobId}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getAppointmmentSlotsByJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Missing or invalid request parameters: [serviceJobId]}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getAppointmmentSlotsByJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getAppointmmentSlotsByJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getAppointmmentSlotsByJobId_403
     * .
     */
    public function testGetAppointmmentSlotsByJobId403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmmentSlotsByJobId_404
     * .
     */
    public function testGetAppointmmentSlotsByJobId404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmmentSlotsByJobId_415
     * .
     */
    public function testGetAppointmmentSlotsByJobId415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmmentSlotsByJobId_422
     * .
     */
    public function testGetAppointmmentSlotsByJobId422()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmmentSlotsByJobId_429
     * .
     */
    public function testGetAppointmmentSlotsByJobId429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmmentSlotsByJobId_500
     * .
     */
    public function testGetAppointmmentSlotsByJobId500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAppointmmentSlotsByJobId_503
     * .
     */
    public function testGetAppointmmentSlotsByJobId503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getFixedSlotCapacity_200
     * .
     */
    public function testGetFixedSlotCapacity200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetFixedSlotCapacity200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{resourceId&#x3D;{value&#x3D;validResourceId-9e378g66-9537-6ggq-dd48-f167gb969f48}, body&#x3D;{value&#x3D;{capacityTypes&#x3D;[SCHEDULED_CAPACITY, RESERVED_CAPACITY], startDateTime&#x3D;2021-04-04T00:00:00Z, endDateTime&#x3D;2021-04-04T02:00:00Z, slotDuration&#x3D;30}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getFixedSlotCapacity',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{resourceId&#x3D;validResourceId-9e378g66-9537-6ggq-dd48-f167gb969f48, slotDuration&#x3D;30, capacities&#x3D;[{startDateTime&#x3D;2021-04-04T00:00:00Z, scheduledCapacity&#x3D;1, reservedCapacity&#x3D;1}, {startDateTime&#x3D;2021-04-04T00:30:00Z, scheduledCapacity&#x3D;1, reservedCapacity&#x3D;0}, {startDateTime&#x3D;2021-04-04T01:00:00Z, scheduledCapacity&#x3D;0, reservedCapacity&#x3D;0}, {startDateTime&#x3D;2021-04-04T01:30:00Z, scheduledCapacity&#x3D;0, reservedCapacity&#x3D;0}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getFixedSlotCapacity',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getFixedSlotCapacityWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getFixedSlotCapacity_400
     * .
     */
    public function testGetFixedSlotCapacity400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetFixedSlotCapacity400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{capacityTypes&#x3D;[SCHEDULED_CAPACITY], startDateTime&#x3D;2021-04-04T00:00:00Z, endDateTime&#x3D;2021-04-04T02:00:00Z}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getFixedSlotCapacity',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;This is invalid input, details&#x3D;Received the following errors: [Missing or invalid request parameters: [resourceId]]}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getFixedSlotCapacity',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getFixedSlotCapacityWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getFixedSlotCapacity_401
     * .
     */
    public function testGetFixedSlotCapacity401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getFixedSlotCapacity_403
     * .
     */
    public function testGetFixedSlotCapacity403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getFixedSlotCapacity_404
     * .
     */
    public function testGetFixedSlotCapacity404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getFixedSlotCapacity_413
     * .
     */
    public function testGetFixedSlotCapacity413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getFixedSlotCapacity_415
     * .
     */
    public function testGetFixedSlotCapacity415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getFixedSlotCapacity_429
     * .
     */
    public function testGetFixedSlotCapacity429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getFixedSlotCapacity_500
     * .
     */
    public function testGetFixedSlotCapacity500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getFixedSlotCapacity_503
     * .
     */
    public function testGetFixedSlotCapacity503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getRangeSlotCapacity_200
     * .
     */
    public function testGetRangeSlotCapacity200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetRangeSlotCapacity200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{resourceId&#x3D;{value&#x3D;validResourceId-9d267d55-9426-5bfp-cc47-f167gb969f48}, body&#x3D;{value&#x3D;{capacityTypes&#x3D;[SCHEDULED_CAPACITY, AVAILABLE_CAPACITY], startDateTime&#x3D;2021-04-04T00:00:00Z, endDateTime&#x3D;2021-04-04T02:00:00Z}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getRangeSlotCapacity',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{resourceId&#x3D;validResourceId-9d267d55-9426-5bfp-cc47-f167gb969f48, capacities&#x3D;[{capacityType&#x3D;SCHEDULED_CAPACITY, slots&#x3D;[{startDateTime&#x3D;2021-04-04T00:00:00Z, endDateTime&#x3D;2021-04-04T02:00:00Z, capacity&#x3D;1}]}, {capacityType&#x3D;AVAILABLE_CAPACITY, slots&#x3D;[{startDateTime&#x3D;2021-04-04T00:00:00Z, endDateTime&#x3D;2021-04-04T01:00:00Z, capacity&#x3D;0}, {startDateTime&#x3D;2021-04-04T01:00:00Z, endDateTime&#x3D;2021-04-04T02:00:00Z, capacity&#x3D;1}]}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getRangeSlotCapacity',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getRangeSlotCapacityWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getRangeSlotCapacity_400
     * .
     */
    public function testGetRangeSlotCapacity400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetRangeSlotCapacity400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{capacityTypes&#x3D;[SCHEDULED_CAPACITY], startDateTime&#x3D;2021-04-04T00:00:00Z, endDateTime&#x3D;2021-04-04T02:00:00Z}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getRangeSlotCapacity',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;This is invalid input, details&#x3D;Received the following errors: [Missing or invalid request parameters: [resourceId]]}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getRangeSlotCapacity',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getRangeSlotCapacityWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getRangeSlotCapacity_401
     * .
     */
    public function testGetRangeSlotCapacity401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getRangeSlotCapacity_403
     * .
     */
    public function testGetRangeSlotCapacity403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getRangeSlotCapacity_404
     * .
     */
    public function testGetRangeSlotCapacity404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getRangeSlotCapacity_413
     * .
     */
    public function testGetRangeSlotCapacity413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getRangeSlotCapacity_415
     * .
     */
    public function testGetRangeSlotCapacity415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getRangeSlotCapacity_429
     * .
     */
    public function testGetRangeSlotCapacity429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getRangeSlotCapacity_500
     * .
     */
    public function testGetRangeSlotCapacity500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getRangeSlotCapacity_503
     * .
     */
    public function testGetRangeSlotCapacity503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobByServiceJobId_200
     * .
     */
    public function testGetServiceJobByServiceJobId200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetServiceJobByServiceJobId200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getServiceJobByServiceJobId_400
     * .
     */
    public function testGetServiceJobByServiceJobId400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetServiceJobByServiceJobId400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;validJobId-48b6d5a3-b708-dbe9-038d-dd95e8d74iut}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getServiceJobByServiceJobId_403
     * .
     */
    public function testGetServiceJobByServiceJobId403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobByServiceJobId_404
     * .
     */
    public function testGetServiceJobByServiceJobId404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobByServiceJobId_413
     * .
     */
    public function testGetServiceJobByServiceJobId413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobByServiceJobId_415
     * .
     */
    public function testGetServiceJobByServiceJobId415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobByServiceJobId_422
     * .
     */
    public function testGetServiceJobByServiceJobId422()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobByServiceJobId_429
     * .
     */
    public function testGetServiceJobByServiceJobId429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobByServiceJobId_500
     * .
     */
    public function testGetServiceJobByServiceJobId500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobByServiceJobId_503
     * .
     */
    public function testGetServiceJobByServiceJobId503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobs_200
     * .
     */
    public function testGetServiceJobs200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetServiceJobs200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getServiceJobs',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{totalResultSize&#x3D;1, nextPageToken&#x3D;merchantSklktoreIdbcdcd2ad-5883-4e48-b114-f13328a9e9f, previousPageToken&#x3D;merchantSklktoreIdbcdcd2ad-5883-4e48-b114-f13328a9e9f, jobs&#x3D;[{serviceOrderId&#x3D;2345324, serviceJobId&#x3D;34534399990035, createTime&#x3D;2019-12-11T14:49:53.952Z, serviceJobStatus&#x3D;COMPLETED, buyer&#x3D;{name&#x3D;nameExample}, appointments&#x3D;[{appointmentId&#x3D;appointmentIdExample, appointmentStatus&#x3D;COMPLETED, appointmentTime&#x3D;{startTime&#x3D;2020-01-31T06:38:56.961Z, durationInMinutes&#x3D;60}, assignedTechnicians&#x3D;[{technicianId&#x3D;technicianIdExample, name&#x3D;nameExample}]}]}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getServiceJobs',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getServiceJobsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getServiceJobs_400
     * .
     */
    public function testGetServiceJobs400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetServiceJobs400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{createdAfter&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getServiceJobs',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getServiceJobs',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getServiceJobsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getServiceJobs_403
     * .
     */
    public function testGetServiceJobs403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobs_404
     * .
     */
    public function testGetServiceJobs404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobs_413
     * .
     */
    public function testGetServiceJobs413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobs_415
     * .
     */
    public function testGetServiceJobs415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobs_429
     * .
     */
    public function testGetServiceJobs429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobs_500
     * .
     */
    public function testGetServiceJobs500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getServiceJobs_503
     * .
     */
    public function testGetServiceJobs503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for rescheduleAppointmentForServiceJobByServiceJobId_200
     * .
     */
    public function testRescheduleAppointmentForServiceJobByServiceJobId200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testRescheduleAppointmentForServiceJobByServiceJobId200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;validJobId-1-9cb9bc29-3d7d-5e49-5709-efb693d34468}, appointmentId&#x3D;{value&#x3D;validJobId-1-9cb9bc29-3d7d-5e49-5709-efb693d34468_00b9d5f2-839d-c13e-b8cd-dae1c3995b2a}, body&#x3D;{value&#x3D;{appointmentTime&#x3D;{startTime&#x3D;2021-01-01T10:00:00.000Z}, rescheduleReasonCode&#x3D;R1}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'rescheduleAppointmentForServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{appointmentId&#x3D;validJobId-1-9cb9bc29-3d7d-5e49-5709-efb693d34468_new_00b9d5f2-839d-c13e-b8cd-dae1c3995b2a}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'rescheduleAppointmentForServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for rescheduleAppointmentForServiceJobByServiceJobId_400
     * .
     */
    public function testRescheduleAppointmentForServiceJobByServiceJobId400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testRescheduleAppointmentForServiceJobByServiceJobId400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;nullJobId}, appointmentId&#x3D;{value&#x3D;validJobId-1-9cb9bc29-3d7d-5e49-5709-efb693d34468_00b9d5f2-839d-c13e-b8cd-dae1c3995b2a}, body&#x3D;{value&#x3D;{appointmentTime&#x3D;{startTime&#x3D;2021-01-01T10:00:00.000Z, durationInMinutes&#x3D;60}, rescheduleReasonCode&#x3D;R1}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'rescheduleAppointmentForServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Missing or invalid request parameters: [serviceJobId], details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'rescheduleAppointmentForServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for rescheduleAppointmentForServiceJobByServiceJobId_403
     * .
     */
    public function testRescheduleAppointmentForServiceJobByServiceJobId403()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testRescheduleAppointmentForServiceJobByServiceJobId403')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;unauthorizedJobId-9cb9bc29-3d7d-5e49-5709-efb693d34468}, appointmentId&#x3D;{value&#x3D;unauthorizedJobId-9cb9bc29-3d7d-5e49-5709-efb693d34468_00b9d5f2-839d-c13e-b8cd-dae1c3995b2a}, body&#x3D;{value&#x3D;{appointmentTime&#x3D;{startTime&#x3D;2021-01-01T10:00:00.000Z}, rescheduleReasonCode&#x3D;R1}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'rescheduleAppointmentForServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;UnauthorizedAction, message&#x3D;Not authorized to access this resource. Please check your input again., details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'rescheduleAppointmentForServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(403, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 403, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 403);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for rescheduleAppointmentForServiceJobByServiceJobId_404
     * .
     */
    public function testRescheduleAppointmentForServiceJobByServiceJobId404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for rescheduleAppointmentForServiceJobByServiceJobId_413
     * .
     */
    public function testRescheduleAppointmentForServiceJobByServiceJobId413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for rescheduleAppointmentForServiceJobByServiceJobId_415
     * .
     */
    public function testRescheduleAppointmentForServiceJobByServiceJobId415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for rescheduleAppointmentForServiceJobByServiceJobId_422
     * .
     */
    public function testRescheduleAppointmentForServiceJobByServiceJobId422()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testRescheduleAppointmentForServiceJobByServiceJobId422')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;validJobId-9cb9bc29-3d7d-5e49-5709-efb693d34468}, appointmentId&#x3D;{value&#x3D;validJobId-9cb9bc29-3d7d-5e49-5709-efb693d34468_00b9d5f2-839d-c13e-b8cd-dae1c3995b2a}, body&#x3D;{value&#x3D;{appointmentTime&#x3D;{startTime&#x3D;2021-01-01T10:00:00.000+05:30}, rescheduleReasonCode&#x3D;R1}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'rescheduleAppointmentForServiceJobByServiceJobId',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;ISO8601 time 2021-01-01T10:00:00.000+05:30 is not in UTC., details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'rescheduleAppointmentForServiceJobByServiceJobId',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(422, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 422, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 422);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for rescheduleAppointmentForServiceJobByServiceJobId_429
     * .
     */
    public function testRescheduleAppointmentForServiceJobByServiceJobId429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for rescheduleAppointmentForServiceJobByServiceJobId_500
     * .
     */
    public function testRescheduleAppointmentForServiceJobByServiceJobId500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for rescheduleAppointmentForServiceJobByServiceJobId_503
     * .
     */
    public function testRescheduleAppointmentForServiceJobByServiceJobId503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setAppointmentFulfillmentData_204
     * .
     */
    public function testSetAppointmentFulfillmentData204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSetAppointmentFulfillmentData204')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;validJobId-1-9cb9bc29-3d7d-5e49-5709-efb693t25687}, appointmentId&#x3D;{value&#x3D;validAppointmentId-1-9cb9bc29-3d7d-5e49-5709-efb693t25687_87b9d5f2-839d-y13e-sd4d-dae1c3996s3d}, body&#x3D;{value&#x3D;{fulfillmentTime&#x3D;{startTime&#x3D;2020-01-02T13:18:10.668Z, endTime&#x3D;2022-01-03T13:18:10.668Z}, appointmentResources&#x3D;[{resourceId&#x3D;validResourceId-20334421900}, {resourceId&#x3D;validResourceId-82309484378}], fulfillmentDocuments&#x3D;[{uploadDestinationId&#x3D;validUploadDesitnationID348293-2384982-239847982379, contentSha256&#x3D;z06EuBzgzc7GiDNVqcxMqYEr7n0BCS9EtNN7szHe0RT&#x3D;}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'setAppointmentFulfillmentData',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'setAppointmentFulfillmentData',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->setAppointmentFulfillmentDataWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for setAppointmentFulfillmentData_400
     * .
     */
    public function testSetAppointmentFulfillmentData400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSetAppointmentFulfillmentData400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;nullJobId}, appointmentId&#x3D;{value&#x3D;validJobId-1-9cb9bc29-3d7d-5e49-5709-efb693d34468_00b9d5f2-839d-c13e-b8cd-dae1c3995b2a}, body&#x3D;{value&#x3D;{fulfillmentTime&#x3D;{startTime&#x3D;2020-01-02T13:18:10.668Z, endTime&#x3D;2022-01-03T13:18:10.668Z}, appointmentResources&#x3D;[{resourceId&#x3D;validResourceId-20334421900}, {resourceId&#x3D;validResourceId-82309484378}], fulfillmentDocuments&#x3D;[{uploadDestinationId&#x3D;validUploadDesitnationID348293-2384982-239847982379, contentSha256&#x3D;z06EuBzgzc7GiDNVqcxMqYEr7n0BCS9EtNN7szHe0RT&#x3D;}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'setAppointmentFulfillmentData',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '[{code&#x3D;InvalidInput, message&#x3D;Missing or invalid request parameters: [serviceJobId]}]';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'setAppointmentFulfillmentData',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->setAppointmentFulfillmentDataWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for setAppointmentFulfillmentData_403
     * .
     */
    public function testSetAppointmentFulfillmentData403()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSetAppointmentFulfillmentData403')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;unauthorizedJobId-9cb9bc29-3d7d-5e49-5709-efb693d34468}, appointmentId&#x3D;{value&#x3D;unauthorizedJobId-9cb9bc29-3d7d-5e49-5709-efb693d34468_00b9d5f2-839d-c13e-b8cd-dae1c3995b2a}, body&#x3D;{value&#x3D;{fulfillmentTime&#x3D;{startTime&#x3D;2020-01-02T13:18:10.668Z, endTime&#x3D;2022-01-03T13:18:10.668Z}, appointmentResources&#x3D;[{resourceId&#x3D;validResourceId-20334421900}, {resourceId&#x3D;validResourceId-82309484378}], fulfillmentDocuments&#x3D;[{uploadDestinationId&#x3D;348293-2384982-239847982379, contentSha256&#x3D;z06EuBzgzc7GiDNVqcxMqYEr7n0BCS9EtNN7szHe0RT&#x3D;}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'setAppointmentFulfillmentData',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '[{code&#x3D;UnauthorizedAction, message&#x3D;Not authorized to access this resource. Please check your input again., details&#x3D;}]';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'setAppointmentFulfillmentData',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->setAppointmentFulfillmentDataWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(403, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 403, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 403);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for setAppointmentFulfillmentData_404
     * .
     */
    public function testSetAppointmentFulfillmentData404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setAppointmentFulfillmentData_413
     * .
     */
    public function testSetAppointmentFulfillmentData413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setAppointmentFulfillmentData_415
     * .
     */
    public function testSetAppointmentFulfillmentData415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setAppointmentFulfillmentData_422
     * .
     */
    public function testSetAppointmentFulfillmentData422()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSetAppointmentFulfillmentData422')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{serviceJobId&#x3D;{value&#x3D;invalidJobId-9cb9bc29-3d7d-5e49-5709-efb693d34468}, appointmentId&#x3D;{value&#x3D;invalidAppointmentId-9cb9bc29-3d7d-5e49-5709-efb693d34468_00b9d5f2-839d-c13e-b8cd-dae1c3995b2a}, body&#x3D;{value&#x3D;{fulfillmentTime&#x3D;{startTime&#x3D;2020-01-02T13:18:10.668Z, endTime&#x3D;2022-01-03T13:18:10.668Z}, appointmentResources&#x3D;[{resourceId&#x3D;validResourceId-20334421900}, {resourceId&#x3D;validResourceId-82309484378}], fulfillmentDocuments&#x3D;[{uploadDestinationId&#x3D;validUploadDesitnationID348293-2384982-239847982379, contentSha256&#x3D;z06EuBzgzc7GiDNVqcxMqYEr7n0BCS9EtNN7szHe0RT&#x3D;}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'setAppointmentFulfillmentData',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '[{code&#x3D;InvalidInput, message&#x3D;No job exist with jobId : invalidJobId-9cb9bc29-3d7d-5e49-5709-efb693d34468, details&#x3D;}]';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'setAppointmentFulfillmentData',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->setAppointmentFulfillmentDataWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(422, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 422, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 422);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for setAppointmentFulfillmentData_429
     * .
     */
    public function testSetAppointmentFulfillmentData429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setAppointmentFulfillmentData_500
     * .
     */
    public function testSetAppointmentFulfillmentData500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for setAppointmentFulfillmentData_503
     * .
     */
    public function testSetAppointmentFulfillmentData503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateReservation_200
     * .
     */
    public function testUpdateReservation200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateReservation200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{reservationId&#x3D;{value&#x3D;456}, body&#x3D;{value&#x3D;{resourceId&#x3D;validResourceId-9c156c44-8315-4aeb-bb36-e056fa827e36, reservation&#x3D;{availability&#x3D;{startTime&#x3D;2020-04-01T10:00:00.00-07, endTime&#x3D;2020-04-01T11:00:00.00-07}, type&#x3D;BREAK}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateReservation',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{reservation&#x3D;{reservationId&#x3D;457}}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateReservation',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateReservationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateReservation_400
     * .
     */
    public function testUpdateReservation400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateReservation400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{resourceId&#x3D;null, reservation&#x3D;{}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateReservation',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{message&#x3D;Missing or invalid request parameters: [resourceId], code&#x3D;InvalidInput}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateReservation',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateReservationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateReservation_403
     * .
     */
    public function testUpdateReservation403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateReservation_404
     * .
     */
    public function testUpdateReservation404()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateReservation404')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{reservationId&#x3D;{value&#x3D;not-existent-456}, body&#x3D;{value&#x3D;{resourceId&#x3D;invalidResourceId-9c156c44-8315-4aeb-bb36-e056fa827e36, reservation&#x3D;{availability&#x3D;{startTime&#x3D;2020-04-01T10:00:00.00-07, endTime&#x3D;2020-04-01T11:00:00.00-07}, type&#x3D;BREAK}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateReservation',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{message&#x3D;Could not find reservation with ID: [not-existent-456], code&#x3D;InvalidInput}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateReservation',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateReservationWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(404, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 404, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 404);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateReservation_413
     * .
     */
    public function testUpdateReservation413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateReservation_415
     * .
     */
    public function testUpdateReservation415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateReservation_429
     * .
     */
    public function testUpdateReservation429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateReservation_500
     * .
     */
    public function testUpdateReservation500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateReservation_503
     * .
     */
    public function testUpdateReservation503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSchedule_200
     * .
     */
    public function testUpdateSchedule200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateSchedule200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{resourceId&#x3D;{value&#x3D;validResourceId-9c156c44-8315-4aeb-bb36-e056fa827e36}, body&#x3D;{value&#x3D;{schedules&#x3D;[{startTime&#x3D;2020-01-01T00:00:00.00-07, endTime&#x3D;2020-01-01T23:59:00.00-07, recurrence&#x3D;{endTime&#x3D;2020-01-06T23:59:00.00-07, daysOfWeek&#x3D;[MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY]}}, {startTime&#x3D;2020-01-11T00:00:00.00-07, endTime&#x3D;2020-01-11T23:59:00.00-07, recurrence&#x3D;{endTime&#x3D;2020-01-16T23:59:00.00-07, daysOfWeek&#x3D;[MONDAY, TUESDAY, WEDNESDAY]}}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateSchedule',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateSchedule',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateScheduleWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateSchedule_400
     * .
     */
    public function testUpdateSchedule400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateSchedule400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{resourceId&#x3D;{value&#x3D;null}, body&#x3D;{value&#x3D;{schedules&#x3D;[]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateSchedule',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{message&#x3D;Missing or invalid request parameters: [resourceId], code&#x3D;InvalidInput}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateSchedule',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateScheduleWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateSchedule_403
     * .
     */
    public function testUpdateSchedule403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSchedule_404
     * .
     */
    public function testUpdateSchedule404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSchedule_413
     * .
     */
    public function testUpdateSchedule413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSchedule_415
     * .
     */
    public function testUpdateSchedule415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSchedule_429
     * .
     */
    public function testUpdateSchedule429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSchedule_500
     * .
     */
    public function testUpdateSchedule500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateSchedule_503
     * .
     */
    public function testUpdateSchedule503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
