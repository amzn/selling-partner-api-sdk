<?php
/**
 * VendorInvoiceApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Direct Fulfillment Payments
 *
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\VendorInvoiceApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * VendorInvoiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VendorInvoiceApiTest extends TestCase
{
    private VendorInvoiceApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new VendorInvoiceApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for submitInvoice_202
     * .
     */
    public function testSubmitInvoice202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSubmitInvoice202')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{invoices&#x3D;[{invoiceNumber&#x3D;0092590411, invoiceDate&#x3D;2020-03-13T11:16:24Z, remitToParty&#x3D;{partyId&#x3D;YourVendorCode, address&#x3D;{name&#x3D;vendor name, addressLine1&#x3D;vendor address 1, addressLine2&#x3D;vendor address 2, addressLine3&#x3D;vendor address 3, city&#x3D;DECity, county&#x3D;Schwabing, district&#x3D;München, stateOrRegion&#x3D;Bayern, postalCode&#x3D;DEPostCode, countryCode&#x3D;DE}, taxRegistrationDetails&#x3D;[{taxRegistrationType&#x3D;VAT, taxRegistrationNumber&#x3D;DE123456789}]}, shipFromParty&#x3D;{partyId&#x3D;ABCD}, billToParty&#x3D;{partyId&#x3D;5450534005838, address&#x3D;{name&#x3D;Amazon EU SARL, addressLine1&#x3D;Marcel-Breuer-Str. 12, city&#x3D;München, county&#x3D;Schwabing, district&#x3D;München, stateOrRegion&#x3D;Bayern, postalCode&#x3D;80807, countryCode&#x3D;DE}, taxRegistrationDetails&#x3D;[{taxRegistrationType&#x3D;VAT, taxRegistrationNumber&#x3D;DE814584193, taxRegistrationAddress&#x3D;{name&#x3D;Amazon EU SARL, addressLine1&#x3D;Marcel-Breuer-Str. 12, city&#x3D;München, stateOrRegion&#x3D;Bayern, postalCode&#x3D;80807, countryCode&#x3D;DE}, taxRegistrationMessage&#x3D;txmessage}]}, shipToCountryCode&#x3D;DE, paymentTermsCode&#x3D;Basic, invoiceTotal&#x3D;{currencyCode&#x3D;EUR, amount&#x3D;1428.00}, taxTotals&#x3D;[{taxType&#x3D;CGST, taxRate&#x3D;0.19, taxAmount&#x3D;{currencyCode&#x3D;EUR, amount&#x3D;228.00}, taxableAmount&#x3D;{currencyCode&#x3D;EUR, amount&#x3D;1200.00}}], items&#x3D;[{itemSequenceNumber&#x3D;1, buyerProductIdentifier&#x3D;B00IVLAABC, invoicedQuantity&#x3D;{amount&#x3D;1, unitOfMeasure&#x3D;Each}, netCost&#x3D;{currencyCode&#x3D;EUR, amount&#x3D;1200.00}, purchaseOrderNumber&#x3D;D3rC3KTxG, vendorOrderNumber&#x3D;0092590411, hsnCode&#x3D;76.06.92.99.00, taxDetails&#x3D;[{taxType&#x3D;CGST, taxRate&#x3D;0.19, taxAmount&#x3D;{currencyCode&#x3D;EUR, amount&#x3D;228.00}, taxableAmount&#x3D;{currencyCode&#x3D;EUR, amount&#x3D;1200.00}}]}]}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'submitInvoice',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{transactionId&#x3D;20190905010908-8a3b6901-ef20-412f-9270-21c021796605}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'submitInvoice',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->submitInvoiceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for submitInvoice_400
     * .
     */
    public function testSubmitInvoice400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSubmitInvoice400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{invoices&#x3D;[{invoiceNumber&#x3D;TestInvoice400, invoiceDate&#x3D;2020-08.13}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'submitInvoice',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;The value &#39;2020-03.13&#39; of element &#39;invoiceDate&#39; is not valid., details&#x3D;}, {code&#x3D;InvalidInput, message&#x3D;The content of element &#39;invoice&#39; is not complete. One of &#39;{invoiceNumber, referenceNumber}&#39; is expected., details&#x3D;}, {code&#x3D;InvalidInput, message&#x3D;&#39;2020-03.13&#39; is not a valid value for &#39;dateTime&#39;., details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'submitInvoice',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->submitInvoiceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for submitInvoice_403
     * .
     */
    public function testSubmitInvoice403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_404
     * .
     */
    public function testSubmitInvoice404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_413
     * .
     */
    public function testSubmitInvoice413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_415
     * .
     */
    public function testSubmitInvoice415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_429
     * .
     */
    public function testSubmitInvoice429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_500
     * .
     */
    public function testSubmitInvoice500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_503
     * .
     */
    public function testSubmitInvoice503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
