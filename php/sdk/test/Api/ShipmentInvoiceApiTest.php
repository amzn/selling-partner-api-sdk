<?php
/**
 * ShipmentInvoiceApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Shipment Invoicing
 *
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partner’s Fulfillment by Amazon (FBA) orders.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\ShipmentInvoiceApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * ShipmentInvoiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShipmentInvoiceApiTest extends TestCase
{
    private ShipmentInvoiceApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new ShipmentInvoiceApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for getInvoiceStatus_200
     * .
     */
    public function testGetInvoiceStatus200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetInvoiceStatus200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{shipmentId&#x3D;{value&#x3D;shipmentId1}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getInvoiceStatus',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{Shipments&#x3D;{AmazonShipmentId&#x3D;shipmentId1, InvoiceStatus&#x3D;Accepted}}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getInvoiceStatus',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getInvoiceStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getInvoiceStatus_400
     * .
     */
    public function testGetInvoiceStatus400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetInvoiceStatus400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{shipmentId&#x3D;{value&#x3D;BadShipId}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getInvoiceStatus',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Shipment ID, details&#x3D;&#39;BadShipId&#39; is an invalid ShipmentID}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getInvoiceStatus',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getInvoiceStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getInvoiceStatus_401
     * .
     */
    public function testGetInvoiceStatus401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_403
     * .
     */
    public function testGetInvoiceStatus403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_404
     * .
     */
    public function testGetInvoiceStatus404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_415
     * .
     */
    public function testGetInvoiceStatus415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_429
     * .
     */
    public function testGetInvoiceStatus429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_500
     * .
     */
    public function testGetInvoiceStatus500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_503
     * .
     */
    public function testGetInvoiceStatus503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentDetails_200
     * .
     */
    public function testGetShipmentDetails200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipmentDetails200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{shipmentId&#x3D;{value&#x3D;shipmentId1}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getShipmentDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{WarehouseId&#x3D;wID1234, AmazonOrderId&#x3D;222-333-4444333, AmazonShipmentId&#x3D;F4385943758, PurchaseDate&#x3D;2020-10-07T17:36:47.470Z, ShippingAddress&#x3D;{Name&#x3D;User Address1, AddressLine1&#x3D;123 any st, City&#x3D;Ann Arbor, County&#x3D;Washtenaw, StateOrRegion&#x3D;MI, PostalCode&#x3D;48104, CountryCode&#x3D;US, Phone&#x3D;333-444-5555, AddressType&#x3D;Residential}, PaymentMethodDetails&#x3D;[GiftCertificate], MarketplaceId&#x3D;ATV943520DER, SellerId&#x3D;TEST34509GOGM, BuyerName&#x3D;1, BuyerCounty&#x3D;Washtenaw, BuyerTaxInfo&#x3D;{CompanyLegalName&#x3D;Buyer Company, TaxingRegion&#x3D;MI, TaxClassifications&#x3D;[{Name&#x3D;Millage, Value&#x3D;10}]}, MarketplaceTaxInfo&#x3D;{CompanyLegalName&#x3D;Seller Legal Company Name, TaxingRegion&#x3D;SP, TaxClassifications&#x3D;[{Name&#x3D;CNPJ, Value&#x3D;15436940000103}]}, SellerDisplayName&#x3D;Seller Display Name in the marketplace, ShipmentItems&#x3D;[{ASIN&#x3D;BKUO9348543, SellerSKU&#x3D;BKUO9348543SKU, OrderItemId&#x3D;23423424, Title&#x3D;Pencil, QuantityOrdered&#x3D;1, ItemPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;100}, ShippingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, GiftWrapPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, ShippingDiscount&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, PromotionDiscount&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, SerialNumbers&#x3D;[23424, 23423]}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getShipmentDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipmentDetails_400
     * .
     */
    public function testGetShipmentDetails400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipmentDetails400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{shipmentId&#x3D;{value&#x3D;BadShipId}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getShipmentDetails',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Shipment ID, details&#x3D;&#39;BadShipId&#39; is an invalid ShipmentID}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getShipmentDetails',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipmentDetails_401
     * .
     */
    public function testGetShipmentDetails401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentDetails_403
     * .
     */
    public function testGetShipmentDetails403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentDetails_404
     * .
     */
    public function testGetShipmentDetails404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentDetails_415
     * .
     */
    public function testGetShipmentDetails415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentDetails_429
     * .
     */
    public function testGetShipmentDetails429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentDetails_500
     * .
     */
    public function testGetShipmentDetails500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipmentDetails_503
     * .
     */
    public function testGetShipmentDetails503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_200
     * .
     */
    public function testSubmitInvoice200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSubmitInvoice200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{shipmentId&#x3D;{value&#x3D;shipmentId1}, body&#x3D;{value&#x3D;{InvoiceContent&#x3D;SGF2ZSB0byBkZWFsIHdpdGggQmFzZTY0IGZvcm1hdD8&#x3D;, ContentMD5Value&#x3D;9906bd8f227f6a43f1e27db4b9258ad4}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'submitInvoice',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'submitInvoice',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->submitInvoiceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for submitInvoice_400
     * .
     */
    public function testSubmitInvoice400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSubmitInvoice400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{shipmentId&#x3D;{value&#x3D;BadIDForShipment}, body&#x3D;{value&#x3D;{InvoiceContent&#x3D;NonBase64EncodedValue, ContentMD5Value&#x3D;8f6df519a2125946820bc34a561164c2}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'submitInvoice',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Shipment ID is invalid, details&#x3D;InvoiceContent fails encoding. Shipment &#39;BadIDForShipment&#39; does not exist}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'submitInvoice',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->submitInvoiceWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for submitInvoice_401
     * .
     */
    public function testSubmitInvoice401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_403
     * .
     */
    public function testSubmitInvoice403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_404
     * .
     */
    public function testSubmitInvoice404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_415
     * .
     */
    public function testSubmitInvoice415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_429
     * .
     */
    public function testSubmitInvoice429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_500
     * .
     */
    public function testSubmitInvoice500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for submitInvoice_503
     * .
     */
    public function testSubmitInvoice503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
