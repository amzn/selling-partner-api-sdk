<?php
/**
 * MerchantFulfillmentApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Merchant Fulfillment
 *
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\MerchantFulfillmentApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * MerchantFulfillmentApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MerchantFulfillmentApiTest extends TestCase
{
    private MerchantFulfillmentApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new MerchantFulfillmentApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for cancelShipment_200
     * .
     */
    public function testCancelShipment200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelShipment200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{shipmentId&#x3D;{value&#x3D;be7a0a53-00c3-4f6f-a63a-639f76ee9253}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelShipment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{ShipmentId&#x3D;be7a0a53-00c3-4f6f-a63a-639f76ee9253, AmazonOrderId&#x3D;903-5563053-5647845, SellerOrderId&#x3D;903-5563053-5647845, Insurance&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.0}, ItemList&#x3D;[{OrderItemId&#x3D;12958298061782, Quantity&#x3D;1}], ShipFromAddress&#x3D;{Name&#x3D;John Doe, AddressLine1&#x3D;300 Turnbull Ave, Email&#x3D;jdoeasdfllkj@yahoo.com, City&#x3D;Detroit, StateOrProvinceCode&#x3D;MI, PostalCode&#x3D;48123, CountryCode&#x3D;US, Phone&#x3D;7132341234}, ShipToAddress&#x3D;{Name&#x3D;New York, AddressLine1&#x3D;TIME WARNER CENTER, AddressLine2&#x3D;10 COLUMBUS CIR, Email&#x3D;, City&#x3D;NEW YORK, StateOrProvinceCode&#x3D;NY, PostalCode&#x3D;10019-1158, CountryCode&#x3D;US, Phone&#x3D;}, PackageDimensions&#x3D;{Length&#x3D;10.25, Width&#x3D;10.25, Height&#x3D;10.25, Unit&#x3D;inches}, Weight&#x3D;{Value&#x3D;10.25, Unit&#x3D;oz}, ShippingService&#x3D;{ShippingServiceName&#x3D;UPS 2nd Day Air®, CarrierName&#x3D;UPS®, ShippingServiceId&#x3D;UPS_PTP_2ND_DAY_AIR, ShippingServiceOfferId&#x3D;, ShipDate&#x3D;2019-10-28T18:00:00Z, Rate&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;34.73}, ShippingServiceOptions&#x3D;{DeliveryExperience&#x3D;DeliveryConfirmationWithoutSignature, DeclaredValue&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.0}}, RequiresAdditionalSellerInputs&#x3D;false}, Label&#x3D;{Dimensions&#x3D;{}, FileContents&#x3D;{Contents&#x3D;, FileType&#x3D;, Checksum&#x3D;}}, Status&#x3D;RefundPending, TrackingId&#x3D;1Z17E2100206868939, CreatedDate&#x3D;2019-10-28T18:29:34Z, LastUpdatedDate&#x3D;2019-10-28T18:36:55Z}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelShipment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelShipment_400
     * .
     */
    public function testCancelShipment400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCancelShipment400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{shipmentId&#x3D;{value&#x3D;87d20cf7-1beb-4cda-8bf4-7366cfddbec1}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'cancelShipment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;1 validation error detected: Value &#39;TEST_CASE_400&#39; at &#39;shipmentId&#39; failed to satisfy constraint: Member must satisfy regular expression pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'cancelShipment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->cancelShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for cancelShipment_401
     * .
     */
    public function testCancelShipment401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelShipment_403
     * .
     */
    public function testCancelShipment403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelShipment_404
     * .
     */
    public function testCancelShipment404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelShipment_429
     * .
     */
    public function testCancelShipment429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelShipment_500
     * .
     */
    public function testCancelShipment500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for cancelShipment_503
     * .
     */
    public function testCancelShipment503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createShipment_200
     * .
     */
    public function testCreateShipment200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateShipment200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{ShipmentRequestDetails&#x3D;{AmazonOrderId&#x3D;903-5563053-5647845, ItemList&#x3D;[{OrderItemId&#x3D;52986411826454, Quantity&#x3D;1}], ShipFromAddress&#x3D;{Name&#x3D;John Doe, AddressLine1&#x3D;300 Turnbull Ave, Email&#x3D;jdoeasdfllkj@yahoo.com, City&#x3D;Detroit, StateOrProvinceCode&#x3D;MI, PostalCode&#x3D;48123, CountryCode&#x3D;US, Phone&#x3D;7132341234}, PackageDimensions&#x3D;{Length&#x3D;10.25, Width&#x3D;10.25, Height&#x3D;10.25, Unit&#x3D;inches}, Weight&#x3D;{Value&#x3D;10.25, Unit&#x3D;oz}, ShippingServiceOptions&#x3D;{DeliveryExperience&#x3D;NoTracking, CarrierWillPickUp&#x3D;false, CarrierWillPickUpOption&#x3D;ShipperWillDropOff}}, ShippingServiceId&#x3D;UPS_PTP_2ND_DAY_AIR, ShippingServiceOfferId&#x3D;WHgxtyn6qjGGaCzOCog1azF5HLHje5Pz3Lc2Fmt5eKoZAReW8oJ1SMumuBS8lA/Hjuglhyiu0+KRLvyJxFV0PB9YFMDhygs3VyTL0WGYkGxiuRkmuEvpqldUn9rrkWVodqnR4vx2VtXvtER/Ju6RqYoddJZGy6RS2KLzzhQ2NclN0NYXMZVqpOe5RsRBddXaGuJr7oza3M52+JzChocAHzcurIhCRynpbxfmNLzZMQEbgnpGLzuaoSMzfxg90/NaXFR/Ou01du/uKd5AbfMW/AxAKP9ht6Oi9lDHq6WkGqvjkVLW0/jj/fBgblIwcs+t}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createShipment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{ShipmentId&#x3D;be7a0a53-00c3-4f6f-a63a-639f76ee9253, AmazonOrderId&#x3D;903-5563053-5647845, Insurance&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ItemList&#x3D;[{OrderItemId&#x3D;12958298061782, Quantity&#x3D;1}], ShipFromAddress&#x3D;{Name&#x3D;John Doe, AddressLine1&#x3D;300 Turnbull Ave, Email&#x3D;jdoeasdfllkj@yahoo.com, City&#x3D;Detroit, StateOrProvinceCode&#x3D;MI, PostalCode&#x3D;48123, CountryCode&#x3D;US, Phone&#x3D;7132341234}, ShipToAddress&#x3D;{Name&#x3D;New York, AddressLine1&#x3D;TIME WARNER CENTER, AddressLine2&#x3D;10 COLUMBUS CIR, Email&#x3D;, City&#x3D;NEW YORK, StateOrProvinceCode&#x3D;NY, PostalCode&#x3D;10019-1158, CountryCode&#x3D;US, Phone&#x3D;}, PackageDimensions&#x3D;{Length&#x3D;10.25, Width&#x3D;10.25, Height&#x3D;10.25, Unit&#x3D;inches}, Weight&#x3D;{Value&#x3D;10.25, Unit&#x3D;oz}, ShippingService&#x3D;{ShippingServiceName&#x3D;UPS 2nd Day Air®, CarrierName&#x3D;UPS®, ShippingServiceId&#x3D;UPS_PTP_2ND_DAY_AIR, ShippingServiceOfferId&#x3D;WHgxtyn6qjGGaCzOCog1azF5HLHje5Pz3Lc2Fmt5eKoZAReW8oJ1SMumuBS8lA/Hjuglhyiu0+KRLvyJxFV0PB9YFMDhygs3VyTL0WGYkGxiuRkmuEvpqldUn9rrkWVodqnR4vx2VtXvtER/Ju6RqYoddJZGy6RS2KLzzhQ2NclN0NYXMZVqpOe5RsRBddXaGuJr7oza3M52+JzChocAHzcurIhCRynpbxfmNLzZMQEbgnpGLzuaoSMzfxg90/NaXFR/Ou01du/uKd5AbfMW/AxAKP9ht6Oi9lDHq6WkGqvjkVLW0/jj/fBgblIwcs+t, ShipDate&#x3D;2019-10-28T16:37:37Z, EarliestEstimatedDeliveryDate&#x3D;2019-10-30T07:00:00Z, LatestEstimatedDeliveryDate&#x3D;2019-10-30T07:00:00Z, Rate&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;34.73}, ShippingServiceOptions&#x3D;{DeliveryExperience&#x3D;NoTracking, DeclaredValue&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, RequiresAdditionalSellerInputs&#x3D;false, Benefits&#x3D;{IncludedBenefits&#x3D;[CLAIMS_PROTECTED], ExcludedBenefits&#x3D;[]}}, Label&#x3D;{Dimensions&#x3D;{Length&#x3D;6.0, Width&#x3D;4.0, Unit&#x3D;inches}, FileContents&#x3D;{Contents&#x3D;H4sIAAAAAAAAAOR, FileType&#x3D;image/png, Checksum&#x3D;d+eUxK5WTGxkGsTF0pmefQ&#x3D;&#x3D;}, LabelFormat&#x3D;PNG}, Status&#x3D;Purchased, TrackingId&#x3D;1Z17E2100217295733, CreatedDate&#x3D;2019-10-28T16:37:43Z}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createShipment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createShipment_400
     * .
     */
    public function testCreateShipment400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateShipment400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{ShipmentRequestDetails&#x3D;{AmazonOrderId&#x3D;TEST_CASE_400, ItemList&#x3D;[{OrderItemId&#x3D;52986411826454, Quantity&#x3D;1}], ShipFromAddress&#x3D;{Name&#x3D;John Doe, AddressLine1&#x3D;300 Turnbull Ave, Email&#x3D;jdoeasdfllkj@yahoo.com, City&#x3D;Detroit, StateOrProvinceCode&#x3D;MI, PostalCode&#x3D;48123, CountryCode&#x3D;USA, Phone&#x3D;7132341234}, PackageDimensions&#x3D;{Length&#x3D;10, Width&#x3D;10, Height&#x3D;10, Unit&#x3D;inches}, Weight&#x3D;{Value&#x3D;10, Unit&#x3D;oz}, ShippingServiceOptions&#x3D;{DeliveryExperience&#x3D;NoTracking, CarrierWillPickUp&#x3D;false, CarrierWillPickUpOption&#x3D;ShipperWillDropOff}}, ShippingServiceId&#x3D;UPS_PTP_2ND_DAY_AIR, ShippingServiceOfferId&#x3D;WHgxtyn6qjGGaCzOCog1azF5HLHje5Pz3Lc2Fmt5eKoZAReW8oJ1SMumuBS8lA/Hjuglhyiu0+KRLvyJxFV0PB9YFMDhygs3VyTL0WGYkGxiuRkmuEvpqldUn9rrkWVodqnR4vx2VtXvtER/Ju6RqYoddJZGy6RS2KLzzhQ2NclN0NYXMZVqpOe5RsRBddXaGuJr7oza3M52+JzChocAHzcurIhCRynpbxfmNLzZMQEbgnpGLzuaoSMzfxg90/NaXFR/Ou01du/uKd5AbfMW/AxAKP9ht6Oi9lDHq6WkGqvjkVLW0/jj/fBgblIwcs+t}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createShipment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;1 validation error detected: Value &#39;USA&#39; at &#39;shipmentRequestDetails.shipFromAddress.countryCode&#39; failed to satisfy constraint: Member must have length less than or equal to 2, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createShipment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createShipment_401
     * .
     */
    public function testCreateShipment401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createShipment_403
     * .
     */
    public function testCreateShipment403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createShipment_404
     * .
     */
    public function testCreateShipment404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createShipment_429
     * .
     */
    public function testCreateShipment429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createShipment_500
     * .
     */
    public function testCreateShipment500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createShipment_503
     * .
     */
    public function testCreateShipment503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAdditionalSellerInputs_200
     * .
     */
    public function testGetAdditionalSellerInputs200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetAdditionalSellerInputs200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{ShippingServiceId&#x3D;UPS_PTP_GND, ShipFromAddress&#x3D;{Name&#x3D;John Doe, AddressLine1&#x3D;300 Turnbull Ave, Email&#x3D;jdoeasdfllkj@yahoo.com, City&#x3D;Detroit, StateOrProvinceCode&#x3D;MI, PostalCode&#x3D;48123, CountryCode&#x3D;US, Phone&#x3D;7132341234}, OrderId&#x3D;903-5563053-5647845}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getAdditionalSellerInputs',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{ShipmentLevelFields&#x3D;[{AdditionalInputFieldName&#x3D;John Doe}], ItemLevelFieldsList&#x3D;[{Asin&#x3D;ASIN_ID_200, AdditionalInputs&#x3D;[]}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getAdditionalSellerInputs',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getAdditionalSellerInputsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getAdditionalSellerInputs_400
     * .
     */
    public function testGetAdditionalSellerInputs400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetAdditionalSellerInputs400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{ShippingServiceId&#x3D;UPS_PTP_GND, ShipFromAddress&#x3D;{Name&#x3D;John Doe, AddressLine1&#x3D;300 Turnbull Ave, Email&#x3D;jdoeasdfllkj@yahoo.com, City&#x3D;Detroit, StateOrProvinceCode&#x3D;MI, PostalCode&#x3D;48123, CountryCode&#x3D;XX, Phone&#x3D;7132341234}, OrderId&#x3D;901-5563053-5647845}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getAdditionalSellerInputs',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Ship From Address when calling GetAdditionalSellerInputs, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getAdditionalSellerInputs',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getAdditionalSellerInputsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getAdditionalSellerInputs_401
     * .
     */
    public function testGetAdditionalSellerInputs401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAdditionalSellerInputs_403
     * .
     */
    public function testGetAdditionalSellerInputs403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAdditionalSellerInputs_404
     * .
     */
    public function testGetAdditionalSellerInputs404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAdditionalSellerInputs_429
     * .
     */
    public function testGetAdditionalSellerInputs429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAdditionalSellerInputs_500
     * .
     */
    public function testGetAdditionalSellerInputs500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getAdditionalSellerInputs_503
     * .
     */
    public function testGetAdditionalSellerInputs503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getEligibleShipmentServices_200
     * .
     */
    public function testGetEligibleShipmentServices200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetEligibleShipmentServices200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{ShipmentRequestDetails&#x3D;{AmazonOrderId&#x3D;903-5563053-5647845, ItemList&#x3D;[{OrderItemId&#x3D;52986411826454, Quantity&#x3D;1}], ShipFromAddress&#x3D;{Name&#x3D;John Doe, AddressLine1&#x3D;300 Turnbull Ave, Email&#x3D;jdoeasdfllkj@yahoo.com, City&#x3D;Detroit, StateOrProvinceCode&#x3D;MI, PostalCode&#x3D;48123, CountryCode&#x3D;US, Phone&#x3D;7132341234}, PackageDimensions&#x3D;{Length&#x3D;10.25, Width&#x3D;10.25, Height&#x3D;10.25, Unit&#x3D;inches}, Weight&#x3D;{Value&#x3D;10.25, Unit&#x3D;oz}, ShippingServiceOptions&#x3D;{DeliveryExperience&#x3D;NoTracking, CarrierWillPickUp&#x3D;false, CarrierWillPickUpOption&#x3D;ShipperWillDropOff}}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getEligibleShipmentServices',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{ShippingServiceList&#x3D;[{ShippingServiceName&#x3D;UPS 2nd Day Air®, CarrierName&#x3D;UPS®, ShippingServiceId&#x3D;UPS_PTP_2ND_DAY_AIR, ShippingServiceOfferId&#x3D;WHgxtyn6qjGGaCzOCog1azF5HLHje5Pz3Lc2Fmt5eKoZAReW8oJ1SMumuBS8lA/Hjuglhyiu0+KRLvyJxFV0PB9YFMDhygs3VyTL0WGYkGxiuRkmuEvpqldUn9rrkWVodqnR4vx2VtXvtER/Ju6RqYoddJZGy6RS2KLzzhQ2NclN0NYXMZVqpOe5RsRBddXaGuJr7oza3M52+JzChocAHzcurIhCRynpbxfmNLzZMQEbgnpGLzuaoSMzfxg90/NaXFR/Ou01du/uKd5AbfMW/AxAKP9ht6Oi9lDHq6WkGqvjkVLW0/jj/fBgblIwcs+t, ShipDate&#x3D;2019-10-28T16:36:36Z, EarliestEstimatedDeliveryDate&#x3D;2019-10-31T06:00:00Z, LatestEstimatedDeliveryDate&#x3D;2019-10-31T06:00:00Z, Rate&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;34.73}, ShippingServiceOptions&#x3D;{DeliveryExperience&#x3D;NoTracking, CarrierWillPickUp&#x3D;false, LabelFormat&#x3D;}, AvailableLabelFormats&#x3D;[ZPL203, ShippingServiceDefault, PDF, PNG], AvailableFormatOptionsForLabel&#x3D;[{LabelFormat&#x3D;ZPL203}, {LabelFormat&#x3D;ShippingServiceDefault}, {LabelFormat&#x3D;PDF}, {LabelFormat&#x3D;PNG}], Benefits&#x3D;{IncludedBenefits&#x3D;[CLAIMS_PROTECTED], ExcludedBenefits&#x3D;[]}}, {ShippingServiceName&#x3D;UPS Next Day Air Saver®, CarrierName&#x3D;UPS®, ShippingServiceId&#x3D;UPS_PTP_NEXT_DAY_AIR_SAVER, ShippingServiceOfferId&#x3D;WHgxtyn6qjGGaCzOCog1azF5HLHje5Pz3Lc2Fmt5eKqqhKGQ2YZmuxsXKVXmdgdWNvfxb1qfm5bGm8NuqlqnNT3eTiJ4viTctepggbeUKUSykClJ+Qmw43zdA8wsgREhQCmb4Bbo/skapLQS1F9uwH2FgY5SfMsj/egudyocpVRT45KSQAT0H5YiXW3OyyRAae9fZ0RzDJAABHiisOyYyXnB1mtWOZqc7rlGR4yyqN7jmiT4t8dmuGPX7ptY4qskrN+6VHZO9bM9tdDS0ysHhAVv4jO3Q5sWFg4nEPaARWSsrpa6zSGMLxAOj56O3tcP, ShipDate&#x3D;2019-10-28T16:36:36Z, EarliestEstimatedDeliveryDate&#x3D;2019-10-30T06:00:00Z, LatestEstimatedDeliveryDate&#x3D;2019-10-30T06:00:00Z, Rate&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;98.75}, ShippingServiceOptions&#x3D;{DeliveryExperience&#x3D;NoTracking, CarrierWillPickUp&#x3D;false, LabelFormat&#x3D;}, AvailableLabelFormats&#x3D;[ZPL203, ShippingServiceDefault, PDF, PNG], AvailableFormatOptionsForLabel&#x3D;[{LabelFormat&#x3D;ZPL203}, {LabelFormat&#x3D;ShippingServiceDefault}, {LabelFormat&#x3D;PDF}, {LabelFormat&#x3D;PNG}], Benefits&#x3D;{IncludedBenefits&#x3D;[], ExcludedBenefits&#x3D;[{Benefit&#x3D;CLAIMS_PROTECTED, ReasonCodes&#x3D;[LATE_DELIVERY_RISK]}]}}], TemporarilyUnavailableCarrierList&#x3D;[{CarrierName&#x3D;UPS®}, {CarrierName&#x3D;DHLECOMMERCE}], TermsAndConditionsNotAcceptedCarrierList&#x3D;[{CarrierName&#x3D;YANWEN}, {CarrierName&#x3D;CHINA_POST}]}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getEligibleShipmentServices',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getEligibleShipmentServicesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getEligibleShipmentServices_400
     * .
     */
    public function testGetEligibleShipmentServices400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetEligibleShipmentServices400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{ShipmentRequestDetails&#x3D;{AmazonOrderId&#x3D;TEST_CASE_400, ItemList&#x3D;[{OrderItemId&#x3D;52986411826454, Quantity&#x3D;1}], ShipFromAddress&#x3D;{Name&#x3D;John Doe, AddressLine1&#x3D;300 Turnbull Ave, Email&#x3D;jdoeasdfllkj@yahoo.com, City&#x3D;Detroit, StateOrProvinceCode&#x3D;MI, PostalCode&#x3D;48123, CountryCode&#x3D;USA, Phone&#x3D;7132341234}, PackageDimensions&#x3D;{Length&#x3D;10.25, Width&#x3D;10.25, Height&#x3D;10.25, Unit&#x3D;inches}, Weight&#x3D;{Value&#x3D;10.25, Unit&#x3D;oz}, ShippingServiceOptions&#x3D;{DeliveryExperience&#x3D;NoTracking, CarrierWillPickUp&#x3D;false, CarrierWillPickUpOption&#x3D;ShipperWillDropOff}}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getEligibleShipmentServices',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;1 validation error detected: Value &#39;USA&#39; at &#39;shipmentRequestDetails.shipFromAddress.countryCode&#39; failed to satisfy constraint: Member must have length less than or equal to 2, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getEligibleShipmentServices',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getEligibleShipmentServicesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getEligibleShipmentServices_401
     * .
     */
    public function testGetEligibleShipmentServices401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getEligibleShipmentServices_403
     * .
     */
    public function testGetEligibleShipmentServices403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getEligibleShipmentServices_404
     * .
     */
    public function testGetEligibleShipmentServices404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getEligibleShipmentServices_429
     * .
     */
    public function testGetEligibleShipmentServices429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getEligibleShipmentServices_500
     * .
     */
    public function testGetEligibleShipmentServices500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getEligibleShipmentServices_503
     * .
     */
    public function testGetEligibleShipmentServices503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_200
     * .
     */
    public function testGetShipment200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipment200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{shipmentId&#x3D;{value&#x3D;abcddcba-00c3-4f6f-a63a-639f76ee9253}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getShipment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{ShipmentId&#x3D;abcddcba-00c3-4f6f-a63a-639f76ee9253, AmazonOrderId&#x3D;903-5563053-5647845, SellerOrderId&#x3D;903-5563053-5647845, Insurance&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.0}, ItemList&#x3D;[{OrderItemId&#x3D;12958298061782, Quantity&#x3D;1}], ShipFromAddress&#x3D;{Name&#x3D;John Doe, AddressLine1&#x3D;300 Turnbull Ave, Email&#x3D;jdoeasdfllkj@yahoo.com, City&#x3D;Detroit, StateOrProvinceCode&#x3D;MI, PostalCode&#x3D;48123, CountryCode&#x3D;US, Phone&#x3D;7132341234}, ShipToAddress&#x3D;{Name&#x3D;New York, AddressLine1&#x3D;TIME WARNER CENTER, AddressLine2&#x3D;10 COLUMBUS CIR, Email&#x3D;, City&#x3D;NEW YORK, StateOrProvinceCode&#x3D;NY, PostalCode&#x3D;10019-1158, CountryCode&#x3D;US, Phone&#x3D;}, PackageDimensions&#x3D;{Length&#x3D;10.25, Width&#x3D;10.25, Height&#x3D;10.25, Unit&#x3D;inches}, Weight&#x3D;{Value&#x3D;10.25, Unit&#x3D;oz}, ShippingService&#x3D;{ShippingServiceName&#x3D;UPS 2nd Day Air®, CarrierName&#x3D;UPS®, ShippingServiceId&#x3D;UPS_PTP_2ND_DAY_AIR, ShippingServiceOfferId&#x3D;, ShipDate&#x3D;2019-10-28T18:00:00Z, Rate&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;34.73}, ShippingServiceOptions&#x3D;{DeliveryExperience&#x3D;DeliveryConfirmationWithoutSignature, DeclaredValue&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.0}}, RequiresAdditionalSellerInputs&#x3D;false, Benefits&#x3D;{IncludedBenefits&#x3D;[], ExcludedBenefits&#x3D;[{Benefit&#x3D;CLAIMS_PROTECTED, ReasonCodes&#x3D;[LATE_DELIVERY_RISK]}]}}, Label&#x3D;{Dimensions&#x3D;{Length&#x3D;6.0, Width&#x3D;4.0, Unit&#x3D;inches}, FileContents&#x3D;{Contents&#x3D;H4sIAAAAAAAAAOS6dV, FileType&#x3D;image/png, Checksum&#x3D;9ALVyphCKfc3+Lb2ssyh8A&#x3D;&#x3D;}}, Status&#x3D;Purchased, TrackingId&#x3D;1Z17E2100206868939, CreatedDate&#x3D;2019-10-28T18:29:34Z, LastUpdatedDate&#x3D;2019-10-28T18:30:35Z}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getShipment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipment_400
     * .
     */
    public function testGetShipment400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipment400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{shipmentId&#x3D;{value&#x3D;aabbccdd-1beb-4cda-8bf4-7366cfddbec1}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getShipment',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;1 validation error detected: Value &#39;TEST_CASE_400&#39; at &#39;shipmentId&#39; failed to satisfy constraint: Member must satisfy regular expression pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}, details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getShipment',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipment_401
     * .
     */
    public function testGetShipment401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_403
     * .
     */
    public function testGetShipment403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_404
     * .
     */
    public function testGetShipment404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_429
     * .
     */
    public function testGetShipment429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_500
     * .
     */
    public function testGetShipment500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getShipment_503
     * .
     */
    public function testGetShipment503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
