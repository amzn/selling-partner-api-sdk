<?php
/**
 * EasyShipApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Easy Ship
 *
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.
 *
 * The version of the OpenAPI document: 2022-03-23
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\EasyShipApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * EasyShipApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EasyShipApiTest extends TestCase
{
    private EasyShipApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new EasyShipApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for createScheduledPackage_200
     * .
     */
    public function testCreateScheduledPackage200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateScheduledPackage200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{amazonOrderId&#x3D;903-1713775-3598252, marketplaceId&#x3D;A21TJRUUN4KGV, packageDetails&#x3D;{packageDimensions&#x3D;{length&#x3D;12.0, width&#x3D;12.0, height&#x3D;12.0, unit&#x3D;Cm}, packageWeight&#x3D;{value&#x3D;23.0, unit&#x3D;G}, packageTimeSlot&#x3D;{slotId&#x3D;AQc48yxSAAAAADZG0qQAAAAA6kkAAAAAAAA&#x3D;, startTime&#x3D;2022-03-09T23:30:00Z, endTime&#x3D;2022-03-10T02:00:00Z}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createScheduledPackage',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{scheduledPackageId&#x3D;{amazonOrderId&#x3D;903-1713775-3598252, packageId&#x3D;1ab0f06a-9149-87e0-aba9-7098117872d6}, packageDimensions&#x3D;{length&#x3D;12.0, width&#x3D;12.0, height&#x3D;12.0, unit&#x3D;Cm}, packageWeight&#x3D;{value&#x3D;23.0, unit&#x3D;G}, packageTimeSlot&#x3D;{slotId&#x3D;AQc48yxSAAAAADZG0qQAAAAA6kkAAAAAAAA&#x3D;, startTime&#x3D;2022-03-09T23:30:00Z, endTime&#x3D;2022-03-10T02:00:00Z}, packageStatus&#x3D;ReadyForPickup}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createScheduledPackage',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createScheduledPackageWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createScheduledPackage_400
     * .
     */
    public function testCreateScheduledPackage400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateScheduledPackage400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{amazonOrderId&#x3D;903-1713775-3598252, packageDetails&#x3D;{packageTimeSlot&#x3D;{slotId&#x3D;, startTime&#x3D;2022-03-09T23:30:00Z, endTime&#x3D;2022-03-10T02:00:00Z}}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createScheduledPackage',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Request has missing or invalid parameters and cannot be parsed.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createScheduledPackage',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createScheduledPackageWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createScheduledPackage_401
     * .
     */
    public function testCreateScheduledPackage401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackage_403
     * .
     */
    public function testCreateScheduledPackage403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackage_404
     * .
     */
    public function testCreateScheduledPackage404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackage_413
     * .
     */
    public function testCreateScheduledPackage413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackage_415
     * .
     */
    public function testCreateScheduledPackage415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackage_429
     * .
     */
    public function testCreateScheduledPackage429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackage_500
     * .
     */
    public function testCreateScheduledPackage500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackage_503
     * .
     */
    public function testCreateScheduledPackage503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackageBulk_200
     * .
     */
    public function testCreateScheduledPackageBulk200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateScheduledPackageBulk200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{marketplaceId&#x3D;A2XZLSVIQ0F4JT, orderScheduleDetailsList&#x3D;[{amazonOrderId&#x3D;903-1713775-3598252, packageDetails&#x3D;{packageItems&#x3D;[{orderItemId&#x3D;6195931986885, orderItemSerialNumbers&#x3D;[ABCDE1234, 56789FGHI]}], packageTimeSlot&#x3D;{slotId&#x3D;AQc48yxSAAAAADZG0qQAAAAA6kkAAAAAAAA&#x3D;, startTime&#x3D;2022-03-09T23:30:00Z, endTime&#x3D;2022-03-10T02:00:00Z, handoverMethod&#x3D;Pickup}, packageIdentifier&#x3D;1ab0f06a-9149-87e0-aba9-7098117872d6}}, {amazonOrderId&#x3D;903-5645781-4567521}, {amazonOrderId&#x3D;951-9026094-1233333}], labelFormat&#x3D;ZPL}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createScheduledPackageBulk',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{scheduledPackages&#x3D;[{scheduledPackageId&#x3D;{amazonOrderId&#x3D;903-1713775-3598252, packageId&#x3D;1ab0f06a-9149-87e0-aba9-7098117872d6}, packageTimeSlot&#x3D;{startTime&#x3D;2022-03-09T23:30:00Z, endTime&#x3D;2022-03-10T02:00:00Z}, packageDimensions&#x3D;{length&#x3D;5.905511805, width&#x3D;3.6220472404, height&#x3D;3.4645669256, unit&#x3D;IN, identifier&#x3D;IN_SuggestedContainerDimension}, packageWeight&#x3D;{value&#x3D;11.466, unit&#x3D;ounces}, packageStatus&#x3D;ReadyForPickup, trackingDetails&#x3D;{trackingId&#x3D;1652969339691}}, {scheduledPackageId&#x3D;{amazonOrderId&#x3D;903-5645781-4567521, packageId&#x3D;80c06e53-3d96-f13f-30ca-85b50b1cb4ce}, packageTimeSlot&#x3D;{startTime&#x3D;2022-05-21T06:08:52.036Z, endTime&#x3D;2022-05-21T10:08:52.036Z}, packageDimensions&#x3D;{length&#x3D;5.905511805, width&#x3D;3.6220472404, height&#x3D;3.4645669256, unit&#x3D;IN, identifier&#x3D;IN_SuggestedContainerDimension}, packageWeight&#x3D;{value&#x3D;11.466, unit&#x3D;ounces}, packageStatus&#x3D;ReadyForPickup, trackingDetails&#x3D;{trackingId&#x3D;1652969339693}}], rejectedOrders&#x3D;[{amazonOrderId&#x3D;951-9026094-1233333, error&#x3D;{code&#x3D;InvalidInput, message&#x3D;Couldn&#39;t find the order details for 951-9026094-1233333}}], printableDocumentsUrl&#x3D;https://www.amazon.com/documents.zip}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createScheduledPackageBulk',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createScheduledPackageBulkWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createScheduledPackageBulk_400
     * .
     */
    public function testCreateScheduledPackageBulk400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateScheduledPackageBulk400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{marketplaceId&#x3D;A2XZLSVIQ0F4JT, labelFormat&#x3D;ZPL}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'createScheduledPackageBulk',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Request has missing or invalid parameters and cannot be parsed.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'createScheduledPackageBulk',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createScheduledPackageBulkWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createScheduledPackageBulk_401
     * .
     */
    public function testCreateScheduledPackageBulk401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackageBulk_403
     * .
     */
    public function testCreateScheduledPackageBulk403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackageBulk_404
     * .
     */
    public function testCreateScheduledPackageBulk404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackageBulk_429
     * .
     */
    public function testCreateScheduledPackageBulk429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackageBulk_413
     * .
     */
    public function testCreateScheduledPackageBulk413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackageBulk_415
     * .
     */
    public function testCreateScheduledPackageBulk415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackageBulk_500
     * .
     */
    public function testCreateScheduledPackageBulk500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for createScheduledPackageBulk_503
     * .
     */
    public function testCreateScheduledPackageBulk503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getScheduledPackage_200
     * .
     */
    public function testGetScheduledPackage200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetScheduledPackage200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{amazonOrderId&#x3D;{value&#x3D;903-1713775-3598252}, marketplaceId&#x3D;{value&#x3D;A21TJRUUN4KGV}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getScheduledPackage',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{scheduledPackageId&#x3D;{amazonOrderId&#x3D;903-1713775-3598252, packageId&#x3D;1ab0f06a-9149-87e0-aba9-7098117872d6}, packageDimensions&#x3D;{length&#x3D;12.0, width&#x3D;12.0, height&#x3D;12.0, unit&#x3D;Cm}, packageWeight&#x3D;{value&#x3D;23.0, unit&#x3D;G}, packageTimeSlot&#x3D;{slotId&#x3D;AQc48yxSAAAAADZG0qQAAAAA6kkAAAAAAAA&#x3D;, startTime&#x3D;2022-03-09T23:30:00Z, endTime&#x3D;2022-03-10T02:00:00Z}, packageStatus&#x3D;Scheduled}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getScheduledPackage',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getScheduledPackageWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getScheduledPackage_400
     * .
     */
    public function testGetScheduledPackage400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetScheduledPackage400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{amazonOrderId&#x3D;{value&#x3D;903-1713775-1111111}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getScheduledPackage',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;ResourceNotFound, message&#x3D;The specified resource (for example, &#x60;AmazonOrderId&#x60; or &#x60;MarketplaceId&#x60;) does not exist.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getScheduledPackage',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getScheduledPackageWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getScheduledPackage_401
     * .
     */
    public function testGetScheduledPackage401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getScheduledPackage_403
     * .
     */
    public function testGetScheduledPackage403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getScheduledPackage_404
     * .
     */
    public function testGetScheduledPackage404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getScheduledPackage_413
     * .
     */
    public function testGetScheduledPackage413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getScheduledPackage_415
     * .
     */
    public function testGetScheduledPackage415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getScheduledPackage_429
     * .
     */
    public function testGetScheduledPackage429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getScheduledPackage_500
     * .
     */
    public function testGetScheduledPackage500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getScheduledPackage_503
     * .
     */
    public function testGetScheduledPackage503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listHandoverSlots_200
     * .
     */
    public function testListHandoverSlots200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListHandoverSlots200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{amazonOrderId&#x3D;931-2308757-7991048, marketplaceId&#x3D;A21TJRUUN4KGV, packageDimensions&#x3D;{length&#x3D;15.0, width&#x3D;10.0, height&#x3D;12.0, unit&#x3D;Cm, identifier&#x3D;test}, packageWeight&#x3D;{value&#x3D;50.0, unit&#x3D;G}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listHandoverSlots',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{amazonOrderId&#x3D;931-2308757-7991048, timeSlots&#x3D;[{handoverMethod&#x3D;Pickup, slotId&#x3D;AQc48yxSAAAAADZG0qQAAAAA6kkAAAAAAAA&#x3D;, startTime&#x3D;2022-03-09T23:30:00Z, endTime&#x3D;2022-03-10T02:00:00Z}, {handoverMethod&#x3D;Pickup, slotId&#x3D;AQef4K2CAAAAAGdIAEAAAAAA6kkAAAAAAAA&#x3D;, startTime&#x3D;2022-03-10T02:00:00Z, endTime&#x3D;2022-03-10T04:30:00Z}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listHandoverSlots',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listHandoverSlotsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listHandoverSlots_400
     * .
     */
    public function testListHandoverSlots400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListHandoverSlots400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{amazonOrderId&#x3D;, marketplaceId&#x3D;A21TJRUUN4KGV, packageDimensions&#x3D;{length&#x3D;15.0, width&#x3D;10.0, height&#x3D;12.0, unit&#x3D;Cm}, packageWeight&#x3D;{value&#x3D;50.0, unit&#x3D;G}}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'listHandoverSlots',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Request has missing or invalid parameters and cannot be parsed., details&#x3D;}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'listHandoverSlots',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listHandoverSlotsWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listHandoverSlots_401
     * .
     */
    public function testListHandoverSlots401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listHandoverSlots_403
     * .
     */
    public function testListHandoverSlots403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listHandoverSlots_404
     * .
     */
    public function testListHandoverSlots404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listHandoverSlots_413
     * .
     */
    public function testListHandoverSlots413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listHandoverSlots_415
     * .
     */
    public function testListHandoverSlots415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listHandoverSlots_429
     * .
     */
    public function testListHandoverSlots429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listHandoverSlots_500
     * .
     */
    public function testListHandoverSlots500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for listHandoverSlots_503
     * .
     */
    public function testListHandoverSlots503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateScheduledPackages_200
     * .
     */
    public function testUpdateScheduledPackages200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateScheduledPackages200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{marketplaceId&#x3D;A21TJRUUN4KGV, updatePackageDetailsList&#x3D;[{scheduledPackageId&#x3D;{amazonOrderId&#x3D;903-1713775-3598252, packageId&#x3D;1ab0f06a-9149-87e0-aba9-7098117872d6}, packageTimeSlot&#x3D;{slotId&#x3D;AQc48yxSAAAAADZG0qQAAAAA6kkAAAAAAAA&#x3D;, startTime&#x3D;2022-03-09T23:30:00Z, endTime&#x3D;2022-03-10T02:00:00Z}}]}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateScheduledPackages',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{packages&#x3D;[{scheduledPackageId&#x3D;{amazonOrderId&#x3D;903-1713775-3598252, packageId&#x3D;1ab0f06a-9149-87e0-aba9-7098117872d6}, packageDimensions&#x3D;{length&#x3D;12.0, width&#x3D;12.0, height&#x3D;12.0, unit&#x3D;Cm}, packageWeight&#x3D;{value&#x3D;23.0, unit&#x3D;G}, packageTimeSlot&#x3D;{slotId&#x3D;AQc48yxSAAAAADZG0qQAAAAA6kkAAAAAAAA&#x3D;, startTime&#x3D;2022-03-09T23:30:00Z, endTime&#x3D;2022-03-10T02:00:00Z}, packageIdentifier&#x3D;Scheduled, packageStatus&#x3D;ReadyForPickup}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateScheduledPackages',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateScheduledPackagesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateScheduledPackages_400
     * .
     */
    public function testUpdateScheduledPackages400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateScheduledPackages400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{marketplaceId&#x3D;, updatePackageDetailsList&#x3D;[{scheduledPackageId&#x3D;{amazonOrderId&#x3D;903-1713775-3598252, packageId&#x3D;1ab0f06a-9149-87e0-aba9-7098117872d6}, packageTimeSlot&#x3D;{slotId&#x3D;, startTime&#x3D;2022-03-09T23:30:00Z, endTime&#x3D;2022-03-10T02:00:00Z}}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'updateScheduledPackages',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Request has missing or invalid parameters and cannot be parsed.}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'updateScheduledPackages',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateScheduledPackagesWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateScheduledPackages_401
     * .
     */
    public function testUpdateScheduledPackages401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateScheduledPackages_403
     * .
     */
    public function testUpdateScheduledPackages403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateScheduledPackages_404
     * .
     */
    public function testUpdateScheduledPackages404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateScheduledPackages_413
     * .
     */
    public function testUpdateScheduledPackages413()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateScheduledPackages_415
     * .
     */
    public function testUpdateScheduledPackages415()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateScheduledPackages_429
     * .
     */
    public function testUpdateScheduledPackages429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateScheduledPackages_500
     * .
     */
    public function testUpdateScheduledPackages500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for updateScheduledPackages_503
     * .
     */
    public function testUpdateScheduledPackages503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
