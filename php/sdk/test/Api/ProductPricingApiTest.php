<?php
/**
 * ProductPricingApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\ProductPricingApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * ProductPricingApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductPricingApiTest extends TestCase
{
    private ProductPricingApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new ProductPricingApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $actual = json_decode($response, true);
                $this->assertEquals($responseParams, $actual);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for getCompetitivePricing_200
     * .
     */
    public function testGetCompetitivePricing200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetCompetitivePricing200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{MarketplaceId&#x3D;{value&#x3D;ATVPDKIKX0DER}, ItemType&#x3D;{value&#x3D;Asin}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getCompetitivePricing',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;[{status&#x3D;Success, ASIN&#x3D;B00V5DG6IQ, Product&#x3D;{Identifiers&#x3D;{MarketplaceASIN&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ASIN&#x3D;B00V5DG6IQ}, SKUIdentifier&#x3D;{MarketplaceId&#x3D;, SellerId&#x3D;, SellerSKU&#x3D;}}, CompetitivePricing&#x3D;{CompetitivePrices&#x3D;[{CompetitivePriceId&#x3D;4545645646, Price&#x3D;{LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;130}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;120}, Points&#x3D;{PointsNumber&#x3D;130, PointsMonetaryValue&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}}}, condition&#x3D;new, belongsToRequester&#x3D;true}], NumberOfOfferListings&#x3D;[{Count&#x3D;20, condition&#x3D;new}], TradeInValue&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}}, SalesRankings&#x3D;[{ProductCategoryId&#x3D;325345, Rank&#x3D;1}]}}, {status&#x3D;Success, ASIN&#x3D;B00551Q3CS, Product&#x3D;{Identifiers&#x3D;{MarketplaceASIN&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ASIN&#x3D;B00551Q3CS}, SKUIdentifier&#x3D;{MarketplaceId&#x3D;, SellerId&#x3D;, SellerSKU&#x3D;}}, CompetitivePricing&#x3D;{CompetitivePrices&#x3D;[{CompetitivePriceId&#x3D;45456452646, Price&#x3D;{LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;130}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;120}, Points&#x3D;{PointsNumber&#x3D;130, PointsMonetaryValue&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}}}, condition&#x3D;new, belongsToRequester&#x3D;true}], NumberOfOfferListings&#x3D;[{Count&#x3D;1, condition&#x3D;new}], TradeInValue&#x3D;{CurrencyCode&#x3D;string, Amount&#x3D;0}}, SalesRankings&#x3D;[{ProductCategoryId&#x3D;54564, Rank&#x3D;1}]}}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getCompetitivePricing',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getCompetitivePricingWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getCompetitivePricing_400
     * .
     */
    public function testGetCompetitivePricing400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetCompetitivePricing400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{MarketplaceId&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getCompetitivePricing',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getCompetitivePricing',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getCompetitivePricingWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getCompetitivePricing_401
     * .
     */
    public function testGetCompetitivePricing401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCompetitivePricing_403
     * .
     */
    public function testGetCompetitivePricing403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCompetitivePricing_404
     * .
     */
    public function testGetCompetitivePricing404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCompetitivePricing_429
     * .
     */
    public function testGetCompetitivePricing429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCompetitivePricing_500
     * .
     */
    public function testGetCompetitivePricing500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getCompetitivePricing_503
     * .
     */
    public function testGetCompetitivePricing503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffers_200
     * .
     */
    public function testGetItemOffers200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemOffers200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{Asin&#x3D;{value&#x3D;B00V5DG6IQ}, MarketplaceId&#x3D;{value&#x3D;ATVPDKIKX0DER}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getItemOffers',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{ASIN&#x3D;B00V5DG6IQ, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B00V5DG6IQ}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.0}}], NumberOfOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant}], TotalOfferCount&#x3D;1}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, SellerFeedbackRating&#x3D;{FeedbackCount&#x3D;0, SellerPositiveFeedbackRating&#x3D;0.0}, ShipsFrom&#x3D;{State&#x3D;WA, Country&#x3D;US}, SubCondition&#x3D;new, IsFeaturedMerchant&#x3D;false, SellerId&#x3D;AXXXXXXXXXXXXX, IsFulfilledByAmazon&#x3D;false}], MarketplaceID&#x3D;ATVPDKIKX0DER}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getItemOffers',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemOffersWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemOffers_400
     * .
     */
    public function testGetItemOffers400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemOffers400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{Asin&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getItemOffers',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getItemOffers',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemOffersWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemOffers_401
     * .
     */
    public function testGetItemOffers401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffers_403
     * .
     */
    public function testGetItemOffers403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffers_404
     * .
     */
    public function testGetItemOffers404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffers_429
     * .
     */
    public function testGetItemOffers429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffers_500
     * .
     */
    public function testGetItemOffers500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffers_503
     * .
     */
    public function testGetItemOffers503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffersBatch_200
     * .
     */
    public function testGetItemOffersBatch200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemOffersBatch200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{requests&#x3D;[{uri&#x3D;/products/pricing/v0/items/B000P6Q7MY/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/items/B001Q3KU9Q/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/items/B007Z07UK6/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/items/B000OQA3N4/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/items/B07PTMKYS7/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/items/B001PYUTII/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/items/B00505DW2I/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/items/B00CGZQU42/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/items/B01LY2ZYRF/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/items/B00KFRNZY6/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getItemOffersBatch',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{responses&#x3D;[{status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{ASIN&#x3D;B000P6Q7MY, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B000P6Q7MY}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;21}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;21}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], BuyBoxPrices&#x3D;[{condition&#x3D;new, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;21}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;21}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], NumberOfOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;toy_display_on_website, Rank&#x3D;48602}, {ProductCategoryId&#x3D;166064011, Rank&#x3D;1168}, {ProductCategoryId&#x3D;251920011, Rank&#x3D;1304}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;26}, TotalOfferCount&#x3D;1}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;21}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;true, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;2889aa8a-77b4-4d11-99f9-5fc24994dc0f, Date&#x3D;Tue, 28 Jun 2022 14:21:22 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, Asin&#x3D;B000P6Q7MY, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{ASIN&#x3D;B001Q3KU9Q, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B001Q3KU9Q}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;24.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;24.99}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20.49}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.49}}], BuyBoxPrices&#x3D;[{condition&#x3D;new, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;24.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;24.99}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], NumberOfOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, OfferCount&#x3D;1}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, OfferCount&#x3D;1}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;0}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;toy_display_on_website, Rank&#x3D;6674}, {ProductCategoryId&#x3D;251947011, Rank&#x3D;33}, {ProductCategoryId&#x3D;23627232011, Rank&#x3D;41}, {ProductCategoryId&#x3D;251913011, Rank&#x3D;88}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;27.99}, TotalOfferCount&#x3D;2}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;24.99}, ShippingTime&#x3D;{maximumHours&#x3D;0, minimumHours&#x3D;0, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;true, IsNationalPrime&#x3D;true}, SubCondition&#x3D;new, SellerId&#x3D;A1OHOT6VONX3KA, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;true, IsFulfilledByAmazon&#x3D;true}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;5ff728ac-8f9c-4caa-99a7-704f898eec9c, Date&#x3D;Tue, 28 Jun 2022 14:21:22 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, Asin&#x3D;B001Q3KU9Q, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{ASIN&#x3D;B007Z07UK6, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B007Z07UK6}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;18}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;11}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;7}}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], BuyBoxPrices&#x3D;[{condition&#x3D;new, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5.01}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;4.99}}], NumberOfOffers&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;2}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;11}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;2}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;0}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;2}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;fashion_display_on_website, Rank&#x3D;34481}, {ProductCategoryId&#x3D;3421050011, Rank&#x3D;24}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, TotalOfferCount&#x3D;14}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, ShippingTime&#x3D;{maximumHours&#x3D;720, minimumHours&#x3D;504, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;AFQSGY2BVBPU2, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;3.5}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;ARLPNLRVRA0WL, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3QO25ZNO05UF8, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;true, IsNationalPrime&#x3D;true}, SubCondition&#x3D;new, SellerId&#x3D;AQBXQGCOQTJS6, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5.5}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;ATAQTPUEAJ499, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;4.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5.01}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;AEMQJEQHIGU8X, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;true, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3GAR3KWWUHTHC, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;12}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2YE02EFDC36RW, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A17VVVVNIJPQI4, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;50}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;true, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3ALR9P0658YQT, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;100}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A35LOCZQ3NFRAA, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;ab062f54-6b1c-4eab-9c59-f9c85847c3cc, Date&#x3D;Tue, 28 Jun 2022 14:21:22 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, Asin&#x3D;B007Z07UK6, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{ASIN&#x3D;B000OQA3N4, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B000OQA3N4}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], NumberOfOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;3}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;0}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;sports_display_on_website, Rank&#x3D;232244}, {ProductCategoryId&#x3D;3395921, Rank&#x3D;242}, {ProductCategoryId&#x3D;19574752011, Rank&#x3D;1579}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;25}, TotalOfferCount&#x3D;3}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3TH9S8BH6GOGM, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;3.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;9.99}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A09263691NO8MK5LA75X2, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;110f73fc-463d-4a68-a042-3a675ee37367, Date&#x3D;Tue, 28 Jun 2022 14:21:22 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, Asin&#x3D;B000OQA3N4, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{ASIN&#x3D;B07PTMKYS7, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B07PTMKYS7}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;200}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;200}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;12}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;12}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], NumberOfOffers&#x3D;[{condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;2}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;0}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;0}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;video_games_display_on_website, Rank&#x3D;2597}, {ProductCategoryId&#x3D;19497044011, Rank&#x3D;33}, {ProductCategoryId&#x3D;14670126011, Rank&#x3D;45}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;399}, TotalOfferCount&#x3D;3}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;12}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3TH9S8BH6GOGM, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;f5b23d61-455e-40c4-b615-ca03fd0a25de, Date&#x3D;Tue, 28 Jun 2022 14:21:22 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, Asin&#x3D;B07PTMKYS7, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{ASIN&#x3D;B001PYUTII, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B001PYUTII}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;17.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;17.99}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.5}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.5}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], BuyBoxPrices&#x3D;[{condition&#x3D;new, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], NumberOfOffers&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;4270}, {condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, OfferCount&#x3D;1}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;14}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;8}, {condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, OfferCount&#x3D;1}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;0}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;2}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;toy_display_on_website, Rank&#x3D;30959}, {ProductCategoryId&#x3D;196604011, Rank&#x3D;94}, {ProductCategoryId&#x3D;251910011, Rank&#x3D;13863}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;17.99}, TotalOfferCount&#x3D;4286}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.5}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A21GPS04ENK3GH, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;9}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A1NHJ2GQHJYKDD, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A1EZPZGQPCQEQR, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;true, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2BSRKTUYRBQX7, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;12.99}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A14RRT8J7KHRG0, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A29DD74D3MDLD3, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;15}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A1EZPZGQPCQEQR, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;17.99}, ShippingTime&#x3D;{maximumHours&#x3D;0, minimumHours&#x3D;0, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;true, IsNationalPrime&#x3D;true}, SubCondition&#x3D;new, SellerId&#x3D;A1OHOT6VONX3KA, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;true}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;23}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2NO69NJS5R7BW, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;23}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3J2OPDM7RLS9A, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;30}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;AA7AN6LI5ZZMD, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;30}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;30}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A29DD74D3MDLD3, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;50}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3D4MFKTUUP0RS, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1400}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A16ZGNLKQR74W7, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;5b4ebbf3-cd9f-4e5f-a252-1aed3933ae0e, Date&#x3D;Tue, 28 Jun 2022 14:21:25 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, Asin&#x3D;B001PYUTII, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{ASIN&#x3D;B00505DW2I, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B00505DW2I}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;14.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;4.99}}], BuyBoxPrices&#x3D;[{condition&#x3D;new, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;14.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;4.99}}], NumberOfOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;3}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;3}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;toy_display_on_website, Rank&#x3D;6581}, {ProductCategoryId&#x3D;14194715011, Rank&#x3D;11}, {ProductCategoryId&#x3D;251975011, Rank&#x3D;15}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;36}, TotalOfferCount&#x3D;3}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;4.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A5LI4TEX5CN80, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;true, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;15}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;33}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;AH2OYH1RAT8PM, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;da27fbae-3066-44b5-8f08-d472152eea0b, Date&#x3D;Tue, 28 Jun 2022 14:21:22 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, Asin&#x3D;B00505DW2I, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{ASIN&#x3D;B00CGZQU42, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B00CGZQU42}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;100}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;100}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;50}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;50}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], BuyBoxPrices&#x3D;[{condition&#x3D;new, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;50}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;50}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], NumberOfOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, OfferCount&#x3D;1}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;2}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, OfferCount&#x3D;1}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;fashion_display_on_website, Rank&#x3D;1093666}, {ProductCategoryId&#x3D;1045012, Rank&#x3D;2179}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;18.99}, TotalOfferCount&#x3D;3}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;50}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3CTKJEUROOISL, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;50}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;true, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;100}, ShippingTime&#x3D;{maximumHours&#x3D;0, minimumHours&#x3D;0, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;true, IsNationalPrime&#x3D;true}, SubCondition&#x3D;new, SellerId&#x3D;A16V258PS36Q2H, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, IsFulfilledByAmazon&#x3D;true}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;057b337c-3c17-4bbd-9bbf-79c1ef756dc0, Date&#x3D;Tue, 28 Jun 2022 14:21:22 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, Asin&#x3D;B00CGZQU42, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{ASIN&#x3D;B01LY2ZYRF, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B01LY2ZYRF}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;22}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;22}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], BuyBoxPrices&#x3D;[{condition&#x3D;new, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;22}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;22}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], NumberOfOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;59.5}, TotalOfferCount&#x3D;1}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;22}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;true, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;196a1220-82c4-4b07-8a73-a7d92511f6ef, Date&#x3D;Tue, 28 Jun 2022 14:21:22 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, Asin&#x3D;B01LY2ZYRF, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{ASIN&#x3D;B00KFRNZY6, status&#x3D;NoBuyableOffers, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, ASIN&#x3D;B00KFRNZY6}, Summary&#x3D;{TotalOfferCount&#x3D;0}, Offers&#x3D;[], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;7e49bdbb-7347-46fe-8c66-beb7b9c08118, Date&#x3D;Tue, 28 Jun 2022 14:21:23 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, Asin&#x3D;B00KFRNZY6, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getItemOffersBatch',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemOffersBatchWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemOffersBatch_400
     * .
     */
    public function testGetItemOffersBatch400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemOffersBatch400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{requests&#x3D;[{uri&#x3D;/products/pricing/v0/items/B000P6Q7MY/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getItemOffersBatch',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getItemOffersBatch',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemOffersBatchWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemOffersBatch_401
     * .
     */
    public function testGetItemOffersBatch401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffersBatch_403
     * .
     */
    public function testGetItemOffersBatch403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffersBatch_404
     * .
     */
    public function testGetItemOffersBatch404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffersBatch_429
     * .
     */
    public function testGetItemOffersBatch429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffersBatch_500
     * .
     */
    public function testGetItemOffersBatch500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getItemOffersBatch_503
     * .
     */
    public function testGetItemOffersBatch503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffers_200
     * .
     */
    public function testGetListingOffers200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetListingOffers200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{SellerSKU&#x3D;{value&#x3D;NABetaASINB00V5DG6IQ}, MarketplaceId&#x3D;{value&#x3D;ATVPDKIKX0DER}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getListingOffers',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;{SKU&#x3D;NABetaASINB00V5DG6IQ, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, SellerSKU&#x3D;NABetaASINB00V5DG6IQ}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.0}}], NumberOfOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant}], TotalOfferCount&#x3D;1}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, SellerFeedbackRating&#x3D;{FeedbackCount&#x3D;0, SellerPositiveFeedbackRating&#x3D;0.0}, ShipsFrom&#x3D;{State&#x3D;WA, Country&#x3D;US}, SubCondition&#x3D;new, IsFeaturedMerchant&#x3D;false, SellerId&#x3D;AXXXXXXXXXXXXX, MyOffer&#x3D;true, IsFulfilledByAmazon&#x3D;false}], MarketplaceID&#x3D;ATVPDKIKX0DER}}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getListingOffers',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getListingOffersWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getListingOffers_400
     * .
     */
    public function testGetListingOffers400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetListingOffers400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{SellerSKU&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getListingOffers',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getListingOffers',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getListingOffersWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getListingOffers_401
     * .
     */
    public function testGetListingOffers401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffers_403
     * .
     */
    public function testGetListingOffers403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffers_404
     * .
     */
    public function testGetListingOffers404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffers_429
     * .
     */
    public function testGetListingOffers429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffers_500
     * .
     */
    public function testGetListingOffers500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffers_503
     * .
     */
    public function testGetListingOffers503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffersBatch_200
     * .
     */
    public function testGetListingOffersBatch200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetListingOffersBatch200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{requests&#x3D;[{uri&#x3D;/products/pricing/v0/listings/GC-QTMS-SV2I/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/listings/VT-DEIT-57TQ/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/listings/NA-H7X1-JYTM/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/listings/RL-JVOC-MBSL/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}, {uri&#x3D;/products/pricing/v0/listings/74-64KG-H9W9/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getListingOffersBatch',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{responses&#x3D;[{status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{SKU&#x3D;GC-QTMS-SV2I, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, SellerSKU&#x3D;GC-QTMS-SV2I}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;17.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;17.99}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.5}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.5}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], BuyBoxPrices&#x3D;[{condition&#x3D;new, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], NumberOfOffers&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;4270}, {condition&#x3D;new, fulfillmentChannel&#x3D;Amazon, OfferCount&#x3D;1}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;14}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant}, {condition&#x3D;new, fulfillmentChannel&#x3D;Amazon}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;toy_display_on_website, Rank&#x3D;30959}, {ProductCategoryId&#x3D;196604011, Rank&#x3D;94}, {ProductCategoryId&#x3D;251910011, Rank&#x3D;13863}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;17.99}, TotalOfferCount&#x3D;4286}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.5}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A21GPS04ENK3GH, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;9}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A1NHJ2GQHJYKDD, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A1EZPZGQPCQEQR, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;true, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2BSRKTUYRBQX7, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;12.99}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A14RRT8J7KHRG0, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A29DD74D3MDLD3, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;15}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A1EZPZGQPCQEQR, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;17.99}, ShippingTime&#x3D;{maximumHours&#x3D;0, minimumHours&#x3D;0, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;true, IsNationalPrime&#x3D;true}, SubCondition&#x3D;new, SellerId&#x3D;A1OHOT6VONX3KA, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;true}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;23}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2NO69NJS5R7BW, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;23}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3J2OPDM7RLS9A, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;30}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;AA7AN6LI5ZZMD, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;30}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;true, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;30}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A29DD74D3MDLD3, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;50}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3D4MFKTUUP0RS, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1400}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A16ZGNLKQR74W7, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;ffd73923-1728-4d57-a45b-8e07a5e10366, Date&#x3D;Tue, 28 Jun 2022 14:18:08 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, SellerSKU&#x3D;GC-QTMS-SV2I, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{SKU&#x3D;VT-DEIT-57TQ, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, SellerSKU&#x3D;VT-DEIT-57TQ}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;14.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;4.99}}], BuyBoxPrices&#x3D;[{condition&#x3D;new, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;14.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;4.99}}], NumberOfOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;3}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;toy_display_on_website, Rank&#x3D;6581}, {ProductCategoryId&#x3D;14194715011, Rank&#x3D;11}, {ProductCategoryId&#x3D;251975011, Rank&#x3D;15}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;36}, TotalOfferCount&#x3D;3}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;4.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A5LI4TEX5CN80, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;true, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;15}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;true, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;33}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;AH2OYH1RAT8PM, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;96372776-dae8-4cd3-8edf-c9cd2d708c0c, Date&#x3D;Tue, 28 Jun 2022 14:18:05 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, SellerSKU&#x3D;VT-DEIT-57TQ, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{SKU&#x3D;NA-H7X1-JYTM, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, SellerSKU&#x3D;NA-H7X1-JYTM}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;18}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;11}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;7}}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], BuyBoxPrices&#x3D;[{condition&#x3D;new, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5.01}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;4.99}}], NumberOfOffers&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;2}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;11}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;used, fulfillmentChannel&#x3D;Merchant}, {condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;fashion_display_on_website, Rank&#x3D;34481}, {ProductCategoryId&#x3D;3421050011, Rank&#x3D;24}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, TotalOfferCount&#x3D;14}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;1}, ShippingTime&#x3D;{maximumHours&#x3D;720, minimumHours&#x3D;504, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;AFQSGY2BVBPU2, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;3.5}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;ARLPNLRVRA0WL, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3QO25ZNO05UF8, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;true, IsNationalPrime&#x3D;true}, SubCondition&#x3D;new, SellerId&#x3D;AQBXQGCOQTJS6, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5.5}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;ATAQTPUEAJ499, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;4.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;5.01}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;AEMQJEQHIGU8X, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;true, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3GAR3KWWUHTHC, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;12}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2YE02EFDC36RW, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A17VVVVNIJPQI4, IsFeaturedMerchant&#x3D;true, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;50}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;true, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3ALR9P0658YQT, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;100}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A35LOCZQ3NFRAA, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;0160ecba-a238-40ba-8ef9-647e9a0baf55, Date&#x3D;Tue, 28 Jun 2022 14:18:05 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, SellerSKU&#x3D;NA-H7X1-JYTM, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{SKU&#x3D;RL-JVOC-MBSL, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, SellerSKU&#x3D;RL-JVOC-MBSL}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], NumberOfOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;3}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;new, fulfillmentChannel&#x3D;Merchant}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;sports_display_on_website, Rank&#x3D;232244}, {ProductCategoryId&#x3D;3395921, Rank&#x3D;242}, {ProductCategoryId&#x3D;19574752011, Rank&#x3D;1579}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;25}, TotalOfferCount&#x3D;3}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3TH9S8BH6GOGM, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;3.99}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;9.99}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A09263691NO8MK5LA75X2, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;true, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;09d9fb32-661e-44f3-ac59-b2f91bb3d88e, Date&#x3D;Tue, 28 Jun 2022 14:18:05 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, SellerSKU&#x3D;RL-JVOC-MBSL, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}, {status&#x3D;{statusCode&#x3D;200, reasonPhrase&#x3D;OK}, body&#x3D;{payload&#x3D;{SKU&#x3D;74-64KG-H9W9, status&#x3D;Success, ItemCondition&#x3D;New, Identifier&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, SellerSKU&#x3D;74-64KG-H9W9}, Summary&#x3D;{LowestPrices&#x3D;[{condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;200}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;200}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;12}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;12}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}}], NumberOfOffers&#x3D;[{condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;1}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant, OfferCount&#x3D;2}], BuyBoxEligibleOffers&#x3D;[{condition&#x3D;collectible, fulfillmentChannel&#x3D;Merchant}, {condition&#x3D;new, fulfillmentChannel&#x3D;Merchant}], SalesRankings&#x3D;[{ProductCategoryId&#x3D;video_games_display_on_website, Rank&#x3D;2597}, {ProductCategoryId&#x3D;19497044011, Rank&#x3D;33}, {ProductCategoryId&#x3D;14670126011, Rank&#x3D;45}], ListPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;399}, TotalOfferCount&#x3D;3}, Offers&#x3D;[{Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;12}, ShippingTime&#x3D;{maximumHours&#x3D;48, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A3TH9S8BH6GOGM, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;false, IsFulfilledByAmazon&#x3D;false}, {Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0}, ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;20}, ShippingTime&#x3D;{maximumHours&#x3D;24, minimumHours&#x3D;24, availabilityType&#x3D;NOW}, ShipsFrom&#x3D;{Country&#x3D;US}, PrimeInformation&#x3D;{IsPrime&#x3D;false, IsNationalPrime&#x3D;false}, SubCondition&#x3D;new, SellerId&#x3D;A2SNBFWOFW4SWG, IsFeaturedMerchant&#x3D;false, IsBuyBoxWinner&#x3D;false, MyOffer&#x3D;true, IsFulfilledByAmazon&#x3D;false}], marketplaceId&#x3D;ATVPDKIKX0DER}}, headers&#x3D;{x-amzn-RequestId&#x3D;0df944c2-6de5-48d1-9c9c-df138c00e797, Date&#x3D;Tue, 28 Jun 2022 14:18:05 GMT}, request&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, SellerSKU&#x3D;74-64KG-H9W9, CustomerType&#x3D;Consumer, ItemCondition&#x3D;New}}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getListingOffersBatch',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getListingOffersBatchWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getListingOffersBatch_400
     * .
     */
    public function testGetListingOffersBatch400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetListingOffersBatch400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{body&#x3D;{value&#x3D;{requests&#x3D;[{uri&#x3D;/products/pricing/v0/listings/GC-QTMS-SV2I/offers, method&#x3D;GET, MarketplaceId&#x3D;ATVPDKIKX0DER, ItemCondition&#x3D;New, CustomerType&#x3D;Consumer}]}}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getListingOffersBatch',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getListingOffersBatch',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getListingOffersBatchWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getListingOffersBatch_401
     * .
     */
    public function testGetListingOffersBatch401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffersBatch_403
     * .
     */
    public function testGetListingOffersBatch403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffersBatch_404
     * .
     */
    public function testGetListingOffersBatch404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffersBatch_429
     * .
     */
    public function testGetListingOffersBatch429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffersBatch_500
     * .
     */
    public function testGetListingOffersBatch500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getListingOffersBatch_503
     * .
     */
    public function testGetListingOffersBatch503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getPricing_200
     * .
     */
    public function testGetPricing200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPricing200')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{MarketplaceId&#x3D;{value&#x3D;ATVPDKIKX0DER}, ItemType&#x3D;{value&#x3D;Asin}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getPricing',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{payload&#x3D;[{status&#x3D;Success, ASIN&#x3D;B00V5DG6IQ, Product&#x3D;{Identifiers&#x3D;{MarketplaceASIN&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ASIN&#x3D;B00V5DG6IQ}, SKUIdentifier&#x3D;{MarketplaceId&#x3D;, SellerId&#x3D;, SellerSKU&#x3D;}}, Offers&#x3D;[{BuyingPrice&#x3D;{ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.0}}, RegularPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, FulfillmentChannel&#x3D;MERCHANT, ItemCondition&#x3D;New, ItemSubCondition&#x3D;New, SellerSKU&#x3D;NABetaASINB00V5DG6IQ}]}}, {status&#x3D;Success, ASIN&#x3D;B00551Q3CS, Product&#x3D;{Identifiers&#x3D;{MarketplaceASIN&#x3D;{MarketplaceId&#x3D;ATVPDKIKX0DER, ASIN&#x3D;B00551Q3CS}, SKUIdentifier&#x3D;{MarketplaceId&#x3D;, SellerId&#x3D;, SellerSKU&#x3D;}}, Offers&#x3D;[{BuyingPrice&#x3D;{ListingPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, LandedPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, Shipping&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;0.0}}, RegularPrice&#x3D;{CurrencyCode&#x3D;USD, Amount&#x3D;10.0}, FulfillmentChannel&#x3D;MERCHANT, ItemCondition&#x3D;New, ItemSubCondition&#x3D;New, SellerSKU&#x3D;NABetaASINB00551Q3CS}]}}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getPricing',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPricingWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPricing_400
     * .
     */
    public function testGetPricing400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPricing400')) {
                $this->assertTrue(true);
                return;
            }

            //　Build Request Json for Request to static SandBox
            $invalidRequestJson = '{MarketplaceId&#x3D;{value&#x3D;TEST_CASE_400}};';
            // Prepare request parameters
            $requestParams = $this->testHelper->prepareRequestParamsFromMethod(
                $this->apiInstance,
                'getPricing',
                $invalidRequestJson
            );

            //Build Expected Response Json for Assert
            $invalidResponseJson = '{errors&#x3D;[{code&#x3D;InvalidInput, message&#x3D;Invalid Input}]}';
            // Prepare expected response
            $expectedResponse = $this->testHelper->prepareExpectedResponse(
                $this->apiInstance,
                'getPricing',
                $invalidResponseJson
            );

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPricingWithHttpInfo(...array_values($requestParams));

            // Assert the response
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPricing_401
     * .
     */
    public function testGetPricing401()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getPricing_403
     * .
     */
    public function testGetPricing403()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getPricing_404
     * .
     */
    public function testGetPricing404()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getPricing_429
     * .
     */
    public function testGetPricing429()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getPricing_500
     * .
     */
    public function testGetPricing500()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
    /**
     * Test case for getPricing_503
     * .
     */
    public function testGetPricing503()
    {
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
    }
}
