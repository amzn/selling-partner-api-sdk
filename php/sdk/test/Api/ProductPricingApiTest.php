<?php
/**
 * ProductPricingApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-05-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use OpenAPI\Client\Api\ProductPricingApi;
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use OpenAPI\Client\ObjectSerializer;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();

/**
 * ProductPricingApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductPricingApiTest extends TestCase
{
    private ProductPricingApi $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $this->testHelper = new TestHelper();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('ProductPricingApi', $this->getName());
        $credentialsConfig = [
            "clientId" => $_ENV['SP_API_CLIENT_ID'],
            "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
            "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
            "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ];
        $scopes = $this->testHelper->getScopesForApi($this->getName());
        if (!empty($scopes)) {
            $credentialsConfig['scopes'] = $scopes;
        }
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials($credentialsConfig);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new ProductPricingApi($config, null, null);
    }

    /**
     * Handles the response based on the expected HTTP status code.
     *
     * @param mixed $response The API response.
     * @param int $statusCode The actual HTTP status code.
     * @param int $expectedStatusCode The expected HTTP status code.
     * @throws \ReflectionException
     */
    private function handleResponse(mixed $response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
        switch ($expectedStatusCode) {
            case 200:
            case 201:
            case 202:
                $this->assertEquals($responseParams, $response);
                break;

            case 204:
                $this->assertTrue(true);
                echo "Response is empty as expected for status code 204.";
                break;

            case 400:
                $this->assertArrayHasKey('errors', $responseParams);
                $this->assertEquals($responseParams['errors'], $response->getErrors());
                break;

            default:
                $this->fail("Unhandled response code: $expectedStatusCode");
                break;
        }
    }

    /**
     * Handles exceptions thrown during the API call.
     *
     * @param ApiException $e The exception thrown by the API.
     */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
        if ($e->getCode() == $expectedCode) {
            $this->assertTrue(true);
        } else {
            $this->fail('Unexpected error code: ' . $e->getCode());
        }
    }

    /**
     * Asserts the HTTP status code.
     *
     * @param int $expectedStatusCode
     * @param int $actualStatusCode
     */
    private function assertHttpStatusCode(int $expectedStatusCode, int $actualStatusCode): void
    {
        $this->assertEquals(
            $expectedStatusCode,
            $actualStatusCode,
            "Expected HTTP status code $expectedStatusCode but got $actualStatusCode."
        );
    }

    /**
     * Test case for getCompetitiveSummary_200
     */
    public function testGetCompetitiveSummary200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetCompetitiveSummary200', 'ProductPricingApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/CompetitiveSummaryBatchResponse&quot;
      },
      &quot;example&quot; : {
        &quot;responses&quot; : [ {
          &quot;status&quot; : {
            &quot;statusCode&quot; : 200,
            &quot;reasonPhrase&quot; : &quot;Success&quot;
          },
          &quot;body&quot; : {
            &quot;asin&quot; : &quot;B00ZIAODGE&quot;,
            &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
            &quot;featuredBuyingOptions&quot; : [ {
              &quot;buyingOptionType&quot; : &quot;New&quot;,
              &quot;segmentedFeaturedOffers&quot; : [ {
                &quot;sellerId&quot; : &quot;A3DJR8M9Y3OUPG&quot;,
                &quot;condition&quot; : &quot;New&quot;,
                &quot;fulfillmentType&quot; : &quot;MFN&quot;,
                &quot;listingPrice&quot; : {
                  &quot;amount&quot; : 18.11,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;shippingOptions&quot; : [ {
                  &quot;shippingOptionType&quot; : &quot;DEFAULT&quot;,
                  &quot;price&quot; : {
                    &quot;amount&quot; : 2.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                } ],
                &quot;points&quot; : {
                  &quot;pointsNumber&quot; : 3,
                  &quot;pointsMonetaryValue&quot; : {
                    &quot;amount&quot; : 0.03,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                },
                &quot;featuredOfferSegments&quot; : [ {
                  &quot;customerMembership&quot; : &quot;PRIME&quot;,
                  &quot;segmentDetails&quot; : {
                    &quot;glanceViewWeightPercentage&quot; : 72
                  }
                }, {
                  &quot;customerMembership&quot; : &quot;NON_PRIME&quot;,
                  &quot;segmentDetails&quot; : {
                    &quot;glanceViewWeightPercentage&quot; : 18
                  }
                } ]
              }, {
                &quot;sellerId&quot; : &quot;A2ZWOLFOFDPJL1&quot;,
                &quot;condition&quot; : &quot;New&quot;,
                &quot;fulfillmentType&quot; : &quot;MFN&quot;,
                &quot;listingPrice&quot; : {
                  &quot;amount&quot; : 17.15,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;shippingOptions&quot; : [ {
                  &quot;shippingOptionType&quot; : &quot;DEFAULT&quot;,
                  &quot;price&quot; : {
                    &quot;amount&quot; : 2.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                } ],
                &quot;points&quot; : {
                  &quot;pointsNumber&quot; : 3,
                  &quot;pointsMonetaryValue&quot; : {
                    &quot;amount&quot; : 0.03,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                },
                &quot;featuredOfferSegments&quot; : [ {
                  &quot;customerMembership&quot; : &quot;NON_PRIME&quot;,
                  &quot;segmentDetails&quot; : {
                    &quot;glanceViewWeightPercentage&quot; : 10
                  }
                } ]
              } ]
            } ],
            &quot;referencePrices&quot; : [ {
              &quot;name&quot; : &quot;CompetitivePriceThreshold&quot;,
              &quot;price&quot; : {
                &quot;amount&quot; : 18.11,
                &quot;currencyCode&quot; : &quot;USD&quot;
              }
            }, {
              &quot;name&quot; : &quot;WasPrice&quot;,
              &quot;price&quot; : {
                &quot;amount&quot; : 18.49,
                &quot;currencyCode&quot; : &quot;USD&quot;
              }
            } ],
            &quot;lowestPricedOffers&quot; : [ {
              &quot;lowestPricedOffersInput&quot; : {
                &quot;itemCondition&quot; : &quot;New&quot;,
                &quot;offerType&quot; : &quot;Consumer&quot;
              },
              &quot;offers&quot; : [ {
                &quot;listingPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : 17.15
                },
                &quot;shippingOptions&quot; : [ {
                  &quot;shippingOptionType&quot; : &quot;DEFAULT&quot;,
                  &quot;price&quot; : {
                    &quot;amount&quot; : 2.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                } ],
                &quot;points&quot; : {
                  &quot;pointsMonetaryValue&quot; : {
                    &quot;amount&quot; : 0.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;pointsNumber&quot; : 50
                },
                &quot;primeDetails&quot; : {
                  &quot;eligibility&quot; : &quot;REGIONAL&quot;
                },
                &quot;subCondition&quot; : &quot;New&quot;,
                &quot;sellerId&quot; : &quot;A2ZWOLFOFDPJL1&quot;,
                &quot;fulfillmentType&quot; : &quot;MFN&quot;
              }, {
                &quot;listingPrice&quot; : {
                  &quot;amount&quot; : 18.11,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;shippingOptions&quot; : [ {
                  &quot;shippingOptionType&quot; : &quot;DEFAULT&quot;,
                  &quot;price&quot; : {
                    &quot;amount&quot; : 2.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                } ],
                &quot;points&quot; : {
                  &quot;pointsNumber&quot; : 3,
                  &quot;pointsMonetaryValue&quot; : {
                    &quot;amount&quot; : 0.03,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                },
                &quot;primeDetails&quot; : {
                  &quot;eligibility&quot; : &quot;NATIONAL&quot;
                },
                &quot;sellerId&quot; : &quot;A3DJR8M9Y3OUPG&quot;,
                &quot;subCondition&quot; : &quot;New&quot;,
                &quot;fulfillmentType&quot; : &quot;MFN&quot;
              } ]
            }, {
              &quot;lowestPricedOffersInput&quot; : {
                &quot;itemCondition&quot; : &quot;Used&quot;,
                &quot;offerType&quot; : &quot;Consumer&quot;
              },
              &quot;offers&quot; : [ {
                &quot;listingPrice&quot; : {
                  &quot;CurrencyCode&quot; : &quot;USD&quot;,
                  &quot;Amount&quot; : 12.0
                },
                &quot;shippingOptions&quot; : [ {
                  &quot;shippingOptionType&quot; : &quot;DEFAULT&quot;,
                  &quot;price&quot; : {
                    &quot;amount&quot; : 2.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                } ],
                &quot;primeDetails&quot; : {
                  &quot;eligibility&quot; : &quot;REGIONAL&quot;
                },
                &quot;subCondition&quot; : &quot;Acceptable&quot;,
                &quot;sellerId&quot; : &quot;A3DH5AGPM3JVAB&quot;,
                &quot;fulfillmentType&quot; : &quot;AFN&quot;
              } ]
            } ]
          }
        } ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;requests&quot; : [ {
                &quot;asin&quot; : &quot;B00ZIAODGE&quot;,
                &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
                &quot;includedData&quot; : [ &quot;featuredBuyingOptions&quot;, &quot;referencePrices&quot;, &quot;lowestPricedOffers&quot; ],
                &quot;lowestPricedOffersInputs&quot; : [ {
                  &quot;itemCondition&quot; : &quot;New&quot;,
                  &quot;offerType&quot; : &quot;Consumer&quot;
                }, {
                  &quot;itemCondition&quot; : &quot;Used&quot;,
                  &quot;offerType&quot; : &quot;Consumer&quot;
                } ],
                &quot;uri&quot; : &quot;/products/pricing/2022-05-01/items/competitiveSummary&quot;,
                &quot;method&quot; : &quot;GET&quot;
              }, {
                &quot;asin&quot; : &quot;11_AABB_123&quot;,
                &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
                &quot;includedData&quot; : [ &quot;featuredBuyingOptions&quot; ],
                &quot;uri&quot; : &quot;/products/pricing/2022-05-01/items/competitiveSummary&quot;,
                &quot;method&quot; : &quot;GET&quot;
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;responses&quot; : [ {
          &quot;status&quot; : {
            &quot;statusCode&quot; : 200,
            &quot;reasonPhrase&quot; : &quot;Success&quot;
          },
          &quot;body&quot; : {
            &quot;asin&quot; : &quot;B00ZIAODGE&quot;,
            &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
            &quot;featuredBuyingOptions&quot; : [ {
              &quot;buyingOptionType&quot; : &quot;New&quot;,
              &quot;segmentedFeaturedOffers&quot; : [ {
                &quot;sellerId&quot; : &quot;A3DJR8M9Y3OUPG&quot;,
                &quot;condition&quot; : &quot;New&quot;,
                &quot;fulfillmentType&quot; : &quot;MFN&quot;,
                &quot;listingPrice&quot; : {
                  &quot;amount&quot; : 18.11,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;shippingOptions&quot; : [ {
                  &quot;shippingOptionType&quot; : &quot;DEFAULT&quot;,
                  &quot;price&quot; : {
                    &quot;amount&quot; : 2.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                } ],
                &quot;points&quot; : {
                  &quot;pointsNumber&quot; : 3,
                  &quot;pointsMonetaryValue&quot; : {
                    &quot;amount&quot; : 0.03,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                },
                &quot;featuredOfferSegments&quot; : [ {
                  &quot;customerMembership&quot; : &quot;NON_PRIME&quot;,
                  &quot;segmentDetails&quot; : {
                    &quot;glanceViewWeightPercentage&quot; : 72
                  }
                }, {
                  &quot;customerMembership&quot; : &quot;PRIME&quot;,
                  &quot;segmentDetails&quot; : {
                    &quot;glanceViewWeightPercentage&quot; : 10
                  }
                } ]
              }, {
                &quot;sellerId&quot; : &quot;A2ZWOLFOFDPJL1&quot;,
                &quot;condition&quot; : &quot;New&quot;,
                &quot;fulfillmentType&quot; : &quot;MFN&quot;,
                &quot;listingPrice&quot; : {
                  &quot;amount&quot; : 17.15,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;shippingOptions&quot; : [ {
                  &quot;shippingOptionType&quot; : &quot;DEFAULT&quot;,
                  &quot;price&quot; : {
                    &quot;amount&quot; : 2.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                } ],
                &quot;points&quot; : {
                  &quot;pointsNumber&quot; : 3,
                  &quot;pointsMonetaryValue&quot; : {
                    &quot;amount&quot; : 0.03,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                },
                &quot;featuredOfferSegments&quot; : [ {
                  &quot;customerMembership&quot; : &quot;NON_PRIME&quot;,
                  &quot;segmentDetails&quot; : {
                    &quot;glanceViewWeightPercentage&quot; : 18
                  }
                } ]
              } ]
            } ],
            &quot;referencePrices&quot; : [ {
              &quot;name&quot; : &quot;CompetitivePriceThreshold&quot;,
              &quot;price&quot; : {
                &quot;amount&quot; : 18.11,
                &quot;currencyCode&quot; : &quot;USD&quot;
              }
            }, {
              &quot;name&quot; : &quot;WasPrice&quot;,
              &quot;price&quot; : {
                &quot;amount&quot; : 18.49,
                &quot;currencyCode&quot; : &quot;USD&quot;
              }
            } ],
            &quot;lowestPricedOffers&quot; : [ {
              &quot;lowestPricedOffersInput&quot; : {
                &quot;itemCondition&quot; : &quot;New&quot;,
                &quot;offerType&quot; : &quot;Consumer&quot;
              },
              &quot;offers&quot; : [ {
                &quot;listingPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : 17.15
                },
                &quot;shippingOptions&quot; : [ {
                  &quot;shippingOptionType&quot; : &quot;DEFAULT&quot;,
                  &quot;price&quot; : {
                    &quot;amount&quot; : 2.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                } ],
                &quot;points&quot; : {
                  &quot;pointsMonetaryValue&quot; : {
                    &quot;amount&quot; : 0.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;pointsNumber&quot; : 50
                },
                &quot;primeDetails&quot; : {
                  &quot;eligibility&quot; : &quot;REGIONAL&quot;
                },
                &quot;subCondition&quot; : &quot;New&quot;,
                &quot;sellerId&quot; : &quot;A2ZWOLFOFDPJL1&quot;,
                &quot;fulfillmentType&quot; : &quot;MFN&quot;
              }, {
                &quot;listingPrice&quot; : {
                  &quot;amount&quot; : 18.11,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;shippingOptions&quot; : [ {
                  &quot;shippingOptionType&quot; : &quot;DEFAULT&quot;,
                  &quot;price&quot; : {
                    &quot;amount&quot; : 2.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                } ],
                &quot;points&quot; : {
                  &quot;pointsNumber&quot; : 3,
                  &quot;pointsMonetaryValue&quot; : {
                    &quot;amount&quot; : 0.03,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                },
                &quot;primeDetails&quot; : {
                  &quot;eligibility&quot; : &quot;NATIONAL&quot;
                },
                &quot;sellerId&quot; : &quot;A3DJR8M9Y3OUPG&quot;,
                &quot;subCondition&quot; : &quot;New&quot;,
                &quot;fulfillmentType&quot; : &quot;MFN&quot;
              } ]
            }, {
              &quot;lowestPricedOffersInput&quot; : {
                &quot;itemCondition&quot; : &quot;Used&quot;,
                &quot;offerType&quot; : &quot;Consumer&quot;
              },
              &quot;offers&quot; : [ {
                &quot;listingPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : 12.0
                },
                &quot;shippingOptions&quot; : [ {
                  &quot;shippingOptionType&quot; : &quot;DEFAULT&quot;,
                  &quot;price&quot; : {
                    &quot;amount&quot; : 2.5,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                } ],
                &quot;primeDetails&quot; : {
                  &quot;eligibility&quot; : &quot;REGIONAL&quot;
                },
                &quot;subCondition&quot; : &quot;Acceptable&quot;,
                &quot;sellerId&quot; : &quot;A3DH5AGPM3JVAB&quot;,
                &quot;fulfillmentType&quot; : &quot;AFN&quot;
              } ]
            } ]
          }
        }, {
          &quot;status&quot; : {
            &quot;statusCode&quot; : 400,
            &quot;reasonPhrase&quot; : &quot;Client Error&quot;
          },
          &quot;body&quot; : {
            &quot;asin&quot; : &quot;11_AABB_123&quot;,
            &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
            &quot;errors&quot; : [ {
              &quot;code&quot; : &quot;INVALID_ASIN&quot;,
              &quot;message&quot; : &quot;11_AABB_123 is not a valid ASIN&quot;
            } ]
          }
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getCompetitiveSummary'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ProductPricingApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getCompetitiveSummaryWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getCompetitiveSummary_400
     */
    public function testGetCompetitiveSummary400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetCompetitiveSummary400', 'ProductPricingApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/Errors&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;requests&quot; : [ {
                &quot;asin&quot; : &quot;11_AABB_123&quot;,
                &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
                &quot;includedData&quot; : [ &quot;featuredBuyingOptions&quot; ],
                &quot;uri&quot; : &quot;/products/pricing/2022-05-01/items/competitiveSummary&quot;,
                &quot;method&quot; : &quot;GET&quot;
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;INVALID_ASIN&quot;,
          &quot;message&quot; : &quot;11_AABB_123 is not a valid ASIN&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getCompetitiveSummary'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ProductPricingApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getCompetitiveSummaryWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getCompetitiveSummary_403
     */
    public function testGetCompetitiveSummary403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getCompetitiveSummary_404
     */
    public function testGetCompetitiveSummary404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getCompetitiveSummary_429
     */
    public function testGetCompetitiveSummary429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getCompetitiveSummary_500
     */
    public function testGetCompetitiveSummary500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getCompetitiveSummary_503
     */
    public function testGetCompetitiveSummary503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getFeaturedOfferExpectedPriceBatch_200
     */
    public function testGetFeaturedOfferExpectedPriceBatch200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetFeaturedOfferExpectedPriceBatch200', 'ProductPricingApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetFeaturedOfferExpectedPriceBatchResponse&quot;
      },
      &quot;example&quot; : {
        &quot;responses&quot; : [ {
          &quot;request&quot; : {
            &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
            &quot;sku&quot; : &quot;MY_SKU&quot;
          },
          &quot;status&quot; : {
            &quot;statusCode&quot; : 200,
            &quot;reasonPhrase&quot; : &quot;Success&quot;
          },
          &quot;headers&quot; : { },
          &quot;body&quot; : {
            &quot;offerIdentifier&quot; : {
              &quot;asin&quot; : &quot;ASIN&quot;,
              &quot;sku&quot; : &quot;MY_SKU&quot;,
              &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
              &quot;fulfillmentType&quot; : &quot;AFN&quot;,
              &quot;sellerId&quot; : &quot;MY_SELLER_ID&quot;
            },
            &quot;featuredOfferExpectedPriceResults&quot; : [ {
              &quot;featuredOfferExpectedPrice&quot; : {
                &quot;listingPrice&quot; : {
                  &quot;amount&quot; : 10.0,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;points&quot; : {
                  &quot;pointsNumber&quot; : 3,
                  &quot;pointsMonetaryValue&quot; : {
                    &quot;amount&quot; : 0.03,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                }
              },
              &quot;resultStatus&quot; : &quot;VALID_FOEP&quot;,
              &quot;competingFeaturedOffer&quot; : {
                &quot;offerIdentifier&quot; : {
                  &quot;asin&quot; : &quot;ASIN&quot;,
                  &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
                  &quot;fulfillmentType&quot; : &quot;AFN&quot;,
                  &quot;sellerId&quot; : &quot;OTHER_SELLER_ID&quot;
                },
                &quot;condition&quot; : &quot;New&quot;,
                &quot;price&quot; : {
                  &quot;listingPrice&quot; : {
                    &quot;amount&quot; : 12.0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;shippingPrice&quot; : {
                    &quot;amount&quot; : 0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;points&quot; : {
                    &quot;pointsNumber&quot; : 3,
                    &quot;pointsMonetaryValue&quot; : {
                      &quot;amount&quot; : 0.03,
                      &quot;currencyCode&quot; : &quot;USD&quot;
                    }
                  }
                }
              },
              &quot;currentFeaturedOffer&quot; : {
                &quot;offerIdentifier&quot; : {
                  &quot;asin&quot; : &quot;ASIN&quot;,
                  &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
                  &quot;fulfillmentType&quot; : &quot;AFN&quot;,
                  &quot;sellerId&quot; : &quot;OTHER_SELLER_ID&quot;
                },
                &quot;condition&quot; : &quot;New&quot;,
                &quot;price&quot; : {
                  &quot;listingPrice&quot; : {
                    &quot;amount&quot; : 12.0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;shippingPrice&quot; : {
                    &quot;amount&quot; : 0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;points&quot; : {
                    &quot;pointsNumber&quot; : 3,
                    &quot;pointsMonetaryValue&quot; : {
                      &quot;amount&quot; : 0.03,
                      &quot;currencyCode&quot; : &quot;USD&quot;
                    }
                  }
                }
              }
            } ]
          }
        }, {
          &quot;request&quot; : {
            &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
            &quot;sku&quot; : &quot;MY_UNIQUE_SKU&quot;
          },
          &quot;status&quot; : {
            &quot;statusCode&quot; : 200,
            &quot;reasonPhrase&quot; : &quot;Success&quot;
          },
          &quot;headers&quot; : { },
          &quot;body&quot; : {
            &quot;offerIdentifier&quot; : {
              &quot;asin&quot; : &quot;ASIN&quot;,
              &quot;sku&quot; : &quot;MY_UNIQUE_SKU&quot;,
              &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
              &quot;fulfillmentType&quot; : &quot;AFN&quot;,
              &quot;sellerId&quot; : &quot;MY_SELLER_ID&quot;
            },
            &quot;featuredOfferExpectedPriceResults&quot; : [ {
              &quot;resultStatus&quot; : &quot;NO_COMPETING_OFFERS&quot;,
              &quot;currentFeaturedOffer&quot; : {
                &quot;offerIdentifier&quot; : {
                  &quot;asin&quot; : &quot;ASIN&quot;,
                  &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
                  &quot;fulfillmentType&quot; : &quot;AFN&quot;,
                  &quot;sellerId&quot; : &quot;MY_SELLER_ID&quot;
                },
                &quot;condition&quot; : &quot;New&quot;,
                &quot;price&quot; : {
                  &quot;listingPrice&quot; : {
                    &quot;amount&quot; : 12.0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;shippingPrice&quot; : {
                    &quot;amount&quot; : 0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;points&quot; : {
                    &quot;pointsNumber&quot; : 3,
                    &quot;pointsMonetaryValue&quot; : {
                      &quot;amount&quot; : 0.03,
                      &quot;currencyCode&quot; : &quot;USD&quot;
                    }
                  }
                }
              }
            } ]
          }
        }, {
          &quot;request&quot; : {
            &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
            &quot;sku&quot; : &quot;MY_NONEXISTENT_SKU&quot;
          },
          &quot;status&quot; : {
            &quot;statusCode&quot; : 400,
            &quot;reasonPhrase&quot; : &quot;Client Error&quot;
          },
          &quot;headers&quot; : { },
          &quot;body&quot; : {
            &quot;errors&quot; : [ {
              &quot;code&quot; : &quot;INVALID_SKU&quot;,
              &quot;message&quot; : &quot;The requested SKU does not exist for the seller in the requested marketplace.&quot;
            } ]
          }
        } ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;requests&quot; : [ {
                &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
                &quot;sku&quot; : &quot;MY_SKU&quot;,
                &quot;method&quot; : &quot;GET&quot;,
                &quot;uri&quot; : &quot;/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice&quot;
              }, {
                &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
                &quot;sku&quot; : &quot;MY_UNIQUE_SKU&quot;,
                &quot;method&quot; : &quot;GET&quot;,
                &quot;uri&quot; : &quot;/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice&quot;
              }, {
                &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
                &quot;sku&quot; : &quot;INVALID_SKU&quot;,
                &quot;method&quot; : &quot;GET&quot;,
                &quot;uri&quot; : &quot;/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice&quot;
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;responses&quot; : [ {
          &quot;request&quot; : {
            &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
            &quot;sku&quot; : &quot;MY_SKU&quot;
          },
          &quot;status&quot; : {
            &quot;statusCode&quot; : 200,
            &quot;reasonPhrase&quot; : &quot;Success&quot;
          },
          &quot;headers&quot; : { },
          &quot;body&quot; : {
            &quot;offerIdentifier&quot; : {
              &quot;asin&quot; : &quot;ASIN&quot;,
              &quot;sku&quot; : &quot;MY_SKU&quot;,
              &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
              &quot;fulfillmentType&quot; : &quot;AFN&quot;,
              &quot;sellerId&quot; : &quot;MY_SELLER_ID&quot;
            },
            &quot;featuredOfferExpectedPriceResults&quot; : [ {
              &quot;featuredOfferExpectedPrice&quot; : {
                &quot;listingPrice&quot; : {
                  &quot;amount&quot; : 10.0,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;points&quot; : {
                  &quot;pointsNumber&quot; : 3,
                  &quot;pointsMonetaryValue&quot; : {
                    &quot;amount&quot; : 0.03,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  }
                }
              },
              &quot;resultStatus&quot; : &quot;VALID_FOEP&quot;,
              &quot;competingFeaturedOffer&quot; : {
                &quot;offerIdentifier&quot; : {
                  &quot;asin&quot; : &quot;ASIN&quot;,
                  &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
                  &quot;fulfillmentType&quot; : &quot;AFN&quot;,
                  &quot;sellerId&quot; : &quot;OTHER_SELLER_ID&quot;
                },
                &quot;condition&quot; : &quot;New&quot;,
                &quot;price&quot; : {
                  &quot;listingPrice&quot; : {
                    &quot;amount&quot; : 12.0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;shippingPrice&quot; : {
                    &quot;amount&quot; : 0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;points&quot; : {
                    &quot;pointsNumber&quot; : 3,
                    &quot;pointsMonetaryValue&quot; : {
                      &quot;amount&quot; : 0.03,
                      &quot;currencyCode&quot; : &quot;USD&quot;
                    }
                  }
                }
              },
              &quot;currentFeaturedOffer&quot; : {
                &quot;offerIdentifier&quot; : {
                  &quot;asin&quot; : &quot;ASIN&quot;,
                  &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
                  &quot;fulfillmentType&quot; : &quot;AFN&quot;,
                  &quot;sellerId&quot; : &quot;OTHER_SELLER_ID&quot;
                },
                &quot;condition&quot; : &quot;New&quot;,
                &quot;price&quot; : {
                  &quot;listingPrice&quot; : {
                    &quot;amount&quot; : 12.0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;shippingPrice&quot; : {
                    &quot;amount&quot; : 0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;points&quot; : {
                    &quot;pointsNumber&quot; : 3,
                    &quot;pointsMonetaryValue&quot; : {
                      &quot;amount&quot; : 0.03,
                      &quot;currencyCode&quot; : &quot;USD&quot;
                    }
                  }
                }
              }
            } ]
          }
        }, {
          &quot;request&quot; : {
            &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
            &quot;sku&quot; : &quot;MY_UNIQUE_SKU&quot;
          },
          &quot;status&quot; : {
            &quot;statusCode&quot; : 200,
            &quot;reasonPhrase&quot; : &quot;Success&quot;
          },
          &quot;headers&quot; : { },
          &quot;body&quot; : {
            &quot;offerIdentifier&quot; : {
              &quot;asin&quot; : &quot;ASIN&quot;,
              &quot;sku&quot; : &quot;MY_UNIQUE_SKU&quot;,
              &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
              &quot;fulfillmentType&quot; : &quot;AFN&quot;,
              &quot;sellerId&quot; : &quot;MY_SELLER_ID&quot;
            },
            &quot;featuredOfferExpectedPriceResults&quot; : [ {
              &quot;resultStatus&quot; : &quot;NO_COMPETING_OFFERS&quot;,
              &quot;currentFeaturedOffer&quot; : {
                &quot;offerIdentifier&quot; : {
                  &quot;asin&quot; : &quot;ASIN&quot;,
                  &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
                  &quot;fulfillmentType&quot; : &quot;AFN&quot;,
                  &quot;sellerId&quot; : &quot;MY_SELLER_ID&quot;
                },
                &quot;condition&quot; : &quot;New&quot;,
                &quot;price&quot; : {
                  &quot;listingPrice&quot; : {
                    &quot;amount&quot; : 12.0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;shippingPrice&quot; : {
                    &quot;amount&quot; : 0,
                    &quot;currencyCode&quot; : &quot;USD&quot;
                  },
                  &quot;points&quot; : {
                    &quot;pointsNumber&quot; : 3,
                    &quot;pointsMonetaryValue&quot; : {
                      &quot;amount&quot; : 0.03,
                      &quot;currencyCode&quot; : &quot;USD&quot;
                    }
                  }
                }
              }
            } ]
          }
        }, {
          &quot;request&quot; : {
            &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
            &quot;sku&quot; : &quot;MY_NONEXISTENT_SKU&quot;
          },
          &quot;status&quot; : {
            &quot;statusCode&quot; : 400,
            &quot;reasonPhrase&quot; : &quot;Client Error&quot;
          },
          &quot;headers&quot; : { },
          &quot;body&quot; : {
            &quot;errors&quot; : [ {
              &quot;code&quot; : &quot;INVALID_SKU&quot;,
              &quot;message&quot; : &quot;The requested SKU does not exist for the seller in the requested marketplace.&quot;
            } ]
          }
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getFeaturedOfferExpectedPriceBatch'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ProductPricingApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getFeaturedOfferExpectedPriceBatchWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getFeaturedOfferExpectedPriceBatch_400
     */
    public function testGetFeaturedOfferExpectedPriceBatch400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetFeaturedOfferExpectedPriceBatch400', 'ProductPricingApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/Errors&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;requests&quot; : [ {
                &quot;marketplaceId&quot; : &quot;MARKETPLACE_ID&quot;,
                &quot;sku&quot; : &quot;INVALID_SKU&quot;,
                &quot;method&quot; : &quot;GET&quot;,
                &quot;uri&quot; : &quot;/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice&quot;
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;INVALID_SKU&quot;,
          &quot;message&quot; : &quot;The requested SKU does not exist for the seller in the requested marketplace.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getFeaturedOfferExpectedPriceBatch'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ProductPricingApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getFeaturedOfferExpectedPriceBatchWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getFeaturedOfferExpectedPriceBatch_401
     */
    public function testGetFeaturedOfferExpectedPriceBatch401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getFeaturedOfferExpectedPriceBatch_403
     */
    public function testGetFeaturedOfferExpectedPriceBatch403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getFeaturedOfferExpectedPriceBatch_404
     */
    public function testGetFeaturedOfferExpectedPriceBatch404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getFeaturedOfferExpectedPriceBatch_429
     */
    public function testGetFeaturedOfferExpectedPriceBatch429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getFeaturedOfferExpectedPriceBatch_500
     */
    public function testGetFeaturedOfferExpectedPriceBatch500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getFeaturedOfferExpectedPriceBatch_503
     */
    public function testGetFeaturedOfferExpectedPriceBatch503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
}
