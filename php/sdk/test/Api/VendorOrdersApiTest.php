<?php
/**
 * VendorOrdersApiTest
 * PHP version 8.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\ApiException;
use OpenAPI\Client\Api\vendor\orders\VendorOrdersApi;
use OpenAPI\Client\ObjectSerializer;

/**
 * VendorOrdersApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VendorOrdersApiTest extends BaseTestCase
{
    private VendorOrdersApi $apiInstance;
    public function setUp(): void
    {
        parent::setUp();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('VendorOrdersApi', $this->getName());
        $this->apiInstance = new VendorOrdersApi($this->config, null, null);
        // Change Time Format if it requires
        $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('VendorOrdersApi');
        if ($specificTimeFormat) {
            ObjectSerializer::setDateTimeFormat($specificTimeFormat);
        }
    }

    /**
     * Test case for getPurchaseOrder_200
     */
    public function testGetPurchaseOrder200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPurchaseOrder200', 'VendorOrdersApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetPurchaseOrderResponse&quot;
      },
      &quot;example&quot; : {
        &quot;payload&quot; : {
          &quot;purchaseOrderNumber&quot; : &quot;TestPO3&quot;,
          &quot;purchaseOrderState&quot; : &quot;New&quot;,
          &quot;orderDetails&quot; : {
            &quot;purchaseOrderDate&quot; : &quot;2020-05-26T18:05:23Z&quot;,
            &quot;purchaseOrderStateChangedDate&quot; : &quot;2020-05-26T18:05:23Z&quot;,
            &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
            &quot;paymentMethod&quot; : &quot;Invoice&quot;,
            &quot;buyingParty&quot; : {
              &quot;partyId&quot; : &quot;ABCF&quot;
            },
            &quot;sellingParty&quot; : {
              &quot;partyId&quot; : &quot;API01&quot;
            },
            &quot;shipToParty&quot; : {
              &quot;partyId&quot; : &quot;ABCF&quot;
            },
            &quot;billToParty&quot; : {
              &quot;partyId&quot; : &quot;ABCF&quot;
            },
            &quot;shipWindow&quot; : &quot;2020-05-26T07:00:00Z--2020-06-03T07:00:00Z&quot;,
            &quot;items&quot; : [ {
              &quot;itemSequenceNumber&quot; : &quot;1&quot;,
              &quot;amazonProductIdentifier&quot; : &quot;B01XYZ3Z02&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;8806093095125&quot;,
              &quot;orderedQuantity&quot; : {
                &quot;amount&quot; : 10,
                &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                &quot;unitSize&quot; : 1
              },
              &quot;isBackOrderAllowed&quot; : true,
              &quot;netCost&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;50&quot;
              },
              &quot;listPrice&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;50&quot;
              }
            } ]
          }
        }
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;purchaseOrderNumber&quot; : {
            &quot;value&quot; : &quot;4Z32PABC&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;purchaseOrderNumber&quot; : &quot;4Z32PABC&quot;,
          &quot;purchaseOrderState&quot; : &quot;Closed&quot;,
          &quot;orderDetails&quot; : {
            &quot;purchaseOrderDate&quot; : &quot;2019-07-26T11:10:00Z&quot;,
            &quot;purchaseOrderStateChangedDate&quot; : &quot;2019-08-25T19:29:23Z&quot;,
            &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
            &quot;paymentMethod&quot; : &quot;Invoice&quot;,
            &quot;buyingParty&quot; : {
              &quot;partyId&quot; : &quot;ABCD&quot;
            },
            &quot;sellingParty&quot; : {
              &quot;partyId&quot; : &quot;999US&quot;
            },
            &quot;shipToParty&quot; : {
              &quot;partyId&quot; : &quot;ABCD&quot;
            },
            &quot;billToParty&quot; : {
              &quot;partyId&quot; : &quot;ABCD&quot;
            },
            &quot;shipWindow&quot; : &quot;2019-07-26T07:00:00Z--2019-08-03T07:00:00Z&quot;,
            &quot;items&quot; : [ {
              &quot;itemSequenceNumber&quot; : &quot;1&quot;,
              &quot;amazonProductIdentifier&quot; : &quot;B0748G1ABC&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;0017817748000&quot;,
              &quot;orderedQuantity&quot; : {
                &quot;amount&quot; : 37,
                &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                &quot;unitSize&quot; : 1
              },
              &quot;isBackOrderAllowed&quot; : false,
              &quot;netCost&quot; : {
                &quot;amount&quot; : &quot;140&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              },
              &quot;listPrice&quot; : {
                &quot;amount&quot; : &quot;140&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              }
            }, {
              &quot;itemSequenceNumber&quot; : &quot;2&quot;,
              &quot;amazonProductIdentifier&quot; : &quot;B0748JMABC&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;0017817748000&quot;,
              &quot;orderedQuantity&quot; : {
                &quot;amount&quot; : 24,
                &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                &quot;unitSize&quot; : 1
              },
              &quot;isBackOrderAllowed&quot; : false,
              &quot;netCost&quot; : {
                &quot;amount&quot; : &quot;15.62&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              },
              &quot;listPrice&quot; : {
                &quot;amount&quot; : &quot;15.62&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              }
            }, {
              &quot;itemSequenceNumber&quot; : &quot;3&quot;,
              &quot;amazonProductIdentifier&quot; : &quot;B076SDSABC&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;0017817755000&quot;,
              &quot;orderedQuantity&quot; : {
                &quot;amount&quot; : 1,
                &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                &quot;unitSize&quot; : 1
              },
              &quot;isBackOrderAllowed&quot; : false,
              &quot;netCost&quot; : {
                &quot;amount&quot; : &quot;110.00&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              },
              &quot;listPrice&quot; : {
                &quot;amount&quot; : &quot;110.00&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              }
            } ]
          }
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : { }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;purchaseOrderNumber&quot; : &quot;mock-purchaseOrderNumber&quot;,
          &quot;orderDetails&quot; : {
            &quot;purchaseOrderDate&quot; : &quot;2019-07-26T11:10:00Z&quot;,
            &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
            &quot;paymentMethod&quot; : &quot;Invoice&quot;,
            &quot;buyingParty&quot; : {
              &quot;partyId&quot; : &quot;ABCD&quot;
            },
            &quot;sellingParty&quot; : {
              &quot;partyId&quot; : &quot;999US&quot;
            },
            &quot;shipToParty&quot; : {
              &quot;partyId&quot; : &quot;ABCD&quot;
            },
            &quot;billToParty&quot; : {
              &quot;partyId&quot; : &quot;ABCD&quot;
            },
            &quot;items&quot; : [ {
              &quot;itemSequenceNumber&quot; : &quot;00001&quot;,
              &quot;amazonProductIdentifier&quot; : &quot;B0748G1ABC&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;0017817748000&quot;,
              &quot;orderedQuantity&quot; : {
                &quot;amount&quot; : 37,
                &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                &quot;unitSize&quot; : 1
              },
              &quot;isBackOrderAllowed&quot; : false,
              &quot;netCost&quot; : {
                &quot;amount&quot; : &quot;14162.00&quot;,
                &quot;currencyCode&quot; : &quot;INR&quot;
              }
            }, {
              &quot;itemSequenceNumber&quot; : &quot;00002&quot;,
              &quot;amazonProductIdentifier&quot; : &quot;B0748JMABC&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;0017817748000&quot;,
              &quot;orderedQuantity&quot; : {
                &quot;amount&quot; : 24,
                &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                &quot;unitSize&quot; : 1
              },
              &quot;isBackOrderAllowed&quot; : false,
              &quot;netCost&quot; : {
                &quot;amount&quot; : &quot;14162.00&quot;,
                &quot;currencyCode&quot; : &quot;INR&quot;
              }
            }, {
              &quot;itemSequenceNumber&quot; : &quot;00003&quot;,
              &quot;amazonProductIdentifier&quot; : &quot;B076SDSABC&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;0017817755000&quot;,
              &quot;orderedQuantity&quot; : {
                &quot;amount&quot; : 1,
                &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                &quot;unitSize&quot; : 1
              },
              &quot;isBackOrderAllowed&quot; : false,
              &quot;netCost&quot; : {
                &quot;amount&quot; : &quot;14162.00&quot;,
                &quot;currencyCode&quot; : &quot;INR&quot;
              }
            } ]
          }
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getPurchaseOrder'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('VendorOrdersApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPurchaseOrderWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPurchaseOrder_400
     */
    public function testGetPurchaseOrder400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPurchaseOrder400', 'VendorOrdersApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetPurchaseOrderResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;purchaseOrderNumber&quot; : {
            &quot;value&quot; : &quot;null&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidRequest&quot;,
          &quot;message&quot; : &quot;Request is missing or has invalid parameters&quot;,
          &quot;details&quot; : &quot;purchaseOrderNumber cannot be null&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getPurchaseOrder'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('VendorOrdersApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPurchaseOrderWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPurchaseOrder_401
     */
    public function testGetPurchaseOrder401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrder_403
     */
    public function testGetPurchaseOrder403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrder_404
     */
    public function testGetPurchaseOrder404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrder_415
     */
    public function testGetPurchaseOrder415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrder_429
     */
    public function testGetPurchaseOrder429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrder_500
     */
    public function testGetPurchaseOrder500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrder_503
     */
    public function testGetPurchaseOrder503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrders_200
     */
    public function testGetPurchaseOrders200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPurchaseOrders200', 'VendorOrdersApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetPurchaseOrdersResponse&quot;
      }
    },
    &quot;payload&quot; : {
      &quot;example&quot; : {
        &quot;pagination&quot; : {
          &quot;nextToken&quot; : &quot;MDAwMDAwMDAwAQ&#x3D;&#x3D;&quot;
        },
        &quot;orders&quot; : [ {
          &quot;purchaseOrderNumber&quot; : &quot;L8266355&quot;,
          &quot;purchaseOrderState&quot; : &quot;New&quot;,
          &quot;orderDetails&quot; : {
            &quot;purchaseOrderDate&quot; : &quot;2019-05-23T10:00:00Z&quot;,
            &quot;purchaseOrderChangedDate&quot; : &quot;2019-05-24T16:05:00Z&quot;,
            &quot;purchaseOrderStateChangedDate&quot; : &quot;2019-05-23T10:00:00Z&quot;,
            &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
            &quot;importDetails&quot; : {
              &quot;methodOfPayment&quot; : &quot;PaidByBuyer&quot;,
              &quot;internationalCommercialTerms&quot; : &quot;ExWorks&quot;,
              &quot;portOfDelivery&quot; : &quot;YANTIAN, CHINA&quot;,
              &quot;importContainers&quot; : &quot;1-40&#39;HC, 1-20&#39;&quot;,
              &quot;shippingInstructions&quot; : &quot;PREFERENCE IS PALLET-LOAD, BUT IF CONTAINERS ARE FLOOR-LOADED, THEN PLEASE DO CLAMP-LOAD OR STRAIGHT FLOOR-LOAD. DO NOT USE SLIP SHEET FOR THIS FC DESTINATION. PAYMENT TERMS ARE PER CONTAINER.&quot;
            },
            &quot;dealCode&quot; : &quot;BTS&quot;,
            &quot;paymentMethod&quot; : &quot;Invoice&quot;,
            &quot;buyingParty&quot; : {
              &quot;partyId&quot; : &quot;ABCD&quot;,
              &quot;address&quot; : {
                &quot;name&quot; : &quot;APPARIO RETAIL PVT.LTD.&quot;,
                &quot;addressLine1&quot; : &quot;3APPARIO RETAIL PVT.LTD.- C/O. AMAZON SELLER SERVIC&quot;,
                &quot;city&quot; : &quot;Siddhapudur&quot;,
                &quot;stateOrRegion&quot; : &quot;Tamil Nadu&quot;,
                &quot;postalCode&quot; : &quot;641044&quot;,
                &quot;countryCode&quot; : &quot;IN&quot;,
                &quot;phone&quot; : &quot;206-266-8000&quot;
              }
            },
            &quot;sellingParty&quot; : {
              &quot;partyId&quot; : &quot;TEST1&quot;
            },
            &quot;shipToParty&quot; : {
              &quot;partyId&quot; : &quot;ABCD&quot;,
              &quot;address&quot; : {
                &quot;name&quot; : &quot;APPARIO RETAIL PVT.LTD.&quot;,
                &quot;addressLine1&quot; : &quot;3APPARIO RETAIL PVT.LTD.- C/O. AMAZON SELLER SERVIC&quot;,
                &quot;city&quot; : &quot;Siddhapudur&quot;,
                &quot;stateOrRegion&quot; : &quot;Tamil Nadu&quot;,
                &quot;postalCode&quot; : &quot;641044&quot;,
                &quot;countryCode&quot; : &quot;IN&quot;,
                &quot;phone&quot; : &quot;206-266-8000&quot;
              }
            },
            &quot;billToParty&quot; : {
              &quot;partyId&quot; : &quot;ABCD&quot;,
              &quot;address&quot; : {
                &quot;name&quot; : &quot;APPARIO RETAIL PVT.LTD.&quot;,
                &quot;addressLine1&quot; : &quot;3APPARIO RETAIL PVT.LTD.- C/O. AMAZON SELLER SERVIC&quot;,
                &quot;city&quot; : &quot;Siddhapudur&quot;,
                &quot;stateOrRegion&quot; : &quot;Tamil Nadu&quot;,
                &quot;postalCode&quot; : &quot;641044&quot;,
                &quot;countryCode&quot; : &quot;IN&quot;,
                &quot;phone&quot; : &quot;206-266-8000&quot;
              }
            },
            &quot;taxInfo&quot; : {
              &quot;taxType&quot; : &quot;GST&quot;,
              &quot;taxRegistrationNumber&quot; : &quot;098522PCA6346DTEDD&quot;
            }
          },
          &quot;deliveryWindow&quot; : &quot;2019-05-23T10:00:00Z--2019-05-30T10:00:00Z&quot;,
          &quot;items&quot; : [ {
            &quot;itemSequenceNumber&quot; : &quot;1&quot;,
            &quot;amazonProductIdentifier&quot; : &quot;ABC123434&quot;,
            &quot;vendorProductIdentifier&quot; : &quot;028877454078&quot;,
            &quot;orderedQuantity&quot; : {
              &quot;amount&quot; : 2,
              &quot;unitOfMeasure&quot; : &quot;Cases&quot;,
              &quot;unitSize&quot; : 10
            },
            &quot;isBackOrderAllowed&quot; : true,
            &quot;netCost&quot; : {
              &quot;amount&quot; : &quot;1800&quot;,
              &quot;currencyCode&quot; : &quot;INR&quot;,
              &quot;unitOfMeasure&quot; : &quot;POUNDS&quot;
            },
            &quot;listPrice&quot; : {
              &quot;amount&quot; : &quot;2000&quot;,
              &quot;currencyCode&quot; : &quot;INR&quot;,
              &quot;unitOfMeasure&quot; : &quot;POUNDS&quot;
            }
          } ]
        } ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;createdBefore&quot; : {
            &quot;value&quot; : &quot;2019-09-21T00:00:00&quot;
          },
          &quot;createdAfter&quot; : {
            &quot;value&quot; : &quot;2019-08-20T14:00:00&quot;
          },
          &quot;includeDetails&quot; : {
            &quot;value&quot; : &quot;true&quot;
          },
          &quot;limit&quot; : {
            &quot;value&quot; : 2
          },
          &quot;sortOrder&quot; : {
            &quot;value&quot; : &quot;DESC&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;pagination&quot; : {
            &quot;nextToken&quot; : &quot;MDAwMDAwMDAwMQ&#x3D;&#x3D;&quot;
          },
          &quot;orders&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;2JK3S9VC&quot;,
            &quot;purchaseOrderState&quot; : &quot;New&quot;,
            &quot;orderDetails&quot; : {
              &quot;purchaseOrderDate&quot; : &quot;2019-08-20T15:51:00Z&quot;,
              &quot;purchaseOrderChangedDate&quot; : &quot;2019-08-22T16:05:00Z&quot;,
              &quot;purchaseOrderStateChangedDate&quot; : &quot;2019-08-20T15:51:00Z&quot;,
              &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
              &quot;paymentMethod&quot; : &quot;Invoice&quot;,
              &quot;buyingParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;sellingParty&quot; : {
                &quot;partyId&quot; : &quot;999US&quot;
              },
              &quot;shipToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;billToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;shipWindow&quot; : &quot;2019-08-21T07:00:00Z--2019-08-27T07:00:00Z&quot;,
              &quot;items&quot; : [ {
                &quot;itemSequenceNumber&quot; : &quot;1&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B07DFVDRAB&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806098286500&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 1,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : false,
                &quot;netCost&quot; : {
                  &quot;amount&quot; : &quot;346.27&quot;,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;amount&quot; : &quot;346.27&quot;,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                }
              }, {
                &quot;itemSequenceNumber&quot; : &quot;2&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B07DFYF5AB&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806098286123&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 2,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : false,
                &quot;netCost&quot; : {
                  &quot;amount&quot; : &quot;229.47&quot;,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;amount&quot; : &quot;229.47&quot;,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                }
              }, {
                &quot;itemSequenceNumber&quot; : &quot;3&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B07MC84QAB&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806098095123&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 13,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : false,
                &quot;netCost&quot; : {
                  &quot;amount&quot; : &quot;412.71&quot;,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;amount&quot; : &quot;412.71&quot;,
                  &quot;currencyCode&quot; : &quot;USD&quot;
                }
              } ]
            }
          }, {
            &quot;purchaseOrderNumber&quot; : &quot;3TRD2IAB&quot;,
            &quot;purchaseOrderState&quot; : &quot;New&quot;,
            &quot;orderDetails&quot; : {
              &quot;purchaseOrderDate&quot; : &quot;2019-08-20T16:29:00Z&quot;,
              &quot;purchaseOrderChangedDate&quot; : &quot;2019-08-20T16:50:00Z&quot;,
              &quot;purchaseOrderStateChangedDate&quot; : &quot;2019-08-20T16:29:00Z&quot;,
              &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
              &quot;importDetails&quot; : {
                &quot;importContainers&quot; : &quot;2-20&#39;HC,1-45&#39;,1-45&#39;HC&quot;,
                &quot;internationalCommercialTerms&quot; : &quot;FreeOnBoard&quot;,
                &quot;methodOfPayment&quot; : &quot;PrepaidBySeller&quot;,
                &quot;portOfDelivery&quot; : &quot;INDIA&quot;,
                &quot;shippingInstructions&quot; : &quot;PREFERENCE IS PALLET-LOAD, BUT IF CONTAINERS ARE FLOOR-LOADED&quot;
              },
              &quot;paymentMethod&quot; : &quot;Invoice&quot;,
              &quot;buyingParty&quot; : {
                &quot;partyId&quot; : &quot;ABC1&quot;
              },
              &quot;sellingParty&quot; : {
                &quot;partyId&quot; : &quot;998US&quot;
              },
              &quot;shipToParty&quot; : {
                &quot;partyId&quot; : &quot;ABC1&quot;
              },
              &quot;billToParty&quot; : {
                &quot;partyId&quot; : &quot;ABC1&quot;
              },
              &quot;shipWindow&quot; : &quot;2019-08-21T07:00:00Z--2019-08-27T07:00:00Z&quot;,
              &quot;items&quot; : [ {
                &quot;itemSequenceNumber&quot; : &quot;1&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B01LNRIIAB&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;B01LNRIIAB&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 5,
                  &quot;unitOfMeasure&quot; : &quot;CASES&quot;,
                  &quot;unitSize&quot; : 10
                },
                &quot;isBackOrderAllowed&quot; : true,
                &quot;netCost&quot; : {
                  &quot;amount&quot; : &quot;94.97&quot;,
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;unitOfMeasure&quot; : &quot;POUNDS&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;amount&quot; : &quot;94.97&quot;,
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;unitOfMeasure&quot; : &quot;POUNDS&quot;
                }
              } ]
            }
          } ]
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;createdBefore&quot; : {
            &quot;value&quot; : &quot;2019-08-21T00:00:00&quot;
          },
          &quot;createdAfter&quot; : {
            &quot;value&quot; : &quot;2019-08-20T14:00:00&quot;
          },
          &quot;includeDetails&quot; : {
            &quot;value&quot; : &quot;false&quot;
          },
          &quot;sortOrder&quot; : {
            &quot;value&quot; : &quot;DESC&quot;
          },
          &quot;nextToken&quot; : {
            &quot;value&quot; : &quot;MDAwMDAwMDAwMQ&#x3D;&#x3D;&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;orders&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;2JK3S9XY&quot;,
            &quot;purchaseOrderState&quot; : &quot;New&quot;
          }, {
            &quot;purchaseOrderNumber&quot; : &quot;3TRD2ABC&quot;,
            &quot;purchaseOrderState&quot; : &quot;Acknowledged&quot;
          } ]
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;changedBefore&quot; : {
            &quot;value&quot; : &quot;2020-05-27T13:00:00&quot;
          },
          &quot;changedAfter&quot; : {
            &quot;value&quot; : &quot;2020-05-25T13:00:00&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;orders&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;TestPO2&quot;,
            &quot;purchaseOrderState&quot; : &quot;New&quot;,
            &quot;orderDetails&quot; : {
              &quot;purchaseOrderDate&quot; : &quot;2020-05-25T19:29:23Z&quot;,
              &quot;purchaseOrderChangedDate&quot; : &quot;2020-05-26T16:00:00Z&quot;,
              &quot;purchaseOrderStateChangedDate&quot; : &quot;2020-05-25T19:29:23Z&quot;,
              &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
              &quot;paymentMethod&quot; : &quot;Invoice&quot;,
              &quot;buyingParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;sellingParty&quot; : {
                &quot;partyId&quot; : &quot;API01&quot;
              },
              &quot;shipToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;billToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;shipWindow&quot; : &quot;2020-05-26T07:00:00Z--2020-05-29T07:00:00Z&quot;,
              &quot;items&quot; : [ {
                &quot;itemSequenceNumber&quot; : &quot;1&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B01XYZ3Z00&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806093095123&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 20,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : true,
                &quot;netCost&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;70&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;70&quot;
                }
              } ]
            }
          }, {
            &quot;purchaseOrderNumber&quot; : &quot;TestPO1&quot;,
            &quot;purchaseOrderState&quot; : &quot;Acknowledged&quot;,
            &quot;orderDetails&quot; : {
              &quot;purchaseOrderDate&quot; : &quot;2020-05-26T18:49:20Z&quot;,
              &quot;purchaseOrderChangedDate&quot; : &quot;2020-05-27T06:30:00Z&quot;,
              &quot;purchaseOrderStateChangedDate&quot; : &quot;2020-05-26T19:10:00Z&quot;,
              &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
              &quot;paymentMethod&quot; : &quot;Invoice&quot;,
              &quot;buyingParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;sellingParty&quot; : {
                &quot;partyId&quot; : &quot;999US&quot;
              },
              &quot;shipToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;billToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;shipWindow&quot; : &quot;2020-05-27T07:00:00Z--2020-05-30T07:00:00Z&quot;,
              &quot;items&quot; : [ {
                &quot;itemSequenceNumber&quot; : &quot;1&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B01XYZ3Z00&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806093095123&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : true,
                &quot;netCost&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;70&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;70&quot;
                }
              }, {
                &quot;itemSequenceNumber&quot; : &quot;2&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B01XYZ3Z01&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806098095124&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 10,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : true,
                &quot;netCost&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;15&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;15&quot;
                }
              } ]
            }
          } ]
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;changedBefore&quot; : {
            &quot;value&quot; : &quot;2020-05-25T13:00:00&quot;
          },
          &quot;changedAfter&quot; : {
            &quot;value&quot; : &quot;2020-05-27T13:00:00&quot;
          },
          &quot;poItemState&quot; : {
            &quot;value&quot; : &quot;Cancelled&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;orders&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;TestPO1&quot;,
            &quot;purchaseOrderState&quot; : &quot;Acknowledged&quot;,
            &quot;orderDetails&quot; : {
              &quot;purchaseOrderDate&quot; : &quot;2020-05-26T18:49:20Z&quot;,
              &quot;purchaseOrderChangedDate&quot; : &quot;2020-05-27T06:30:00Z&quot;,
              &quot;purchaseOrderStateChangedDate&quot; : &quot;2020-05-26T19:10:00Z&quot;,
              &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
              &quot;paymentMethod&quot; : &quot;Invoice&quot;,
              &quot;buyingParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;sellingParty&quot; : {
                &quot;partyId&quot; : &quot;999US&quot;
              },
              &quot;shipToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;billToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;shipWindow&quot; : &quot;2020-05-27T07:00:00Z--2020-05-29T07:00:00Z&quot;,
              &quot;items&quot; : [ {
                &quot;itemSequenceNumber&quot; : &quot;1&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B01XYZ3Z00&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806098095123&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : true,
                &quot;netCost&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;70&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;70&quot;
                }
              }, {
                &quot;itemSequenceNumber&quot; : &quot;2&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B01XYZ3Z01&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806098095124&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 10,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : true,
                &quot;netCost&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;15&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;15&quot;
                }
              } ]
            }
          } ]
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;createdBefore&quot; : {
            &quot;value&quot; : &quot;2020-05-26T13:00:00&quot;
          },
          &quot;createdAfter&quot; : {
            &quot;value&quot; : &quot;2020-05-25T13:00:00&quot;
          },
          &quot;isPOChanged&quot; : {
            &quot;value&quot; : &quot;true&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;orders&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;TestPO2&quot;,
            &quot;purchaseOrderState&quot; : &quot;New&quot;,
            &quot;orderDetails&quot; : {
              &quot;purchaseOrderDate&quot; : &quot;2020-05-25T19:29:23Z&quot;,
              &quot;purchaseOrderChangedDate&quot; : &quot;2020-05-26T16:00:00Z&quot;,
              &quot;purchaseOrderStateChangedDate&quot; : &quot;2020-05-25T19:29:23Z&quot;,
              &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
              &quot;paymentMethod&quot; : &quot;Invoice&quot;,
              &quot;buyingParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;sellingParty&quot; : {
                &quot;partyId&quot; : &quot;API01&quot;
              },
              &quot;shipToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;billToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;shipWindow&quot; : &quot;2020-05-26T07:00:00Z--2020-05-29T07:00:00Z&quot;,
              &quot;items&quot; : [ {
                &quot;itemSequenceNumber&quot; : &quot;1&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B01XYZ3Z00&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806093095123&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 20,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : true,
                &quot;netCost&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;70&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;70&quot;
                }
              } ]
            }
          } ]
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;createdBefore&quot; : {
            &quot;value&quot; : &quot;2020-05-27T13:00:00&quot;
          },
          &quot;createdAfter&quot; : {
            &quot;value&quot; : &quot;2020-05-25T13:00:00&quot;
          },
          &quot;purchaseOrderState&quot; : {
            &quot;value&quot; : &quot;New&quot;
          },
          &quot;orderingVendorCode&quot; : {
            &quot;value&quot; : &quot;API01&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;orders&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;TestPO2&quot;,
            &quot;purchaseOrderState&quot; : &quot;New&quot;,
            &quot;orderDetails&quot; : {
              &quot;purchaseOrderDate&quot; : &quot;2020-05-25T19:29:23Z&quot;,
              &quot;purchaseOrderChangedDate&quot; : &quot;2020-05-26T06:00:00Z&quot;,
              &quot;purchaseOrderStateChangedDate&quot; : &quot;2020-05-25T19:29:23Z&quot;,
              &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
              &quot;paymentMethod&quot; : &quot;Invoice&quot;,
              &quot;buyingParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;sellingParty&quot; : {
                &quot;partyId&quot; : &quot;API01&quot;
              },
              &quot;shipToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;billToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;shipWindow&quot; : &quot;2020-05-26T07:00:00Z--2020-05-29T07:00:00Z&quot;,
              &quot;items&quot; : [ {
                &quot;itemSequenceNumber&quot; : &quot;1&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B01XYZ3Z00&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806093095123&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 20,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : true,
                &quot;netCost&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;70&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;70&quot;
                }
              } ]
            }
          }, {
            &quot;purchaseOrderNumber&quot; : &quot;TestPO3&quot;,
            &quot;purchaseOrderState&quot; : &quot;New&quot;,
            &quot;orderDetails&quot; : {
              &quot;purchaseOrderDate&quot; : &quot;2020-05-26T18:05:23Z&quot;,
              &quot;purchaseOrderStateChangedDate&quot; : &quot;2020-05-26T18:05:23Z&quot;,
              &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
              &quot;paymentMethod&quot; : &quot;Invoice&quot;,
              &quot;buyingParty&quot; : {
                &quot;partyId&quot; : &quot;ABCF&quot;
              },
              &quot;sellingParty&quot; : {
                &quot;partyId&quot; : &quot;API01&quot;
              },
              &quot;shipToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCF&quot;
              },
              &quot;billToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCF&quot;
              },
              &quot;shipWindow&quot; : &quot;2020-05-26T07:00:00Z--2020-06-03T07:00:00Z&quot;,
              &quot;items&quot; : [ {
                &quot;itemSequenceNumber&quot; : &quot;1&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B01XYZ3Z02&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806093095125&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 10,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : true,
                &quot;netCost&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;50&quot;
                },
                &quot;listPrice&quot; : {
                  &quot;currencyCode&quot; : &quot;USD&quot;,
                  &quot;amount&quot; : &quot;50&quot;
                }
              } ]
            }
          } ]
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : { }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;pagination&quot; : {
            &quot;nextToken&quot; : &quot;MDAwMDAwMDAwMQ&#x3D;&#x3D;&quot;
          },
          &quot;orders&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;mock-purchaseOrderNumber1&quot;,
            &quot;orderDetails&quot; : {
              &quot;purchaseOrderDate&quot; : &quot;2019-08-14T13:51:00Z&quot;,
              &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
              &quot;paymentMethod&quot; : &quot;Invoice&quot;,
              &quot;buyingParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;sellingParty&quot; : {
                &quot;partyId&quot; : &quot;999US&quot;
              },
              &quot;shipToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;billToParty&quot; : {
                &quot;partyId&quot; : &quot;ABCD&quot;
              },
              &quot;items&quot; : [ {
                &quot;itemSequenceNumber&quot; : &quot;00001&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B07DFVDRAB&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806098286500&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 1,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : false,
                &quot;listPrice&quot; : {
                  &quot;amount&quot; : &quot;34366.27&quot;,
                  &quot;currencyCode&quot; : &quot;INR&quot;
                }
              }, {
                &quot;itemSequenceNumber&quot; : &quot;00002&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B07DFYF5AB&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806098286123&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 2,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : false,
                &quot;listPrice&quot; : {
                  &quot;amount&quot; : &quot;22798.47&quot;,
                  &quot;currencyCode&quot; : &quot;INR&quot;
                }
              }, {
                &quot;itemSequenceNumber&quot; : &quot;00003&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B07MC84QAB&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;8806098095123&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 13,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;isBackOrderAllowed&quot; : false,
                &quot;listPrice&quot; : {
                  &quot;amount&quot; : &quot;4362.71&quot;,
                  &quot;currencyCode&quot; : &quot;INR&quot;
                }
              } ]
            }
          }, {
            &quot;purchaseOrderNumber&quot; : &quot;mock-purchaseOrderNumber2&quot;,
            &quot;orderDetails&quot; : {
              &quot;purchaseOrderDate&quot; : &quot;2019-08-13T06:29:00Z&quot;,
              &quot;purchaseOrderType&quot; : &quot;RegularOrder&quot;,
              &quot;importDetails&quot; : {
                &quot;importContainers&quot; : &quot;2-20&#39;HC,1-45&#39;,1-45&#39;HC&quot;,
                &quot;internationalCommercialTerms&quot; : &quot;FreeOnBoard&quot;,
                &quot;methodOfPayment&quot; : &quot;PrepaidBySeller&quot;,
                &quot;portOfDelivery&quot; : &quot;INDIA&quot;,
                &quot;shippingInstructions&quot; : &quot;PREFERENCE IS PALLET-LOAD, BUT IF CONTAINERS ARE FLOOR-LOADED&quot;
              },
              &quot;paymentMethod&quot; : &quot;Invoice&quot;,
              &quot;buyingParty&quot; : {
                &quot;partyId&quot; : &quot;ABC1&quot;
              },
              &quot;sellingParty&quot; : {
                &quot;partyId&quot; : &quot;999US&quot;
              },
              &quot;shipToParty&quot; : {
                &quot;partyId&quot; : &quot;ABC1&quot;
              },
              &quot;billToParty&quot; : {
                &quot;partyId&quot; : &quot;ABC1&quot;
              },
              &quot;items&quot; : [ {
                &quot;itemSequenceNumber&quot; : &quot;00001&quot;,
                &quot;amazonProductIdentifier&quot; : &quot;B01LNRIIAB&quot;,
                &quot;vendorProductIdentifier&quot; : &quot;B01LNRIIAB&quot;,
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 24,
                  &quot;unitOfMeasure&quot; : &quot;Cases&quot;,
                  &quot;unitSize&quot; : 5
                },
                &quot;isBackOrderAllowed&quot; : true,
                &quot;netCost&quot; : {
                  &quot;amount&quot; : &quot;94.97&quot;,
                  &quot;currencyCode&quot; : &quot;INR&quot;,
                  &quot;unitOfMeasure&quot; : &quot;POUNDS&quot;
                }
              } ]
            }
          } ]
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getPurchaseOrders'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('VendorOrdersApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPurchaseOrdersWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPurchaseOrders_400
     */
    public function testGetPurchaseOrders400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPurchaseOrders400', 'VendorOrdersApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetPurchaseOrdersResponse&quot;
      },
      &quot;example&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidRequest&quot;,
          &quot;message&quot; : &quot;The request is invalid.&quot;
        } ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;createdBefore&quot; : {
            &quot;value&quot; : &quot;2019-09-2100:00:00&quot;
          },
          &quot;createdAfter&quot; : {
            &quot;value&quot; : &quot;2019-08-20T14:00:00&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidRequest&quot;,
          &quot;message&quot; : &quot;The request is invalid.&quot;,
          &quot;details&quot; : &quot;&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getPurchaseOrders'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('VendorOrdersApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPurchaseOrdersWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPurchaseOrders_403
     */
    public function testGetPurchaseOrders403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrders_404
     */
    public function testGetPurchaseOrders404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrders_415
     */
    public function testGetPurchaseOrders415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrders_429
     */
    public function testGetPurchaseOrders429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrders_500
     */
    public function testGetPurchaseOrders500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrders_503
     */
    public function testGetPurchaseOrders503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrdersStatus_200
     */
    public function testGetPurchaseOrdersStatus200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPurchaseOrdersStatus200', 'VendorOrdersApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetPurchaseOrdersStatusResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;createdBefore&quot; : {
            &quot;value&quot; : &quot;2020-08-18T00:00:00&quot;
          },
          &quot;createdAfter&quot; : {
            &quot;value&quot; : &quot;2020-08-17T14:00:00&quot;
          },
          &quot;limit&quot; : {
            &quot;value&quot; : 1
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;pagination&quot; : {
            &quot;nextToken&quot; : &quot;MDAwMDAwMDAwMZ&#x3D;&#x3D;&quot;
          },
          &quot;ordersStatus&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;2JK3S9VB&quot;,
            &quot;purchaseOrderStatus&quot; : &quot;OPEN&quot;,
            &quot;purchaseOrderDate&quot; : &quot;2020-08-17T20:24:58.193Z&quot;,
            &quot;lastUpdatedDate&quot; : &quot;2020-08-17T21:05:58.193Z&quot;,
            &quot;sellingParty&quot; : {
              &quot;partyId&quot; : &quot;999US&quot;
            },
            &quot;shipToParty&quot; : {
              &quot;partyId&quot; : &quot;ABCD&quot;
            },
            &quot;itemStatus&quot; : [ {
              &quot;itemSequenceNumber&quot; : &quot;1&quot;,
              &quot;buyerProductIdentifier&quot; : &quot;B07DFVDRAB&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;8806098286500&quot;,
              &quot;netCost&quot; : {
                &quot;amount&quot; : &quot;346.27&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              },
              &quot;listPrice&quot; : {
                &quot;amount&quot; : &quot;346.27&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              },
              &quot;orderedQuantity&quot; : {
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 1,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;orderedQuantityDetails&quot; : [ {
                  &quot;updatedDate&quot; : &quot;2020-08-17T20:24:58.193Z&quot;,
                  &quot;orderedQuantity&quot; : {
                    &quot;amount&quot; : 1,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;acknowledgementStatus&quot; : {
                &quot;confirmationStatus&quot; : &quot;ACCEPTED&quot;,
                &quot;acceptedQuantity&quot; : {
                  &quot;amount&quot; : 1,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;rejectedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;acknowledgementStatusDetails&quot; : [ {
                  &quot;acknowledgementDate&quot; : &quot;2020-08-17T21:05:58.193Z&quot;,
                  &quot;acceptedQuantity&quot; : {
                    &quot;amount&quot; : 1,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  },
                  &quot;rejectedQuantity&quot; : {
                    &quot;amount&quot; : 0,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;receivingStatus&quot; : {
                &quot;receiveStatus&quot; : &quot;RECEIVED&quot;,
                &quot;receivedQuantity&quot; : {
                  &quot;amount&quot; : 1,
                  &quot;unitOfMeasure&quot; : &quot;Cases&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;lastReceiveDate&quot; : &quot;2020-08-28T21:06:23.193Z&quot;
              }
            }, {
              &quot;itemSequenceNumber&quot; : &quot;2&quot;,
              &quot;buyerProductIdentifier&quot; : &quot;B07DFYF5AB&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;8806098286123&quot;,
              &quot;netCost&quot; : {
                &quot;amount&quot; : &quot;229.47&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              },
              &quot;listPrice&quot; : {
                &quot;amount&quot; : &quot;229.47&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              },
              &quot;orderedQuantity&quot; : {
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 20,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;orderedQuantityDetails&quot; : [ {
                  &quot;updatedDate&quot; : &quot;2020-08-17T20:35:00.00Z&quot;,
                  &quot;orderedQuantity&quot; : {
                    &quot;amount&quot; : 5,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                }, {
                  &quot;updatedDate&quot; : &quot;2020-08-17T20:24:58.193Z&quot;,
                  &quot;orderedQuantity&quot; : {
                    &quot;amount&quot; : 15,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;acknowledgementStatus&quot; : {
                &quot;confirmationStatus&quot; : &quot;PARTIALLY_ACCEPTED&quot;,
                &quot;acceptedQuantity&quot; : {
                  &quot;amount&quot; : 15,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;rejectedQuantity&quot; : {
                  &quot;amount&quot; : 5,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;acknowledgementStatusDetails&quot; : [ {
                  &quot;acknowledgementDate&quot; : &quot;2020-08-17T21:05:58.193Z&quot;,
                  &quot;acceptedQuantity&quot; : {
                    &quot;amount&quot; : 15,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  },
                  &quot;rejectedQuantity&quot; : {
                    &quot;amount&quot; : 5,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;receivingStatus&quot; : {
                &quot;receiveStatus&quot; : &quot;PARTIALLY_RECEIVED&quot;,
                &quot;receivedQuantity&quot; : {
                  &quot;amount&quot; : 10,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;lastReceiveDate&quot; : &quot;2020-08-30T21:05:58.193Z&quot;
              }
            }, {
              &quot;itemSequenceNumber&quot; : &quot;3&quot;,
              &quot;buyerProductIdentifier&quot; : &quot;B07DFYF5XY&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;8806098286789&quot;,
              &quot;netCost&quot; : {
                &quot;amount&quot; : &quot;20&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              },
              &quot;listPrice&quot; : {
                &quot;amount&quot; : &quot;20&quot;,
                &quot;currencyCode&quot; : &quot;USD&quot;
              },
              &quot;orderedQuantity&quot; : {
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 5,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;orderedQuantityDetails&quot; : [ {
                  &quot;updatedDate&quot; : &quot;2020-08-17T20:24:58.193Z&quot;,
                  &quot;orderedQuantity&quot; : {
                    &quot;amount&quot; : 5,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;acknowledgementStatus&quot; : {
                &quot;confirmationStatus&quot; : &quot;REJECTED&quot;,
                &quot;acceptedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;rejectedQuantity&quot; : {
                  &quot;amount&quot; : 5,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;acknowledgementStatusDetails&quot; : [ {
                  &quot;acknowledgementDate&quot; : &quot;2020-08-17T21:05:58.193Z&quot;,
                  &quot;rejectedQuantity&quot; : {
                    &quot;amount&quot; : 5,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;receivingStatus&quot; : {
                &quot;receiveStatus&quot; : &quot;NOT_RECEIVED&quot;,
                &quot;receivedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              }
            } ]
          } ]
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;purchaseOrderNumber&quot; : {
            &quot;value&quot; : &quot;TestPO2&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ordersStatus&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;TestPO2&quot;,
            &quot;purchaseOrderStatus&quot; : &quot;OPEN&quot;,
            &quot;purchaseOrderDate&quot; : &quot;2020-08-17T00:24:00.00Z&quot;,
            &quot;lastUpdatedDate&quot; : &quot;2020-08-17T00:24:00.00Z&quot;,
            &quot;sellingParty&quot; : {
              &quot;partyId&quot; : &quot;API01&quot;
            },
            &quot;shipToParty&quot; : {
              &quot;partyId&quot; : &quot;ABC09&quot;
            },
            &quot;itemStatus&quot; : [ {
              &quot;itemSequenceNumber&quot; : &quot;1&quot;,
              &quot;buyerProductIdentifier&quot; : &quot;B01XYZ3Z00&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;8806093095123&quot;,
              &quot;netCost&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;70&quot;
              },
              &quot;listPrice&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;70&quot;
              },
              &quot;orderedQuantity&quot; : {
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 10,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;orderedQuantityDetails&quot; : [ {
                  &quot;updatedDate&quot; : &quot;2020-08-17T00:24:00.00Z&quot;,
                  &quot;orderedQuantity&quot; : {
                    &quot;amount&quot; : 10,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;acknowledgementStatus&quot; : {
                &quot;confirmationStatus&quot; : &quot;UNCONFIRMED&quot;,
                &quot;acceptedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;rejectedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              },
              &quot;receivingStatus&quot; : {
                &quot;receiveStatus&quot; : &quot;NOT_RECEIVED&quot;,
                &quot;receivedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              }
            } ]
          } ]
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;updatedBefore&quot; : {
            &quot;value&quot; : &quot;2020-08-18T00:00:00.00Z&quot;
          },
          &quot;updatedAfter&quot; : {
            &quot;value&quot; : &quot;2020-08-16T00:00:00.00Z&quot;
          },
          &quot;itemConfirmationStatus&quot; : {
            &quot;value&quot; : &quot;UNCONFIRMED&quot;
          },
          &quot;purchaseOrderStatus&quot; : {
            &quot;value&quot; : &quot;OPEN&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ordersStatus&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;TestPO2&quot;,
            &quot;purchaseOrderStatus&quot; : &quot;OPEN&quot;,
            &quot;purchaseOrderDate&quot; : &quot;2020-08-17T00:24:00.00Z&quot;,
            &quot;lastUpdatedDate&quot; : &quot;2020-08-17T00:24:00.00Z&quot;,
            &quot;sellingParty&quot; : {
              &quot;partyId&quot; : &quot;API01&quot;
            },
            &quot;shipToParty&quot; : {
              &quot;partyId&quot; : &quot;ABC09&quot;
            },
            &quot;itemStatus&quot; : [ {
              &quot;itemSequenceNumber&quot; : &quot;1&quot;,
              &quot;buyerProductIdentifier&quot; : &quot;B01XYZ3Z00&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;8806093095123&quot;,
              &quot;netCost&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;70&quot;
              },
              &quot;listPrice&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;70&quot;
              },
              &quot;orderedQuantity&quot; : {
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 10,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;orderedQuantityDetails&quot; : [ {
                  &quot;updatedDate&quot; : &quot;2020-08-17T00:24:00.00Z&quot;,
                  &quot;orderedQuantity&quot; : {
                    &quot;amount&quot; : 10,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;acknowledgementStatus&quot; : {
                &quot;confirmationStatus&quot; : &quot;UNCONFIRMED&quot;,
                &quot;acceptedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;rejectedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              },
              &quot;receivingStatus&quot; : {
                &quot;receiveStatus&quot; : &quot;NOT_RECEIVED&quot;,
                &quot;receivedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              }
            } ]
          }, {
            &quot;purchaseOrderNumber&quot; : &quot;TestPO1&quot;,
            &quot;purchaseOrderStatus&quot; : &quot;OPEN&quot;,
            &quot;purchaseOrderDate&quot; : &quot;2020-08-15T05:24:00.00Z&quot;,
            &quot;lastUpdatedDate&quot; : &quot;2020-08-17T05:07:00.00Z&quot;,
            &quot;sellingParty&quot; : {
              &quot;partyId&quot; : &quot;API01&quot;
            },
            &quot;shipToParty&quot; : {
              &quot;partyId&quot; : &quot;ABC09&quot;
            },
            &quot;itemStatus&quot; : [ {
              &quot;itemSequenceNumber&quot; : &quot;1&quot;,
              &quot;buyerProductIdentifier&quot; : &quot;B01XYZ3Z123&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;8806093095999&quot;,
              &quot;netCost&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;25&quot;
              },
              &quot;listPrice&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;25&quot;
              },
              &quot;orderedQuantity&quot; : {
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 100,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;orderedQuantityDetails&quot; : [ {
                  &quot;updatedDate&quot; : &quot;2020-08-17T05:07:00.00Z&quot;,
                  &quot;cancelledQuantity&quot; : {
                    &quot;amount&quot; : 50,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                }, {
                  &quot;updatedDate&quot; : &quot;2020-08-15T05:24:00.00Z&quot;,
                  &quot;orderedQuantity&quot; : {
                    &quot;amount&quot; : 150,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;acknowledgementStatus&quot; : {
                &quot;confirmationStatus&quot; : &quot;UNCONFIRMED&quot;,
                &quot;acceptedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;rejectedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              },
              &quot;receivingStatus&quot; : {
                &quot;receiveStatus&quot; : &quot;NOT_RECEIVED&quot;,
                &quot;receivedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              }
            } ]
          } ]
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : { }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ordersStatus&quot; : [ {
            &quot;purchaseOrderNumber&quot; : &quot;mock-purchaseOrderNumber1&quot;,
            &quot;purchaseOrderStatus&quot; : &quot;OPEN&quot;,
            &quot;purchaseOrderDate&quot; : &quot;2020-08-17T00:24:00.00Z&quot;,
            &quot;lastUpdatedDate&quot; : &quot;2020-08-17T00:24:00.00Z&quot;,
            &quot;sellingParty&quot; : {
              &quot;partyId&quot; : &quot;API01&quot;
            },
            &quot;shipToParty&quot; : {
              &quot;partyId&quot; : &quot;ABC09&quot;
            },
            &quot;itemStatus&quot; : [ {
              &quot;itemSequenceNumber&quot; : &quot;1&quot;,
              &quot;buyerProductIdentifier&quot; : &quot;B01XYZ3Z00&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;8806093095123&quot;,
              &quot;netCost&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;70&quot;
              },
              &quot;listPrice&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;70&quot;
              },
              &quot;orderedQuantity&quot; : {
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 10,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;orderedQuantityDetails&quot; : [ {
                  &quot;updatedDate&quot; : &quot;2020-08-17T00:24:00.00Z&quot;,
                  &quot;orderedQuantity&quot; : {
                    &quot;amount&quot; : 10,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;acknowledgementStatus&quot; : {
                &quot;confirmationStatus&quot; : &quot;UNCONFIRMED&quot;,
                &quot;acceptedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;rejectedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              },
              &quot;receivingStatus&quot; : {
                &quot;receiveStatus&quot; : &quot;NOT_RECEIVED&quot;,
                &quot;receivedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              }
            } ]
          }, {
            &quot;purchaseOrderNumber&quot; : &quot;mock-purchaseOrderNumber2&quot;,
            &quot;purchaseOrderStatus&quot; : &quot;OPEN&quot;,
            &quot;purchaseOrderDate&quot; : &quot;2020-08-15T05:24:00.00Z&quot;,
            &quot;lastUpdatedDate&quot; : &quot;2020-08-17T05:07:00.00Z&quot;,
            &quot;sellingParty&quot; : {
              &quot;partyId&quot; : &quot;API01&quot;
            },
            &quot;shipToParty&quot; : {
              &quot;partyId&quot; : &quot;ABC09&quot;
            },
            &quot;itemStatus&quot; : [ {
              &quot;itemSequenceNumber&quot; : &quot;1&quot;,
              &quot;buyerProductIdentifier&quot; : &quot;B01XYZ3Z123&quot;,
              &quot;vendorProductIdentifier&quot; : &quot;8806093095999&quot;,
              &quot;netCost&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;25&quot;
              },
              &quot;listPrice&quot; : {
                &quot;currencyCode&quot; : &quot;USD&quot;,
                &quot;amount&quot; : &quot;25&quot;
              },
              &quot;orderedQuantity&quot; : {
                &quot;orderedQuantity&quot; : {
                  &quot;amount&quot; : 100,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;orderedQuantityDetails&quot; : [ {
                  &quot;updatedDate&quot; : &quot;2020-08-17T05:07:00.00Z&quot;,
                  &quot;cancelledQuantity&quot; : {
                    &quot;amount&quot; : 50,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                }, {
                  &quot;updatedDate&quot; : &quot;2020-08-15T05:24:00.00Z&quot;,
                  &quot;orderedQuantity&quot; : {
                    &quot;amount&quot; : 150,
                    &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                    &quot;unitSize&quot; : 1
                  }
                } ]
              },
              &quot;acknowledgementStatus&quot; : {
                &quot;confirmationStatus&quot; : &quot;UNCONFIRMED&quot;,
                &quot;acceptedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                },
                &quot;rejectedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              },
              &quot;receivingStatus&quot; : {
                &quot;receiveStatus&quot; : &quot;NOT_RECEIVED&quot;,
                &quot;receivedQuantity&quot; : {
                  &quot;amount&quot; : 0,
                  &quot;unitOfMeasure&quot; : &quot;Eaches&quot;,
                  &quot;unitSize&quot; : 1
                }
              }
            } ]
          } ]
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getPurchaseOrdersStatus'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('VendorOrdersApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPurchaseOrdersStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPurchaseOrdersStatus_400
     */
    public function testGetPurchaseOrdersStatus400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPurchaseOrdersStatus400', 'VendorOrdersApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetPurchaseOrdersStatusResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;updatedBefore&quot; : {
            &quot;value&quot; : &quot;2019-09-2100:00:00&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidRequest&quot;,
          &quot;message&quot; : &quot;The request is invalid.&quot;,
          &quot;details&quot; : &quot;&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getPurchaseOrdersStatus'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('VendorOrdersApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPurchaseOrdersStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPurchaseOrdersStatus_403
     */
    public function testGetPurchaseOrdersStatus403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrdersStatus_404
     */
    public function testGetPurchaseOrdersStatus404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrdersStatus_415
     */
    public function testGetPurchaseOrdersStatus415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrdersStatus_429
     */
    public function testGetPurchaseOrdersStatus429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrdersStatus_500
     */
    public function testGetPurchaseOrdersStatus500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPurchaseOrdersStatus_503
     */
    public function testGetPurchaseOrdersStatus503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitAcknowledgement_202
     */
    public function testSubmitAcknowledgement202()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSubmitAcknowledgement202', 'VendorOrdersApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/SubmitAcknowledgementResponse&quot;
      },
      &quot;example&quot; : {
        &quot;payload&quot; : {
          &quot;transactionId&quot; : &quot;20190827182357-8725bde9-c61c-49f9-86ac-46efd82d4da5&quot;
        }
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;acknowledgements&quot; : [ {
                &quot;purchaseOrderNumber&quot; : &quot;TestOrder202&quot;,
                &quot;sellingParty&quot; : {
                  &quot;partyId&quot; : &quot;API01&quot;
                },
                &quot;acknowledgementDate&quot; : &quot;2021-03-12T17:35:26.308Z&quot;,
                &quot;items&quot; : [ {
                  &quot;vendorProductIdentifier&quot; : &quot;028877454078&quot;,
                  &quot;orderedQuantity&quot; : {
                    &quot;amount&quot; : 10
                  },
                  &quot;netCost&quot; : {
                    &quot;amount&quot; : &quot;10.2&quot;
                  },
                  &quot;itemAcknowledgements&quot; : [ {
                    &quot;acknowledgementCode&quot; : &quot;Accepted&quot;,
                    &quot;acknowledgedQuantity&quot; : {
                      &quot;amount&quot; : 10
                    }
                  } ]
                } ]
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;transactionId&quot; : &quot;20190827182357-8725bde9-c61c-49f9-86ac-46efd82d4da5&quot;
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : { }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;transactionId&quot; : &quot;mock-TransactionId-20190827182357-8725bde9-c61c-49f9-86ac-46efd82d4da5&quot;
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'submitAcknowledgement'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('VendorOrdersApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->submitAcknowledgementWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(202, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 202, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 202);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for submitAcknowledgement_400
     */
    public function testSubmitAcknowledgement400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSubmitAcknowledgement400', 'VendorOrdersApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/SubmitAcknowledgementResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;acknowledgements&quot; : [ {
                &quot;purchaseOrderNumber&quot; : &quot;TestOrder400&quot;,
                &quot;sellingParty&quot; : { }
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;The content of element &#39;sellingParty&#39; is not complete. One of &#39;{partyId, address, taxInfo}&#39; is expected.&quot;,
          &quot;details&quot; : &quot;&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'submitAcknowledgement'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('VendorOrdersApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->submitAcknowledgementWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for submitAcknowledgement_403
     */
    public function testSubmitAcknowledgement403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitAcknowledgement_404
     */
    public function testSubmitAcknowledgement404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitAcknowledgement_413
     */
    public function testSubmitAcknowledgement413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitAcknowledgement_415
     */
    public function testSubmitAcknowledgement415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitAcknowledgement_429
     */
    public function testSubmitAcknowledgement429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitAcknowledgement_500
     */
    public function testSubmitAcknowledgement500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitAcknowledgement_503
     */
    public function testSubmitAcknowledgement503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
}
