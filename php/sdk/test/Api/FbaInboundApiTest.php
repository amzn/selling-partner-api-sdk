<?php
/**
 * FbaInboundApiTest
 * PHP version 8.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\ApiException;
use OpenAPI\Client\Api\fulfillment\inbound\v0\FbaInboundApi;
use OpenAPI\Client\ObjectSerializer;

/**
 * FbaInboundApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FbaInboundApiTest extends BaseTestCase
{
    private FbaInboundApi $apiInstance;
    public function setUp(): void
    {
        parent::setUp();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('FbaInboundApi', $this->getName());
        $this->apiInstance = new FbaInboundApi($this->config, null, null);
        // Change Time Format if it requires
        $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
        if ($specificTimeFormat) {
            ObjectSerializer::setDateTimeFormat($specificTimeFormat);
        }
    }

    /**
     * Test case for confirmPreorder_200
     */
    public function testConfirmPreorder200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmPreorder200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ConfirmPreorderResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId1&quot;
          },
          &quot;NeedByDate&quot; : {
            &quot;value&quot; : &quot;2020-10-10&quot;
          },
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;MarketplaceId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ConfirmedNeedByDate&quot; : &quot;2020-04-23&quot;,
          &quot;ConfirmedFulfillableDate&quot; : &quot;2020-04-23&quot;
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'confirmPreorder'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmPreorderWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmPreorder_400
     */
    public function testConfirmPreorder400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmPreorder400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ConfirmPreorderResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BADshipmentId1&quot;
          },
          &quot;NeedByDate&quot; : {
            &quot;value&quot; : &quot;2020-10-10&quot;
          },
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;BADMarketplaceId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'confirmPreorder'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmPreorderWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmPreorder_401
     */
    public function testConfirmPreorder401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmPreorder_403
     */
    public function testConfirmPreorder403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmPreorder_404
     */
    public function testConfirmPreorder404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmPreorder_429
     */
    public function testConfirmPreorder429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmPreorder_500
     */
    public function testConfirmPreorder500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmPreorder_503
     */
    public function testConfirmPreorder503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmTransport_200
     */
    public function testConfirmTransport200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmTransport200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ConfirmTransportResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;TransportResult&quot; : {
            &quot;TransportStatus&quot; : &quot;CONFIRMING&quot;
          }
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'confirmTransport'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmTransportWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmTransport_400
     */
    public function testConfirmTransport400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testConfirmTransport400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ConfirmTransportResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BADshipmentId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'confirmTransport'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->confirmTransportWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for confirmTransport_401
     */
    public function testConfirmTransport401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmTransport_403
     */
    public function testConfirmTransport403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmTransport_404
     */
    public function testConfirmTransport404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmTransport_429
     */
    public function testConfirmTransport429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmTransport_500
     */
    public function testConfirmTransport500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for confirmTransport_503
     */
    public function testConfirmTransport503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipment_200
     */
    public function testCreateInboundShipment200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateInboundShipment200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/InboundShipmentResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;InboundShipmentHeader&quot; : {
                &quot;ShipmentName&quot; : &quot;43545345&quot;,
                &quot;ShipFromAddress&quot; : {
                  &quot;Name&quot; : &quot;35435345&quot;,
                  &quot;AddressLine1&quot; : &quot;123 any st&quot;,
                  &quot;DistrictOrCounty&quot; : &quot;Washtenaw&quot;,
                  &quot;City&quot; : &quot;Ann Arbor&quot;,
                  &quot;StateOrProvinceCode&quot; : &quot;Test&quot;,
                  &quot;CountryCode&quot; : &quot;US&quot;,
                  &quot;PostalCode&quot; : &quot;48103&quot;
                },
                &quot;DestinationFulfillmentCenterId&quot; : &quot;AEB2&quot;,
                &quot;AreCasesRequired&quot; : true,
                &quot;ShipmentStatus&quot; : &quot;WORKING&quot;,
                &quot;LabelPrepPreference&quot; : &quot;SELLER_LABEL&quot;,
                &quot;IntendedBoxContentsSource&quot; : &quot;NONE&quot;
              },
              &quot;InboundShipmentItems&quot; : [ {
                &quot;ShipmentId&quot; : &quot;345453&quot;,
                &quot;SellerSKU&quot; : &quot;34534545&quot;,
                &quot;FulfillmentNetworkSKU&quot; : &quot;435435435&quot;,
                &quot;QuantityShipped&quot; : 0,
                &quot;QuantityReceived&quot; : 0,
                &quot;QuantityInCase&quot; : 0,
                &quot;ReleaseDate&quot; : &quot;2020-04-23&quot;,
                &quot;PrepDetailsList&quot; : [ {
                  &quot;PrepInstruction&quot; : &quot;Polybagging&quot;,
                  &quot;PrepOwner&quot; : &quot;AMAZON&quot;
                } ]
              } ],
              &quot;MarketplaceId&quot; : &quot;MarketplaceId&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ShipmentId&quot; : &quot;ShipmentId&quot;
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createInboundShipment'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createInboundShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createInboundShipment_400
     */
    public function testCreateInboundShipment400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateInboundShipment400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/InboundShipmentResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;MarketplaceId&quot; : &quot;BADATVPDKIKX0DER&quot;,
              &quot;InboundShipmentHeader&quot; : {
                &quot;ShipmentName&quot; : &quot;Shipment for FBA15DJCQ1ZF&quot;,
                &quot;ShipFromAddress&quot; : {
                  &quot;Name&quot; : &quot;Uma Test&quot;,
                  &quot;AddressLine1&quot; : &quot;123 any st&quot;,
                  &quot;AddressLine2&quot; : &quot;&quot;,
                  &quot;DistrictOrCounty&quot; : &quot;Washtenaw&quot;,
                  &quot;City&quot; : &quot;Ann Arbor&quot;,
                  &quot;StateOrProvinceCode&quot; : &quot;MI&quot;,
                  &quot;CountryCode&quot; : &quot;US&quot;,
                  &quot;PostalCode&quot; : &quot;48103&quot;
                },
                &quot;DestinationFulfillmentCenterId&quot; : &quot;ABE2&quot;,
                &quot;ShipmentStatus&quot; : &quot;WORKING&quot;,
                &quot;LabelPrepPreference&quot; : &quot;SELLER_LABEL&quot;
              },
              &quot;InboundShipmentItems&quot; : [ {
                &quot;ShipmentId&quot; : &quot;FBA15DJCQ1ZF&quot;,
                &quot;SellerSKU&quot; : &quot;PSMM-TEST-SKU-Apr-03_21_17_20-0379&quot;,
                &quot;FulfillmentNetworkSKU&quot; : &quot;X0014ENQ7B&quot;,
                &quot;QuantityShipped&quot; : 1,
                &quot;QuantityReceived&quot; : 1,
                &quot;QuantityInCase&quot; : 1,
                &quot;ReleaseDate&quot; : &quot;2020-02-27&quot;
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createInboundShipment'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createInboundShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createInboundShipment_401
     */
    public function testCreateInboundShipment401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipment_403
     */
    public function testCreateInboundShipment403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipment_404
     */
    public function testCreateInboundShipment404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipment_429
     */
    public function testCreateInboundShipment429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipment_500
     */
    public function testCreateInboundShipment500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipment_503
     */
    public function testCreateInboundShipment503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipmentPlan_200
     */
    public function testCreateInboundShipmentPlan200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateInboundShipmentPlan200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/CreateInboundShipmentPlanResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;ShipFromAddress&quot; : {
                &quot;Name&quot; : &quot;Name&quot;,
                &quot;AddressLine1&quot; : &quot;123 any st&quot;,
                &quot;AddressLine2&quot; : &quot;AddressLine2&quot;,
                &quot;DistrictOrCounty&quot; : &quot;Washtenaw&quot;,
                &quot;City&quot; : &quot;Ann Arbor&quot;,
                &quot;StateOrProvinceCode&quot; : &quot;MI&quot;,
                &quot;CountryCode&quot; : &quot;US&quot;,
                &quot;PostalCode&quot; : &quot;48188&quot;
              },
              &quot;LabelPrepPreference&quot; : &quot;SELLER_LABEL&quot;,
              &quot;ShipToCountryCode&quot; : &quot;ShipToCountryCode&quot;,
              &quot;ShipToCountrySubdivisionCode&quot; : &quot;ShipToCountrySubdivisionCode&quot;,
              &quot;InboundShipmentPlanRequestItems&quot; : [ {
                &quot;SellerSKU&quot; : &quot;SellerSKU&quot;,
                &quot;ASIN&quot; : &quot;ASIN&quot;,
                &quot;Condition&quot; : &quot;NewItem&quot;,
                &quot;Quantity&quot; : 1,
                &quot;QuantityInCase&quot; : 1,
                &quot;PrepDetailsList&quot; : [ {
                  &quot;PrepInstruction&quot; : &quot;Polybagging&quot;,
                  &quot;PrepOwner&quot; : &quot;AMAZON&quot;
                } ]
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;InboundShipmentPlans&quot; : [ {
            &quot;ShipmentId&quot; : &quot;ShipmentId&quot;,
            &quot;DestinationFulfillmentCenterId&quot; : &quot;ABE2&quot;,
            &quot;ShipToAddress&quot; : {
              &quot;Name&quot; : &quot;John Doe&quot;,
              &quot;AddressLine1&quot; : &quot;123 any s&quot;,
              &quot;AddressLine2&quot; : &quot;&quot;,
              &quot;DistrictOrCounty&quot; : &quot;Wayne&quot;,
              &quot;City&quot; : &quot;Detroit&quot;,
              &quot;StateOrProvinceCode&quot; : &quot;MI&quot;,
              &quot;CountryCode&quot; : &quot;US&quot;,
              &quot;PostalCode&quot; : &quot;48110&quot;
            },
            &quot;LabelPrepType&quot; : &quot;NO_LABEL&quot;,
            &quot;Items&quot; : [ {
              &quot;SellerSKU&quot; : &quot;SellerSKU&quot;,
              &quot;FulfillmentNetworkSKU&quot; : &quot;FulfillmentNetworkSKU&quot;,
              &quot;Quantity&quot; : 10,
              &quot;PrepDetailsList&quot; : [ {
                &quot;PrepInstruction&quot; : &quot;Polybagging&quot;,
                &quot;PrepOwner&quot; : &quot;AMAZON&quot;
              } ]
            } ],
            &quot;EstimatedBoxContentsFee&quot; : {
              &quot;TotalUnits&quot; : 10,
              &quot;FeePerUnit&quot; : {
                &quot;CurrencyCode&quot; : &quot;USD&quot;,
                &quot;Value&quot; : 10
              },
              &quot;TotalFee&quot; : {
                &quot;CurrencyCode&quot; : &quot;USD&quot;,
                &quot;Value&quot; : 10
              }
            }
          } ]
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createInboundShipmentPlan'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createInboundShipmentPlanWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createInboundShipmentPlan_400
     */
    public function testCreateInboundShipmentPlan400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateInboundShipmentPlan400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/CreateInboundShipmentPlanResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;ShipFromAddress&quot; : {
                &quot;Name&quot; : &quot;BADBAD NAME&quot;,
                &quot;AddressLine1&quot; : &quot;BADAddressLine1&quot;,
                &quot;AddressLine2&quot; : &quot;BADAddressLine2&quot;,
                &quot;DistrictOrCounty&quot; : &quot;BADDistrictOrCounty&quot;,
                &quot;City&quot; : &quot;BADCity&quot;,
                &quot;StateOrProvinceCode&quot; : &quot;BADStateOrProvinceCode&quot;,
                &quot;CountryCode&quot; : &quot;BADCountryCode&quot;,
                &quot;PostalCode&quot; : &quot;BADPostalCodeg&quot;
              },
              &quot;LabelPrepPreference&quot; : &quot;BADSELLER_LABEL&quot;,
              &quot;ShipToCountryCode&quot; : &quot;BADShipToCountryCode&quot;,
              &quot;ShipToCountrySubdivisionCode&quot; : &quot;BADShipToCountrySubdivisionCode&quot;,
              &quot;InboundShipmentPlanRequestItems&quot; : [ {
                &quot;SellerSKU&quot; : &quot;BADSellerSKU&quot;,
                &quot;ASIN&quot; : &quot;BADASIN&quot;,
                &quot;Condition&quot; : &quot;BADNewItem&quot;,
                &quot;Quantity&quot; : 0,
                &quot;QuantityInCase&quot; : 0,
                &quot;PrepDetailsList&quot; : [ {
                  &quot;PrepInstruction&quot; : &quot;BADPolybagging&quot;,
                  &quot;PrepOwner&quot; : &quot;BADAMAZON&quot;
                } ]
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Invalid data. Please check details&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createInboundShipmentPlan'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createInboundShipmentPlanWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createInboundShipmentPlan_401
     */
    public function testCreateInboundShipmentPlan401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipmentPlan_403
     */
    public function testCreateInboundShipmentPlan403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipmentPlan_404
     */
    public function testCreateInboundShipmentPlan404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipmentPlan_429
     */
    public function testCreateInboundShipmentPlan429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipmentPlan_500
     */
    public function testCreateInboundShipmentPlan500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createInboundShipmentPlan_503
     */
    public function testCreateInboundShipmentPlan503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for estimateTransport_200
     */
    public function testEstimateTransport200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testEstimateTransport200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/EstimateTransportResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;TransportResult&quot; : {
            &quot;TransportStatus&quot; : &quot;ESTIMATING&quot;
          }
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'estimateTransport'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->estimateTransportWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for estimateTransport_400
     */
    public function testEstimateTransport400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testEstimateTransport400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/EstimateTransportResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BadshipmentId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'estimateTransport'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->estimateTransportWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for estimateTransport_401
     */
    public function testEstimateTransport401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for estimateTransport_403
     */
    public function testEstimateTransport403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for estimateTransport_404
     */
    public function testEstimateTransport404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for estimateTransport_429
     */
    public function testEstimateTransport429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for estimateTransport_500
     */
    public function testEstimateTransport500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for estimateTransport_503
     */
    public function testEstimateTransport503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBillOfLading_200
     */
    public function testGetBillOfLading200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBillOfLading200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetBillOfLadingResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;DownloadURL&quot; : &quot;http://bill-of.lading.url.com&quot;
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBillOfLading'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBillOfLadingWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBillOfLading_400
     */
    public function testGetBillOfLading400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBillOfLading400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetBillOfLadingResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;badid1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBillOfLading'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBillOfLadingWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBillOfLading_401
     */
    public function testGetBillOfLading401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBillOfLading_403
     */
    public function testGetBillOfLading403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBillOfLading_404
     */
    public function testGetBillOfLading404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBillOfLading_429
     */
    public function testGetBillOfLading429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBillOfLading_500
     */
    public function testGetBillOfLading500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBillOfLading_503
     */
    public function testGetBillOfLading503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getLabels_200
     */
    public function testGetLabels200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetLabels200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetLabelsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;348975493&quot;
          },
          &quot;PageType&quot; : {
            &quot;value&quot; : &quot;PackageLabel_Letter_2&quot;
          },
          &quot;LabelType&quot; : {
            &quot;value&quot; : &quot;BARCODE_2D&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;DownloadURL&quot; : &quot;http://www.labels.url.com&quot;
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getLabels'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getLabelsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getLabels_400
     */
    public function testGetLabels400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetLabels400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetLabelsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BADVALUE&quot;
          },
          &quot;PageType&quot; : {
            &quot;value&quot; : &quot;PackageLabel_Letter_2&quot;
          },
          &quot;LabelType&quot; : {
            &quot;value&quot; : &quot;BARCODE_2D&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getLabels'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getLabelsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getLabels_401
     */
    public function testGetLabels401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getLabels_403
     */
    public function testGetLabels403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getLabels_404
     */
    public function testGetLabels404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getLabels_429
     */
    public function testGetLabels429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getLabels_500
     */
    public function testGetLabels500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getLabels_503
     */
    public function testGetLabels503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPreorderInfo_200
     */
    public function testGetPreorderInfo200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPreorderInfo200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetPreorderInfoResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId1&quot;
          },
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;MarketplaceId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ShipmentContainsPreorderableItems&quot; : true,
          &quot;ShipmentConfirmedForPreorder&quot; : true,
          &quot;NeedByDate&quot; : &quot;2020-04-23&quot;,
          &quot;ConfirmedFulfillableDate&quot; : &quot;2020-04-23&quot;
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getPreorderInfo'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPreorderInfoWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPreorderInfo_400
     */
    public function testGetPreorderInfo400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPreorderInfo400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetPreorderInfoResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BADshipmentId1&quot;
          },
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;BADMarketplaceId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getPreorderInfo'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPreorderInfoWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPreorderInfo_401
     */
    public function testGetPreorderInfo401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPreorderInfo_403
     */
    public function testGetPreorderInfo403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPreorderInfo_404
     */
    public function testGetPreorderInfo404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPreorderInfo_429
     */
    public function testGetPreorderInfo429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPreorderInfo_500
     */
    public function testGetPreorderInfo500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPreorderInfo_503
     */
    public function testGetPreorderInfo503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPrepInstructions_200
     */
    public function testGetPrepInstructions200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPrepInstructions200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetPrepInstructionsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;ShipToCountryCode&quot; : {
            &quot;value&quot; : &quot;US&quot;
          },
          &quot;ASINList&quot; : {
            &quot;value&quot; : [ &quot;ASIN1&quot; ]
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;SKUPrepInstructionsList&quot; : [ {
            &quot;SellerSKU&quot; : &quot;SellerSKU&quot;,
            &quot;ASIN&quot; : &quot;ASIN1&quot;,
            &quot;BarcodeInstruction&quot; : &quot;RequiresFNSKULabel&quot;,
            &quot;PrepGuidance&quot; : &quot;ConsultHelpDocuments&quot;,
            &quot;PrepInstructionList&quot; : [ &quot;Polybagging&quot; ],
            &quot;AmazonPrepFeesDetailsList&quot; : [ {
              &quot;PrepInstruction&quot; : &quot;Polybagging&quot;,
              &quot;FeePerUnit&quot; : {
                &quot;CurrencyCode&quot; : &quot;USD&quot;,
                &quot;Value&quot; : 10
              }
            } ]
          } ],
          &quot;InvalidSKUList&quot; : [ {
            &quot;SellerSKU&quot; : &quot;SellerSKU&quot;,
            &quot;ErrorReason&quot; : &quot;DoesNotExist&quot;
          } ],
          &quot;ASINPrepInstructionsList&quot; : [ {
            &quot;ASIN&quot; : &quot;ASIN1&quot;,
            &quot;BarcodeInstruction&quot; : &quot;RequiresFNSKULabel&quot;,
            &quot;PrepGuidance&quot; : &quot;ConsultHelpDocuments&quot;,
            &quot;PrepInstructionList&quot; : [ &quot;Polybagging&quot; ]
          } ],
          &quot;InvalidASINList&quot; : [ {
            &quot;ASIN&quot; : &quot;ASIN1&quot;,
            &quot;ErrorReason&quot; : &quot;DoesNotExist&quot;
          } ]
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getPrepInstructions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPrepInstructionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPrepInstructions_400
     */
    public function testGetPrepInstructions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetPrepInstructions400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetPrepInstructionsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;ShipToCountryCode&quot; : {
            &quot;value&quot; : &quot;US&quot;
          },
          &quot;ASINList&quot; : {
            &quot;value&quot; : [ &quot;BADASIN&quot; ]
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getPrepInstructions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getPrepInstructionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getPrepInstructions_401
     */
    public function testGetPrepInstructions401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPrepInstructions_403
     */
    public function testGetPrepInstructions403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPrepInstructions_404
     */
    public function testGetPrepInstructions404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPrepInstructions_429
     */
    public function testGetPrepInstructions429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPrepInstructions_500
     */
    public function testGetPrepInstructions500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getPrepInstructions_503
     */
    public function testGetPrepInstructions503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItems_200
     */
    public function testGetShipmentItems200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipmentItems200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetShipmentItemsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          },
          &quot;QueryType&quot; : {
            &quot;value&quot; : &quot;SHIPMENT&quot;
          },
          &quot;NextToken&quot; : {
            &quot;value&quot; : &quot;NextToken&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ItemData&quot; : [ {
            &quot;ShipmentId&quot; : &quot;FBA15DF2763D&quot;,
            &quot;SellerSKU&quot; : &quot;CR-47K6-H6QN&quot;,
            &quot;FulfillmentNetworkSKU&quot; : &quot;X0014BIZ8T&quot;,
            &quot;QuantityShipped&quot; : 4,
            &quot;QuantityReceived&quot; : 0,
            &quot;QuantityInCase&quot; : 0,
            &quot;ReleaseDate&quot; : &quot;2013-05-29&quot;,
            &quot;PrepDetailsList&quot; : [ {
              &quot;PrepInstruction&quot; : &quot;Labeling&quot;,
              &quot;PrepOwner&quot; : &quot;SELLER&quot;
            }, {
              &quot;PrepInstruction&quot; : &quot;Polybagging&quot;,
              &quot;PrepOwner&quot; : &quot;SELLER&quot;
            } ]
          } ],
          &quot;NextToken&quot; : &quot;AAAAAAAAAABtqoY6CcWi1L8mJB7Nnt2gaQEAAAAAAAD6ehPTas9PliWJK6QPwRpOgJJTgQphGOQ9o1k7PBrBe5GrNyGDQYBmz2D4yDT4FVSHVhpbKi8Mgrw3tfRTLrkcMQOn5CvEySS5ePVzv8WhjCDxM9FGwBzoeDWLKx9OEy29XlAFkeBdwaxOAxEMF97uQkxGhUQS5sGeXdSAXNXMgCoOXMgwJlsgzIq3BytyObIt8z9T0GPk440bqiQZl3ceVEiLX2g2LAa5qNwJBtCgYtizJsYSutX9zbR0Fe13bSqTOUEAXykYvQSTYCbuEPC3UFukVLobuP0lWWZzZxcbWRxEzBTHnlgorzdsCc4cBnWVhTdp5nxTPeiYGbda9KilRFXtVl1vgXCHq5npDNV9yULsgjAqFPDBaz8YMlKoJgCe2E1GmbHzenJW21IHcIo3gtmujxib3Y9j23SwCfEbsUR9OrFNvGxiZ0VS7qYzmfvElsU9jBx1PFrOigHnGD71Yq&quot;
        }
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          },
          &quot;QueryType&quot; : {
            &quot;value&quot; : &quot;SHIPMENT&quot;
          },
          &quot;NextToken&quot; : {
            &quot;value&quot; : &quot;AAAAAAAAAABtqoY6CcWi1L8mJB7Nnt2gaQEAAAAAAAD6ehPTas9PliWJK6QPwRpOgJJTgQphGOQ9o1k7PBrBe5GrNyGDQYBmz2D4yDT4FVSHVhpbKi8Mgrw3tfRTLrkcMQOn5CvEySS5ePVzv8WhjCDxM9FGwBzoeDWLKx9OEy29XlAFkeBdwaxOAxEMF97uQkxGhUQS5sGeXdSAXNXMgCoOXMgwJlsgzIq3BytyObIt8z9T0GPk440bqiQZl3ceVEiLX2g2LAa5qNwJBtCgYtizJsYSutX9zbR0Fe13bSqTOUEAXykYvQSTYCbuEPC3UFukVLobuP0lWWZzZxcbWRxEzBTHnlgorzdsCc4cBnWVhTdp5nxTPeiYGbda9KilRFXtVl1vgXCHq5npDNV9yULsgjAqFPDBaz8YMlKoJgCe2E1GmbHzenJW21IHcIo3gtmujxib3Y9j23SwCfEbsUR9OrFNvGxiZ0VS7qYzmfvElsU9jBx1PFrOigHnGD71Yq&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ItemData&quot; : [ {
            &quot;ShipmentId&quot; : &quot;FBA15DF2763D&quot;,
            &quot;SellerSKU&quot; : &quot;CR-47K6-H6QN&quot;,
            &quot;FulfillmentNetworkSKU&quot; : &quot;X0014BIZ8T&quot;,
            &quot;QuantityShipped&quot; : 4,
            &quot;QuantityReceived&quot; : 0,
            &quot;QuantityInCase&quot; : 0,
            &quot;ReleaseDate&quot; : &quot;2013-05-29&quot;,
            &quot;PrepDetailsList&quot; : [ {
              &quot;PrepInstruction&quot; : &quot;Labeling&quot;,
              &quot;PrepOwner&quot; : &quot;SELLER&quot;
            }, {
              &quot;PrepInstruction&quot; : &quot;Polybagging&quot;,
              &quot;PrepOwner&quot; : &quot;SELLER&quot;
            } ]
          } ]
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getShipmentItems'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipmentItems_400
     */
    public function testGetShipmentItems400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipmentItems400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetShipmentItemsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;BADATVPDKIKX0DER&quot;
          },
          &quot;QueryType&quot; : {
            &quot;value&quot; : &quot;BADSHIPMENT&quot;
          },
          &quot;NextToken&quot; : {
            &quot;value&quot; : &quot;BADNextToken&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getShipmentItems'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipmentItems_401
     */
    public function testGetShipmentItems401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItems_403
     */
    public function testGetShipmentItems403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItems_404
     */
    public function testGetShipmentItems404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItems_429
     */
    public function testGetShipmentItems429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItems_500
     */
    public function testGetShipmentItems500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItems_503
     */
    public function testGetShipmentItems503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItemsByShipmentId_200
     */
    public function testGetShipmentItemsByShipmentId200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipmentItemsByShipmentId200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetShipmentItemsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          },
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;FBA15DJ9SVVD&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ItemData&quot; : [ {
            &quot;ShipmentId&quot; : &quot;FBA15DF2763D&quot;,
            &quot;SellerSKU&quot; : &quot;CR-47K6-H6QN&quot;,
            &quot;FulfillmentNetworkSKU&quot; : &quot;X0014BIZ8T&quot;,
            &quot;QuantityShipped&quot; : 4,
            &quot;QuantityReceived&quot; : 0,
            &quot;QuantityInCase&quot; : 0,
            &quot;ReleaseDate&quot; : &quot;2013-05-29&quot;,
            &quot;PrepDetailsList&quot; : [ {
              &quot;PrepInstruction&quot; : &quot;Labeling&quot;,
              &quot;PrepOwner&quot; : &quot;SELLER&quot;
            }, {
              &quot;PrepInstruction&quot; : &quot;Polybagging&quot;,
              &quot;PrepOwner&quot; : &quot;SELLER&quot;
            } ]
          } ],
          &quot;NextToken&quot; : &quot;AAAAAAAAAABtqoY6CcWi1L8mJB7Nnt2gaQEAAAAAAAD6ehPTas9PliWJK6+QPwRpOgJJTgQphGOQ+9o1k7PBrBe5GrNyGDQYBmz2D4yDT4FVSHVhpbKi8Mgrw3tfRTLrkcMQOn5CvEySS5ePVzv8WhjCDxM9FGwBzoeDWLKx9OEy29XlAFkeBdwaxOAxEMF97uQkxGhUQS5sGeXdSAXNXMgCoOXMgw+JlsgzIq3Byt/yObIt8z9T0GPk440bqiQZl3ceVEiLX2g2LAa5qNwJBtCgYtizJsYSu/tX9zbR0Fe13bSqTOUEAXykYvQSTYCbuEPC3UFukVLobuP0lW+WZzZxcbWRxEzBTHnlgorzdsCc4cBnWVhTdp5nxTPeiYGbda9KilRFXtVl1vgXCHq5npDNV9yULsgjAqFPDBaz8YMlKoJgCe2E1GmbHzenJW21IHcIo3gtmujx+ib3Y9j23SwCfEbsUR9OrFNvGxiZ0VS7qYzm+fvElsU9jBx1PFrOigHnGD71Yq+y&quot;
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getShipmentItemsByShipmentId'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentItemsByShipmentIdWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipmentItemsByShipmentId_400
     */
    public function testGetShipmentItemsByShipmentId400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipmentItemsByShipmentId400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetShipmentItemsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;BADATVPDKIKX0DER&quot;
          },
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BADFBA15DJ9SVVD&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getShipmentItemsByShipmentId'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentItemsByShipmentIdWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipmentItemsByShipmentId_401
     */
    public function testGetShipmentItemsByShipmentId401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItemsByShipmentId_403
     */
    public function testGetShipmentItemsByShipmentId403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItemsByShipmentId_404
     */
    public function testGetShipmentItemsByShipmentId404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItemsByShipmentId_429
     */
    public function testGetShipmentItemsByShipmentId429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItemsByShipmentId_500
     */
    public function testGetShipmentItemsByShipmentId500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentItemsByShipmentId_503
     */
    public function testGetShipmentItemsByShipmentId503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipments_200
     */
    public function testGetShipments200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipments200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetShipmentsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          },
          &quot;QueryType&quot; : {
            &quot;value&quot; : &quot;SHIPMENT&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ShipmentData&quot; : [ {
            &quot;ShipmentId&quot; : &quot;FBA15DJ9S3J5&quot;,
            &quot;ShipmentName&quot; : &quot;FBA (2/11/20, 11:18 AM) - 1&quot;,
            &quot;ShipFromAddress&quot; : {
              &quot;Name&quot; : &quot;vungu+naperfectUS&quot;,
              &quot;AddressLine1&quot; : &quot;501 Fairview Ave N&quot;,
              &quot;City&quot; : &quot;Seattle&quot;,
              &quot;StateOrProvinceCode&quot; : &quot;WA&quot;,
              &quot;CountryCode&quot; : &quot;US&quot;,
              &quot;PostalCode&quot; : &quot;98109&quot;
            },
            &quot;DestinationFulfillmentCenterId&quot; : &quot;MKC6&quot;,
            &quot;ShipmentStatus&quot; : &quot;SHIPPED&quot;,
            &quot;LabelPrepType&quot; : &quot;SELLER_LABEL&quot;,
            &quot;BoxContentsSource&quot; : &quot;INTERACTIVE&quot;
          } ],
          &quot;NextToken&quot; : &quot;AAAAAAAAAADwtRhfSFJXzbRgKc+wYysmXwEAAAAAAACLuoztkDYG/ClQt9ELs4kYW6MrmpJdFf1QQYk6hSIZSsy5ipek26YvTwmkD9i4cbQny1EWwuuU88wghPxa7770q5R+YYCuP4pYWVy3AVAzWzAib6BRlDr4B0msx6sOKcYCy6ms4J021964JOS9nZhRBGfJ86d96S91rhJPli55+r7Jp+VHPly2FCJ2mAuC53sGTsNP108IUuPdbZqq2myWZ5U+EggLjhRBvXhHFFxRclETG7XfyX46A9nCKKhJYEjDFmMPQoQPtqSuxtMAUMDLPs4MttashstL96Oiu79VYhjV84L13mdMNZS6g21HKgU5E6CDivHvsgS5kC7joXHrXGjwpXMeLcfJqwg+DocBFiU2NELMEbfksrIGXVVjFqiLxHtTiDBsuDxDLbYeVepW0E9oA/ppbZJK4c0nDbgT3WSxxfsgpmAZ42O6iVMhW/KVlJZFDjKsmmHATcq5S5c&#x3D;&quot;
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getShipments'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipments_400
     */
    public function testGetShipments400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipments400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetShipmentsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;MarketplaceId&quot; : {
            &quot;value&quot; : &quot;BADATVPDKIKX0DER&quot;
          },
          &quot;QueryType&quot; : {
            &quot;value&quot; : &quot;BADSHIPMENT&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getShipments'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipments_401
     */
    public function testGetShipments401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipments_403
     */
    public function testGetShipments403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipments_404
     */
    public function testGetShipments404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipments_429
     */
    public function testGetShipments429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipments_500
     */
    public function testGetShipments500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipments_503
     */
    public function testGetShipments503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getTransportDetails_200
     */
    public function testGetTransportDetails200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetTransportDetails200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetTransportDetailsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;TransportContent&quot; : {
            &quot;TransportHeader&quot; : {
              &quot;SellerId&quot; : &quot;A3O2V2ZBRHE3NZ&quot;,
              &quot;ShipmentId&quot; : &quot;FBA15DJCPTRK&quot;,
              &quot;IsPartnered&quot; : true,
              &quot;ShipmentType&quot; : &quot;SP&quot;
            },
            &quot;TransportDetails&quot; : {
              &quot;PartneredSmallParcelData&quot; : {
                &quot;PackageList&quot; : [ {
                  &quot;Dimensions&quot; : {
                    &quot;Length&quot; : 11.0,
                    &quot;Width&quot; : 11.0,
                    &quot;Height&quot; : 11.0,
                    &quot;Unit&quot; : &quot;IN&quot;
                  },
                  &quot;Weight&quot; : {
                    &quot;Value&quot; : 11.0,
                    &quot;Unit&quot; : &quot;pounds&quot;
                  },
                  &quot;CarrierName&quot; : &quot;UNITED_PARCEL_SERVICE_INC&quot;,
                  &quot;PackageStatus&quot; : &quot;SHIPPED&quot;
                } ]
              }
            },
            &quot;TransportResult&quot; : {
              &quot;TransportStatus&quot; : &quot;WORKING&quot;
            }
          }
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getTransportDetails'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getTransportDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getTransportDetails_400
     */
    public function testGetTransportDetails400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetTransportDetails400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetTransportDetailsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BADshipmentId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getTransportDetails'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getTransportDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getTransportDetails_401
     */
    public function testGetTransportDetails401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getTransportDetails_403
     */
    public function testGetTransportDetails403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getTransportDetails_404
     */
    public function testGetTransportDetails404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getTransportDetails_429
     */
    public function testGetTransportDetails429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getTransportDetails_500
     */
    public function testGetTransportDetails500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getTransportDetails_503
     */
    public function testGetTransportDetails503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putTransportDetails_200
     */
    public function testPutTransportDetails200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testPutTransportDetails200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/PutTransportDetailsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId1&quot;
          },
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;IsPartnered&quot; : true,
              &quot;ShipmentType&quot; : &quot;SP&quot;,
              &quot;TransportDetails&quot; : {
                &quot;PartneredSmallParcelData&quot; : {
                  &quot;PackageList&quot; : [ {
                    &quot;Dimensions&quot; : {
                      &quot;Length&quot; : 11,
                      &quot;Width&quot; : 11,
                      &quot;Height&quot; : 11,
                      &quot;Unit&quot; : &quot;inches&quot;
                    },
                    &quot;Weight&quot; : {
                      &quot;Value&quot; : 11,
                      &quot;Unit&quot; : &quot;pounds&quot;
                    }
                  } ],
                  &quot;CarrierName&quot; : &quot;string&quot;
                },
                &quot;NonPartneredSmallParcelData&quot; : {
                  &quot;CarrierName&quot; : &quot;USPS&quot;,
                  &quot;PackageList&quot; : [ {
                    &quot;TrackingId&quot; : &quot;werwrwerwrwrer&quot;
                  } ]
                },
                &quot;PartneredLtlData&quot; : {
                  &quot;Contact&quot; : {
                    &quot;Name&quot; : &quot;Test1&quot;,
                    &quot;Phone&quot; : &quot;234-343-3434&quot;,
                    &quot;Email&quot; : &quot;abc@test.com&quot;,
                    &quot;Fax&quot; : &quot;234-343-3434&quot;
                  },
                  &quot;BoxCount&quot; : 1,
                  &quot;SellerFreightClass&quot; : &quot;50&quot;,
                  &quot;FreightReadyDate&quot; : &quot;2020-03-27&quot;,
                  &quot;PalletList&quot; : [ {
                    &quot;Dimensions&quot; : {
                      &quot;Length&quot; : 13,
                      &quot;Width&quot; : 13,
                      &quot;Height&quot; : 13,
                      &quot;Unit&quot; : &quot;inches&quot;
                    },
                    &quot;Weight&quot; : {
                      &quot;Value&quot; : 13,
                      &quot;Unit&quot; : &quot;pounds&quot;
                    },
                    &quot;IsStacked&quot; : true
                  } ],
                  &quot;TotalWeight&quot; : {
                    &quot;Value&quot; : 13,
                    &quot;Unit&quot; : &quot;pounds&quot;
                  },
                  &quot;SellerDeclaredValue&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Value&quot; : 20
                  }
                },
                &quot;NonPartneredLtlData&quot; : {
                  &quot;CarrierName&quot; : &quot;USPS&quot;,
                  &quot;ProNumber&quot; : &quot;3746274&quot;
                }
              }
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;TransportResult&quot; : {
            &quot;TransportStatus&quot; : &quot;WORKING&quot;
          }
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'putTransportDetails'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->putTransportDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for putTransportDetails_400
     */
    public function testPutTransportDetails400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testPutTransportDetails400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/PutTransportDetailsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BADshipmentId1&quot;
          },
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;IsPartnered&quot; : true,
              &quot;ShipmentType&quot; : &quot;SP&quot;,
              &quot;TransportDetails&quot; : {
                &quot;PartneredSmallParcelData&quot; : {
                  &quot;PackageList&quot; : [ {
                    &quot;Dimensions&quot; : {
                      &quot;Length&quot; : 11,
                      &quot;Width&quot; : 11,
                      &quot;Height&quot; : 11,
                      &quot;Unit&quot; : &quot;inches&quot;
                    },
                    &quot;Weight&quot; : {
                      &quot;Value&quot; : 11,
                      &quot;Unit&quot; : &quot;pounds&quot;
                    }
                  } ],
                  &quot;CarrierName&quot; : &quot;string&quot;
                },
                &quot;NonPartneredSmallParcelData&quot; : {
                  &quot;CarrierName&quot; : &quot;USPS&quot;,
                  &quot;PackageList&quot; : [ {
                    &quot;TrackingId&quot; : &quot;werwrwerwrwrer&quot;
                  } ]
                },
                &quot;PartneredLtlData&quot; : {
                  &quot;Contact&quot; : {
                    &quot;Name&quot; : &quot;Test1&quot;,
                    &quot;Phone&quot; : &quot;234-343-3434&quot;,
                    &quot;Email&quot; : &quot;abc@test.com&quot;,
                    &quot;Fax&quot; : &quot;234-343-3434&quot;
                  },
                  &quot;BoxCount&quot; : 1,
                  &quot;SellerFreightClass&quot; : &quot;50&quot;,
                  &quot;FreightReadyDate&quot; : &quot;2020-03-27&quot;,
                  &quot;PalletList&quot; : [ {
                    &quot;Dimensions&quot; : {
                      &quot;Length&quot; : 13,
                      &quot;Width&quot; : 13,
                      &quot;Height&quot; : 13,
                      &quot;Unit&quot; : &quot;inches&quot;
                    },
                    &quot;Weight&quot; : {
                      &quot;Value&quot; : 13,
                      &quot;Unit&quot; : &quot;pounds&quot;
                    },
                    &quot;IsStacked&quot; : true
                  } ],
                  &quot;TotalWeight&quot; : {
                    &quot;Value&quot; : 13,
                    &quot;Unit&quot; : &quot;pounds&quot;
                  },
                  &quot;SellerDeclaredValue&quot; : {
                    &quot;CurrencyCode&quot; : &quot;USD&quot;,
                    &quot;Value&quot; : 20
                  }
                },
                &quot;NonPartneredLtlData&quot; : {
                  &quot;CarrierName&quot; : &quot;USPS&quot;,
                  &quot;ProNumber&quot; : &quot;3746274&quot;
                }
              }
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'putTransportDetails'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->putTransportDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for putTransportDetails_401
     */
    public function testPutTransportDetails401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putTransportDetails_403
     */
    public function testPutTransportDetails403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putTransportDetails_404
     */
    public function testPutTransportDetails404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putTransportDetails_429
     */
    public function testPutTransportDetails429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putTransportDetails_500
     */
    public function testPutTransportDetails500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putTransportDetails_503
     */
    public function testPutTransportDetails503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateInboundShipment_200
     */
    public function testUpdateInboundShipment200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateInboundShipment200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/InboundShipmentResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;MarketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
              &quot;InboundShipmentHeader&quot; : {
                &quot;ShipmentName&quot; : &quot;Shipment for FBA15DJCQ1ZF&quot;,
                &quot;ShipFromAddress&quot; : {
                  &quot;Name&quot; : &quot;Uma Test&quot;,
                  &quot;AddressLine1&quot; : &quot;123 any st&quot;,
                  &quot;AddressLine2&quot; : &quot;&quot;,
                  &quot;DistrictOrCounty&quot; : &quot;Washtenaw&quot;,
                  &quot;City&quot; : &quot;Ann Arbor&quot;,
                  &quot;StateOrProvinceCode&quot; : &quot;CO&quot;,
                  &quot;CountryCode&quot; : &quot;US&quot;,
                  &quot;PostalCode&quot; : &quot;48104&quot;
                },
                &quot;DestinationFulfillmentCenterId&quot; : &quot;ABE2&quot;,
                &quot;ShipmentStatus&quot; : &quot;WORKING&quot;,
                &quot;LabelPrepPreference&quot; : &quot;SELLER_LABEL&quot;
              },
              &quot;InboundShipmentItems&quot; : [ {
                &quot;SellerSKU&quot; : &quot;PSMM-TEST-SKU-Apr-03_21_17_20-0379&quot;,
                &quot;QuantityShipped&quot; : 1
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;ShipmentId&quot; : &quot;FBA15DJCQ1ZF&quot;
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'updateInboundShipment'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateInboundShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateInboundShipment_400
     */
    public function testUpdateInboundShipment400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateInboundShipment400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/InboundShipmentResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;MarketplaceId&quot; : &quot;BADID&quot;,
              &quot;InboundShipmentHeader&quot; : {
                &quot;ShipmentName&quot; : &quot;Shipment for FBA15DJCQ1ZF&quot;,
                &quot;ShipFromAddress&quot; : {
                  &quot;Name&quot; : &quot;Uma Test&quot;,
                  &quot;AddressLine1&quot; : &quot;123 any st&quot;,
                  &quot;AddressLine2&quot; : &quot;&quot;,
                  &quot;DistrictOrCounty&quot; : &quot;Washtenaw&quot;,
                  &quot;City&quot; : &quot;Ann Arbor&quot;,
                  &quot;StateOrProvinceCode&quot; : &quot;CO&quot;,
                  &quot;CountryCode&quot; : &quot;US&quot;,
                  &quot;PostalCode&quot; : &quot;48104&quot;
                },
                &quot;DestinationFulfillmentCenterId&quot; : &quot;ABE2&quot;,
                &quot;ShipmentStatus&quot; : &quot;WORKING&quot;,
                &quot;LabelPrepPreference&quot; : &quot;SELLER_LABEL&quot;
              },
              &quot;InboundShipmentItems&quot; : [ {
                &quot;SellerSKU&quot; : &quot;PSMM-TEST-SKU-Apr-03_21_17_20-0379&quot;,
                &quot;QuantityShipped&quot; : 1
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'updateInboundShipment'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateInboundShipmentWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateInboundShipment_401
     */
    public function testUpdateInboundShipment401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateInboundShipment_403
     */
    public function testUpdateInboundShipment403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateInboundShipment_404
     */
    public function testUpdateInboundShipment404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateInboundShipment_429
     */
    public function testUpdateInboundShipment429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateInboundShipment_500
     */
    public function testUpdateInboundShipment500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateInboundShipment_503
     */
    public function testUpdateInboundShipment503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for voidTransport_200
     */
    public function testVoidTransport200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testVoidTransport200', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/VoidTransportResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;TransportResult&quot; : {
            &quot;TransportStatus&quot; : &quot;VOIDING&quot;
          }
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'voidTransport'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->voidTransportWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for voidTransport_400
     */
    public function testVoidTransport400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testVoidTransport400', 'FbaInboundApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/VoidTransportResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;badshipmentId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;Invalid Input&quot;,
          &quot;message&quot; : &quot;Data is invalid. Please check.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'voidTransport'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('FbaInboundApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->voidTransportWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for voidTransport_401
     */
    public function testVoidTransport401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for voidTransport_403
     */
    public function testVoidTransport403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for voidTransport_404
     */
    public function testVoidTransport404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for voidTransport_429
     */
    public function testVoidTransport429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for voidTransport_500
     */
    public function testVoidTransport500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for voidTransport_503
     */
    public function testVoidTransport503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
}
