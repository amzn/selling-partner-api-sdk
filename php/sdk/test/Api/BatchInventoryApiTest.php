<?php
/**
 * BatchInventoryApiTest
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for External Fulfillment Inventory Management
 *
 * You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace SpApi\Test\Api;

use SpApi\ApiException;
use SpApi\Api\externalFulfillment\inventory\v2024_09_11\BatchInventoryApi;
use SpApi\ObjectSerializer;

/**
 * BatchInventoryApiTest Class Doc Comment
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BatchInventoryApiTest extends BaseTestCase
{
    private BatchInventoryApi $apiInstance;
    public function setUp(): void
    {
        parent::setUp();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('BatchInventoryApi', $this->getName());
        $this->apiInstance = new BatchInventoryApi($this->config, null);
        // Change Time Format if it requires
        $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('BatchInventoryApi');
        if ($specificTimeFormat) {
            ObjectSerializer::setDateTimeFormat($specificTimeFormat);
        }
    }

    /**
     * Test case for batchInventory_207
     */
    public function testBatchInventory207()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testBatchInventory207', 'BatchInventoryApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Multi-status response that contains information about numerous resources.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/BatchInventoryResponse&quot;
      },
      &quot;example&quot; : {
        &quot;responses&quot; : [ {
          &quot;status&quot; : {
            &quot;statusCode&quot; : 200,
            &quot;reasonPhrase&quot; : &quot;Success&quot;
          },
          &quot;body&quot; : {
            &quot;locationId&quot; : &quot;EXSB&quot;,
            &quot;sellableQuantity&quot; : 20,
            &quot;reservedQuantity&quot; : 5,
            &quot;clientSequenceNumber&quot; : 12345678,
            &quot;marketplaceAttributes&quot; : {
              &quot;marketplaceId&quot; : &quot;AXJDDKDFDKDF&quot;,
              &quot;channelName&quot; : &quot;FBA&quot;
            },
            &quot;skuId&quot; : &quot;efptestsku1&quot;,
            &quot;actionableErrors&quot; : [ ]
          }
        }, {
          &quot;status&quot; : {
            &quot;statusCode&quot; : 400,
            &quot;reasonPhrase&quot; : &quot;Invalid Input&quot;
          },
          &quot;body&quot; : {
            &quot;skuId&quot; : &quot;efptestsku2&quot;,
            &quot;locationId&quot; : &quot;EXSB&quot;,
            &quot;actionableErrors&quot; : [ {
              &quot;errorType&quot; : &quot;INVALID_SKU&quot;,
              &quot;errorSubType&quot; : &quot;The requested Sku does not exist for the seller in requested marketplace.&quot;
            } ]
          }
        } ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;requests&quot; : [ {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/update?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku1&quot;,
                &quot;body&quot; : {
                  &quot;quantity&quot; : 15,
                  &quot;clientSequenceNumber&quot; : 12345678,
                  &quot;marketplaceAttributes&quot; : {
                    &quot;marketplaceId&quot; : &quot;AXJDDKDFDKDF&quot;,
                    &quot;channelName&quot; : &quot;FBA&quot;
                  }
                }
              }, {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/fetch?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku2&quot;,
                &quot;body&quot; : {
                  &quot;marketplaceAttributes&quot; : {
                    &quot;marketplaceId&quot; : &quot;AXJDDKDFDKDF&quot;,
                    &quot;channelName&quot; : &quot;FBA&quot;
                  }
                }
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;responses&quot; : [ {
          &quot;status&quot; : {
            &quot;statusCode&quot; : 200,
            &quot;reasonPhrase&quot; : &quot;Success&quot;
          },
          &quot;body&quot; : {
            &quot;locationId&quot; : &quot;EXSB&quot;,
            &quot;sellableQuantity&quot; : 20,
            &quot;reservedQuantity&quot; : 5,
            &quot;clientSequenceNumber&quot; : 12345678,
            &quot;marketplaceAttributes&quot; : {
              &quot;marketplaceId&quot; : &quot;AXJDDKDFDKDF&quot;,
              &quot;channelName&quot; : &quot;FBA&quot;
            },
            &quot;skuId&quot; : &quot;efptestsku1&quot;,
            &quot;actionableErrors&quot; : [ ]
          }
        }, {
          &quot;status&quot; : {
            &quot;statusCode&quot; : 400,
            &quot;reasonPhrase&quot; : &quot;Invalid Input&quot;
          },
          &quot;body&quot; : {
            &quot;skuId&quot; : &quot;efptestsku2&quot;,
            &quot;locationId&quot; : &quot;EXSB&quot;,
            &quot;actionableErrors&quot; : [ {
              &quot;errorType&quot; : &quot;INVALID_SKU&quot;,
              &quot;errorSubType&quot; : &quot;The requested Sku does not exist for the seller in requested marketplace.&quot;
            } ]
          }
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'batchInventory'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('BatchInventoryApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->batchInventoryWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(207, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 207, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 207);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for batchInventory_400
     */
    public function testBatchInventory400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testBatchInventory400', 'BatchInventoryApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;requests&quot; : [ {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/update?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku3&quot;,
                &quot;body&quot; : {
                  &quot;quantity&quot; : 15,
                  &quot;clientSequenceNumber&quot; : 12345678,
                  &quot;marketplaceAttributes&quot; : {
                    &quot;marketplaceId&quot; : &quot;AXJDDKDFDKDF&quot;,
                    &quot;channelName&quot; : &quot;FBA&quot;
                  }
                }
              }, {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/fetch?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku4&quot;,
                &quot;body&quot; : {
                  &quot;marketplaceAttributes&quot; : {
                    &quot;marketplaceId&quot; : &quot;AXJDDKDFDKDF&quot;,
                    &quot;channelName&quot; : &quot;FBA&quot;
                  }
                }
              }, {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/fetch?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku4&quot;,
                &quot;body&quot; : { }
              }, {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/fetch?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku5&quot;,
                &quot;body&quot; : { }
              }, {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/fetch?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku6&quot;,
                &quot;body&quot; : { }
              }, {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/fetch?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku7&quot;,
                &quot;body&quot; : { }
              }, {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/fetch?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku8&quot;,
                &quot;body&quot; : { }
              }, {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/fetch?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku9&quot;,
                &quot;body&quot; : { }
              }, {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/fetch?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku10&quot;,
                &quot;body&quot; : { }
              }, {
                &quot;method&quot; : &quot;POST&quot;,
                &quot;uri&quot; : &quot;/inventory/fetch?locationId&#x3D;EXSB&amp;skuId&#x3D;efptestsku11&quot;,
                &quot;body&quot; : { }
              } ]
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;BATCH_SIZE_EXCEED&quot;,
          &quot;message&quot; : &quot;Maximum number for requests supported in batch is 10.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'batchInventory'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('BatchInventoryApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->batchInventoryWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for batchInventory_401
     */
    public function testBatchInventory401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for batchInventory_403
     */
    public function testBatchInventory403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for batchInventory_404
     */
    public function testBatchInventory404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for batchInventory_429
     */
    public function testBatchInventory429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for batchInventory_413
     */
    public function testBatchInventory413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for batchInventory_415
     */
    public function testBatchInventory415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for batchInventory_500
     */
    public function testBatchInventory500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for batchInventory_503
     */
    public function testBatchInventory503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
}
