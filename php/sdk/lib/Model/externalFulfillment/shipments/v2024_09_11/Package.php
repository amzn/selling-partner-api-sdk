<?php

/**
 * Package.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing.
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\externalFulfillment\shipments\v2024_09_11;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * Package Class Doc Comment.
 *
 * @category Class
 *
 * @description A package that is created to ship one or more of a shipment&#39;s line items.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class Package implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    public const STATUS_CREATED = 'CREATED';
    public const STATUS_PICKUP_SLOT_RETRIEVED = 'PICKUP_SLOT_RETRIEVED';
    public const STATUS_INVOICE_GENERATED = 'INVOICE_GENERATED';
    public const STATUS_SHIPLABEL_GENERATED = 'SHIPLABEL_GENERATED';
    public const STATUS_SHIPPED = 'SHIPPED';
    public const STATUS_DELIVERED = 'DELIVERED';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const PACKAGE_HANDLING_REQUIREMENTS_NORMAL = 'NORMAL';
    public const PACKAGE_HANDLING_REQUIREMENTS_FRAGILE = 'FRAGILE';

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Package';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'id' => 'string',
        'dimensions' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\PackageDimensions',
        'weight' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\Weight',
        'hazmat_labels' => 'string[]',
        'package_line_items' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\PackageLineItem[]',
        'status' => 'string',
        'package_handling_requirements' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'id' => null,
        'dimensions' => null,
        'weight' => null,
        'hazmat_labels' => null,
        'package_line_items' => null,
        'status' => null,
        'package_handling_requirements' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'id' => false,
        'dimensions' => false,
        'weight' => false,
        'hazmat_labels' => true,
        'package_line_items' => false,
        'status' => true,
        'package_handling_requirements' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'dimensions' => 'dimensions',
        'weight' => 'weight',
        'hazmat_labels' => 'hazmatLabels',
        'package_line_items' => 'packageLineItems',
        'status' => 'status',
        'package_handling_requirements' => 'packageHandlingRequirements',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'id' => 'setId',
        'dimensions' => 'setDimensions',
        'weight' => 'setWeight',
        'hazmat_labels' => 'setHazmatLabels',
        'package_line_items' => 'setPackageLineItems',
        'status' => 'setStatus',
        'package_handling_requirements' => 'setPackageHandlingRequirements',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'id' => 'getId',
        'dimensions' => 'getDimensions',
        'weight' => 'getWeight',
        'hazmat_labels' => 'getHazmatLabels',
        'package_line_items' => 'getPackageLineItems',
        'status' => 'getStatus',
        'package_handling_requirements' => 'getPackageHandlingRequirements',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('hazmat_labels', $data ?? [], null);
        $this->setIfExists('package_line_items', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('package_handling_requirements', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getStatusAllowableValues(): array
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_PICKUP_SLOT_RETRIEVED,
            self::STATUS_INVOICE_GENERATED,
            self::STATUS_SHIPLABEL_GENERATED,
            self::STATUS_SHIPPED,
            self::STATUS_DELIVERED,
            self::STATUS_CANCELLED,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getPackageHandlingRequirementsAllowableValues(): array
    {
        return [
            self::PACKAGE_HANDLING_REQUIREMENTS_NORMAL,
            self::PACKAGE_HANDLING_REQUIREMENTS_FRAGILE,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['id']) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (null === $this->container['dimensions']) {
            $invalidProperties[] = "'dimensions' can't be null";
        }
        if (null === $this->container['weight']) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if (!is_null($this->container['hazmat_labels']) && (count($this->container['hazmat_labels']) < 0)) {
            $invalidProperties[] = "invalid value for 'hazmat_labels', number of items must be greater than or equal to 0.";
        }

        if (null === $this->container['package_line_items']) {
            $invalidProperties[] = "'package_line_items' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPackageHandlingRequirementsAllowableValues();
        if (!is_null($this->container['package_handling_requirements']) && !in_array($this->container['package_handling_requirements'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'package_handling_requirements', must be one of '%s'",
                $this->container['package_handling_requirements'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id an ID that uniquely identifies a package within a shipment
     */
    public function setId(string $id): self
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets dimensions.
     */
    public function getDimensions(): PackageDimensions
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions.
     *
     * @param PackageDimensions $dimensions dimensions
     */
    public function setDimensions(PackageDimensions $dimensions): self
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets weight.
     */
    public function getWeight(): Weight
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight.
     *
     * @param Weight $weight weight
     */
    public function setWeight(Weight $weight): self
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets hazmat_labels.
     */
    public function getHazmatLabels(): ?array
    {
        return $this->container['hazmat_labels'];
    }

    /**
     * Sets hazmat_labels.
     *
     * @param null|array $hazmat_labels the optional list of HAZMAT labels applied to the package
     */
    public function setHazmatLabels(?array $hazmat_labels): self
    {
        if (is_null($hazmat_labels)) {
            array_push($this->openAPINullablesSetToNull, 'hazmat_labels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hazmat_labels', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($hazmat_labels) && (count($hazmat_labels) < 0)) {
            throw new \InvalidArgumentException('invalid length for $hazmat_labels when calling Package., number of items must be greater than or equal to 0.');
        }
        $this->container['hazmat_labels'] = $hazmat_labels;

        return $this;
    }

    /**
     * Gets package_line_items.
     */
    public function getPackageLineItems(): array
    {
        return $this->container['package_line_items'];
    }

    /**
     * Sets package_line_items.
     *
     * @param array $package_line_items the list of line items in a package
     */
    public function setPackageLineItems(array $package_line_items): self
    {
        if (is_null($package_line_items)) {
            throw new \InvalidArgumentException('non-nullable package_line_items cannot be null');
        }
        $this->container['package_line_items'] = $package_line_items;

        return $this;
    }

    /**
     * Gets status.
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param null|string $status the current status of the package
     */
    public function setStatus(?string $status): self
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets package_handling_requirements.
     */
    public function getPackageHandlingRequirements(): ?string
    {
        return $this->container['package_handling_requirements'];
    }

    /**
     * Sets package_handling_requirements.
     *
     * @param null|string $package_handling_requirements whether the package requires standard handling or extra care
     */
    public function setPackageHandlingRequirements(?string $package_handling_requirements): self
    {
        if (is_null($package_handling_requirements)) {
            array_push($this->openAPINullablesSetToNull, 'package_handling_requirements');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('package_handling_requirements', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPackageHandlingRequirementsAllowableValues();
        if (!is_null($package_handling_requirements) && !in_array($package_handling_requirements, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'package_handling_requirements', must be one of '%s'",
                    $package_handling_requirements,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_handling_requirements'] = $package_handling_requirements;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
