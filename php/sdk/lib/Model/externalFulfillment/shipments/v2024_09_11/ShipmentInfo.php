<?php

/**
 * ShipmentInfo.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing.
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\externalFulfillment\shipments\v2024_09_11;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * ShipmentInfo Class Doc Comment.
 *
 * @category Class
 *
 * @description High-level details of the shipment.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentInfo implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    public const SHIPMENT_TYPE__NEW = 'NEW';
    public const SHIPMENT_TYPE_EXCHANGE = 'EXCHANGE';
    public const SHIPMENT_TYPE_REPLACEMENT = 'REPLACEMENT';
    public const PROCESSING_SOURCE_EXTERNAL_PLATFORM = 'EXTERNAL_PLATFORM';
    public const PROCESSING_SOURCE_INTERNAL_PLATFORM = 'INTERNAL_PLATFORM';

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ShipmentInfo';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'shipment_type' => 'string',
        'original_shipment_info' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\ReplacedShipmentInfo',
        'number_of_units' => 'int',
        'priority' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\Priority',
        'buyer_order_id' => 'string',
        'order_states_eligible_for_rejection' => 'string[]',
        'order_placed_timestamp' => 'string',
        'processing_source' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'shipment_type' => null,
        'original_shipment_info' => null,
        'number_of_units' => null,
        'priority' => null,
        'buyer_order_id' => null,
        'order_states_eligible_for_rejection' => null,
        'order_placed_timestamp' => null,
        'processing_source' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'shipment_type' => false,
        'original_shipment_info' => true,
        'number_of_units' => false,
        'priority' => false,
        'buyer_order_id' => false,
        'order_states_eligible_for_rejection' => true,
        'order_placed_timestamp' => true,
        'processing_source' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'shipment_type' => 'shipmentType',
        'original_shipment_info' => 'originalShipmentInfo',
        'number_of_units' => 'numberOfUnits',
        'priority' => 'priority',
        'buyer_order_id' => 'buyerOrderId',
        'order_states_eligible_for_rejection' => 'orderStatesEligibleForRejection',
        'order_placed_timestamp' => 'orderPlacedTimestamp',
        'processing_source' => 'processingSource',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'shipment_type' => 'setShipmentType',
        'original_shipment_info' => 'setOriginalShipmentInfo',
        'number_of_units' => 'setNumberOfUnits',
        'priority' => 'setPriority',
        'buyer_order_id' => 'setBuyerOrderId',
        'order_states_eligible_for_rejection' => 'setOrderStatesEligibleForRejection',
        'order_placed_timestamp' => 'setOrderPlacedTimestamp',
        'processing_source' => 'setProcessingSource',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'shipment_type' => 'getShipmentType',
        'original_shipment_info' => 'getOriginalShipmentInfo',
        'number_of_units' => 'getNumberOfUnits',
        'priority' => 'getPriority',
        'buyer_order_id' => 'getBuyerOrderId',
        'order_states_eligible_for_rejection' => 'getOrderStatesEligibleForRejection',
        'order_placed_timestamp' => 'getOrderPlacedTimestamp',
        'processing_source' => 'getProcessingSource',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shipment_type', $data ?? [], null);
        $this->setIfExists('original_shipment_info', $data ?? [], null);
        $this->setIfExists('number_of_units', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('buyer_order_id', $data ?? [], null);
        $this->setIfExists('order_states_eligible_for_rejection', $data ?? [], null);
        $this->setIfExists('order_placed_timestamp', $data ?? [], null);
        $this->setIfExists('processing_source', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getShipmentTypeAllowableValues(): array
    {
        return [
            self::SHIPMENT_TYPE__NEW,
            self::SHIPMENT_TYPE_EXCHANGE,
            self::SHIPMENT_TYPE_REPLACEMENT,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getProcessingSourceAllowableValues(): array
    {
        return [
            self::PROCESSING_SOURCE_EXTERNAL_PLATFORM,
            self::PROCESSING_SOURCE_INTERNAL_PLATFORM,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['shipment_type']) {
            $invalidProperties[] = "'shipment_type' can't be null";
        }
        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($this->container['shipment_type']) && !in_array($this->container['shipment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipment_type', must be one of '%s'",
                $this->container['shipment_type'],
                implode("', '", $allowedValues)
            );
        }

        if (null === $this->container['number_of_units']) {
            $invalidProperties[] = "'number_of_units' can't be null";
        }
        if ($this->container['number_of_units'] < 1) {
            $invalidProperties[] = "invalid value for 'number_of_units', must be bigger than or equal to 1.";
        }

        if (null === $this->container['priority']) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if (null === $this->container['buyer_order_id']) {
            $invalidProperties[] = "'buyer_order_id' can't be null";
        }
        if (!is_null($this->container['order_states_eligible_for_rejection']) && (count($this->container['order_states_eligible_for_rejection']) < 0)) {
            $invalidProperties[] = "invalid value for 'order_states_eligible_for_rejection', number of items must be greater than or equal to 0.";
        }

        $allowedValues = $this->getProcessingSourceAllowableValues();
        if (!is_null($this->container['processing_source']) && !in_array($this->container['processing_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'processing_source', must be one of '%s'",
                $this->container['processing_source'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shipment_type.
     */
    public function getShipmentType(): string
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type.
     *
     * @param string $shipment_type the type of shipment
     */
    public function setShipmentType(string $shipment_type): self
    {
        if (is_null($shipment_type)) {
            throw new \InvalidArgumentException('non-nullable shipment_type cannot be null');
        }
        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!in_array($shipment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipment_type', must be one of '%s'",
                    $shipment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets original_shipment_info.
     */
    public function getOriginalShipmentInfo(): ?ReplacedShipmentInfo
    {
        return $this->container['original_shipment_info'];
    }

    /**
     * Sets original_shipment_info.
     *
     * @param null|ReplacedShipmentInfo $original_shipment_info original_shipment_info
     */
    public function setOriginalShipmentInfo(?ReplacedShipmentInfo $original_shipment_info): self
    {
        if (is_null($original_shipment_info)) {
            array_push($this->openAPINullablesSetToNull, 'original_shipment_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_shipment_info', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_shipment_info'] = $original_shipment_info;

        return $this;
    }

    /**
     * Gets number_of_units.
     */
    public function getNumberOfUnits(): int
    {
        return $this->container['number_of_units'];
    }

    /**
     * Sets number_of_units.
     *
     * @param int $number_of_units total number of units in the shipment
     */
    public function setNumberOfUnits(int $number_of_units): self
    {
        if (is_null($number_of_units)) {
            throw new \InvalidArgumentException('non-nullable number_of_units cannot be null');
        }

        if ($number_of_units < 1) {
            throw new \InvalidArgumentException('invalid value for $number_of_units when calling ShipmentInfo., must be bigger than or equal to 1.');
        }

        $this->container['number_of_units'] = $number_of_units;

        return $this;
    }

    /**
     * Gets priority.
     */
    public function getPriority(): string
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority.
     *
     * @param string $priority priority
     */
    public function setPriority(string $priority): self
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets buyer_order_id.
     */
    public function getBuyerOrderId(): string
    {
        return $this->container['buyer_order_id'];
    }

    /**
     * Sets buyer_order_id.
     *
     * @param string $buyer_order_id the buyer's order ID
     */
    public function setBuyerOrderId(string $buyer_order_id): self
    {
        if (is_null($buyer_order_id)) {
            throw new \InvalidArgumentException('non-nullable buyer_order_id cannot be null');
        }
        $this->container['buyer_order_id'] = $buyer_order_id;

        return $this;
    }

    /**
     * Gets order_states_eligible_for_rejection.
     */
    public function getOrderStatesEligibleForRejection(): ?array
    {
        return $this->container['order_states_eligible_for_rejection'];
    }

    /**
     * Sets order_states_eligible_for_rejection.
     *
     * @param null|array $order_states_eligible_for_rejection A list of order statuses for which the marketplace allows order rejection (seller cancellation). If the order has a status that does not belong to this list, then seller cancellation is not possible.
     */
    public function setOrderStatesEligibleForRejection(?array $order_states_eligible_for_rejection): self
    {
        if (is_null($order_states_eligible_for_rejection)) {
            array_push($this->openAPINullablesSetToNull, 'order_states_eligible_for_rejection');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_states_eligible_for_rejection', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($order_states_eligible_for_rejection) && (count($order_states_eligible_for_rejection) < 0)) {
            throw new \InvalidArgumentException('invalid length for $order_states_eligible_for_rejection when calling ShipmentInfo., number of items must be greater than or equal to 0.');
        }
        $this->container['order_states_eligible_for_rejection'] = $order_states_eligible_for_rejection;

        return $this;
    }

    /**
     * Gets order_placed_timestamp.
     */
    public function getOrderPlacedTimestamp(): ?string
    {
        return $this->container['order_placed_timestamp'];
    }

    /**
     * Sets order_placed_timestamp.
     *
     * @param null|string $order_placed_timestamp The timestamp of when the order was placed, in UTC
     */
    public function setOrderPlacedTimestamp(?string $order_placed_timestamp): self
    {
        if (is_null($order_placed_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'order_placed_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_placed_timestamp', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_placed_timestamp'] = $order_placed_timestamp;

        return $this;
    }

    /**
     * Gets processing_source.
     */
    public function getProcessingSource(): ?string
    {
        return $this->container['processing_source'];
    }

    /**
     * Sets processing_source.
     *
     * @param null|string $processing_source the source of the order operation
     */
    public function setProcessingSource(?string $processing_source): self
    {
        if (is_null($processing_source)) {
            array_push($this->openAPINullablesSetToNull, 'processing_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('processing_source', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getProcessingSourceAllowableValues();
        if (!is_null($processing_source) && !in_array($processing_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'processing_source', must be one of '%s'",
                    $processing_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['processing_source'] = $processing_source;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
