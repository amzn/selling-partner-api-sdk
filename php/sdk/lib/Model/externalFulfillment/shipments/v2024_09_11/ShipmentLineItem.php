<?php

/**
 * ShipmentLineItem.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing.
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\externalFulfillment\shipments\v2024_09_11;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * ShipmentLineItem Class Doc Comment.
 *
 * @category Class
 *
 * @description Information about a line item in a shipment.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentLineItem implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ShipmentLineItem';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'shipment_line_item_id' => 'string',
        'merchant_sku' => 'string',
        'number_of_units' => 'int',
        'serial_numbers' => 'string[]',
        'piece_type' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\PieceType',
        'hazmat_labels' => 'string[]',
        'gift_attributes' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\GiftAttributes',
        'charges' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\Charge[]',
        'cancellations' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\Cancellation[]',
        'hsn_code' => 'string',
        'recommended_country_of_origin' => 'string',
        'country_of_origin' => 'string',
        'recommended_currency_code' => 'string',
        'item_value' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\Amount',
        'compliance_attributes' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\ComplianceAttributes',
        'custom_attributes' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\CustomAttribute[]'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'shipment_line_item_id' => null,
        'merchant_sku' => null,
        'number_of_units' => null,
        'serial_numbers' => null,
        'piece_type' => null,
        'hazmat_labels' => null,
        'gift_attributes' => null,
        'charges' => null,
        'cancellations' => null,
        'hsn_code' => null,
        'recommended_country_of_origin' => null,
        'country_of_origin' => null,
        'recommended_currency_code' => null,
        'item_value' => null,
        'compliance_attributes' => null,
        'custom_attributes' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'shipment_line_item_id' => false,
        'merchant_sku' => false,
        'number_of_units' => false,
        'serial_numbers' => true,
        'piece_type' => true,
        'hazmat_labels' => true,
        'gift_attributes' => true,
        'charges' => false,
        'cancellations' => true,
        'hsn_code' => true,
        'recommended_country_of_origin' => true,
        'country_of_origin' => true,
        'recommended_currency_code' => true,
        'item_value' => true,
        'compliance_attributes' => false,
        'custom_attributes' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'shipment_line_item_id' => 'shipmentLineItemId',
        'merchant_sku' => 'merchantSku',
        'number_of_units' => 'numberOfUnits',
        'serial_numbers' => 'serialNumbers',
        'piece_type' => 'pieceType',
        'hazmat_labels' => 'hazmatLabels',
        'gift_attributes' => 'giftAttributes',
        'charges' => 'charges',
        'cancellations' => 'cancellations',
        'hsn_code' => 'hsnCode',
        'recommended_country_of_origin' => 'recommendedCountryOfOrigin',
        'country_of_origin' => 'countryOfOrigin',
        'recommended_currency_code' => 'recommendedCurrencyCode',
        'item_value' => 'itemValue',
        'compliance_attributes' => 'complianceAttributes',
        'custom_attributes' => 'customAttributes',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'shipment_line_item_id' => 'setShipmentLineItemId',
        'merchant_sku' => 'setMerchantSku',
        'number_of_units' => 'setNumberOfUnits',
        'serial_numbers' => 'setSerialNumbers',
        'piece_type' => 'setPieceType',
        'hazmat_labels' => 'setHazmatLabels',
        'gift_attributes' => 'setGiftAttributes',
        'charges' => 'setCharges',
        'cancellations' => 'setCancellations',
        'hsn_code' => 'setHsnCode',
        'recommended_country_of_origin' => 'setRecommendedCountryOfOrigin',
        'country_of_origin' => 'setCountryOfOrigin',
        'recommended_currency_code' => 'setRecommendedCurrencyCode',
        'item_value' => 'setItemValue',
        'compliance_attributes' => 'setComplianceAttributes',
        'custom_attributes' => 'setCustomAttributes',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'shipment_line_item_id' => 'getShipmentLineItemId',
        'merchant_sku' => 'getMerchantSku',
        'number_of_units' => 'getNumberOfUnits',
        'serial_numbers' => 'getSerialNumbers',
        'piece_type' => 'getPieceType',
        'hazmat_labels' => 'getHazmatLabels',
        'gift_attributes' => 'getGiftAttributes',
        'charges' => 'getCharges',
        'cancellations' => 'getCancellations',
        'hsn_code' => 'getHsnCode',
        'recommended_country_of_origin' => 'getRecommendedCountryOfOrigin',
        'country_of_origin' => 'getCountryOfOrigin',
        'recommended_currency_code' => 'getRecommendedCurrencyCode',
        'item_value' => 'getItemValue',
        'compliance_attributes' => 'getComplianceAttributes',
        'custom_attributes' => 'getCustomAttributes',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shipment_line_item_id', $data ?? [], null);
        $this->setIfExists('merchant_sku', $data ?? [], null);
        $this->setIfExists('number_of_units', $data ?? [], null);
        $this->setIfExists('serial_numbers', $data ?? [], null);
        $this->setIfExists('piece_type', $data ?? [], null);
        $this->setIfExists('hazmat_labels', $data ?? [], null);
        $this->setIfExists('gift_attributes', $data ?? [], null);
        $this->setIfExists('charges', $data ?? [], null);
        $this->setIfExists('cancellations', $data ?? [], null);
        $this->setIfExists('hsn_code', $data ?? [], null);
        $this->setIfExists('recommended_country_of_origin', $data ?? [], null);
        $this->setIfExists('country_of_origin', $data ?? [], null);
        $this->setIfExists('recommended_currency_code', $data ?? [], null);
        $this->setIfExists('item_value', $data ?? [], null);
        $this->setIfExists('compliance_attributes', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['shipment_line_item_id']) {
            $invalidProperties[] = "'shipment_line_item_id' can't be null";
        }
        if (null === $this->container['merchant_sku']) {
            $invalidProperties[] = "'merchant_sku' can't be null";
        }
        if (null === $this->container['number_of_units']) {
            $invalidProperties[] = "'number_of_units' can't be null";
        }
        if ($this->container['number_of_units'] < 1) {
            $invalidProperties[] = "invalid value for 'number_of_units', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['serial_numbers']) && (count($this->container['serial_numbers']) < 0)) {
            $invalidProperties[] = "invalid value for 'serial_numbers', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['hazmat_labels']) && (count($this->container['hazmat_labels']) < 0)) {
            $invalidProperties[] = "invalid value for 'hazmat_labels', number of items must be greater than or equal to 0.";
        }

        if (null === $this->container['charges']) {
            $invalidProperties[] = "'charges' can't be null";
        }
        if (count($this->container['charges']) < 1) {
            $invalidProperties[] = "invalid value for 'charges', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['cancellations']) && (count($this->container['cancellations']) < 0)) {
            $invalidProperties[] = "invalid value for 'cancellations', number of items must be greater than or equal to 0.";
        }

        if (null === $this->container['compliance_attributes']) {
            $invalidProperties[] = "'compliance_attributes' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shipment_line_item_id.
     */
    public function getShipmentLineItemId(): string
    {
        return $this->container['shipment_line_item_id'];
    }

    /**
     * Sets shipment_line_item_id.
     *
     * @param string $shipment_line_item_id An identifier for a shipment's line item. This identifier is guaranteed to be unique within the scope of its containing shipment.
     */
    public function setShipmentLineItemId(string $shipment_line_item_id): self
    {
        if (is_null($shipment_line_item_id)) {
            throw new \InvalidArgumentException('non-nullable shipment_line_item_id cannot be null');
        }
        $this->container['shipment_line_item_id'] = $shipment_line_item_id;

        return $this;
    }

    /**
     * Gets merchant_sku.
     */
    public function getMerchantSku(): string
    {
        return $this->container['merchant_sku'];
    }

    /**
     * Sets merchant_sku.
     *
     * @param string $merchant_sku The seller SKU of a product (catalog item). A unique number assigned by the seller when listing an item.
     */
    public function setMerchantSku(string $merchant_sku): self
    {
        if (is_null($merchant_sku)) {
            throw new \InvalidArgumentException('non-nullable merchant_sku cannot be null');
        }
        $this->container['merchant_sku'] = $merchant_sku;

        return $this;
    }

    /**
     * Gets number_of_units.
     */
    public function getNumberOfUnits(): int
    {
        return $this->container['number_of_units'];
    }

    /**
     * Sets number_of_units.
     *
     * @param int $number_of_units the number of items of the SKU in this line item
     */
    public function setNumberOfUnits(int $number_of_units): self
    {
        if (is_null($number_of_units)) {
            throw new \InvalidArgumentException('non-nullable number_of_units cannot be null');
        }

        if ($number_of_units < 1) {
            throw new \InvalidArgumentException('invalid value for $number_of_units when calling ShipmentLineItem., must be bigger than or equal to 1.');
        }

        $this->container['number_of_units'] = $number_of_units;

        return $this;
    }

    /**
     * Gets serial_numbers.
     */
    public function getSerialNumbers(): ?array
    {
        return $this->container['serial_numbers'];
    }

    /**
     * Sets serial_numbers.
     *
     * @param null|array $serial_numbers the serial numbers for each item in this line item
     */
    public function setSerialNumbers(?array $serial_numbers): self
    {
        if (is_null($serial_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'serial_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serial_numbers', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($serial_numbers) && (count($serial_numbers) < 0)) {
            throw new \InvalidArgumentException('invalid length for $serial_numbers when calling ShipmentLineItem., number of items must be greater than or equal to 0.');
        }
        $this->container['serial_numbers'] = $serial_numbers;

        return $this;
    }

    /**
     * Gets piece_type.
     */
    public function getPieceType(): ?string
    {
        return $this->container['piece_type'];
    }

    /**
     * Sets piece_type.
     *
     * @param null|string $piece_type piece_type
     */
    public function setPieceType(?string $piece_type): self
    {
        if (is_null($piece_type)) {
            array_push($this->openAPINullablesSetToNull, 'piece_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('piece_type', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['piece_type'] = $piece_type;

        return $this;
    }

    /**
     * Gets hazmat_labels.
     */
    public function getHazmatLabels(): ?array
    {
        return $this->container['hazmat_labels'];
    }

    /**
     * Sets hazmat_labels.
     *
     * @param null|array $hazmat_labels a list of HAZMAT label identifiers that must be applied to the packages for this line item
     */
    public function setHazmatLabels(?array $hazmat_labels): self
    {
        if (is_null($hazmat_labels)) {
            array_push($this->openAPINullablesSetToNull, 'hazmat_labels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hazmat_labels', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($hazmat_labels) && (count($hazmat_labels) < 0)) {
            throw new \InvalidArgumentException('invalid length for $hazmat_labels when calling ShipmentLineItem., number of items must be greater than or equal to 0.');
        }
        $this->container['hazmat_labels'] = $hazmat_labels;

        return $this;
    }

    /**
     * Gets gift_attributes.
     */
    public function getGiftAttributes(): ?GiftAttributes
    {
        return $this->container['gift_attributes'];
    }

    /**
     * Sets gift_attributes.
     *
     * @param null|GiftAttributes $gift_attributes gift_attributes
     */
    public function setGiftAttributes(?GiftAttributes $gift_attributes): self
    {
        if (is_null($gift_attributes)) {
            array_push($this->openAPINullablesSetToNull, 'gift_attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gift_attributes', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gift_attributes'] = $gift_attributes;

        return $this;
    }

    /**
     * Gets charges.
     */
    public function getCharges(): array
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges.
     *
     * @param array $charges the charges associated with the shipment
     */
    public function setCharges(array $charges): self
    {
        if (is_null($charges)) {
            throw new \InvalidArgumentException('non-nullable charges cannot be null');
        }

        if (count($charges) < 1) {
            throw new \InvalidArgumentException('invalid length for $charges when calling ShipmentLineItem., number of items must be greater than or equal to 1.');
        }
        $this->container['charges'] = $charges;

        return $this;
    }

    /**
     * Gets cancellations.
     */
    public function getCancellations(): ?array
    {
        return $this->container['cancellations'];
    }

    /**
     * Sets cancellations.
     *
     * @param null|array $cancellations A list of cancellations for the given line item.  **Note:** Currently, SmartConnect does not support partial cancellation of a shipment or its line items. This list will contain a single value with all the cancellation details.
     */
    public function setCancellations(?array $cancellations): self
    {
        if (is_null($cancellations)) {
            array_push($this->openAPINullablesSetToNull, 'cancellations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancellations', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($cancellations) && (count($cancellations) < 0)) {
            throw new \InvalidArgumentException('invalid length for $cancellations when calling ShipmentLineItem., number of items must be greater than or equal to 0.');
        }
        $this->container['cancellations'] = $cancellations;

        return $this;
    }

    /**
     * Gets hsn_code.
     */
    public function getHsnCode(): ?string
    {
        return $this->container['hsn_code'];
    }

    /**
     * Sets hsn_code.
     *
     * @param null|string $hsn_code the HSN code of SKU in this line item
     */
    public function setHsnCode(?string $hsn_code): self
    {
        if (is_null($hsn_code)) {
            array_push($this->openAPINullablesSetToNull, 'hsn_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hsn_code', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hsn_code'] = $hsn_code;

        return $this;
    }

    /**
     * Gets recommended_country_of_origin.
     */
    public function getRecommendedCountryOfOrigin(): ?string
    {
        return $this->container['recommended_country_of_origin'];
    }

    /**
     * Sets recommended_country_of_origin.
     *
     * @param null|string $recommended_country_of_origin a two-letter country code, as defined by the ISO-3166 alpha-2 standard
     */
    public function setRecommendedCountryOfOrigin(?string $recommended_country_of_origin): self
    {
        if (is_null($recommended_country_of_origin)) {
            array_push($this->openAPINullablesSetToNull, 'recommended_country_of_origin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recommended_country_of_origin', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recommended_country_of_origin'] = $recommended_country_of_origin;

        return $this;
    }

    /**
     * Gets country_of_origin.
     */
    public function getCountryOfOrigin(): ?string
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin.
     *
     * @param null|string $country_of_origin a two-letter country code, as defined by the ISO-3166 alpha-2 standard
     */
    public function setCountryOfOrigin(?string $country_of_origin): self
    {
        if (is_null($country_of_origin)) {
            array_push($this->openAPINullablesSetToNull, 'country_of_origin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_of_origin', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets recommended_currency_code.
     */
    public function getRecommendedCurrencyCode(): ?string
    {
        return $this->container['recommended_currency_code'];
    }

    /**
     * Sets recommended_currency_code.
     *
     * @param null|string $recommended_currency_code the three digit currency code of the currency recommended by the marketplace, in ISO 4217 format
     */
    public function setRecommendedCurrencyCode(?string $recommended_currency_code): self
    {
        if (is_null($recommended_currency_code)) {
            array_push($this->openAPINullablesSetToNull, 'recommended_currency_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recommended_currency_code', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recommended_currency_code'] = $recommended_currency_code;

        return $this;
    }

    /**
     * Gets item_value.
     */
    public function getItemValue(): ?Amount
    {
        return $this->container['item_value'];
    }

    /**
     * Sets item_value.
     *
     * @param null|Amount $item_value item_value
     */
    public function setItemValue(?Amount $item_value): self
    {
        if (is_null($item_value)) {
            array_push($this->openAPINullablesSetToNull, 'item_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_value', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_value'] = $item_value;

        return $this;
    }

    /**
     * Gets compliance_attributes.
     */
    public function getComplianceAttributes(): ComplianceAttributes
    {
        return $this->container['compliance_attributes'];
    }

    /**
     * Sets compliance_attributes.
     *
     * @param ComplianceAttributes $compliance_attributes compliance_attributes
     */
    public function setComplianceAttributes(ComplianceAttributes $compliance_attributes): self
    {
        if (is_null($compliance_attributes)) {
            throw new \InvalidArgumentException('non-nullable compliance_attributes cannot be null');
        }
        $this->container['compliance_attributes'] = $compliance_attributes;

        return $this;
    }

    /**
     * Gets custom_attributes.
     */
    public function getCustomAttributes(): ?array
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes.
     *
     * @param null|array $custom_attributes A list of custom passthrough attributes. For details on these attributes, reach out to your respective program teams at Amazon.
     */
    public function setCustomAttributes(?array $custom_attributes): self
    {
        if (is_null($custom_attributes)) {
            array_push($this->openAPINullablesSetToNull, 'custom_attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_attributes', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
