<?php

/**
 * Shipment.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing.
 *
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\externalFulfillment\shipments\v2024_09_11;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * Shipment Class Doc Comment.
 *
 * @category Class
 *
 * @description Information about a shipment.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class Shipment implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    public const STATUS_CREATED = 'CREATED';
    public const STATUS_ACCEPTED = 'ACCEPTED';
    public const STATUS_CONFIRMED = 'CONFIRMED';
    public const STATUS_PACKAGE_CREATED = 'PACKAGE_CREATED';
    public const STATUS_PICKUP_SLOT_RETRIEVED = 'PICKUP_SLOT_RETRIEVED';
    public const STATUS_INVOICE_GENERATED = 'INVOICE_GENERATED';
    public const STATUS_SHIPLABEL_GENERATED = 'SHIPLABEL_GENERATED';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_SHIPPED = 'SHIPPED';
    public const STATUS_DELIVERED = 'DELIVERED';
    public const SUB_STATUS_PENDING_SCHEDULE = 'PENDING_SCHEDULE';
    public const SUB_STATUS_PENDING_PICKUP = 'PENDING_PICKUP';
    public const SUB_STATUS_PENDING_DROP_OFF = 'PENDING_DROP_OFF';
    public const SUB_STATUS_LABEL_CANCELED = 'LABEL_CANCELED';
    public const SUB_STATUS_PICKED_UP = 'PICKED_UP';
    public const SUB_STATUS_DROPPED_OFF = 'DROPPED_OFF';
    public const SUB_STATUS_AT_ORIGIN_FC = 'AT_ORIGIN_FC';
    public const SUB_STATUS_AT_DESTINATION_FC = 'AT_DESTINATION_FC';
    public const SUB_STATUS_DELIVERED = 'DELIVERED';
    public const SUB_STATUS_NOT_DELIVERED = 'NOT_DELIVERED';
    public const SUB_STATUS_UNDELIVERABLE = 'UNDELIVERABLE';
    public const SUB_STATUS_LOST = 'LOST';
    public const SUB_STATUS_OUT_FOR_DELIVERY = 'OUT_FOR_DELIVERY';
    public const SUB_STATUS_DAMAGED = 'DAMAGED';

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Shipment';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'id' => 'string',
        'location_id' => 'string',
        'marketplace_attributes' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\MarketplaceAttributes',
        'shipment_info' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\ShipmentInfo',
        'invoice_info' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\InvoiceInfo',
        'party_info_list' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\PartyIdentificationInfo[]',
        'shipment_requirements' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\ShipmentRequirements',
        'charges' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\Charge[]',
        'status' => 'string',
        'sub_status' => 'string',
        'line_items' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\ShipmentLineItem[]',
        'shipping_info' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\ShippingInfo',
        'packages' => '\SpApi\Model\externalFulfillment\shipments\v2024_09_11\Package[]',
        'creation_date_time' => 'string',
        'last_updated_date_time' => 'string',
        'earliest_pack_date_time' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'id' => null,
        'location_id' => null,
        'marketplace_attributes' => null,
        'shipment_info' => null,
        'invoice_info' => null,
        'party_info_list' => null,
        'shipment_requirements' => null,
        'charges' => null,
        'status' => null,
        'sub_status' => null,
        'line_items' => null,
        'shipping_info' => null,
        'packages' => null,
        'creation_date_time' => null,
        'last_updated_date_time' => null,
        'earliest_pack_date_time' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'id' => false,
        'location_id' => false,
        'marketplace_attributes' => false,
        'shipment_info' => false,
        'invoice_info' => true,
        'party_info_list' => true,
        'shipment_requirements' => false,
        'charges' => false,
        'status' => false,
        'sub_status' => true,
        'line_items' => false,
        'shipping_info' => false,
        'packages' => true,
        'creation_date_time' => false,
        'last_updated_date_time' => false,
        'earliest_pack_date_time' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'location_id' => 'locationId',
        'marketplace_attributes' => 'marketplaceAttributes',
        'shipment_info' => 'shipmentInfo',
        'invoice_info' => 'invoiceInfo',
        'party_info_list' => 'partyInfoList',
        'shipment_requirements' => 'shipmentRequirements',
        'charges' => 'charges',
        'status' => 'status',
        'sub_status' => 'subStatus',
        'line_items' => 'lineItems',
        'shipping_info' => 'shippingInfo',
        'packages' => 'packages',
        'creation_date_time' => 'creationDateTime',
        'last_updated_date_time' => 'lastUpdatedDateTime',
        'earliest_pack_date_time' => 'earliestPackDateTime',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'id' => 'setId',
        'location_id' => 'setLocationId',
        'marketplace_attributes' => 'setMarketplaceAttributes',
        'shipment_info' => 'setShipmentInfo',
        'invoice_info' => 'setInvoiceInfo',
        'party_info_list' => 'setPartyInfoList',
        'shipment_requirements' => 'setShipmentRequirements',
        'charges' => 'setCharges',
        'status' => 'setStatus',
        'sub_status' => 'setSubStatus',
        'line_items' => 'setLineItems',
        'shipping_info' => 'setShippingInfo',
        'packages' => 'setPackages',
        'creation_date_time' => 'setCreationDateTime',
        'last_updated_date_time' => 'setLastUpdatedDateTime',
        'earliest_pack_date_time' => 'setEarliestPackDateTime',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'id' => 'getId',
        'location_id' => 'getLocationId',
        'marketplace_attributes' => 'getMarketplaceAttributes',
        'shipment_info' => 'getShipmentInfo',
        'invoice_info' => 'getInvoiceInfo',
        'party_info_list' => 'getPartyInfoList',
        'shipment_requirements' => 'getShipmentRequirements',
        'charges' => 'getCharges',
        'status' => 'getStatus',
        'sub_status' => 'getSubStatus',
        'line_items' => 'getLineItems',
        'shipping_info' => 'getShippingInfo',
        'packages' => 'getPackages',
        'creation_date_time' => 'getCreationDateTime',
        'last_updated_date_time' => 'getLastUpdatedDateTime',
        'earliest_pack_date_time' => 'getEarliestPackDateTime',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('marketplace_attributes', $data ?? [], null);
        $this->setIfExists('shipment_info', $data ?? [], null);
        $this->setIfExists('invoice_info', $data ?? [], null);
        $this->setIfExists('party_info_list', $data ?? [], null);
        $this->setIfExists('shipment_requirements', $data ?? [], null);
        $this->setIfExists('charges', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('sub_status', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('shipping_info', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
        $this->setIfExists('creation_date_time', $data ?? [], null);
        $this->setIfExists('last_updated_date_time', $data ?? [], null);
        $this->setIfExists('earliest_pack_date_time', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getStatusAllowableValues(): array
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_ACCEPTED,
            self::STATUS_CONFIRMED,
            self::STATUS_PACKAGE_CREATED,
            self::STATUS_PICKUP_SLOT_RETRIEVED,
            self::STATUS_INVOICE_GENERATED,
            self::STATUS_SHIPLABEL_GENERATED,
            self::STATUS_CANCELLED,
            self::STATUS_SHIPPED,
            self::STATUS_DELIVERED,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getSubStatusAllowableValues(): array
    {
        return [
            self::SUB_STATUS_PENDING_SCHEDULE,
            self::SUB_STATUS_PENDING_PICKUP,
            self::SUB_STATUS_PENDING_DROP_OFF,
            self::SUB_STATUS_LABEL_CANCELED,
            self::SUB_STATUS_PICKED_UP,
            self::SUB_STATUS_DROPPED_OFF,
            self::SUB_STATUS_AT_ORIGIN_FC,
            self::SUB_STATUS_AT_DESTINATION_FC,
            self::SUB_STATUS_DELIVERED,
            self::SUB_STATUS_NOT_DELIVERED,
            self::SUB_STATUS_UNDELIVERABLE,
            self::SUB_STATUS_LOST,
            self::SUB_STATUS_OUT_FOR_DELIVERY,
            self::SUB_STATUS_DAMAGED,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['id']) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (null === $this->container['location_id']) {
            $invalidProperties[] = "'location_id' can't be null";
        }
        if (null === $this->container['marketplace_attributes']) {
            $invalidProperties[] = "'marketplace_attributes' can't be null";
        }
        if (null === $this->container['shipment_info']) {
            $invalidProperties[] = "'shipment_info' can't be null";
        }
        if (null === $this->container['shipment_requirements']) {
            $invalidProperties[] = "'shipment_requirements' can't be null";
        }
        if (null === $this->container['charges']) {
            $invalidProperties[] = "'charges' can't be null";
        }
        if (count($this->container['charges']) < 1) {
            $invalidProperties[] = "invalid value for 'charges', number of items must be greater than or equal to 1.";
        }

        if (null === $this->container['status']) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubStatusAllowableValues();
        if (!is_null($this->container['sub_status']) && !in_array($this->container['sub_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sub_status', must be one of '%s'",
                $this->container['sub_status'],
                implode("', '", $allowedValues)
            );
        }

        if (null === $this->container['line_items']) {
            $invalidProperties[] = "'line_items' can't be null";
        }
        if (count($this->container['line_items']) < 1) {
            $invalidProperties[] = "invalid value for 'line_items', number of items must be greater than or equal to 1.";
        }

        if (null === $this->container['shipping_info']) {
            $invalidProperties[] = "'shipping_info' can't be null";
        }
        if (!is_null($this->container['packages']) && (count($this->container['packages']) < 1)) {
            $invalidProperties[] = "invalid value for 'packages', number of items must be greater than or equal to 1.";
        }

        if (null === $this->container['creation_date_time']) {
            $invalidProperties[] = "'creation_date_time' can't be null";
        }
        if (null === $this->container['last_updated_date_time']) {
            $invalidProperties[] = "'last_updated_date_time' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id the shipment's ID
     */
    public function setId(string $id): self
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location_id.
     */
    public function getLocationId(): string
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id.
     *
     * @param string $location_id the location identifier of the seller's location in the marketplace channel to which the shipment has been created for fulfillment
     */
    public function setLocationId(string $location_id): self
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets marketplace_attributes.
     */
    public function getMarketplaceAttributes(): MarketplaceAttributes
    {
        return $this->container['marketplace_attributes'];
    }

    /**
     * Sets marketplace_attributes.
     *
     * @param MarketplaceAttributes $marketplace_attributes marketplace_attributes
     */
    public function setMarketplaceAttributes(MarketplaceAttributes $marketplace_attributes): self
    {
        if (is_null($marketplace_attributes)) {
            throw new \InvalidArgumentException('non-nullable marketplace_attributes cannot be null');
        }
        $this->container['marketplace_attributes'] = $marketplace_attributes;

        return $this;
    }

    /**
     * Gets shipment_info.
     */
    public function getShipmentInfo(): ShipmentInfo
    {
        return $this->container['shipment_info'];
    }

    /**
     * Sets shipment_info.
     *
     * @param ShipmentInfo $shipment_info shipment_info
     */
    public function setShipmentInfo(ShipmentInfo $shipment_info): self
    {
        if (is_null($shipment_info)) {
            throw new \InvalidArgumentException('non-nullable shipment_info cannot be null');
        }
        $this->container['shipment_info'] = $shipment_info;

        return $this;
    }

    /**
     * Gets invoice_info.
     */
    public function getInvoiceInfo(): ?InvoiceInfo
    {
        return $this->container['invoice_info'];
    }

    /**
     * Sets invoice_info.
     *
     * @param null|InvoiceInfo $invoice_info invoice_info
     */
    public function setInvoiceInfo(?InvoiceInfo $invoice_info): self
    {
        if (is_null($invoice_info)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_info', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_info'] = $invoice_info;

        return $this;
    }

    /**
     * Gets party_info_list.
     */
    public function getPartyInfoList(): ?array
    {
        return $this->container['party_info_list'];
    }

    /**
     * Sets party_info_list.
     *
     * @param null|array $party_info_list All involved party identification and metadata for the vendor, buyer, and seller. Applicable for direct-fulfillment sellers.
     */
    public function setPartyInfoList(?array $party_info_list): self
    {
        if (is_null($party_info_list)) {
            array_push($this->openAPINullablesSetToNull, 'party_info_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('party_info_list', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['party_info_list'] = $party_info_list;

        return $this;
    }

    /**
     * Gets shipment_requirements.
     */
    public function getShipmentRequirements(): ShipmentRequirements
    {
        return $this->container['shipment_requirements'];
    }

    /**
     * Sets shipment_requirements.
     *
     * @param ShipmentRequirements $shipment_requirements shipment_requirements
     */
    public function setShipmentRequirements(ShipmentRequirements $shipment_requirements): self
    {
        if (is_null($shipment_requirements)) {
            throw new \InvalidArgumentException('non-nullable shipment_requirements cannot be null');
        }
        $this->container['shipment_requirements'] = $shipment_requirements;

        return $this;
    }

    /**
     * Gets charges.
     */
    public function getCharges(): array
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges.
     *
     * @param array $charges the charges associated with the shipment
     */
    public function setCharges(array $charges): self
    {
        if (is_null($charges)) {
            throw new \InvalidArgumentException('non-nullable charges cannot be null');
        }

        if (count($charges) < 1) {
            throw new \InvalidArgumentException('invalid length for $charges when calling Shipment., number of items must be greater than or equal to 1.');
        }
        $this->container['charges'] = $charges;

        return $this;
    }

    /**
     * Gets status.
     */
    public function getStatus(): string
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param string $status the current status of the shipment
     */
    public function setStatus(string $status): self
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub_status.
     */
    public function getSubStatus(): ?string
    {
        return $this->container['sub_status'];
    }

    /**
     * Sets sub_status.
     *
     * @param null|string $sub_status the sub status of the shipment
     */
    public function setSubStatus(?string $sub_status): self
    {
        if (is_null($sub_status)) {
            array_push($this->openAPINullablesSetToNull, 'sub_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_status', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSubStatusAllowableValues();
        if (!is_null($sub_status) && !in_array($sub_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sub_status', must be one of '%s'",
                    $sub_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sub_status'] = $sub_status;

        return $this;
    }

    /**
     * Gets line_items.
     */
    public function getLineItems(): array
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items.
     *
     * @param array $line_items the line items in the shipment
     */
    public function setLineItems(array $line_items): self
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }

        if (count($line_items) < 1) {
            throw new \InvalidArgumentException('invalid length for $line_items when calling Shipment., number of items must be greater than or equal to 1.');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets shipping_info.
     */
    public function getShippingInfo(): ShippingInfo
    {
        return $this->container['shipping_info'];
    }

    /**
     * Sets shipping_info.
     *
     * @param ShippingInfo $shipping_info shipping_info
     */
    public function setShippingInfo(ShippingInfo $shipping_info): self
    {
        if (is_null($shipping_info)) {
            throw new \InvalidArgumentException('non-nullable shipping_info cannot be null');
        }
        $this->container['shipping_info'] = $shipping_info;

        return $this;
    }

    /**
     * Gets packages.
     */
    public function getPackages(): ?array
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages.
     *
     * @param null|array $packages the list of packages in the shipment
     */
    public function setPackages(?array $packages): self
    {
        if (is_null($packages)) {
            array_push($this->openAPINullablesSetToNull, 'packages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packages', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($packages) && (count($packages) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packages when calling Shipment., number of items must be greater than or equal to 1.');
        }
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets creation_date_time.
     */
    public function getCreationDateTime(): string
    {
        return $this->container['creation_date_time'];
    }

    /**
     * Sets creation_date_time.
     *
     * @param string $creation_date_time A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     */
    public function setCreationDateTime(string $creation_date_time): self
    {
        if (is_null($creation_date_time)) {
            throw new \InvalidArgumentException('non-nullable creation_date_time cannot be null');
        }
        $this->container['creation_date_time'] = $creation_date_time;

        return $this;
    }

    /**
     * Gets last_updated_date_time.
     */
    public function getLastUpdatedDateTime(): string
    {
        return $this->container['last_updated_date_time'];
    }

    /**
     * Sets last_updated_date_time.
     *
     * @param string $last_updated_date_time A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     */
    public function setLastUpdatedDateTime(string $last_updated_date_time): self
    {
        if (is_null($last_updated_date_time)) {
            throw new \InvalidArgumentException('non-nullable last_updated_date_time cannot be null');
        }
        $this->container['last_updated_date_time'] = $last_updated_date_time;

        return $this;
    }

    /**
     * Gets earliest_pack_date_time.
     */
    public function getEarliestPackDateTime(): ?string
    {
        return $this->container['earliest_pack_date_time'];
    }

    /**
     * Sets earliest_pack_date_time.
     *
     * @param null|string $earliest_pack_date_time A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     */
    public function setEarliestPackDateTime(?string $earliest_pack_date_time): self
    {
        if (is_null($earliest_pack_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'earliest_pack_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('earliest_pack_date_time', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['earliest_pack_date_time'] = $earliest_pack_date_time;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
