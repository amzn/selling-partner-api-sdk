<?php

/**
 * ModelReturn.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon External Fulfillment Return Item Processing.
 *
 * You can use the Amazon External Fulfillment Return Item Processing API to retrieve, track, and process return items through Amazon's External Fulfillment returns management system.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\externalFulfillment\returns\v2024_09_11;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * ModelReturn Class Doc Comment.
 *
 * @category Class
 *
 * @description Information about the return item.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class ModelReturn implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    public const RETURN_TYPE_CUSTOMER = 'CUSTOMER';
    public const RETURN_TYPE_REJECT = 'REJECT';
    public const RETURN_SUB_TYPE_NORMAL = 'NORMAL';
    public const RETURN_SUB_TYPE_REPLACEMENT = 'REPLACEMENT';
    public const RETURN_SUB_TYPE_EXCHANGE = 'EXCHANGE';
    public const STATUS_CREATED = 'CREATED';
    public const STATUS_CARRIER_NOTIFIED_TO_PICK_UP_FROM_CUSTOMER = 'CARRIER_NOTIFIED_TO_PICK_UP_FROM_CUSTOMER';
    public const STATUS_CARRIER_OUT_FOR_PICK_UP_FROM_CUSTOMER = 'CARRIER_OUT_FOR_PICK_UP_FROM_CUSTOMER';
    public const STATUS_CUSTOMER_CANCELLED_PICK_UP = 'CUSTOMER_CANCELLED_PICK_UP';
    public const STATUS_CUSTOMER_RESCHEDULED_PICK_UP = 'CUSTOMER_RESCHEDULED_PICK_UP';
    public const STATUS_PICKED_FROM_CUSTOMER = 'PICKED_FROM_CUSTOMER';
    public const STATUS_IN_TRANSIT = 'IN_TRANSIT';
    public const STATUS_OUT_FOR_DELIVERY = 'OUT_FOR_DELIVERY';
    public const STATUS_DELIVERED = 'DELIVERED';
    public const STATUS_REPLANNED = 'REPLANNED';
    public const STATUS_CUSTOMER_DROPPED_OFF = 'CUSTOMER_DROPPED_OFF';
    public const STATUS_PARTIALLY_PROCESSED = 'PARTIALLY_PROCESSED';
    public const STATUS_PROCESSED = 'PROCESSED';
    public const STATUS_REJECTED = 'REJECTED';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const PACKAGE_DELIVERY_MODE_WITH_OTP = 'WITH_OTP';
    public const PACKAGE_DELIVERY_MODE_WITHOUT_OTP = 'WITHOUT_OTP';

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Return';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'id' => 'string',
        'return_location_id' => 'string',
        'merchant_sku' => 'string',
        'return_type' => 'string',
        'return_sub_type' => 'string',
        'number_of_units' => 'int',
        'status' => 'string',
        'fulfillment_location_id' => 'string',
        'creation_date_time' => 'string',
        'last_updated_date_time' => 'string',
        'return_metadata' => '\SpApi\Model\externalFulfillment\returns\v2024_09_11\ReturnMetadata',
        'return_shipping_info' => '\SpApi\Model\externalFulfillment\returns\v2024_09_11\ReturnShippingInfo',
        'marketplace_channel_details' => '\SpApi\Model\externalFulfillment\returns\v2024_09_11\MarketplaceChannelDetails',
        'otp_details' => '\SpApi\Model\externalFulfillment\returns\v2024_09_11\OtpDetails',
        'package_delivery_mode' => 'string',
        'replanning_details' => '\SpApi\Model\externalFulfillment\returns\v2024_09_11\ReplanningDetails'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'id' => null,
        'return_location_id' => null,
        'merchant_sku' => null,
        'return_type' => null,
        'return_sub_type' => null,
        'number_of_units' => 'int32',
        'status' => null,
        'fulfillment_location_id' => null,
        'creation_date_time' => null,
        'last_updated_date_time' => null,
        'return_metadata' => null,
        'return_shipping_info' => null,
        'marketplace_channel_details' => null,
        'otp_details' => null,
        'package_delivery_mode' => null,
        'replanning_details' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'id' => false,
        'return_location_id' => true,
        'merchant_sku' => true,
        'return_type' => false,
        'return_sub_type' => true,
        'number_of_units' => true,
        'status' => false,
        'fulfillment_location_id' => false,
        'creation_date_time' => true,
        'last_updated_date_time' => false,
        'return_metadata' => false,
        'return_shipping_info' => false,
        'marketplace_channel_details' => false,
        'otp_details' => true,
        'package_delivery_mode' => true,
        'replanning_details' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'return_location_id' => 'returnLocationId',
        'merchant_sku' => 'merchantSku',
        'return_type' => 'returnType',
        'return_sub_type' => 'returnSubType',
        'number_of_units' => 'numberOfUnits',
        'status' => 'status',
        'fulfillment_location_id' => 'fulfillmentLocationId',
        'creation_date_time' => 'creationDateTime',
        'last_updated_date_time' => 'lastUpdatedDateTime',
        'return_metadata' => 'returnMetadata',
        'return_shipping_info' => 'returnShippingInfo',
        'marketplace_channel_details' => 'marketplaceChannelDetails',
        'otp_details' => 'otpDetails',
        'package_delivery_mode' => 'packageDeliveryMode',
        'replanning_details' => 'replanningDetails',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'id' => 'setId',
        'return_location_id' => 'setReturnLocationId',
        'merchant_sku' => 'setMerchantSku',
        'return_type' => 'setReturnType',
        'return_sub_type' => 'setReturnSubType',
        'number_of_units' => 'setNumberOfUnits',
        'status' => 'setStatus',
        'fulfillment_location_id' => 'setFulfillmentLocationId',
        'creation_date_time' => 'setCreationDateTime',
        'last_updated_date_time' => 'setLastUpdatedDateTime',
        'return_metadata' => 'setReturnMetadata',
        'return_shipping_info' => 'setReturnShippingInfo',
        'marketplace_channel_details' => 'setMarketplaceChannelDetails',
        'otp_details' => 'setOtpDetails',
        'package_delivery_mode' => 'setPackageDeliveryMode',
        'replanning_details' => 'setReplanningDetails',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'id' => 'getId',
        'return_location_id' => 'getReturnLocationId',
        'merchant_sku' => 'getMerchantSku',
        'return_type' => 'getReturnType',
        'return_sub_type' => 'getReturnSubType',
        'number_of_units' => 'getNumberOfUnits',
        'status' => 'getStatus',
        'fulfillment_location_id' => 'getFulfillmentLocationId',
        'creation_date_time' => 'getCreationDateTime',
        'last_updated_date_time' => 'getLastUpdatedDateTime',
        'return_metadata' => 'getReturnMetadata',
        'return_shipping_info' => 'getReturnShippingInfo',
        'marketplace_channel_details' => 'getMarketplaceChannelDetails',
        'otp_details' => 'getOtpDetails',
        'package_delivery_mode' => 'getPackageDeliveryMode',
        'replanning_details' => 'getReplanningDetails',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('return_location_id', $data ?? [], null);
        $this->setIfExists('merchant_sku', $data ?? [], null);
        $this->setIfExists('return_type', $data ?? [], null);
        $this->setIfExists('return_sub_type', $data ?? [], null);
        $this->setIfExists('number_of_units', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('fulfillment_location_id', $data ?? [], null);
        $this->setIfExists('creation_date_time', $data ?? [], null);
        $this->setIfExists('last_updated_date_time', $data ?? [], null);
        $this->setIfExists('return_metadata', $data ?? [], null);
        $this->setIfExists('return_shipping_info', $data ?? [], null);
        $this->setIfExists('marketplace_channel_details', $data ?? [], null);
        $this->setIfExists('otp_details', $data ?? [], null);
        $this->setIfExists('package_delivery_mode', $data ?? [], null);
        $this->setIfExists('replanning_details', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getReturnTypeAllowableValues(): array
    {
        return [
            self::RETURN_TYPE_CUSTOMER,
            self::RETURN_TYPE_REJECT,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getReturnSubTypeAllowableValues(): array
    {
        return [
            self::RETURN_SUB_TYPE_NORMAL,
            self::RETURN_SUB_TYPE_REPLACEMENT,
            self::RETURN_SUB_TYPE_EXCHANGE,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getStatusAllowableValues(): array
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_CARRIER_NOTIFIED_TO_PICK_UP_FROM_CUSTOMER,
            self::STATUS_CARRIER_OUT_FOR_PICK_UP_FROM_CUSTOMER,
            self::STATUS_CUSTOMER_CANCELLED_PICK_UP,
            self::STATUS_CUSTOMER_RESCHEDULED_PICK_UP,
            self::STATUS_PICKED_FROM_CUSTOMER,
            self::STATUS_IN_TRANSIT,
            self::STATUS_OUT_FOR_DELIVERY,
            self::STATUS_DELIVERED,
            self::STATUS_REPLANNED,
            self::STATUS_CUSTOMER_DROPPED_OFF,
            self::STATUS_PARTIALLY_PROCESSED,
            self::STATUS_PROCESSED,
            self::STATUS_REJECTED,
            self::STATUS_CANCELLED,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getPackageDeliveryModeAllowableValues(): array
    {
        return [
            self::PACKAGE_DELIVERY_MODE_WITH_OTP,
            self::PACKAGE_DELIVERY_MODE_WITHOUT_OTP,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['id']) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (null === $this->container['return_type']) {
            $invalidProperties[] = "'return_type' can't be null";
        }
        $allowedValues = $this->getReturnTypeAllowableValues();
        if (!is_null($this->container['return_type']) && !in_array($this->container['return_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'return_type', must be one of '%s'",
                $this->container['return_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReturnSubTypeAllowableValues();
        if (!is_null($this->container['return_sub_type']) && !in_array($this->container['return_sub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'return_sub_type', must be one of '%s'",
                $this->container['return_sub_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['number_of_units']) && ($this->container['number_of_units'] < 1)) {
            $invalidProperties[] = "invalid value for 'number_of_units', must be bigger than or equal to 1.";
        }

        if (null === $this->container['status']) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (null === $this->container['fulfillment_location_id']) {
            $invalidProperties[] = "'fulfillment_location_id' can't be null";
        }
        if (null === $this->container['last_updated_date_time']) {
            $invalidProperties[] = "'last_updated_date_time' can't be null";
        }
        if (null === $this->container['return_metadata']) {
            $invalidProperties[] = "'return_metadata' can't be null";
        }
        if (null === $this->container['return_shipping_info']) {
            $invalidProperties[] = "'return_shipping_info' can't be null";
        }
        if (null === $this->container['marketplace_channel_details']) {
            $invalidProperties[] = "'marketplace_channel_details' can't be null";
        }
        $allowedValues = $this->getPackageDeliveryModeAllowableValues();
        if (!is_null($this->container['package_delivery_mode']) && !in_array($this->container['package_delivery_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'package_delivery_mode', must be one of '%s'",
                $this->container['package_delivery_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id the return item's ID
     */
    public function setId(string $id): self
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets return_location_id.
     */
    public function getReturnLocationId(): ?string
    {
        return $this->container['return_location_id'];
    }

    /**
     * Sets return_location_id.
     *
     * @param null|string $return_location_id the SmartConnect identifier for where the return item was dropped for delivery
     */
    public function setReturnLocationId(?string $return_location_id): self
    {
        if (is_null($return_location_id)) {
            array_push($this->openAPINullablesSetToNull, 'return_location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('return_location_id', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['return_location_id'] = $return_location_id;

        return $this;
    }

    /**
     * Gets merchant_sku.
     */
    public function getMerchantSku(): ?string
    {
        return $this->container['merchant_sku'];
    }

    /**
     * Sets merchant_sku.
     *
     * @param null|string $merchant_sku the seller's identifier for the SKU
     */
    public function setMerchantSku(?string $merchant_sku): self
    {
        if (is_null($merchant_sku)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_sku');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_sku', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_sku'] = $merchant_sku;

        return $this;
    }

    /**
     * Gets return_type.
     */
    public function getReturnType(): string
    {
        return $this->container['return_type'];
    }

    /**
     * Sets return_type.
     *
     * @param string $return_type the type of return
     */
    public function setReturnType(string $return_type): self
    {
        if (is_null($return_type)) {
            throw new \InvalidArgumentException('non-nullable return_type cannot be null');
        }
        $allowedValues = $this->getReturnTypeAllowableValues();
        if (!in_array($return_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'return_type', must be one of '%s'",
                    $return_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['return_type'] = $return_type;

        return $this;
    }

    /**
     * Gets return_sub_type.
     */
    public function getReturnSubType(): ?string
    {
        return $this->container['return_sub_type'];
    }

    /**
     * Sets return_sub_type.
     *
     * @param null|string $return_sub_type the sub-type of return
     */
    public function setReturnSubType(?string $return_sub_type): self
    {
        if (is_null($return_sub_type)) {
            array_push($this->openAPINullablesSetToNull, 'return_sub_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('return_sub_type', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getReturnSubTypeAllowableValues();
        if (!is_null($return_sub_type) && !in_array($return_sub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'return_sub_type', must be one of '%s'",
                    $return_sub_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['return_sub_type'] = $return_sub_type;

        return $this;
    }

    /**
     * Gets number_of_units.
     */
    public function getNumberOfUnits(): ?int
    {
        return $this->container['number_of_units'];
    }

    /**
     * Sets number_of_units.
     *
     * @param null|int $number_of_units the total number of units in the return
     */
    public function setNumberOfUnits(?int $number_of_units): self
    {
        if (is_null($number_of_units)) {
            array_push($this->openAPINullablesSetToNull, 'number_of_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_of_units', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($number_of_units) && ($number_of_units < 1)) {
            throw new \InvalidArgumentException('invalid value for $number_of_units when calling ModelReturn., must be bigger than or equal to 1.');
        }

        $this->container['number_of_units'] = $number_of_units;

        return $this;
    }

    /**
     * Gets status.
     */
    public function getStatus(): string
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param string $status the current status of the return
     */
    public function setStatus(string $status): self
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets fulfillment_location_id.
     */
    public function getFulfillmentLocationId(): string
    {
        return $this->container['fulfillment_location_id'];
    }

    /**
     * Sets fulfillment_location_id.
     *
     * @param string $fulfillment_location_id the ID of the location that fulfilled the order
     */
    public function setFulfillmentLocationId(string $fulfillment_location_id): self
    {
        if (is_null($fulfillment_location_id)) {
            throw new \InvalidArgumentException('non-nullable fulfillment_location_id cannot be null');
        }
        $this->container['fulfillment_location_id'] = $fulfillment_location_id;

        return $this;
    }

    /**
     * Gets creation_date_time.
     */
    public function getCreationDateTime(): ?string
    {
        return $this->container['creation_date_time'];
    }

    /**
     * Sets creation_date_time.
     *
     * @param null|string $creation_date_time A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     */
    public function setCreationDateTime(?string $creation_date_time): self
    {
        if (is_null($creation_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date_time', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date_time'] = $creation_date_time;

        return $this;
    }

    /**
     * Gets last_updated_date_time.
     */
    public function getLastUpdatedDateTime(): string
    {
        return $this->container['last_updated_date_time'];
    }

    /**
     * Sets last_updated_date_time.
     *
     * @param string $last_updated_date_time A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     */
    public function setLastUpdatedDateTime(string $last_updated_date_time): self
    {
        if (is_null($last_updated_date_time)) {
            throw new \InvalidArgumentException('non-nullable last_updated_date_time cannot be null');
        }
        $this->container['last_updated_date_time'] = $last_updated_date_time;

        return $this;
    }

    /**
     * Gets return_metadata.
     */
    public function getReturnMetadata(): ReturnMetadata
    {
        return $this->container['return_metadata'];
    }

    /**
     * Sets return_metadata.
     *
     * @param ReturnMetadata $return_metadata return_metadata
     */
    public function setReturnMetadata(ReturnMetadata $return_metadata): self
    {
        if (is_null($return_metadata)) {
            throw new \InvalidArgumentException('non-nullable return_metadata cannot be null');
        }
        $this->container['return_metadata'] = $return_metadata;

        return $this;
    }

    /**
     * Gets return_shipping_info.
     */
    public function getReturnShippingInfo(): ReturnShippingInfo
    {
        return $this->container['return_shipping_info'];
    }

    /**
     * Sets return_shipping_info.
     *
     * @param ReturnShippingInfo $return_shipping_info return_shipping_info
     */
    public function setReturnShippingInfo(ReturnShippingInfo $return_shipping_info): self
    {
        if (is_null($return_shipping_info)) {
            throw new \InvalidArgumentException('non-nullable return_shipping_info cannot be null');
        }
        $this->container['return_shipping_info'] = $return_shipping_info;

        return $this;
    }

    /**
     * Gets marketplace_channel_details.
     */
    public function getMarketplaceChannelDetails(): MarketplaceChannelDetails
    {
        return $this->container['marketplace_channel_details'];
    }

    /**
     * Sets marketplace_channel_details.
     *
     * @param MarketplaceChannelDetails $marketplace_channel_details marketplace_channel_details
     */
    public function setMarketplaceChannelDetails(MarketplaceChannelDetails $marketplace_channel_details): self
    {
        if (is_null($marketplace_channel_details)) {
            throw new \InvalidArgumentException('non-nullable marketplace_channel_details cannot be null');
        }
        $this->container['marketplace_channel_details'] = $marketplace_channel_details;

        return $this;
    }

    /**
     * Gets otp_details.
     */
    public function getOtpDetails(): ?OtpDetails
    {
        return $this->container['otp_details'];
    }

    /**
     * Sets otp_details.
     *
     * @param null|OtpDetails $otp_details otp_details
     */
    public function setOtpDetails(?OtpDetails $otp_details): self
    {
        if (is_null($otp_details)) {
            array_push($this->openAPINullablesSetToNull, 'otp_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('otp_details', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['otp_details'] = $otp_details;

        return $this;
    }

    /**
     * Gets package_delivery_mode.
     */
    public function getPackageDeliveryMode(): ?string
    {
        return $this->container['package_delivery_mode'];
    }

    /**
     * Sets package_delivery_mode.
     *
     * @param null|string $package_delivery_mode The package delivery mode. This indicates whether the return was delivered to the seller with or without a one-time password (OTP).
     */
    public function setPackageDeliveryMode(?string $package_delivery_mode): self
    {
        if (is_null($package_delivery_mode)) {
            array_push($this->openAPINullablesSetToNull, 'package_delivery_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('package_delivery_mode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPackageDeliveryModeAllowableValues();
        if (!is_null($package_delivery_mode) && !in_array($package_delivery_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'package_delivery_mode', must be one of '%s'",
                    $package_delivery_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_delivery_mode'] = $package_delivery_mode;

        return $this;
    }

    /**
     * Gets replanning_details.
     */
    public function getReplanningDetails(): ?ReplanningDetails
    {
        return $this->container['replanning_details'];
    }

    /**
     * Sets replanning_details.
     *
     * @param null|ReplanningDetails $replanning_details replanning_details
     */
    public function setReplanningDetails(?ReplanningDetails $replanning_details): self
    {
        if (is_null($replanning_details)) {
            array_push($this->openAPINullablesSetToNull, 'replanning_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('replanning_details', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['replanning_details'] = $replanning_details;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
