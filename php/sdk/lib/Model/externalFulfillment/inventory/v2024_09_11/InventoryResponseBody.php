<?php

/**
 * InventoryResponseBody.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for External Fulfillment Inventory Management.
 *
 * You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\externalFulfillment\inventory\v2024_09_11;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * InventoryResponseBody Class Doc Comment.
 *
 * @category Class
 *
 * @description The response to an inventory request.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class InventoryResponseBody implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'InventoryResponseBody';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'client_sequence_number' => 'int',
        'location_id' => 'string',
        'sku_id' => 'string',
        'sellable_quantity' => 'int',
        'reserved_quantity' => 'int',
        'marketplace_attributes' => '\SpApi\Model\externalFulfillment\inventory\v2024_09_11\MarketplaceAttributes',
        'actionable_errors' => '\SpApi\Model\externalFulfillment\inventory\v2024_09_11\ActionableError[]'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'client_sequence_number' => null,
        'location_id' => null,
        'sku_id' => null,
        'sellable_quantity' => null,
        'reserved_quantity' => null,
        'marketplace_attributes' => null,
        'actionable_errors' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'client_sequence_number' => true,
        'location_id' => true,
        'sku_id' => true,
        'sellable_quantity' => true,
        'reserved_quantity' => true,
        'marketplace_attributes' => true,
        'actionable_errors' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'client_sequence_number' => 'clientSequenceNumber',
        'location_id' => 'locationId',
        'sku_id' => 'skuId',
        'sellable_quantity' => 'sellableQuantity',
        'reserved_quantity' => 'reservedQuantity',
        'marketplace_attributes' => 'marketplaceAttributes',
        'actionable_errors' => 'actionableErrors',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'client_sequence_number' => 'setClientSequenceNumber',
        'location_id' => 'setLocationId',
        'sku_id' => 'setSkuId',
        'sellable_quantity' => 'setSellableQuantity',
        'reserved_quantity' => 'setReservedQuantity',
        'marketplace_attributes' => 'setMarketplaceAttributes',
        'actionable_errors' => 'setActionableErrors',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'client_sequence_number' => 'getClientSequenceNumber',
        'location_id' => 'getLocationId',
        'sku_id' => 'getSkuId',
        'sellable_quantity' => 'getSellableQuantity',
        'reserved_quantity' => 'getReservedQuantity',
        'marketplace_attributes' => 'getMarketplaceAttributes',
        'actionable_errors' => 'getActionableErrors',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('client_sequence_number', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('sku_id', $data ?? [], null);
        $this->setIfExists('sellable_quantity', $data ?? [], null);
        $this->setIfExists('reserved_quantity', $data ?? [], null);
        $this->setIfExists('marketplace_attributes', $data ?? [], null);
        $this->setIfExists('actionable_errors', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['sellable_quantity']) && ($this->container['sellable_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'sellable_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['reserved_quantity']) && ($this->container['reserved_quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'reserved_quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['actionable_errors']) && (count($this->container['actionable_errors']) < 0)) {
            $invalidProperties[] = "invalid value for 'actionable_errors', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets client_sequence_number.
     */
    public function getClientSequenceNumber(): ?int
    {
        return $this->container['client_sequence_number'];
    }

    /**
     * Sets client_sequence_number.
     *
     * @param null|int $client_sequence_number latest sequence number for an inventory update
     */
    public function setClientSequenceNumber(?int $client_sequence_number): self
    {
        if (is_null($client_sequence_number)) {
            array_push($this->openAPINullablesSetToNull, 'client_sequence_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('client_sequence_number', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['client_sequence_number'] = $client_sequence_number;

        return $this;
    }

    /**
     * Gets location_id.
     */
    public function getLocationId(): ?string
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id.
     *
     * @param null|string $location_id the location where inventory is updated or retrieved
     */
    public function setLocationId(?string $location_id): self
    {
        if (is_null($location_id)) {
            array_push($this->openAPINullablesSetToNull, 'location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_id', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets sku_id.
     */
    public function getSkuId(): ?string
    {
        return $this->container['sku_id'];
    }

    /**
     * Sets sku_id.
     *
     * @param null|string $sku_id The SKU ID for which inventory is updated or retrieved
     */
    public function setSkuId(?string $sku_id): self
    {
        if (is_null($sku_id)) {
            array_push($this->openAPINullablesSetToNull, 'sku_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sku_id', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sku_id'] = $sku_id;

        return $this;
    }

    /**
     * Gets sellable_quantity.
     */
    public function getSellableQuantity(): ?int
    {
        return $this->container['sellable_quantity'];
    }

    /**
     * Sets sellable_quantity.
     *
     * @param null|int $sellable_quantity the number of items of the specified SKU that are available for purchase
     */
    public function setSellableQuantity(?int $sellable_quantity): self
    {
        if (is_null($sellable_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'sellable_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sellable_quantity', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($sellable_quantity) && ($sellable_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $sellable_quantity when calling InventoryResponseBody., must be bigger than or equal to 0.');
        }

        $this->container['sellable_quantity'] = $sellable_quantity;

        return $this;
    }

    /**
     * Gets reserved_quantity.
     */
    public function getReservedQuantity(): ?int
    {
        return $this->container['reserved_quantity'];
    }

    /**
     * Sets reserved_quantity.
     *
     * @param null|int $reserved_quantity the number of items of the specified SKU created in any marketplace that are reserved for shipment and yet to be fulfilled
     */
    public function setReservedQuantity(?int $reserved_quantity): self
    {
        if (is_null($reserved_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'reserved_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reserved_quantity', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($reserved_quantity) && ($reserved_quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $reserved_quantity when calling InventoryResponseBody., must be bigger than or equal to 0.');
        }

        $this->container['reserved_quantity'] = $reserved_quantity;

        return $this;
    }

    /**
     * Gets marketplace_attributes.
     */
    public function getMarketplaceAttributes(): ?MarketplaceAttributes
    {
        return $this->container['marketplace_attributes'];
    }

    /**
     * Sets marketplace_attributes.
     *
     * @param null|MarketplaceAttributes $marketplace_attributes marketplace_attributes
     */
    public function setMarketplaceAttributes(?MarketplaceAttributes $marketplace_attributes): self
    {
        if (is_null($marketplace_attributes)) {
            array_push($this->openAPINullablesSetToNull, 'marketplace_attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('marketplace_attributes', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['marketplace_attributes'] = $marketplace_attributes;

        return $this;
    }

    /**
     * Gets actionable_errors.
     */
    public function getActionableErrors(): ?array
    {
        return $this->container['actionable_errors'];
    }

    /**
     * Sets actionable_errors.
     *
     * @param null|array $actionable_errors inventory operation errors that require seller action before retrying the inventory request
     */
    public function setActionableErrors(?array $actionable_errors): self
    {
        if (is_null($actionable_errors)) {
            array_push($this->openAPINullablesSetToNull, 'actionable_errors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actionable_errors', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($actionable_errors) && (count($actionable_errors) < 0)) {
            throw new \InvalidArgumentException('invalid length for $actionable_errors when calling InventoryResponseBody., number of items must be greater than or equal to 0.');
        }
        $this->container['actionable_errors'] = $actionable_errors;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
