<?php
/**
 * OfferDetail
 *
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\pricing\v0;

use
ArrayAccess;
use SpApi\ObjectSerializer;
use SpApi\Model\ModelInterface;

/**
 * OfferDetail Class Doc Comment
 *
 * @category Class
 * @description Schema for an individual offer. Object in &#x60;OfferDetailList&#x60;.
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OfferDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OfferDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
             'my_offer' => 'bool',
             'offer_type' => '\SpApi\Model\pricing\v0\OfferCustomerType',
             'sub_condition' => 'string',
             'seller_id' => 'string',
             'condition_notes' => 'string',
             'seller_feedback_rating' => '\SpApi\Model\pricing\v0\SellerFeedbackType',
             'shipping_time' => '\SpApi\Model\pricing\v0\DetailedShippingTimeType',
             'listing_price' => '\SpApi\Model\pricing\v0\MoneyType',
             'quantity_discount_prices' => '\SpApi\Model\pricing\v0\QuantityDiscountPriceType[]',
             'points' => '\SpApi\Model\pricing\v0\Points',
             'shipping' => '\SpApi\Model\pricing\v0\MoneyType',
             'ships_from' => '\SpApi\Model\pricing\v0\ShipsFromType',
             'is_fulfilled_by_amazon' => 'bool',
             'prime_information' => '\SpApi\Model\pricing\v0\PrimeInformationType',
             'is_buy_box_winner' => 'bool',
             'is_featured_merchant' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
            'my_offer' => null,
            'offer_type' => null,
            'sub_condition' => null,
            'seller_id' => null,
            'condition_notes' => null,
            'seller_feedback_rating' => null,
            'shipping_time' => null,
            'listing_price' => null,
            'quantity_discount_prices' => null,
            'points' => null,
            'shipping' => null,
            'ships_from' => null,
            'is_fulfilled_by_amazon' => null,
            'prime_information' => null,
            'is_buy_box_winner' => null,
            'is_featured_merchant' => null    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'my_offer' => true,
        'offer_type' => true,
        'sub_condition' => false,
        'seller_id' => true,
        'condition_notes' => true,
        'seller_feedback_rating' => true,
        'shipping_time' => false,
        'listing_price' => false,
        'quantity_discount_prices' => true,
        'points' => true,
        'shipping' => false,
        'ships_from' => true,
        'is_fulfilled_by_amazon' => false,
        'prime_information' => true,
        'is_buy_box_winner' => true,
        'is_featured_merchant' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'my_offer' => 'MyOffer',
                'offer_type' => 'offerType',
                'sub_condition' => 'SubCondition',
                'seller_id' => 'SellerId',
                'condition_notes' => 'ConditionNotes',
                'seller_feedback_rating' => 'SellerFeedbackRating',
                'shipping_time' => 'ShippingTime',
                'listing_price' => 'ListingPrice',
                'quantity_discount_prices' => 'quantityDiscountPrices',
                'points' => 'Points',
                'shipping' => 'Shipping',
                'ships_from' => 'ShipsFrom',
                'is_fulfilled_by_amazon' => 'IsFulfilledByAmazon',
                'prime_information' => 'PrimeInformation',
                'is_buy_box_winner' => 'IsBuyBoxWinner',
                'is_featured_merchant' => 'IsFeaturedMerchant'
        
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'my_offer' => 'setMyOffer',
        'offer_type' => 'setOfferType',
        'sub_condition' => 'setSubCondition',
        'seller_id' => 'setSellerId',
        'condition_notes' => 'setConditionNotes',
        'seller_feedback_rating' => 'setSellerFeedbackRating',
        'shipping_time' => 'setShippingTime',
        'listing_price' => 'setListingPrice',
        'quantity_discount_prices' => 'setQuantityDiscountPrices',
        'points' => 'setPoints',
        'shipping' => 'setShipping',
        'ships_from' => 'setShipsFrom',
        'is_fulfilled_by_amazon' => 'setIsFulfilledByAmazon',
        'prime_information' => 'setPrimeInformation',
        'is_buy_box_winner' => 'setIsBuyBoxWinner',
        'is_featured_merchant' => 'setIsFeaturedMerchant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'my_offer' => 'getMyOffer',
        'offer_type' => 'getOfferType',
        'sub_condition' => 'getSubCondition',
        'seller_id' => 'getSellerId',
        'condition_notes' => 'getConditionNotes',
        'seller_feedback_rating' => 'getSellerFeedbackRating',
        'shipping_time' => 'getShippingTime',
        'listing_price' => 'getListingPrice',
        'quantity_discount_prices' => 'getQuantityDiscountPrices',
        'points' => 'getPoints',
        'shipping' => 'getShipping',
        'ships_from' => 'getShipsFrom',
        'is_fulfilled_by_amazon' => 'getIsFulfilledByAmazon',
        'prime_information' => 'getPrimeInformation',
        'is_buy_box_winner' => 'getIsBuyBoxWinner',
        'is_featured_merchant' => 'getIsFeaturedMerchant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('my_offer', $data ?? [], null);
        $this->setIfExists('offer_type', $data ?? [], null);
        $this->setIfExists('sub_condition', $data ?? [], null);
        $this->setIfExists('seller_id', $data ?? [], null);
        $this->setIfExists('condition_notes', $data ?? [], null);
        $this->setIfExists('seller_feedback_rating', $data ?? [], null);
        $this->setIfExists('shipping_time', $data ?? [], null);
        $this->setIfExists('listing_price', $data ?? [], null);
        $this->setIfExists('quantity_discount_prices', $data ?? [], null);
        $this->setIfExists('points', $data ?? [], null);
        $this->setIfExists('shipping', $data ?? [], null);
        $this->setIfExists('ships_from', $data ?? [], null);
        $this->setIfExists('is_fulfilled_by_amazon', $data ?? [], null);
        $this->setIfExists('prime_information', $data ?? [], null);
        $this->setIfExists('is_buy_box_winner', $data ?? [], null);
        $this->setIfExists('is_featured_merchant', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['sub_condition'] === null) {
            $invalidProperties[] = "'sub_condition' can't be null";
        }
        if ($this->container['shipping_time'] === null) {
            $invalidProperties[] = "'shipping_time' can't be null";
        }
        if ($this->container['listing_price'] === null) {
            $invalidProperties[] = "'listing_price' can't be null";
        }
        if ($this->container['shipping'] === null) {
            $invalidProperties[] = "'shipping' can't be null";
        }
        if ($this->container['is_fulfilled_by_amazon'] === null) {
            $invalidProperties[] = "'is_fulfilled_by_amazon' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets my_offer
     *
     * @return bool|null
     */
    public function getMyOffer(): ?bool
    {
        return $this->container['my_offer'];
    }

    /**
     * Sets my_offer
     *
     * @param bool|null $my_offer When true, this is the seller's offer.
     *
     * @return self
     */
    public function setMyOffer(?bool $my_offer): self
    {
        if (is_null($my_offer)) {
            array_push($this->openAPINullablesSetToNull, 'my_offer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('my_offer', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['my_offer'] = $my_offer;

        return $this;
    }

    /**
     * Gets offer_type
     *
     * @return string|null
     */
    public function getOfferType(): ?string
    {
        return $this->container['offer_type'];
    }

    /**
     * Sets offer_type
     *
     * @param string|null $offer_type offer_type
     *
     * @return self
     */
    public function setOfferType(?string $offer_type): self
    {
        if (is_null($offer_type)) {
            array_push($this->openAPINullablesSetToNull, 'offer_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offer_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offer_type'] = $offer_type;

        return $this;
    }

    /**
     * Gets sub_condition
     *
     * @return string
     */
    public function getSubCondition(): string
    {
        return $this->container['sub_condition'];
    }

    /**
     * Sets sub_condition
     *
     * @param string $sub_condition The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
     *
     * @return self
     */
    public function setSubCondition(string $sub_condition): self
    {
        if (is_null($sub_condition)) {
            throw new \InvalidArgumentException('non-nullable sub_condition cannot be null');
        }
        $this->container['sub_condition'] = $sub_condition;

        return $this;
    }

    /**
     * Gets seller_id
     *
     * @return string|null
     */
    public function getSellerId(): ?string
    {
        return $this->container['seller_id'];
    }

    /**
     * Sets seller_id
     *
     * @param string|null $seller_id The seller identifier for the offer.
     *
     * @return self
     */
    public function setSellerId(?string $seller_id): self
    {
        if (is_null($seller_id)) {
            array_push($this->openAPINullablesSetToNull, 'seller_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seller_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seller_id'] = $seller_id;

        return $this;
    }

    /**
     * Gets condition_notes
     *
     * @return string|null
     */
    public function getConditionNotes(): ?string
    {
        return $this->container['condition_notes'];
    }

    /**
     * Sets condition_notes
     *
     * @param string|null $condition_notes Information about the condition of the item.
     *
     * @return self
     */
    public function setConditionNotes(?string $condition_notes): self
    {
        if (is_null($condition_notes)) {
            array_push($this->openAPINullablesSetToNull, 'condition_notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_notes', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['condition_notes'] = $condition_notes;

        return $this;
    }

    /**
     * Gets seller_feedback_rating
     *
     * @return \SpApi\Model\pricing\v0\SellerFeedbackType|null
     */
    public function getSellerFeedbackRating(): ?\SpApi\Model\pricing\v0\SellerFeedbackType
    {
        return $this->container['seller_feedback_rating'];
    }

    /**
     * Sets seller_feedback_rating
     *
     * @param \SpApi\Model\pricing\v0\SellerFeedbackType|null $seller_feedback_rating seller_feedback_rating
     *
     * @return self
     */
    public function setSellerFeedbackRating(?\SpApi\Model\pricing\v0\SellerFeedbackType $seller_feedback_rating): self
    {
        if (is_null($seller_feedback_rating)) {
            array_push($this->openAPINullablesSetToNull, 'seller_feedback_rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seller_feedback_rating', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seller_feedback_rating'] = $seller_feedback_rating;

        return $this;
    }

    /**
     * Gets shipping_time
     *
     * @return \SpApi\Model\pricing\v0\DetailedShippingTimeType
     */
    public function getShippingTime(): \SpApi\Model\pricing\v0\DetailedShippingTimeType
    {
        return $this->container['shipping_time'];
    }

    /**
     * Sets shipping_time
     *
     * @param \SpApi\Model\pricing\v0\DetailedShippingTimeType $shipping_time shipping_time
     *
     * @return self
     */
    public function setShippingTime(\SpApi\Model\pricing\v0\DetailedShippingTimeType $shipping_time): self
    {
        if (is_null($shipping_time)) {
            throw new \InvalidArgumentException('non-nullable shipping_time cannot be null');
        }
        $this->container['shipping_time'] = $shipping_time;

        return $this;
    }

    /**
     * Gets listing_price
     *
     * @return \SpApi\Model\pricing\v0\MoneyType
     */
    public function getListingPrice(): \SpApi\Model\pricing\v0\MoneyType
    {
        return $this->container['listing_price'];
    }

    /**
     * Sets listing_price
     *
     * @param \SpApi\Model\pricing\v0\MoneyType $listing_price listing_price
     *
     * @return self
     */
    public function setListingPrice(\SpApi\Model\pricing\v0\MoneyType $listing_price): self
    {
        if (is_null($listing_price)) {
            throw new \InvalidArgumentException('non-nullable listing_price cannot be null');
        }
        $this->container['listing_price'] = $listing_price;

        return $this;
    }

    /**
     * Gets quantity_discount_prices
     *
     * @return array|null
     */
    public function getQuantityDiscountPrices(): ?array
    {
        return $this->container['quantity_discount_prices'];
    }

    /**
     * Sets quantity_discount_prices
     *
     * @param array|null $quantity_discount_prices List of `QuantityDiscountPrice` that contains item's pricing information when buy in bulk.
     *
     * @return self
     */
    public function setQuantityDiscountPrices(?array $quantity_discount_prices): self
    {
        if (is_null($quantity_discount_prices)) {
            array_push($this->openAPINullablesSetToNull, 'quantity_discount_prices');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity_discount_prices', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity_discount_prices'] = $quantity_discount_prices;

        return $this;
    }

    /**
     * Gets points
     *
     * @return \SpApi\Model\pricing\v0\Points|null
     */
    public function getPoints(): ?\SpApi\Model\pricing\v0\Points
    {
        return $this->container['points'];
    }

    /**
     * Sets points
     *
     * @param \SpApi\Model\pricing\v0\Points|null $points points
     *
     * @return self
     */
    public function setPoints(?\SpApi\Model\pricing\v0\Points $points): self
    {
        if (is_null($points)) {
            array_push($this->openAPINullablesSetToNull, 'points');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('points', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['points'] = $points;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \SpApi\Model\pricing\v0\MoneyType
     */
    public function getShipping(): \SpApi\Model\pricing\v0\MoneyType
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \SpApi\Model\pricing\v0\MoneyType $shipping shipping
     *
     * @return self
     */
    public function setShipping(\SpApi\Model\pricing\v0\MoneyType $shipping): self
    {
        if (is_null($shipping)) {
            throw new \InvalidArgumentException('non-nullable shipping cannot be null');
        }
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets ships_from
     *
     * @return \SpApi\Model\pricing\v0\ShipsFromType|null
     */
    public function getShipsFrom(): ?\SpApi\Model\pricing\v0\ShipsFromType
    {
        return $this->container['ships_from'];
    }

    /**
     * Sets ships_from
     *
     * @param \SpApi\Model\pricing\v0\ShipsFromType|null $ships_from ships_from
     *
     * @return self
     */
    public function setShipsFrom(?\SpApi\Model\pricing\v0\ShipsFromType $ships_from): self
    {
        if (is_null($ships_from)) {
            array_push($this->openAPINullablesSetToNull, 'ships_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ships_from', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ships_from'] = $ships_from;

        return $this;
    }

    /**
     * Gets is_fulfilled_by_amazon
     *
     * @return bool
     */
    public function getIsFulfilledByAmazon(): bool
    {
        return $this->container['is_fulfilled_by_amazon'];
    }

    /**
     * Sets is_fulfilled_by_amazon
     *
     * @param bool $is_fulfilled_by_amazon When true, the offer is fulfilled by Amazon.
     *
     * @return self
     */
    public function setIsFulfilledByAmazon(bool $is_fulfilled_by_amazon): self
    {
        if (is_null($is_fulfilled_by_amazon)) {
            throw new \InvalidArgumentException('non-nullable is_fulfilled_by_amazon cannot be null');
        }
        $this->container['is_fulfilled_by_amazon'] = $is_fulfilled_by_amazon;

        return $this;
    }

    /**
     * Gets prime_information
     *
     * @return \SpApi\Model\pricing\v0\PrimeInformationType|null
     */
    public function getPrimeInformation(): ?\SpApi\Model\pricing\v0\PrimeInformationType
    {
        return $this->container['prime_information'];
    }

    /**
     * Sets prime_information
     *
     * @param \SpApi\Model\pricing\v0\PrimeInformationType|null $prime_information prime_information
     *
     * @return self
     */
    public function setPrimeInformation(?\SpApi\Model\pricing\v0\PrimeInformationType $prime_information): self
    {
        if (is_null($prime_information)) {
            array_push($this->openAPINullablesSetToNull, 'prime_information');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prime_information', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prime_information'] = $prime_information;

        return $this;
    }

    /**
     * Gets is_buy_box_winner
     *
     * @return bool|null
     */
    public function getIsBuyBoxWinner(): ?bool
    {
        return $this->container['is_buy_box_winner'];
    }

    /**
     * Sets is_buy_box_winner
     *
     * @param bool|null $is_buy_box_winner When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN, one that is eligible for Prime and one that is not eligible for Prime.
     *
     * @return self
     */
    public function setIsBuyBoxWinner(?bool $is_buy_box_winner): self
    {
        if (is_null($is_buy_box_winner)) {
            array_push($this->openAPINullablesSetToNull, 'is_buy_box_winner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_buy_box_winner', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_buy_box_winner'] = $is_buy_box_winner;

        return $this;
    }

    /**
     * Gets is_featured_merchant
     *
     * @return bool|null
     */
    public function getIsFeaturedMerchant(): ?bool
    {
        return $this->container['is_featured_merchant'];
    }

    /**
     * Sets is_featured_merchant
     *
     * @param bool|null $is_featured_merchant When true, the seller of the item is eligible to win the Buy Box.
     *
     * @return self
     */
    public function setIsFeaturedMerchant(?bool $is_featured_merchant): self
    {
        if (is_null($is_featured_merchant)) {
            array_push($this->openAPINullablesSetToNull, 'is_featured_merchant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_featured_merchant', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_featured_merchant'] = $is_featured_merchant;

        return $this;
    }


    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


