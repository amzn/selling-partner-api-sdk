<?php
/**
 * Account
 *
 * PHP version 8.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Sellers
 *
 * The Selling Partner API for Sellers lets you retrieve information on behalf of sellers about their seller account, such as the marketplaces they participate in. Along with listing the marketplaces that a seller can sell in, the API also provides additional information about the marketplace such as the default language and the default currency. The API also provides seller-specific information such as whether the seller has suspended listings in that marketplace.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model\sellers\v1;

use
ArrayAccess;
use OpenAPI\Client\ObjectSerializer;
use OpenAPI\Client\Model\ModelInterface;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @description The response schema for the &#x60;getAccount&#x60; operation.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Account implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
             'marketplace_participation_list' => '\OpenAPI\Client\Model\sellers\v1\MarketplaceParticipation[]',
             'business_type' => 'string',
             'selling_plan' => 'string',
             'business' => '\OpenAPI\Client\Model\sellers\v1\Business',
             'primary_contact' => '\OpenAPI\Client\Model\sellers\v1\PrimaryContact'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
            'marketplace_participation_list' => null,
            'business_type' => null,
            'selling_plan' => null,
            'business' => null,
            'primary_contact' => null    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'marketplace_participation_list' => false,
        'business_type' => false,
        'selling_plan' => false,
        'business' => true,
        'primary_contact' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'marketplace_participation_list' => 'marketplaceParticipationList',
                'business_type' => 'businessType',
                'selling_plan' => 'sellingPlan',
                'business' => 'business',
                'primary_contact' => 'primaryContact'
        
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'marketplace_participation_list' => 'setMarketplaceParticipationList',
        'business_type' => 'setBusinessType',
        'selling_plan' => 'setSellingPlan',
        'business' => 'setBusiness',
        'primary_contact' => 'setPrimaryContact'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'marketplace_participation_list' => 'getMarketplaceParticipationList',
        'business_type' => 'getBusinessType',
        'selling_plan' => 'getSellingPlan',
        'business' => 'getBusiness',
        'primary_contact' => 'getPrimaryContact'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const BUSINESS_TYPE_CHARITY = 'CHARITY';
    public const BUSINESS_TYPE_CRAFTSMAN = 'CRAFTSMAN';
    public const BUSINESS_TYPE_NATURAL_PERSON_COMPANY = 'NATURAL_PERSON_COMPANY';
    public const BUSINESS_TYPE_PUBLIC_LISTED = 'PUBLIC_LISTED';
    public const BUSINESS_TYPE_PRIVATE_LIMITED = 'PRIVATE_LIMITED';
    public const BUSINESS_TYPE_SOLE_PROPRIETORSHIP = 'SOLE_PROPRIETORSHIP';
    public const BUSINESS_TYPE_STATE_OWNED = 'STATE_OWNED';
    public const BUSINESS_TYPE_INDIVIDUAL = 'INDIVIDUAL';
    public const SELLING_PLAN_PROFESSIONAL = 'PROFESSIONAL';
    public const SELLING_PLAN_INDIVIDUAL = 'INDIVIDUAL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBusinessTypeAllowableValues(): array
    {
        return [
            self::BUSINESS_TYPE_CHARITY,
            self::BUSINESS_TYPE_CRAFTSMAN,
            self::BUSINESS_TYPE_NATURAL_PERSON_COMPANY,
            self::BUSINESS_TYPE_PUBLIC_LISTED,
            self::BUSINESS_TYPE_PRIVATE_LIMITED,
            self::BUSINESS_TYPE_SOLE_PROPRIETORSHIP,
            self::BUSINESS_TYPE_STATE_OWNED,
            self::BUSINESS_TYPE_INDIVIDUAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSellingPlanAllowableValues(): array
    {
        return [
            self::SELLING_PLAN_PROFESSIONAL,
            self::SELLING_PLAN_INDIVIDUAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('marketplace_participation_list', $data ?? [], null);
        $this->setIfExists('business_type', $data ?? [], null);
        $this->setIfExists('selling_plan', $data ?? [], null);
        $this->setIfExists('business', $data ?? [], null);
        $this->setIfExists('primary_contact', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['marketplace_participation_list'] === null) {
            $invalidProperties[] = "'marketplace_participation_list' can't be null";
        }
        if ($this->container['business_type'] === null) {
            $invalidProperties[] = "'business_type' can't be null";
        }
        $allowedValues = $this->getBusinessTypeAllowableValues();
        if (!is_null($this->container['business_type']) && !in_array($this->container['business_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'business_type', must be one of '%s'",
                $this->container['business_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['selling_plan'] === null) {
            $invalidProperties[] = "'selling_plan' can't be null";
        }
        $allowedValues = $this->getSellingPlanAllowableValues();
        if (!is_null($this->container['selling_plan']) && !in_array($this->container['selling_plan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'selling_plan', must be one of '%s'",
                $this->container['selling_plan'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets marketplace_participation_list
     *
     * @return array
     */
    public function getMarketplaceParticipationList(): array
    {
        return $this->container['marketplace_participation_list'];
    }

    /**
     * Sets marketplace_participation_list
     *
     * @param array $marketplace_participation_list List of marketplace participations.
     *
     * @return self
     */
    public function setMarketplaceParticipationList(array $marketplace_participation_list): self
    {
        if (is_null($marketplace_participation_list)) {
            throw new \InvalidArgumentException('non-nullable marketplace_participation_list cannot be null');
        }
        $this->container['marketplace_participation_list'] = $marketplace_participation_list;

        return $this;
    }

    /**
     * Gets business_type
     *
     * @return string
     */
    public function getBusinessType(): string
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     *
     * @param string $business_type The type of business registered for the seller account.
     *
     * @return self
     */
    public function setBusinessType(string $business_type): self
    {
        if (is_null($business_type)) {
            throw new \InvalidArgumentException('non-nullable business_type cannot be null');
        }
        $allowedValues = $this->getBusinessTypeAllowableValues();
        if (!in_array($business_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'business_type', must be one of '%s'",
                    $business_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['business_type'] = $business_type;

        return $this;
    }

    /**
     * Gets selling_plan
     *
     * @return string
     */
    public function getSellingPlan(): string
    {
        return $this->container['selling_plan'];
    }

    /**
     * Sets selling_plan
     *
     * @param string $selling_plan The selling plan details.
     *
     * @return self
     */
    public function setSellingPlan(string $selling_plan): self
    {
        if (is_null($selling_plan)) {
            throw new \InvalidArgumentException('non-nullable selling_plan cannot be null');
        }
        $allowedValues = $this->getSellingPlanAllowableValues();
        if (!in_array($selling_plan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'selling_plan', must be one of '%s'",
                    $selling_plan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['selling_plan'] = $selling_plan;

        return $this;
    }

    /**
     * Gets business
     *
     * @return \OpenAPI\Client\Model\sellers\v1\Business|null
     */
    public function getBusiness(): ?\OpenAPI\Client\Model\sellers\v1\Business
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     *
     * @param \OpenAPI\Client\Model\sellers\v1\Business|null $business business
     *
     * @return self
     */
    public function setBusiness(?\OpenAPI\Client\Model\sellers\v1\Business $business): self
    {
        if (is_null($business)) {
            array_push($this->openAPINullablesSetToNull, 'business');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets primary_contact
     *
     * @return \OpenAPI\Client\Model\sellers\v1\PrimaryContact|null
     */
    public function getPrimaryContact(): ?\OpenAPI\Client\Model\sellers\v1\PrimaryContact
    {
        return $this->container['primary_contact'];
    }

    /**
     * Sets primary_contact
     *
     * @param \OpenAPI\Client\Model\sellers\v1\PrimaryContact|null $primary_contact primary_contact
     *
     * @return self
     */
    public function setPrimaryContact(?\OpenAPI\Client\Model\sellers\v1\PrimaryContact $primary_contact): self
    {
        if (is_null($primary_contact)) {
            array_push($this->openAPINullablesSetToNull, 'primary_contact');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_contact', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_contact'] = $primary_contact;

        return $this;
    }


    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


