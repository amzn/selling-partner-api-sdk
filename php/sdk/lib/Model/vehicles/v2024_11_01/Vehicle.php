<?php
/**
 * Vehicle
 *
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Automotive.
 *
 * The Selling Partner API for Automotive provides programmatic access to information needed by selling partners to provide compatibility information about their listed products.
 *
 * The version of the OpenAPI document: 2024-11-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\vehicles\v2024_11_01;

use
ArrayAccess;
use SpApi\ObjectSerializer;
use SpApi\Model\ModelInterface;

/**
 * Vehicle Class Doc Comment
 *
 * @category Class
 * @description Combinations of attributes and unique identifier that represents a vehicle in vehicle list.
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Vehicle implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Vehicle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
             'make' => 'string',
             'model' => 'string',
             'variant_name' => 'string',
             'body_style' => 'string',
             'drive_type' => 'string',
             'energy' => 'string',
             'engine_output' => '\SpApi\Model\vehicles\v2024_11_01\EngineOutput[]',
             'manufacturing_start_date' => '\SpApi\Model\vehicles\v2024_11_01\MonthAndYear',
             'manufacturing_stop_date' => '\SpApi\Model\vehicles\v2024_11_01\MonthAndYear',
             'last_processed_date' => 'string',
             'status' => '\SpApi\Model\vehicles\v2024_11_01\VehicleStatusInCatalog',
             'identifiers' => '\SpApi\Model\vehicles\v2024_11_01\VehicleIdentifiers[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
            'make' => null,
            'model' => null,
            'variant_name' => null,
            'body_style' => null,
            'drive_type' => null,
            'energy' => null,
            'engine_output' => null,
            'manufacturing_start_date' => null,
            'manufacturing_stop_date' => null,
            'last_processed_date' => null,
            'status' => null,
            'identifiers' => null    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'make' => false,
        'model' => false,
        'variant_name' => true,
        'body_style' => true,
        'drive_type' => true,
        'energy' => true,
        'engine_output' => true,
        'manufacturing_start_date' => true,
        'manufacturing_stop_date' => true,
        'last_processed_date' => true,
        'status' => true,
        'identifiers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'make' => 'make',
                'model' => 'model',
                'variant_name' => 'variantName',
                'body_style' => 'bodyStyle',
                'drive_type' => 'driveType',
                'energy' => 'energy',
                'engine_output' => 'engineOutput',
                'manufacturing_start_date' => 'manufacturingStartDate',
                'manufacturing_stop_date' => 'manufacturingStopDate',
                'last_processed_date' => 'lastProcessedDate',
                'status' => 'status',
                'identifiers' => 'identifiers'
        
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'make' => 'setMake',
        'model' => 'setModel',
        'variant_name' => 'setVariantName',
        'body_style' => 'setBodyStyle',
        'drive_type' => 'setDriveType',
        'energy' => 'setEnergy',
        'engine_output' => 'setEngineOutput',
        'manufacturing_start_date' => 'setManufacturingStartDate',
        'manufacturing_stop_date' => 'setManufacturingStopDate',
        'last_processed_date' => 'setLastProcessedDate',
        'status' => 'setStatus',
        'identifiers' => 'setIdentifiers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'make' => 'getMake',
        'model' => 'getModel',
        'variant_name' => 'getVariantName',
        'body_style' => 'getBodyStyle',
        'drive_type' => 'getDriveType',
        'energy' => 'getEnergy',
        'engine_output' => 'getEngineOutput',
        'manufacturing_start_date' => 'getManufacturingStartDate',
        'manufacturing_stop_date' => 'getManufacturingStopDate',
        'last_processed_date' => 'getLastProcessedDate',
        'status' => 'getStatus',
        'identifiers' => 'getIdentifiers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('make', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('variant_name', $data ?? [], null);
        $this->setIfExists('body_style', $data ?? [], null);
        $this->setIfExists('drive_type', $data ?? [], null);
        $this->setIfExists('energy', $data ?? [], null);
        $this->setIfExists('engine_output', $data ?? [], null);
        $this->setIfExists('manufacturing_start_date', $data ?? [], null);
        $this->setIfExists('manufacturing_stop_date', $data ?? [], null);
        $this->setIfExists('last_processed_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('identifiers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['make'] === null) {
            $invalidProperties[] = "'make' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if (!is_null($this->container['engine_output']) && (count($this->container['engine_output']) < 1)) {
            $invalidProperties[] = "invalid value for 'engine_output', number of items must be greater than or equal to 1.";
        }

        if ($this->container['identifiers'] === null) {
            $invalidProperties[] = "'identifiers' can't be null";
        }
        if ((count($this->container['identifiers']) < 1)) {
            $invalidProperties[] = "invalid value for 'identifiers', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets make
     *
     * @return string
     */
    public function getMake(): string
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param string $make Vehicle Brand.
     *
     * @return self
     */
    public function setMake(string $make): self
    {
        if (is_null($make)) {
            throw new \InvalidArgumentException('non-nullable make cannot be null');
        }
        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel(): string
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model Specific model of a vehicle.
     *
     * @return self
     */
    public function setModel(string $model): self
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets variant_name
     *
     * @return string|null
     */
    public function getVariantName(): ?string
    {
        return $this->container['variant_name'];
    }

    /**
     * Sets variant_name
     *
     * @param string|null $variant_name Name of the vehicle variant.
     *
     * @return self
     */
    public function setVariantName(?string $variant_name): self
    {
        if (is_null($variant_name)) {
            array_push($this->openAPINullablesSetToNull, 'variant_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variant_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variant_name'] = $variant_name;

        return $this;
    }

    /**
     * Gets body_style
     *
     * @return string|null
     */
    public function getBodyStyle(): ?string
    {
        return $this->container['body_style'];
    }

    /**
     * Sets body_style
     *
     * @param string|null $body_style Body style of vehicle (example: Hatchback, Cabriolet).
     *
     * @return self
     */
    public function setBodyStyle(?string $body_style): self
    {
        if (is_null($body_style)) {
            array_push($this->openAPINullablesSetToNull, 'body_style');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body_style', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body_style'] = $body_style;

        return $this;
    }

    /**
     * Gets drive_type
     *
     * @return string|null
     */
    public function getDriveType(): ?string
    {
        return $this->container['drive_type'];
    }

    /**
     * Sets drive_type
     *
     * @param string|null $drive_type Drive type of vehicle(example: Rear wheel drive).
     *
     * @return self
     */
    public function setDriveType(?string $drive_type): self
    {
        if (is_null($drive_type)) {
            array_push($this->openAPINullablesSetToNull, 'drive_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('drive_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['drive_type'] = $drive_type;

        return $this;
    }

    /**
     * Gets energy
     *
     * @return string|null
     */
    public function getEnergy(): ?string
    {
        return $this->container['energy'];
    }

    /**
     * Sets energy
     *
     * @param string|null $energy Energy Source for the vehicle(example: Petrol)
     *
     * @return self
     */
    public function setEnergy(?string $energy): self
    {
        if (is_null($energy)) {
            array_push($this->openAPINullablesSetToNull, 'energy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('energy', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['energy'] = $energy;

        return $this;
    }

    /**
     * Gets engine_output
     *
     * @return array|null
     */
    public function getEngineOutput(): ?array
    {
        return $this->container['engine_output'];
    }

    /**
     * Sets engine_output
     *
     * @param array|null $engine_output Engine output of vehicle.
     *
     * @return self
     */
    public function setEngineOutput(?array $engine_output): self
    {
        if (is_null($engine_output)) {
            array_push($this->openAPINullablesSetToNull, 'engine_output');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('engine_output', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        if (!is_null($engine_output) && (count($engine_output) < 1)) {
            throw new \InvalidArgumentException('invalid length for $engine_output when calling Vehicle., number of items must be greater than or equal to 1.');
        }
        $this->container['engine_output'] = $engine_output;

        return $this;
    }

    /**
     * Gets manufacturing_start_date
     *
     * @return \SpApi\Model\vehicles\v2024_11_01\MonthAndYear|null
     */
    public function getManufacturingStartDate(): ?\SpApi\Model\vehicles\v2024_11_01\MonthAndYear
    {
        return $this->container['manufacturing_start_date'];
    }

    /**
     * Sets manufacturing_start_date
     *
     * @param \SpApi\Model\vehicles\v2024_11_01\MonthAndYear|null $manufacturing_start_date manufacturing_start_date
     *
     * @return self
     */
    public function setManufacturingStartDate(?\SpApi\Model\vehicles\v2024_11_01\MonthAndYear $manufacturing_start_date): self
    {
        if (is_null($manufacturing_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturing_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturing_start_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufacturing_start_date'] = $manufacturing_start_date;

        return $this;
    }

    /**
     * Gets manufacturing_stop_date
     *
     * @return \SpApi\Model\vehicles\v2024_11_01\MonthAndYear|null
     */
    public function getManufacturingStopDate(): ?\SpApi\Model\vehicles\v2024_11_01\MonthAndYear
    {
        return $this->container['manufacturing_stop_date'];
    }

    /**
     * Sets manufacturing_stop_date
     *
     * @param \SpApi\Model\vehicles\v2024_11_01\MonthAndYear|null $manufacturing_stop_date manufacturing_stop_date
     *
     * @return self
     */
    public function setManufacturingStopDate(?\SpApi\Model\vehicles\v2024_11_01\MonthAndYear $manufacturing_stop_date): self
    {
        if (is_null($manufacturing_stop_date)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturing_stop_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturing_stop_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufacturing_stop_date'] = $manufacturing_stop_date;

        return $this;
    }

    /**
     * Gets last_processed_date
     *
     * @return string|null
     */
    public function getLastProcessedDate(): ?string
    {
        return $this->container['last_processed_date'];
    }

    /**
     * Sets last_processed_date
     *
     * @param string|null $last_processed_date The date on which the vehicle was last updated, in ISO-8601 date/time format.
     *
     * @return self
     */
    public function setLastProcessedDate(?string $last_processed_date): self
    {
        if (is_null($last_processed_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_processed_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_processed_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_processed_date'] = $last_processed_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets identifiers
     *
     * @return array
     */
    public function getIdentifiers(): array
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     *
     * @param array $identifiers Identifiers that can be used to identify the vehicle uniquely
     *
     * @return self
     */
    public function setIdentifiers(array $identifiers): self
    {
        if (is_null($identifiers)) {
            throw new \InvalidArgumentException('non-nullable identifiers cannot be null');
        }


        if ((count($identifiers) < 1)) {
            throw new \InvalidArgumentException('invalid length for $identifiers when calling Vehicle., number of items must be greater than or equal to 1.');
        }
        $this->container['identifiers'] = $identifiers;

        return $this;
    }


    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


