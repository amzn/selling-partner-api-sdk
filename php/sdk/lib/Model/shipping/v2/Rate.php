<?php
/**
 * Rate
 *
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\shipping\v2;

use
ArrayAccess;
use SpApi\ObjectSerializer;
use SpApi\Model\ModelInterface;

/**
 * Rate Class Doc Comment
 *
 * @category Class
 * @description The details of a shipping service offering.
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Rate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Rate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
             'rate_id' => 'string',
             'carrier_id' => 'string',
             'carrier_name' => 'string',
             'service_id' => 'string',
             'service_name' => 'string',
             'billed_weight' => '\SpApi\Model\shipping\v2\Weight',
             'total_charge' => '\SpApi\Model\shipping\v2\Currency',
             'promise' => '\SpApi\Model\shipping\v2\Promise',
             'supported_document_specifications' => '\SpApi\Model\shipping\v2\SupportedDocumentSpecification[]',
             'available_value_added_service_groups' => '\SpApi\Model\shipping\v2\AvailableValueAddedServiceGroup[]',
             'requires_additional_inputs' => 'bool',
             'rate_item_list' => '\SpApi\Model\shipping\v2\RateItem[]',
             'payment_type' => '\SpApi\Model\shipping\v2\PaymentType',
             'benefits' => '\SpApi\Model\shipping\v2\Benefits'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
            'rate_id' => null,
            'carrier_id' => null,
            'carrier_name' => null,
            'service_id' => null,
            'service_name' => null,
            'billed_weight' => null,
            'total_charge' => null,
            'promise' => null,
            'supported_document_specifications' => null,
            'available_value_added_service_groups' => null,
            'requires_additional_inputs' => null,
            'rate_item_list' => null,
            'payment_type' => null,
            'benefits' => null    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'rate_id' => false,
        'carrier_id' => false,
        'carrier_name' => false,
        'service_id' => false,
        'service_name' => false,
        'billed_weight' => true,
        'total_charge' => false,
        'promise' => false,
        'supported_document_specifications' => false,
        'available_value_added_service_groups' => true,
        'requires_additional_inputs' => false,
        'rate_item_list' => true,
        'payment_type' => true,
        'benefits' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'rate_id' => 'rateId',
                'carrier_id' => 'carrierId',
                'carrier_name' => 'carrierName',
                'service_id' => 'serviceId',
                'service_name' => 'serviceName',
                'billed_weight' => 'billedWeight',
                'total_charge' => 'totalCharge',
                'promise' => 'promise',
                'supported_document_specifications' => 'supportedDocumentSpecifications',
                'available_value_added_service_groups' => 'availableValueAddedServiceGroups',
                'requires_additional_inputs' => 'requiresAdditionalInputs',
                'rate_item_list' => 'rateItemList',
                'payment_type' => 'paymentType',
                'benefits' => 'benefits'
        
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'rate_id' => 'setRateId',
        'carrier_id' => 'setCarrierId',
        'carrier_name' => 'setCarrierName',
        'service_id' => 'setServiceId',
        'service_name' => 'setServiceName',
        'billed_weight' => 'setBilledWeight',
        'total_charge' => 'setTotalCharge',
        'promise' => 'setPromise',
        'supported_document_specifications' => 'setSupportedDocumentSpecifications',
        'available_value_added_service_groups' => 'setAvailableValueAddedServiceGroups',
        'requires_additional_inputs' => 'setRequiresAdditionalInputs',
        'rate_item_list' => 'setRateItemList',
        'payment_type' => 'setPaymentType',
        'benefits' => 'setBenefits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'rate_id' => 'getRateId',
        'carrier_id' => 'getCarrierId',
        'carrier_name' => 'getCarrierName',
        'service_id' => 'getServiceId',
        'service_name' => 'getServiceName',
        'billed_weight' => 'getBilledWeight',
        'total_charge' => 'getTotalCharge',
        'promise' => 'getPromise',
        'supported_document_specifications' => 'getSupportedDocumentSpecifications',
        'available_value_added_service_groups' => 'getAvailableValueAddedServiceGroups',
        'requires_additional_inputs' => 'getRequiresAdditionalInputs',
        'rate_item_list' => 'getRateItemList',
        'payment_type' => 'getPaymentType',
        'benefits' => 'getBenefits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('rate_id', $data ?? [], null);
        $this->setIfExists('carrier_id', $data ?? [], null);
        $this->setIfExists('carrier_name', $data ?? [], null);
        $this->setIfExists('service_id', $data ?? [], null);
        $this->setIfExists('service_name', $data ?? [], null);
        $this->setIfExists('billed_weight', $data ?? [], null);
        $this->setIfExists('total_charge', $data ?? [], null);
        $this->setIfExists('promise', $data ?? [], null);
        $this->setIfExists('supported_document_specifications', $data ?? [], null);
        $this->setIfExists('available_value_added_service_groups', $data ?? [], null);
        $this->setIfExists('requires_additional_inputs', $data ?? [], null);
        $this->setIfExists('rate_item_list', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('benefits', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['rate_id'] === null) {
            $invalidProperties[] = "'rate_id' can't be null";
        }
        if ($this->container['carrier_id'] === null) {
            $invalidProperties[] = "'carrier_id' can't be null";
        }
        if ($this->container['carrier_name'] === null) {
            $invalidProperties[] = "'carrier_name' can't be null";
        }
        if ($this->container['service_id'] === null) {
            $invalidProperties[] = "'service_id' can't be null";
        }
        if ($this->container['service_name'] === null) {
            $invalidProperties[] = "'service_name' can't be null";
        }
        if ($this->container['total_charge'] === null) {
            $invalidProperties[] = "'total_charge' can't be null";
        }
        if ($this->container['promise'] === null) {
            $invalidProperties[] = "'promise' can't be null";
        }
        if ($this->container['supported_document_specifications'] === null) {
            $invalidProperties[] = "'supported_document_specifications' can't be null";
        }
        if ($this->container['requires_additional_inputs'] === null) {
            $invalidProperties[] = "'requires_additional_inputs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rate_id
     *
     * @return string
     */
    public function getRateId(): string
    {
        return $this->container['rate_id'];
    }

    /**
     * Sets rate_id
     *
     * @param string $rate_id An identifier for the rate (shipment offering) provided by a shipping service provider.
     *
     * @return self
     */
    public function setRateId(string $rate_id): self
    {
        if (is_null($rate_id)) {
            throw new \InvalidArgumentException('non-nullable rate_id cannot be null');
        }
        $this->container['rate_id'] = $rate_id;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return string
     */
    public function getCarrierId(): string
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string $carrier_id The carrier identifier for the offering, provided by the carrier.
     *
     * @return self
     */
    public function setCarrierId(string $carrier_id): self
    {
        if (is_null($carrier_id)) {
            throw new \InvalidArgumentException('non-nullable carrier_id cannot be null');
        }
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets carrier_name
     *
     * @return string
     */
    public function getCarrierName(): string
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     *
     * @param string $carrier_name The carrier name for the offering.
     *
     * @return self
     */
    public function setCarrierName(string $carrier_name): self
    {
        if (is_null($carrier_name)) {
            throw new \InvalidArgumentException('non-nullable carrier_name cannot be null');
        }
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets service_id
     *
     * @return string
     */
    public function getServiceId(): string
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param string $service_id An identifier for the shipping service.
     *
     * @return self
     */
    public function setServiceId(string $service_id): self
    {
        if (is_null($service_id)) {
            throw new \InvalidArgumentException('non-nullable service_id cannot be null');
        }
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string
     */
    public function getServiceName(): string
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string $service_name The name of the shipping service.
     *
     * @return self
     */
    public function setServiceName(string $service_name): self
    {
        if (is_null($service_name)) {
            throw new \InvalidArgumentException('non-nullable service_name cannot be null');
        }
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets billed_weight
     *
     * @return \SpApi\Model\shipping\v2\Weight|null
     */
    public function getBilledWeight(): ?\SpApi\Model\shipping\v2\Weight
    {
        return $this->container['billed_weight'];
    }

    /**
     * Sets billed_weight
     *
     * @param \SpApi\Model\shipping\v2\Weight|null $billed_weight billed_weight
     *
     * @return self
     */
    public function setBilledWeight(?\SpApi\Model\shipping\v2\Weight $billed_weight): self
    {
        if (is_null($billed_weight)) {
            array_push($this->openAPINullablesSetToNull, 'billed_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billed_weight', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billed_weight'] = $billed_weight;

        return $this;
    }

    /**
     * Gets total_charge
     *
     * @return \SpApi\Model\shipping\v2\Currency
     */
    public function getTotalCharge(): \SpApi\Model\shipping\v2\Currency
    {
        return $this->container['total_charge'];
    }

    /**
     * Sets total_charge
     *
     * @param \SpApi\Model\shipping\v2\Currency $total_charge total_charge
     *
     * @return self
     */
    public function setTotalCharge(\SpApi\Model\shipping\v2\Currency $total_charge): self
    {
        if (is_null($total_charge)) {
            throw new \InvalidArgumentException('non-nullable total_charge cannot be null');
        }
        $this->container['total_charge'] = $total_charge;

        return $this;
    }

    /**
     * Gets promise
     *
     * @return \SpApi\Model\shipping\v2\Promise
     */
    public function getPromise(): \SpApi\Model\shipping\v2\Promise
    {
        return $this->container['promise'];
    }

    /**
     * Sets promise
     *
     * @param \SpApi\Model\shipping\v2\Promise $promise promise
     *
     * @return self
     */
    public function setPromise(\SpApi\Model\shipping\v2\Promise $promise): self
    {
        if (is_null($promise)) {
            throw new \InvalidArgumentException('non-nullable promise cannot be null');
        }
        $this->container['promise'] = $promise;

        return $this;
    }

    /**
     * Gets supported_document_specifications
     *
     * @return array
     */
    public function getSupportedDocumentSpecifications(): array
    {
        return $this->container['supported_document_specifications'];
    }

    /**
     * Sets supported_document_specifications
     *
     * @param array $supported_document_specifications A list of the document specifications supported for a shipment service offering.
     *
     * @return self
     */
    public function setSupportedDocumentSpecifications(array $supported_document_specifications): self
    {
        if (is_null($supported_document_specifications)) {
            throw new \InvalidArgumentException('non-nullable supported_document_specifications cannot be null');
        }
        $this->container['supported_document_specifications'] = $supported_document_specifications;

        return $this;
    }

    /**
     * Gets available_value_added_service_groups
     *
     * @return array|null
     */
    public function getAvailableValueAddedServiceGroups(): ?array
    {
        return $this->container['available_value_added_service_groups'];
    }

    /**
     * Sets available_value_added_service_groups
     *
     * @param array|null $available_value_added_service_groups A list of value-added services available for a shipping service offering.
     *
     * @return self
     */
    public function setAvailableValueAddedServiceGroups(?array $available_value_added_service_groups): self
    {
        if (is_null($available_value_added_service_groups)) {
            array_push($this->openAPINullablesSetToNull, 'available_value_added_service_groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_value_added_service_groups', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['available_value_added_service_groups'] = $available_value_added_service_groups;

        return $this;
    }

    /**
     * Gets requires_additional_inputs
     *
     * @return bool
     */
    public function getRequiresAdditionalInputs(): bool
    {
        return $this->container['requires_additional_inputs'];
    }

    /**
     * Sets requires_additional_inputs
     *
     * @param bool $requires_additional_inputs When true, indicates that additional inputs are required to purchase this shipment service. You must then call the getAdditionalInputs operation to return the JSON schema to use when providing the additional inputs to the purchaseShipment operation.
     *
     * @return self
     */
    public function setRequiresAdditionalInputs(bool $requires_additional_inputs): self
    {
        if (is_null($requires_additional_inputs)) {
            throw new \InvalidArgumentException('non-nullable requires_additional_inputs cannot be null');
        }
        $this->container['requires_additional_inputs'] = $requires_additional_inputs;

        return $this;
    }

    /**
     * Gets rate_item_list
     *
     * @return array|null
     */
    public function getRateItemList(): ?array
    {
        return $this->container['rate_item_list'];
    }

    /**
     * Sets rate_item_list
     *
     * @param array|null $rate_item_list A list of RateItem
     *
     * @return self
     */
    public function setRateItemList(?array $rate_item_list): self
    {
        if (is_null($rate_item_list)) {
            array_push($this->openAPINullablesSetToNull, 'rate_item_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate_item_list', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rate_item_list'] = $rate_item_list;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType(): ?string
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type payment_type
     *
     * @return self
     */
    public function setPaymentType(?string $payment_type): self
    {
        if (is_null($payment_type)) {
            array_push($this->openAPINullablesSetToNull, 'payment_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets benefits
     *
     * @return \SpApi\Model\shipping\v2\Benefits|null
     */
    public function getBenefits(): ?\SpApi\Model\shipping\v2\Benefits
    {
        return $this->container['benefits'];
    }

    /**
     * Sets benefits
     *
     * @param \SpApi\Model\shipping\v2\Benefits|null $benefits benefits
     *
     * @return self
     */
    public function setBenefits(?\SpApi\Model\shipping\v2\Benefits $benefits): self
    {
        if (is_null($benefits)) {
            array_push($this->openAPINullablesSetToNull, 'benefits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('benefits', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['benefits'] = $benefits;

        return $this;
    }


    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


