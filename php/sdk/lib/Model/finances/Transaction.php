<?php
/**
 * Transaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances provides financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model\finances;

use
ArrayAccess;
use OpenAPI\Client\ObjectSerializer;
use OpenAPI\Client\Model\ModelInterface;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @description All the information related to a transaction.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
             'selling_partner_metadata' => '\OpenAPI\Client\Model\finances\SellingPartnerMetadata',
             'related_identifiers' => '\OpenAPI\Client\Model\finances\RelatedIdentifier[]',
             'transaction_type' => 'string',
             'transaction_id' => 'string',
             'transaction_status' => 'string',
             'description' => 'string',
             'posted_date' => '\DateTime',
             'total_amount' => '\OpenAPI\Client\Model\finances\Currency',
             'marketplace_details' => '\OpenAPI\Client\Model\finances\MarketplaceDetails',
             'items' => '\OpenAPI\Client\Model\finances\Item[]',
             'contexts' => '\OpenAPI\Client\Model\finances\Context[]',
             'breakdowns' => '\OpenAPI\Client\Model\finances\Breakdown[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
            'selling_partner_metadata' => null,
            'related_identifiers' => null,
            'transaction_type' => null,
            'transaction_id' => null,
            'transaction_status' => null,
            'description' => null,
            'posted_date' => 'date-time',
            'total_amount' => null,
            'marketplace_details' => null,
            'items' => null,
            'contexts' => null,
            'breakdowns' => null    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'selling_partner_metadata' => false,
        'related_identifiers' => false,
        'transaction_type' => false,
        'transaction_id' => false,
        'transaction_status' => false,
        'description' => false,
        'posted_date' => false,
        'total_amount' => false,
        'marketplace_details' => false,
        'items' => false,
        'contexts' => false,
        'breakdowns' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'selling_partner_metadata' => 'sellingPartnerMetadata',
                'related_identifiers' => 'relatedIdentifiers',
                'transaction_type' => 'transactionType',
                'transaction_id' => 'transactionId',
                'transaction_status' => 'transactionStatus',
                'description' => 'description',
                'posted_date' => 'postedDate',
                'total_amount' => 'totalAmount',
                'marketplace_details' => 'marketplaceDetails',
                'items' => 'items',
                'contexts' => 'contexts',
                'breakdowns' => 'breakdowns'
        
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'selling_partner_metadata' => 'setSellingPartnerMetadata',
        'related_identifiers' => 'setRelatedIdentifiers',
        'transaction_type' => 'setTransactionType',
        'transaction_id' => 'setTransactionId',
        'transaction_status' => 'setTransactionStatus',
        'description' => 'setDescription',
        'posted_date' => 'setPostedDate',
        'total_amount' => 'setTotalAmount',
        'marketplace_details' => 'setMarketplaceDetails',
        'items' => 'setItems',
        'contexts' => 'setContexts',
        'breakdowns' => 'setBreakdowns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'selling_partner_metadata' => 'getSellingPartnerMetadata',
        'related_identifiers' => 'getRelatedIdentifiers',
        'transaction_type' => 'getTransactionType',
        'transaction_id' => 'getTransactionId',
        'transaction_status' => 'getTransactionStatus',
        'description' => 'getDescription',
        'posted_date' => 'getPostedDate',
        'total_amount' => 'getTotalAmount',
        'marketplace_details' => 'getMarketplaceDetails',
        'items' => 'getItems',
        'contexts' => 'getContexts',
        'breakdowns' => 'getBreakdowns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('selling_partner_metadata', $data ?? [], null);
        $this->setIfExists('related_identifiers', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('transaction_status', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('posted_date', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('marketplace_details', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('contexts', $data ?? [], null);
        $this->setIfExists('breakdowns', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets selling_partner_metadata
     *
     * @return \OpenAPI\Client\Model\finances\SellingPartnerMetadata|null
     */
    public function getSellingPartnerMetadata(): ?\OpenAPI\Client\Model\finances\SellingPartnerMetadata
    {
        return $this->container['selling_partner_metadata'];
    }

    /**
     * Sets selling_partner_metadata
     *
     * @param \OpenAPI\Client\Model\finances\SellingPartnerMetadata|null $selling_partner_metadata selling_partner_metadata
     *
     * @return self
     */
    public function setSellingPartnerMetadata(?\OpenAPI\Client\Model\finances\SellingPartnerMetadata $selling_partner_metadata): self
    {
        if (is_null($selling_partner_metadata)) {
            throw new \InvalidArgumentException('non-nullable selling_partner_metadata cannot be null');
        }
        $this->container['selling_partner_metadata'] = $selling_partner_metadata;

        return $this;
    }

    /**
     * Gets related_identifiers
     *
     * @return arrayA|null
     */
    public function getRelatedIdentifiers(): ?array
    {
        return $this->container['related_identifiers'];
    }

    /**
     * Sets related_identifiers
     *
     * @param array|null $related_identifiers Related business identifiers of the transaction.
     *
     * @return self
     */
    public function setRelatedIdentifiers(?array $related_identifiers): self
    {
        if (is_null($related_identifiers)) {
            throw new \InvalidArgumentException('non-nullable related_identifiers cannot be null');
        }
        $this->container['related_identifiers'] = $related_identifiers;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType(): ?string
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type The type of transaction.  **Possible value:** `Shipment`
     *
     * @return self
     */
    public function setTransactionType(?string $transaction_type): self
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId(): ?string
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id The unique identifier of the transaction.
     *
     * @return self
     */
    public function setTransactionId(?string $transaction_id): self
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string|null
     */
    public function getTransactionStatus(): ?string
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string|null $transaction_status The status of the transaction.   **Possible values:**  * `Deferred` * `Released`
     *
     * @return self
     */
    public function setTransactionStatus(?string $transaction_status): self
    {
        if (is_null($transaction_status)) {
            throw new \InvalidArgumentException('non-nullable transaction_status cannot be null');
        }
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Describes the reasons for the transaction.  **Example:** 'Order Payment', 'Refund Order'
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets posted_date
     *
     * @return \DateTime|null
     */
    public function getPostedDate(): ?\DateTime
    {
        return $this->container['posted_date'];
    }

    /**
     * Sets posted_date
     *
     * @param \DateTime|null $posted_date A date in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *
     * @return self
     */
    public function setPostedDate(?\DateTime $posted_date): self
    {
        if (is_null($posted_date)) {
            throw new \InvalidArgumentException('non-nullable posted_date cannot be null');
        }
        $this->container['posted_date'] = $posted_date;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return \OpenAPI\Client\Model\finances\Currency|null
     */
    public function getTotalAmount(): ?\OpenAPI\Client\Model\finances\Currency
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param \OpenAPI\Client\Model\finances\Currency|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount(?\OpenAPI\Client\Model\finances\Currency $total_amount): self
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets marketplace_details
     *
     * @return \OpenAPI\Client\Model\finances\MarketplaceDetails|null
     */
    public function getMarketplaceDetails(): ?\OpenAPI\Client\Model\finances\MarketplaceDetails
    {
        return $this->container['marketplace_details'];
    }

    /**
     * Sets marketplace_details
     *
     * @param \OpenAPI\Client\Model\finances\MarketplaceDetails|null $marketplace_details marketplace_details
     *
     * @return self
     */
    public function setMarketplaceDetails(?\OpenAPI\Client\Model\finances\MarketplaceDetails $marketplace_details): self
    {
        if (is_null($marketplace_details)) {
            throw new \InvalidArgumentException('non-nullable marketplace_details cannot be null');
        }
        $this->container['marketplace_details'] = $marketplace_details;

        return $this;
    }

    /**
     * Gets items
     *
     * @return arrayA|null
     */
    public function getItems(): ?array
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param array|null $items A list of items in the transaction.
     *
     * @return self
     */
    public function setItems(?array $items): self
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets contexts
     *
     * @return arrayA|null
     */
    public function getContexts(): ?array
    {
        return $this->container['contexts'];
    }

    /**
     * Sets contexts
     *
     * @param array|null $contexts A list of additional information about the item.
     *
     * @return self
     */
    public function setContexts(?array $contexts): self
    {
        if (is_null($contexts)) {
            throw new \InvalidArgumentException('non-nullable contexts cannot be null');
        }
        $this->container['contexts'] = $contexts;

        return $this;
    }

    /**
     * Gets breakdowns
     *
     * @return arrayA|null
     */
    public function getBreakdowns(): ?array
    {
        return $this->container['breakdowns'];
    }

    /**
     * Sets breakdowns
     *
     * @param array|null $breakdowns A list of breakdowns that provide details on how the total amount is calculated for the transaction.
     *
     * @return self
     */
    public function setBreakdowns(?array $breakdowns): self
    {
        if (is_null($breakdowns)) {
            throw new \InvalidArgumentException('non-nullable breakdowns cannot be null');
        }
        $this->container['breakdowns'] = $breakdowns;

        return $this;
    }


    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


