<?php

/**
 * ReturnRetrievalApi
 * PHP version 8.3.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon External Fulfillment Return Item Processing.
 *
 * You can use the Amazon External Fulfillment Return Item Processing API to retrieve, track, and process return items through Amazon's External Fulfillment returns management system.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Api\externalFulfillment\returns\v2024_09_11;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SpApi\ApiException;
use SpApi\AuthAndAuth\RestrictedDataTokenSigner;
use SpApi\Configuration;
use SpApi\HeaderSelector;
use SpApi\Model\externalFulfillment\returns\v2024_09_11\ModelReturn;
use SpApi\Model\externalFulfillment\returns\v2024_09_11\ReturnsResponse;
use SpApi\ObjectSerializer;
use Symfony\Component\RateLimiter\LimiterInterface;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;

/**
 * ReturnRetrievalApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class ReturnRetrievalApi
{
    public ?LimiterInterface $getReturnRateLimiter;
    public ?LimiterInterface $listReturnsRateLimiter;
    protected ClientInterface $client;

    protected Configuration $config;

    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    private bool $rateLimiterEnabled;
    private InMemoryStorage $rateLimitStorage;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ?ClientInterface $client = null,
        ?bool $rateLimiterEnabled = true,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->config = $config;
        $this->rateLimiterEnabled = $rateLimiterEnabled;

        if ($rateLimiterEnabled) {
            $this->rateLimitStorage = new InMemoryStorage();

            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ReturnRetrievalApi-getReturn'), $this->rateLimitStorage);
            $this->getReturnRateLimiter = $factory->create('ReturnRetrievalApi-getReturn');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ReturnRetrievalApi-listReturns'), $this->rateLimitStorage);
            $this->listReturnsRateLimiter = $factory->create('ReturnRetrievalApi-listReturns');
        }

        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getReturn.
     *
     * @param string      $return_id
     *                                         The ID of the return item you want. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getReturn(
        string $return_id,
        ?string $restrictedDataToken = null
    ): ModelReturn {
        list($response) = $this->getReturnWithHttpInfo($return_id, $restrictedDataToken);

        return $response;
    }

    /**
     * Operation getReturnWithHttpInfo.
     *
     * @param string      $return_id
     *                                         The ID of the return item you want. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @return array of \SpApi\Model\externalFulfillment\returns\v2024_09_11\ModelReturn, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getReturnWithHttpInfo(
        string $return_id,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getReturnRequest($return_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'ReturnRetrievalApi-getReturn');
        } else {
            $request = $this->config->sign($request);
        }

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getReturnRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\externalFulfillment\returns\v2024_09_11\ModelReturn' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\externalFulfillment\returns\v2024_09_11\ModelReturn' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\externalFulfillment\returns\v2024_09_11\ModelReturn', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\externalFulfillment\returns\v2024_09_11\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getReturnAsync.
     *
     * @param string $return_id
     *                          The ID of the return item you want. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getReturnAsync(
        string $return_id
    ): PromiseInterface {
        return $this->getReturnAsyncWithHttpInfo($return_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getReturnAsyncWithHttpInfo.
     *
     * @param string $return_id
     *                          The ID of the return item you want. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getReturnAsyncWithHttpInfo(
        string $return_id,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\externalFulfillment\returns\v2024_09_11\ModelReturn';
        $request = $this->getReturnRequest($return_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'ReturnRetrievalApi-getReturn');
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->getReturnRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getReturn'.
     *
     * @param string $return_id
     *                          The ID of the return item you want. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getReturnRequest(
        string $return_id
    ): Request {
        // verify the required parameter 'return_id' is set
        if (null === $return_id || (is_array($return_id) && 0 === count($return_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_id when calling getReturn'
            );
        }

        $resourcePath = '/externalFulfillment/2024-09-11/returns/{returnId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $return_id) {
            $resourcePath = str_replace(
                '{returnId}',
                ObjectSerializer::toPathValue($return_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listReturns.
     *
     * @param null|string $return_location_id
     *                                         The SmartConnect location ID of the location from which you want to retrieve return items. (optional)
     * @param null|string $rma_id
     *                                         The RMA ID of the return items you want to list. (optional)
     * @param null|string $status
     *                                         The status of return items you want to list. You can retrieve all new return items with the &#x60;CREATED&#x60; status. (optional)
     * @param null|string $reverse_tracking_id
     *                                         The reverse tracking ID of the return items you want to list. (optional)
     * @param null|string $created_since
     *                                         Return items created after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (optional)
     * @param null|string $created_until
     *                                         Return items created before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (optional)
     * @param null|string $last_updated_since
     *                                         Return items updated after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;. (optional)
     * @param null|string $last_updated_until
     *                                         Return items whose most recent update is before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;. (optional)
     * @param null|string $last_updated_after
     *                                         DEPRECATED. Use the &#x60;createdSince&#x60; parameter. (optional)
     * @param null|string $last_updated_before
     *                                         DEPRECATED. Use the &#x60;createdUntil&#x60; parameter. (optional)
     * @param null|int    $max_results
     *                                         The number of return items you want to include in the response.  **Default:** 10  **Maximum:** 100 (optional)
     * @param null|string $next_token
     *                                         A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function listReturns(
        ?string $return_location_id = null,
        ?string $rma_id = null,
        ?string $status = null,
        ?string $reverse_tracking_id = null,
        ?string $created_since = null,
        ?string $created_until = null,
        ?string $last_updated_since = null,
        ?string $last_updated_until = null,
        ?string $last_updated_after = null,
        ?string $last_updated_before = null,
        ?int $max_results = null,
        ?string $next_token = null,
        ?string $restrictedDataToken = null
    ): ReturnsResponse {
        list($response) = $this->listReturnsWithHttpInfo($return_location_id, $rma_id, $status, $reverse_tracking_id, $created_since, $created_until, $last_updated_since, $last_updated_until, $last_updated_after, $last_updated_before, $max_results, $next_token, $restrictedDataToken);

        return $response;
    }

    /**
     * Operation listReturnsWithHttpInfo.
     *
     * @param null|string $return_location_id
     *                                         The SmartConnect location ID of the location from which you want to retrieve return items. (optional)
     * @param null|string $rma_id
     *                                         The RMA ID of the return items you want to list. (optional)
     * @param null|string $status
     *                                         The status of return items you want to list. You can retrieve all new return items with the &#x60;CREATED&#x60; status. (optional)
     * @param null|string $reverse_tracking_id
     *                                         The reverse tracking ID of the return items you want to list. (optional)
     * @param null|string $created_since
     *                                         Return items created after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (optional)
     * @param null|string $created_until
     *                                         Return items created before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (optional)
     * @param null|string $last_updated_since
     *                                         Return items updated after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;. (optional)
     * @param null|string $last_updated_until
     *                                         Return items whose most recent update is before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;. (optional)
     * @param null|string $last_updated_after
     *                                         DEPRECATED. Use the &#x60;createdSince&#x60; parameter. (optional)
     * @param null|string $last_updated_before
     *                                         DEPRECATED. Use the &#x60;createdUntil&#x60; parameter. (optional)
     * @param null|int    $max_results
     *                                         The number of return items you want to include in the response.  **Default:** 10  **Maximum:** 100 (optional)
     * @param null|string $next_token
     *                                         A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @return array of \SpApi\Model\externalFulfillment\returns\v2024_09_11\ReturnsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function listReturnsWithHttpInfo(
        ?string $return_location_id = null,
        ?string $rma_id = null,
        ?string $status = null,
        ?string $reverse_tracking_id = null,
        ?string $created_since = null,
        ?string $created_until = null,
        ?string $last_updated_since = null,
        ?string $last_updated_until = null,
        ?string $last_updated_after = null,
        ?string $last_updated_before = null,
        ?int $max_results = null,
        ?string $next_token = null,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->listReturnsRequest($return_location_id, $rma_id, $status, $reverse_tracking_id, $created_since, $created_until, $last_updated_since, $last_updated_until, $last_updated_after, $last_updated_before, $max_results, $next_token);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'ReturnRetrievalApi-listReturns');
        } else {
            $request = $this->config->sign($request);
        }

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->listReturnsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\externalFulfillment\returns\v2024_09_11\ReturnsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\externalFulfillment\returns\v2024_09_11\ReturnsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\externalFulfillment\returns\v2024_09_11\ReturnsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\externalFulfillment\returns\v2024_09_11\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation listReturnsAsync.
     *
     * @param null|string $return_location_id
     *                                         The SmartConnect location ID of the location from which you want to retrieve return items. (optional)
     * @param null|string $rma_id
     *                                         The RMA ID of the return items you want to list. (optional)
     * @param null|string $status
     *                                         The status of return items you want to list. You can retrieve all new return items with the &#x60;CREATED&#x60; status. (optional)
     * @param null|string $reverse_tracking_id
     *                                         The reverse tracking ID of the return items you want to list. (optional)
     * @param null|string $created_since
     *                                         Return items created after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (optional)
     * @param null|string $created_until
     *                                         Return items created before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (optional)
     * @param null|string $last_updated_since
     *                                         Return items updated after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;. (optional)
     * @param null|string $last_updated_until
     *                                         Return items whose most recent update is before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;. (optional)
     * @param null|string $last_updated_after
     *                                         DEPRECATED. Use the &#x60;createdSince&#x60; parameter. (optional)
     * @param null|string $last_updated_before
     *                                         DEPRECATED. Use the &#x60;createdUntil&#x60; parameter. (optional)
     * @param null|int    $max_results
     *                                         The number of return items you want to include in the response.  **Default:** 10  **Maximum:** 100 (optional)
     * @param null|string $next_token
     *                                         A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function listReturnsAsync(
        ?string $return_location_id = null,
        ?string $rma_id = null,
        ?string $status = null,
        ?string $reverse_tracking_id = null,
        ?string $created_since = null,
        ?string $created_until = null,
        ?string $last_updated_since = null,
        ?string $last_updated_until = null,
        ?string $last_updated_after = null,
        ?string $last_updated_before = null,
        ?int $max_results = null,
        ?string $next_token = null
    ): PromiseInterface {
        return $this->listReturnsAsyncWithHttpInfo($return_location_id, $rma_id, $status, $reverse_tracking_id, $created_since, $created_until, $last_updated_since, $last_updated_until, $last_updated_after, $last_updated_before, $max_results, $next_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation listReturnsAsyncWithHttpInfo.
     *
     * @param null|string $return_location_id
     *                                         The SmartConnect location ID of the location from which you want to retrieve return items. (optional)
     * @param null|string $rma_id
     *                                         The RMA ID of the return items you want to list. (optional)
     * @param null|string $status
     *                                         The status of return items you want to list. You can retrieve all new return items with the &#x60;CREATED&#x60; status. (optional)
     * @param null|string $reverse_tracking_id
     *                                         The reverse tracking ID of the return items you want to list. (optional)
     * @param null|string $created_since
     *                                         Return items created after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (optional)
     * @param null|string $created_until
     *                                         Return items created before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (optional)
     * @param null|string $last_updated_since
     *                                         Return items updated after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;. (optional)
     * @param null|string $last_updated_until
     *                                         Return items whose most recent update is before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;. (optional)
     * @param null|string $last_updated_after
     *                                         DEPRECATED. Use the &#x60;createdSince&#x60; parameter. (optional)
     * @param null|string $last_updated_before
     *                                         DEPRECATED. Use the &#x60;createdUntil&#x60; parameter. (optional)
     * @param null|int    $max_results
     *                                         The number of return items you want to include in the response.  **Default:** 10  **Maximum:** 100 (optional)
     * @param null|string $next_token
     *                                         A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function listReturnsAsyncWithHttpInfo(
        ?string $return_location_id = null,
        ?string $rma_id = null,
        ?string $status = null,
        ?string $reverse_tracking_id = null,
        ?string $created_since = null,
        ?string $created_until = null,
        ?string $last_updated_since = null,
        ?string $last_updated_until = null,
        ?string $last_updated_after = null,
        ?string $last_updated_before = null,
        ?int $max_results = null,
        ?string $next_token = null,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\externalFulfillment\returns\v2024_09_11\ReturnsResponse';
        $request = $this->listReturnsRequest($return_location_id, $rma_id, $status, $reverse_tracking_id, $created_since, $created_until, $last_updated_since, $last_updated_until, $last_updated_after, $last_updated_before, $max_results, $next_token);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'ReturnRetrievalApi-listReturns');
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->listReturnsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'listReturns'.
     *
     * @param null|string $return_location_id
     *                                         The SmartConnect location ID of the location from which you want to retrieve return items. (optional)
     * @param null|string $rma_id
     *                                         The RMA ID of the return items you want to list. (optional)
     * @param null|string $status
     *                                         The status of return items you want to list. You can retrieve all new return items with the &#x60;CREATED&#x60; status. (optional)
     * @param null|string $reverse_tracking_id
     *                                         The reverse tracking ID of the return items you want to list. (optional)
     * @param null|string $created_since
     *                                         Return items created after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (optional)
     * @param null|string $created_until
     *                                         Return items created before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (optional)
     * @param null|string $last_updated_since
     *                                         Return items updated after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;. (optional)
     * @param null|string $last_updated_until
     *                                         Return items whose most recent update is before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;. (optional)
     * @param null|string $last_updated_after
     *                                         DEPRECATED. Use the &#x60;createdSince&#x60; parameter. (optional)
     * @param null|string $last_updated_before
     *                                         DEPRECATED. Use the &#x60;createdUntil&#x60; parameter. (optional)
     * @param null|int    $max_results
     *                                         The number of return items you want to include in the response.  **Default:** 10  **Maximum:** 100 (optional)
     * @param null|string $next_token
     *                                         A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function listReturnsRequest(
        ?string $return_location_id = null,
        ?string $rma_id = null,
        ?string $status = null,
        ?string $reverse_tracking_id = null,
        ?string $created_since = null,
        ?string $created_until = null,
        ?string $last_updated_since = null,
        ?string $last_updated_until = null,
        ?string $last_updated_after = null,
        ?string $last_updated_before = null,
        ?int $max_results = null,
        ?string $next_token = null
    ): Request {
        if (null !== $max_results && $max_results > 100) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling ReturnRetrievalApi.listReturns, must be smaller than or equal to 100.');
        }

        $resourcePath = '/externalFulfillment/2024-09-11/returns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_location_id,
            'returnLocationId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rma_id,
            'rmaId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reverse_tracking_id,
            'reverseTrackingId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_since,
            'createdSince', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_until,
            'createdUntil', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated_since,
            'lastUpdatedSince', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated_until,
            'lastUpdatedUntil', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated_after,
            'lastUpdatedAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated_before,
            'lastUpdatedBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'maxResults', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_token,
            'nextToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @return array of http client options
     *
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
