<?php
/**
 * TransferScheduleApi
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Api\sellerWallet\v2024_03_01;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Symfony\Component\RateLimiter\LimiterInterface;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use SpApi\AuthAndAuth\RestrictedDataTokenSigner;
use SpApi\ApiException;
use SpApi\Configuration;
use SpApi\HeaderSelector;
use SpApi\ObjectSerializer;

/**
 * TransferScheduleApi Class Doc Comment
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransferScheduleApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    private Bool $rateLimiterEnabled;
    private InMemoryStorage $rateLimitStorage;
    public ?LimiterInterface $createTransferScheduleRateLimiter;
    public ?LimiterInterface $deleteScheduleTransactionRateLimiter;
    public ?LimiterInterface $getTransferScheduleRateLimiter;
    public ?LimiterInterface $listTransferSchedulesRateLimiter;
    public ?LimiterInterface $updateTransferScheduleRateLimiter;

    /**
     * @param Configuration   $config
     * @param RateLimitConfiguration|null $rateLimitConfig
     * @param ClientInterface|null $client
     * @param HeaderSelector|null $selector
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ?ClientInterface $client = null,
        ?Bool $rateLimiterEnabled = true,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->config = $config;
        $this->rateLimiterEnabled = $rateLimiterEnabled;

        if ($rateLimiterEnabled) {
            $this->rateLimitStorage = new InMemoryStorage();

            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("TransferScheduleApi-createTransferSchedule"), $this->rateLimitStorage);
            $this->createTransferScheduleRateLimiter = $factory->create("TransferScheduleApi-createTransferSchedule");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("TransferScheduleApi-deleteScheduleTransaction"), $this->rateLimitStorage);
            $this->deleteScheduleTransactionRateLimiter = $factory->create("TransferScheduleApi-deleteScheduleTransaction");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("TransferScheduleApi-getTransferSchedule"), $this->rateLimitStorage);
            $this->getTransferScheduleRateLimiter = $factory->create("TransferScheduleApi-getTransferSchedule");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("TransferScheduleApi-listTransferSchedules"), $this->rateLimitStorage);
            $this->listTransferSchedulesRateLimiter = $factory->create("TransferScheduleApi-listTransferSchedules");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("TransferScheduleApi-updateTransferSchedule"), $this->rateLimitStorage);
            $this->updateTransferScheduleRateLimiter = $factory->create("TransferScheduleApi-updateTransferSchedule");
        }

        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }
    /**
     * Operation createTransferSchedule
     *
     * Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account
     *
     * @param  string $dest_account_digital_signature
     *  Digital signature for the destination bank account details. (required)
     * @param  string $amount_digital_signature
     *  Digital signature for the source currency transaction amount. (required)
     * @param  \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleRequest $body
     *  The payload of the request. (required)
     *
     * @param  string|null $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule
     */
    public function createTransferSchedule(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleRequest $body,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule {
        list($response) = $this->createTransferScheduleWithHttpInfo($dest_account_digital_signature, $amount_digital_signature, $body,,,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation createTransferScheduleWithHttpInfo
     *
     * Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account
     *
     * @param  string $dest_account_digital_signature
     *  Digital signature for the destination bank account details. (required)
     * @param  string $amount_digital_signature
     *  Digital signature for the source currency transaction amount. (required)
     * @param  \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleRequest $body
     *  The payload of the request. (required)
     *
     * @param  string|null $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTransferScheduleWithHttpInfo(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleRequest $body,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->createTransferScheduleRequest($dest_account_digital_signature, $amount_digital_signature, $body);
        if ($restrictedDataToken !== null) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, "TransferScheduleApi-createTransferSchedule");
        } else {
            $request = $this->config->sign($request);
        }
        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->createTransferScheduleRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\sellerWallet\v2024_03_01\ErrorList',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation createTransferScheduleAsync
     *
     * Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account
     *
     * @param  string $dest_account_digital_signature
     *  Digital signature for the destination bank account details. (required)
     * @param  string $amount_digital_signature
     *  Digital signature for the source currency transaction amount. (required)
     * @param  \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleRequest $body
     *  The payload of the request. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function createTransferScheduleAsync(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleRequest $body
    ): PromiseInterface {
        return $this->createTransferScheduleAsyncWithHttpInfo($dest_account_digital_signature, $amount_digital_signature, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTransferScheduleAsyncWithHttpInfo
     *
     * Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account
     *
     * @param  string $dest_account_digital_signature
     *  Digital signature for the destination bank account details. (required)
     * @param  string $amount_digital_signature
     *  Digital signature for the source currency transaction amount. (required)
     * @param  \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleRequest $body
     *  The payload of the request. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function createTransferScheduleAsyncWithHttpInfo(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleRequest $body,
    ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule';
        $request = $this->createTransferScheduleRequest($dest_account_digital_signature, $amount_digital_signature, $body);
        if ($restrictedDataToken !== null) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, "TransferScheduleApi-createTransferSchedule");
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->createTransferScheduleRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTransferSchedule'
     *
     * @param  string $dest_account_digital_signature
     *  Digital signature for the destination bank account details. (required)
     * @param  string $amount_digital_signature
     *  Digital signature for the source currency transaction amount. (required)
     * @param  \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleRequest $body
     *  The payload of the request. (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function createTransferScheduleRequest(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleRequest $body
    ): Request {
        // verify the required parameter 'dest_account_digital_signature' is set
        if ($dest_account_digital_signature === null || (is_array($dest_account_digital_signature) && count($dest_account_digital_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_account_digital_signature when calling createTransferSchedule'
            );
        }
        // verify the required parameter 'amount_digital_signature' is set
        if ($amount_digital_signature === null || (is_array($amount_digital_signature) && count($amount_digital_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount_digital_signature when calling createTransferSchedule'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransferSchedule'
            );
        }

        $resourcePath = '/finances/transfers/wallet/2024-03-01/transferSchedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($dest_account_digital_signature !== null) {
            $headerParams['destAccountDigitalSignature'] = ObjectSerializer::toHeaderValue($dest_account_digital_signature);
        }
        // header params
        if ($amount_digital_signature !== null) {
            $headerParams['amountDigitalSignature'] = ObjectSerializer::toHeaderValue($amount_digital_signature);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json'
            ,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteScheduleTransaction
     *
     * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
     *
     * @param  string $transfer_schedule_id
     *  A unique reference ID for a scheduled transfer. (required)
     *
     * @param  string|null $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\sellerWallet\v2024_03_01\DeleteTransferSchedule
     */
    public function deleteScheduleTransaction(
        string $transfer_schedule_id,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\sellerWallet\v2024_03_01\DeleteTransferSchedule {
        list($response) = $this->deleteScheduleTransactionWithHttpInfo($transfer_schedule_id,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation deleteScheduleTransactionWithHttpInfo
     *
     * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
     *
     * @param  string $transfer_schedule_id
     *  A unique reference ID for a scheduled transfer. (required)
     *
     * @param  string|null $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\sellerWallet\v2024_03_01\DeleteTransferSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteScheduleTransactionWithHttpInfo(
        string $transfer_schedule_id,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->deleteScheduleTransactionRequest($transfer_schedule_id);
        if ($restrictedDataToken !== null) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, "TransferScheduleApi-deleteScheduleTransaction");
        } else {
            $request = $this->config->sign($request);
        }
        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->deleteScheduleTransactionRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\sellerWallet\v2024_03_01\DeleteTransferSchedule' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\sellerWallet\v2024_03_01\DeleteTransferSchedule' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\sellerWallet\v2024_03_01\DeleteTransferSchedule', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\sellerWallet\v2024_03_01\ErrorList',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation deleteScheduleTransactionAsync
     *
     * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
     *
     * @param  string $transfer_schedule_id
     *  A unique reference ID for a scheduled transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteScheduleTransactionAsync(
        string $transfer_schedule_id
    ): PromiseInterface {
        return $this->deleteScheduleTransactionAsyncWithHttpInfo($transfer_schedule_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteScheduleTransactionAsyncWithHttpInfo
     *
     * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
     *
     * @param  string $transfer_schedule_id
     *  A unique reference ID for a scheduled transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteScheduleTransactionAsyncWithHttpInfo(
        string $transfer_schedule_id,
    ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\sellerWallet\v2024_03_01\DeleteTransferSchedule';
        $request = $this->deleteScheduleTransactionRequest($transfer_schedule_id);
        if ($restrictedDataToken !== null) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, "TransferScheduleApi-deleteScheduleTransaction");
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->deleteScheduleTransactionRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteScheduleTransaction'
     *
     * @param  string $transfer_schedule_id
     *  A unique reference ID for a scheduled transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function deleteScheduleTransactionRequest(
        string $transfer_schedule_id
    ): Request {
        // verify the required parameter 'transfer_schedule_id' is set
        if ($transfer_schedule_id === null || (is_array($transfer_schedule_id) && count($transfer_schedule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transfer_schedule_id when calling deleteScheduleTransaction'
            );
        }

        $resourcePath = '/finances/transfers/wallet/2024-03-01/transferSchedules/{transferScheduleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transfer_schedule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transferScheduleId' . '}',
                ObjectSerializer::toPathValue($transfer_schedule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransferSchedule
     *
     * Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
     *
     * @param  string $transfer_schedule_id
     *  The schedule ID of the Amazon Seller Wallet transfer. (required)
     *
     * @param  string|null $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule
     */
    public function getTransferSchedule(
        string $transfer_schedule_id,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule {
        list($response) = $this->getTransferScheduleWithHttpInfo($transfer_schedule_id,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation getTransferScheduleWithHttpInfo
     *
     * Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
     *
     * @param  string $transfer_schedule_id
     *  The schedule ID of the Amazon Seller Wallet transfer. (required)
     *
     * @param  string|null $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransferScheduleWithHttpInfo(
        string $transfer_schedule_id,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getTransferScheduleRequest($transfer_schedule_id);
        if ($restrictedDataToken !== null) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, "TransferScheduleApi-getTransferSchedule");
        } else {
            $request = $this->config->sign($request);
        }
        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->getTransferScheduleRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\sellerWallet\v2024_03_01\ErrorList',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation getTransferScheduleAsync
     *
     * Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
     *
     * @param  string $transfer_schedule_id
     *  The schedule ID of the Amazon Seller Wallet transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getTransferScheduleAsync(
        string $transfer_schedule_id
    ): PromiseInterface {
        return $this->getTransferScheduleAsyncWithHttpInfo($transfer_schedule_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransferScheduleAsyncWithHttpInfo
     *
     * Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
     *
     * @param  string $transfer_schedule_id
     *  The schedule ID of the Amazon Seller Wallet transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getTransferScheduleAsyncWithHttpInfo(
        string $transfer_schedule_id,
    ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule';
        $request = $this->getTransferScheduleRequest($transfer_schedule_id);
        if ($restrictedDataToken !== null) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, "TransferScheduleApi-getTransferSchedule");
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->getTransferScheduleRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransferSchedule'
     *
     * @param  string $transfer_schedule_id
     *  The schedule ID of the Amazon Seller Wallet transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function getTransferScheduleRequest(
        string $transfer_schedule_id
    ): Request {
        // verify the required parameter 'transfer_schedule_id' is set
        if ($transfer_schedule_id === null || (is_array($transfer_schedule_id) && count($transfer_schedule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transfer_schedule_id when calling getTransferSchedule'
            );
        }

        $resourcePath = '/finances/transfers/wallet/2024-03-01/transferSchedules/{transferScheduleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transfer_schedule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transferScheduleId' . '}',
                ObjectSerializer::toPathValue($transfer_schedule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTransferSchedules
     *
     * The API will return all the transfer schedules for a given Amazon Seller Wallet account
     *
     * @param  string $account_id
     *  The ID of the Amazon Seller Wallet account. (required)
     * @param  string|null $next_page_token
     *  A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @param  string|null $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleListing
     */
    public function listTransferSchedules(
        string $account_id,
        ?string $next_page_token = null,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleListing {
        list($response) = $this->listTransferSchedulesWithHttpInfo($account_id, $next_page_token,,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation listTransferSchedulesWithHttpInfo
     *
     * The API will return all the transfer schedules for a given Amazon Seller Wallet account
     *
     * @param  string $account_id
     *  The ID of the Amazon Seller Wallet account. (required)
     * @param  string|null $next_page_token
     *  A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @param  string|null $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTransferSchedulesWithHttpInfo(
        string $account_id,
        ?string $next_page_token = null,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->listTransferSchedulesRequest($account_id, $next_page_token);
        if ($restrictedDataToken !== null) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, "TransferScheduleApi-listTransferSchedules");
        } else {
            $request = $this->config->sign($request);
        }
        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->listTransferSchedulesRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleListing' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleListing' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleListing', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\sellerWallet\v2024_03_01\ErrorList',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation listTransferSchedulesAsync
     *
     * The API will return all the transfer schedules for a given Amazon Seller Wallet account
     *
     * @param  string $account_id
     *  The ID of the Amazon Seller Wallet account. (required)
     * @param  string|null $next_page_token
     *  A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function listTransferSchedulesAsync(
        string $account_id,
        ?string $next_page_token = null
    ): PromiseInterface {
        return $this->listTransferSchedulesAsyncWithHttpInfo($account_id, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransferSchedulesAsyncWithHttpInfo
     *
     * The API will return all the transfer schedules for a given Amazon Seller Wallet account
     *
     * @param  string $account_id
     *  The ID of the Amazon Seller Wallet account. (required)
     * @param  string|null $next_page_token
     *  A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function listTransferSchedulesAsyncWithHttpInfo(
        string $account_id,
        ?string $next_page_token = null,
    ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\sellerWallet\v2024_03_01\TransferScheduleListing';
        $request = $this->listTransferSchedulesRequest($account_id, $next_page_token);
        if ($restrictedDataToken !== null) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, "TransferScheduleApi-listTransferSchedules");
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->listTransferSchedulesRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTransferSchedules'
     *
     * @param  string $account_id
     *  The ID of the Amazon Seller Wallet account. (required)
     * @param  string|null $next_page_token
     *  A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function listTransferSchedulesRequest(
        string $account_id,
        ?string $next_page_token = null
    ): Request {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling listTransferSchedules'
            );
        }

        $resourcePath = '/finances/transfers/wallet/2024-03-01/transferSchedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'accountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_page_token,
            'nextPageToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTransferSchedule
     *
     * Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
     *
     * @param  string $dest_account_digital_signature
     *  Digital signature for the destination bank account details. (required)
     * @param  string $amount_digital_signature
     *  Digital signature for the source currency transaction amount. (required)
     * @param  \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule $body
     *  The payload of the scheduled transfer request that is to be updated. (required)
     *
     * @param  string|null $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule
     */
    public function updateTransferSchedule(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule $body,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule {
        list($response) = $this->updateTransferScheduleWithHttpInfo($dest_account_digital_signature, $amount_digital_signature, $body,,,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation updateTransferScheduleWithHttpInfo
     *
     * Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
     *
     * @param  string $dest_account_digital_signature
     *  Digital signature for the destination bank account details. (required)
     * @param  string $amount_digital_signature
     *  Digital signature for the source currency transaction amount. (required)
     * @param  \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule $body
     *  The payload of the scheduled transfer request that is to be updated. (required)
     *
     * @param  string|null $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransferScheduleWithHttpInfo(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule $body,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->updateTransferScheduleRequest($dest_account_digital_signature, $amount_digital_signature, $body);
        if ($restrictedDataToken !== null) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, "TransferScheduleApi-updateTransferSchedule");
        } else {
            $request = $this->config->sign($request);
        }
        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->updateTransferScheduleRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\sellerWallet\v2024_03_01\ErrorList',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation updateTransferScheduleAsync
     *
     * Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
     *
     * @param  string $dest_account_digital_signature
     *  Digital signature for the destination bank account details. (required)
     * @param  string $amount_digital_signature
     *  Digital signature for the source currency transaction amount. (required)
     * @param  \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule $body
     *  The payload of the scheduled transfer request that is to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateTransferScheduleAsync(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule $body
    ): PromiseInterface {
        return $this->updateTransferScheduleAsyncWithHttpInfo($dest_account_digital_signature, $amount_digital_signature, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTransferScheduleAsyncWithHttpInfo
     *
     * Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
     *
     * @param  string $dest_account_digital_signature
     *  Digital signature for the destination bank account details. (required)
     * @param  string $amount_digital_signature
     *  Digital signature for the source currency transaction amount. (required)
     * @param  \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule $body
     *  The payload of the scheduled transfer request that is to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateTransferScheduleAsyncWithHttpInfo(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule $body,
    ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule';
        $request = $this->updateTransferScheduleRequest($dest_account_digital_signature, $amount_digital_signature, $body);
        if ($restrictedDataToken !== null) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, "TransferScheduleApi-updateTransferSchedule");
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->updateTransferScheduleRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTransferSchedule'
     *
     * @param  string $dest_account_digital_signature
     *  Digital signature for the destination bank account details. (required)
     * @param  string $amount_digital_signature
     *  Digital signature for the source currency transaction amount. (required)
     * @param  \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule $body
     *  The payload of the scheduled transfer request that is to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function updateTransferScheduleRequest(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        \SpApi\Model\sellerWallet\v2024_03_01\TransferSchedule $body
    ): Request {
        // verify the required parameter 'dest_account_digital_signature' is set
        if ($dest_account_digital_signature === null || (is_array($dest_account_digital_signature) && count($dest_account_digital_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_account_digital_signature when calling updateTransferSchedule'
            );
        }
        // verify the required parameter 'amount_digital_signature' is set
        if ($amount_digital_signature === null || (is_array($amount_digital_signature) && count($amount_digital_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount_digital_signature when calling updateTransferSchedule'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateTransferSchedule'
            );
        }

        $resourcePath = '/finances/transfers/wallet/2024-03-01/transferSchedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($dest_account_digital_signature !== null) {
            $headerParams['destAccountDigitalSignature'] = ObjectSerializer::toHeaderValue($dest_account_digital_signature);
        }
        // header params
        if ($amount_digital_signature !== null) {
            $headerParams['amountDigitalSignature'] = ObjectSerializer::toHeaderValue($amount_digital_signature);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json'
            ,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
