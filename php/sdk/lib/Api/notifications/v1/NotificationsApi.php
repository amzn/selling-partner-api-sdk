<?php
/**
 * NotificationsApi
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Api\notifications\v1;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Symfony\Component\RateLimiter\LimiterInterface;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use SpApi\ApiException;
use SpApi\Configuration;
use SpApi\HeaderSelector;
use SpApi\ObjectSerializer;

/**
 * NotificationsApi Class Doc Comment
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NotificationsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    private Bool $rateLimiterEnabled;
    private InMemoryStorage $rateLimitStorage;
    public ?LimiterInterface $createDestinationRateLimiter;
    public ?LimiterInterface $createSubscriptionRateLimiter;
    public ?LimiterInterface $deleteDestinationRateLimiter;
    public ?LimiterInterface $deleteSubscriptionByIdRateLimiter;
    public ?LimiterInterface $getDestinationRateLimiter;
    public ?LimiterInterface $getDestinationsRateLimiter;
    public ?LimiterInterface $getSubscriptionRateLimiter;
    public ?LimiterInterface $getSubscriptionByIdRateLimiter;

    /**
     * @param Configuration   $config
     * @param RateLimitConfiguration|null $rateLimitConfig
     * @param ClientInterface|null $client
     * @param HeaderSelector|null $selector
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ?ClientInterface $client = null,
        ?Bool $rateLimiterEnabled = true,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->config = $config;
        $this->rateLimiterEnabled = $rateLimiterEnabled;

        if ($rateLimiterEnabled) {
            $this->rateLimitStorage = new InMemoryStorage();

            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("NotificationsApi-createDestination"), $this->rateLimitStorage);
            $this->createDestinationRateLimiter = $factory->create("NotificationsApi-createDestination");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("NotificationsApi-createSubscription"), $this->rateLimitStorage);
            $this->createSubscriptionRateLimiter = $factory->create("NotificationsApi-createSubscription");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("NotificationsApi-deleteDestination"), $this->rateLimitStorage);
            $this->deleteDestinationRateLimiter = $factory->create("NotificationsApi-deleteDestination");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("NotificationsApi-deleteSubscriptionById"), $this->rateLimitStorage);
            $this->deleteSubscriptionByIdRateLimiter = $factory->create("NotificationsApi-deleteSubscriptionById");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("NotificationsApi-getDestination"), $this->rateLimitStorage);
            $this->getDestinationRateLimiter = $factory->create("NotificationsApi-getDestination");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("NotificationsApi-getDestinations"), $this->rateLimitStorage);
            $this->getDestinationsRateLimiter = $factory->create("NotificationsApi-getDestinations");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("NotificationsApi-getSubscription"), $this->rateLimitStorage);
            $this->getSubscriptionRateLimiter = $factory->create("NotificationsApi-getSubscription");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("NotificationsApi-getSubscriptionById"), $this->rateLimitStorage);
            $this->getSubscriptionByIdRateLimiter = $factory->create("NotificationsApi-getSubscriptionById");
        }

        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }
    /**
     * Operation createDestination
     *
     * @param  \SpApi\Model\notifications\v1\CreateDestinationRequest $body
     *  body (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\notifications\v1\CreateDestinationResponse
     */
    public function createDestination(
        \SpApi\Model\notifications\v1\CreateDestinationRequest $body,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\notifications\v1\CreateDestinationResponse {
        list($response) = $this->createDestinationWithHttpInfo($body,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation createDestinationWithHttpInfo
     *
     * @param  \SpApi\Model\notifications\v1\CreateDestinationRequest $body
     *  (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\notifications\v1\CreateDestinationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDestinationWithHttpInfo(
        \SpApi\Model\notifications\v1\CreateDestinationRequest $body,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->createDestinationRequest($body);
        if ($restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->createDestinationRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\notifications\v1\CreateDestinationResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\notifications\v1\CreateDestinationResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\notifications\v1\CreateDestinationResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\notifications\v1\CreateDestinationResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation createDestinationAsync
     *
     * @param  \SpApi\Model\notifications\v1\CreateDestinationRequest $body
     *  (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function createDestinationAsync(
        \SpApi\Model\notifications\v1\CreateDestinationRequest $body
    ): PromiseInterface {
        return $this->createDestinationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDestinationAsyncWithHttpInfo
     *
     * @param  \SpApi\Model\notifications\v1\CreateDestinationRequest $body
     *  (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function createDestinationAsyncWithHttpInfo(
        \SpApi\Model\notifications\v1\CreateDestinationRequest $body,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\notifications\v1\CreateDestinationResponse';
        $request = $this->createDestinationRequest($body);
        if ($this->restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }
        if ($this->rateLimiterEnabled) {
            $this->createDestinationRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDestination'
     *
     * @param  \SpApi\Model\notifications\v1\CreateDestinationRequest $body
     *  (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function createDestinationRequest(
        \SpApi\Model\notifications\v1\CreateDestinationRequest $body
    ): Request {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createDestination'
            );
        }

        $resourcePath = '/notifications/v1/destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'Successful Response'],
            'application/json'
            ,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubscription
     *
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     * @param  \SpApi\Model\notifications\v1\CreateSubscriptionRequest $body
     *  body (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\notifications\v1\CreateSubscriptionResponse
     */
    public function createSubscription(
        string $notification_type,
        \SpApi\Model\notifications\v1\CreateSubscriptionRequest $body,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\notifications\v1\CreateSubscriptionResponse {
        list($response) = $this->createSubscriptionWithHttpInfo($notification_type, $body,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation createSubscriptionWithHttpInfo
     *
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     * @param  \SpApi\Model\notifications\v1\CreateSubscriptionRequest $body
     *  (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\notifications\v1\CreateSubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionWithHttpInfo(
        string $notification_type,
        \SpApi\Model\notifications\v1\CreateSubscriptionRequest $body,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->createSubscriptionRequest($notification_type, $body);
        if ($restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->createSubscriptionRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\notifications\v1\CreateSubscriptionResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\notifications\v1\CreateSubscriptionResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\notifications\v1\CreateSubscriptionResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\notifications\v1\CreateSubscriptionResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation createSubscriptionAsync
     *
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     * @param  \SpApi\Model\notifications\v1\CreateSubscriptionRequest $body
     *  (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function createSubscriptionAsync(
        string $notification_type,
        \SpApi\Model\notifications\v1\CreateSubscriptionRequest $body
    ): PromiseInterface {
        return $this->createSubscriptionAsyncWithHttpInfo($notification_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionAsyncWithHttpInfo
     *
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     * @param  \SpApi\Model\notifications\v1\CreateSubscriptionRequest $body
     *  (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function createSubscriptionAsyncWithHttpInfo(
        string $notification_type,
        \SpApi\Model\notifications\v1\CreateSubscriptionRequest $body,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\notifications\v1\CreateSubscriptionResponse';
        $request = $this->createSubscriptionRequest($notification_type, $body);
        if ($this->restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }
        if ($this->rateLimiterEnabled) {
            $this->createSubscriptionRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscription'
     *
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     * @param  \SpApi\Model\notifications\v1\CreateSubscriptionRequest $body
     *  (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function createSubscriptionRequest(
        string $notification_type,
        \SpApi\Model\notifications\v1\CreateSubscriptionRequest $body
    ): Request {
        // verify the required parameter 'notification_type' is set
        if ($notification_type === null || (is_array($notification_type) && count($notification_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification_type when calling createSubscription'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createSubscription'
            );
        }

        $resourcePath = '/notifications/v1/subscriptions/{notificationType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($notification_type !== null) {
            $resourcePath = str_replace(
                '{' . 'notificationType' . '}',
                ObjectSerializer::toPathValue($notification_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'Successful Response'],
            'application/json'
            ,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDestination
     *
     * @param  string $destination_id
     *  The identifier for the destination that you want to delete. (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\notifications\v1\DeleteDestinationResponse
     */
    public function deleteDestination(
        string $destination_id,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\notifications\v1\DeleteDestinationResponse {
        list($response) = $this->deleteDestinationWithHttpInfo($destination_id,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation deleteDestinationWithHttpInfo
     *
     * @param  string $destination_id
     *  The identifier for the destination that you want to delete. (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\notifications\v1\DeleteDestinationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDestinationWithHttpInfo(
        string $destination_id,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->deleteDestinationRequest($destination_id);
        if ($restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->deleteDestinationRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\notifications\v1\DeleteDestinationResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\notifications\v1\DeleteDestinationResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\notifications\v1\DeleteDestinationResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\notifications\v1\DeleteDestinationResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation deleteDestinationAsync
     *
     * @param  string $destination_id
     *  The identifier for the destination that you want to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteDestinationAsync(
        string $destination_id
    ): PromiseInterface {
        return $this->deleteDestinationAsyncWithHttpInfo($destination_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDestinationAsyncWithHttpInfo
     *
     * @param  string $destination_id
     *  The identifier for the destination that you want to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteDestinationAsyncWithHttpInfo(
        string $destination_id,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\notifications\v1\DeleteDestinationResponse';
        $request = $this->deleteDestinationRequest($destination_id);
        if ($this->restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }
        if ($this->rateLimiterEnabled) {
            $this->deleteDestinationRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDestination'
     *
     * @param  string $destination_id
     *  The identifier for the destination that you want to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function deleteDestinationRequest(
        string $destination_id
    ): Request {
        // verify the required parameter 'destination_id' is set
        if ($destination_id === null || (is_array($destination_id) && count($destination_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_id when calling deleteDestination'
            );
        }

        $resourcePath = '/notifications/v1/destinations/{destinationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($destination_id !== null) {
            $resourcePath = str_replace(
                '{' . 'destinationId' . '}',
                ObjectSerializer::toPathValue($destination_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'Successful Response'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscriptionById
     *
     * @param  string $subscription_id
     *  The identifier for the subscription that you want to delete. (required)
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\notifications\v1\DeleteSubscriptionByIdResponse
     */
    public function deleteSubscriptionById(
        string $subscription_id,
        string $notification_type,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\notifications\v1\DeleteSubscriptionByIdResponse {
        list($response) = $this->deleteSubscriptionByIdWithHttpInfo($subscription_id, $notification_type,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation deleteSubscriptionByIdWithHttpInfo
     *
     * @param  string $subscription_id
     *  The identifier for the subscription that you want to delete. (required)
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\notifications\v1\DeleteSubscriptionByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscriptionByIdWithHttpInfo(
        string $subscription_id,
        string $notification_type,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->deleteSubscriptionByIdRequest($subscription_id, $notification_type);
        if ($restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->deleteSubscriptionByIdRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\notifications\v1\DeleteSubscriptionByIdResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\notifications\v1\DeleteSubscriptionByIdResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\notifications\v1\DeleteSubscriptionByIdResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\notifications\v1\DeleteSubscriptionByIdResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation deleteSubscriptionByIdAsync
     *
     * @param  string $subscription_id
     *  The identifier for the subscription that you want to delete. (required)
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteSubscriptionByIdAsync(
        string $subscription_id,
        string $notification_type
    ): PromiseInterface {
        return $this->deleteSubscriptionByIdAsyncWithHttpInfo($subscription_id, $notification_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscriptionByIdAsyncWithHttpInfo
     *
     * @param  string $subscription_id
     *  The identifier for the subscription that you want to delete. (required)
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteSubscriptionByIdAsyncWithHttpInfo(
        string $subscription_id,
        string $notification_type,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\notifications\v1\DeleteSubscriptionByIdResponse';
        $request = $this->deleteSubscriptionByIdRequest($subscription_id, $notification_type);
        if ($this->restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }
        if ($this->rateLimiterEnabled) {
            $this->deleteSubscriptionByIdRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscriptionById'
     *
     * @param  string $subscription_id
     *  The identifier for the subscription that you want to delete. (required)
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function deleteSubscriptionByIdRequest(
        string $subscription_id,
        string $notification_type
    ): Request {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling deleteSubscriptionById'
            );
        }
        // verify the required parameter 'notification_type' is set
        if ($notification_type === null || (is_array($notification_type) && count($notification_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification_type when calling deleteSubscriptionById'
            );
        }

        $resourcePath = '/notifications/v1/subscriptions/{notificationType}/{subscriptionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($notification_type !== null) {
            $resourcePath = str_replace(
                '{' . 'notificationType' . '}',
                ObjectSerializer::toPathValue($notification_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'Successful Operation Response'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDestination
     *
     * @param  string $destination_id
     *  The identifier generated when you created the destination. (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\notifications\v1\GetDestinationResponse
     */
    public function getDestination(
        string $destination_id,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\notifications\v1\GetDestinationResponse {
        list($response) = $this->getDestinationWithHttpInfo($destination_id,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation getDestinationWithHttpInfo
     *
     * @param  string $destination_id
     *  The identifier generated when you created the destination. (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\notifications\v1\GetDestinationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDestinationWithHttpInfo(
        string $destination_id,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getDestinationRequest($destination_id);
        if ($restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->getDestinationRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\notifications\v1\GetDestinationResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\notifications\v1\GetDestinationResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\notifications\v1\GetDestinationResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\notifications\v1\GetDestinationResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation getDestinationAsync
     *
     * @param  string $destination_id
     *  The identifier generated when you created the destination. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDestinationAsync(
        string $destination_id
    ): PromiseInterface {
        return $this->getDestinationAsyncWithHttpInfo($destination_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDestinationAsyncWithHttpInfo
     *
     * @param  string $destination_id
     *  The identifier generated when you created the destination. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDestinationAsyncWithHttpInfo(
        string $destination_id,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\notifications\v1\GetDestinationResponse';
        $request = $this->getDestinationRequest($destination_id);
        if ($this->restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }
        if ($this->rateLimiterEnabled) {
            $this->getDestinationRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDestination'
     *
     * @param  string $destination_id
     *  The identifier generated when you created the destination. (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function getDestinationRequest(
        string $destination_id
    ): Request {
        // verify the required parameter 'destination_id' is set
        if ($destination_id === null || (is_array($destination_id) && count($destination_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_id when calling getDestination'
            );
        }

        $resourcePath = '/notifications/v1/destinations/{destinationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($destination_id !== null) {
            $resourcePath = str_replace(
                '{' . 'destinationId' . '}',
                ObjectSerializer::toPathValue($destination_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'Successful Response'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDestinations
     *
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\notifications\v1\GetDestinationsResponse
     */
    public function getDestinations(
    ,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\notifications\v1\GetDestinationsResponse {
        list($response) = $this->getDestinationsWithHttpInfo(,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation getDestinationsWithHttpInfo
     *
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\notifications\v1\GetDestinationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDestinationsWithHttpInfo(
    ,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getDestinationsRequest();
        if ($restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->getDestinationsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\notifications\v1\GetDestinationsResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\notifications\v1\GetDestinationsResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\notifications\v1\GetDestinationsResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\notifications\v1\GetDestinationsResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation getDestinationsAsync
     *
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDestinationsAsync(
    
    ): PromiseInterface {
        return $this->getDestinationsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDestinationsAsyncWithHttpInfo
     *
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDestinationsAsyncWithHttpInfo(
    ,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\notifications\v1\GetDestinationsResponse';
        $request = $this->getDestinationsRequest();
        if ($this->restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }
        if ($this->rateLimiterEnabled) {
            $this->getDestinationsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDestinations'
     *
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function getDestinationsRequest(
    
    ): Request {

        $resourcePath = '/notifications/v1/destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'Successful Response'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscription
     *
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     * @param  string|null $payload_version
     *  The version of the payload object to be used in the notification. (optional)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\notifications\v1\GetSubscriptionResponse
     */
    public function getSubscription(
        string $notification_type,
        ?string $payload_version = null,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\notifications\v1\GetSubscriptionResponse {
        list($response) = $this->getSubscriptionWithHttpInfo($notification_type, $payload_version,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation getSubscriptionWithHttpInfo
     *
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     * @param  string|null $payload_version
     *  The version of the payload object to be used in the notification. (optional)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\notifications\v1\GetSubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionWithHttpInfo(
        string $notification_type,
        ?string $payload_version = null,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getSubscriptionRequest($notification_type, $payload_version);
        if ($restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->getSubscriptionRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\notifications\v1\GetSubscriptionResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\notifications\v1\GetSubscriptionResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\notifications\v1\GetSubscriptionResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\notifications\v1\GetSubscriptionResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionAsync
     *
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     * @param  string|null $payload_version
     *  The version of the payload object to be used in the notification. (optional)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSubscriptionAsync(
        string $notification_type,
        ?string $payload_version = null
    ): PromiseInterface {
        return $this->getSubscriptionAsyncWithHttpInfo($notification_type, $payload_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionAsyncWithHttpInfo
     *
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     * @param  string|null $payload_version
     *  The version of the payload object to be used in the notification. (optional)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSubscriptionAsyncWithHttpInfo(
        string $notification_type,
        ?string $payload_version = null,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\notifications\v1\GetSubscriptionResponse';
        $request = $this->getSubscriptionRequest($notification_type, $payload_version);
        if ($this->restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }
        if ($this->rateLimiterEnabled) {
            $this->getSubscriptionRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscription'
     *
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     * @param  string|null $payload_version
     *  The version of the payload object to be used in the notification. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function getSubscriptionRequest(
        string $notification_type,
        ?string $payload_version = null
    ): Request {
        // verify the required parameter 'notification_type' is set
        if ($notification_type === null || (is_array($notification_type) && count($notification_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification_type when calling getSubscription'
            );
        }

        $resourcePath = '/notifications/v1/subscriptions/{notificationType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payload_version,
            'payloadVersion', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);


        // path params
        if ($notification_type !== null) {
            $resourcePath = str_replace(
                '{' . 'notificationType' . '}',
                ObjectSerializer::toPathValue($notification_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'Successful Response'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionById
     *
     * @param  string $subscription_id
     *  The identifier for the subscription that you want to get. (required)
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\notifications\v1\GetSubscriptionByIdResponse
     */
    public function getSubscriptionById(
        string $subscription_id,
        string $notification_type,
        ?string $restrictedDataToken = null
    ): \SpApi\Model\notifications\v1\GetSubscriptionByIdResponse {
        list($response) = $this->getSubscriptionByIdWithHttpInfo($subscription_id, $notification_type,$restrictedDataToken);
        return $response;
    }

    /**
     * Operation getSubscriptionByIdWithHttpInfo
     *
     * @param  string $subscription_id
     *  The identifier for the subscription that you want to get. (required)
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\notifications\v1\GetSubscriptionByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionByIdWithHttpInfo(
        string $subscription_id,
        string $notification_type,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getSubscriptionByIdRequest($subscription_id, $notification_type);
        if ($restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->getSubscriptionByIdRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\notifications\v1\GetSubscriptionByIdResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\notifications\v1\GetSubscriptionByIdResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\notifications\v1\GetSubscriptionByIdResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\notifications\v1\GetSubscriptionByIdResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionByIdAsync
     *
     * @param  string $subscription_id
     *  The identifier for the subscription that you want to get. (required)
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSubscriptionByIdAsync(
        string $subscription_id,
        string $notification_type
    ): PromiseInterface {
        return $this->getSubscriptionByIdAsyncWithHttpInfo($subscription_id, $notification_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionByIdAsyncWithHttpInfo
     *
     * @param  string $subscription_id
     *  The identifier for the subscription that you want to get. (required)
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSubscriptionByIdAsyncWithHttpInfo(
        string $subscription_id,
        string $notification_type,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\notifications\v1\GetSubscriptionByIdResponse';
        $request = $this->getSubscriptionByIdRequest($subscription_id, $notification_type);
        if ($this->restrictedDataToken === null) {
            $request = $this->config->sign($request);
        } else {
            // Use RDT token
            $request = $request->withHeader('x-amz-access-token', $restrictedDataToken);
        }
        if ($this->rateLimiterEnabled) {
            $this->getSubscriptionByIdRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionById'
     *
     * @param  string $subscription_id
     *  The identifier for the subscription that you want to get. (required)
     * @param  string $notification_type
     *  The type of notification.   For more information about notification types, refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values). (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function getSubscriptionByIdRequest(
        string $subscription_id,
        string $notification_type
    ): Request {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling getSubscriptionById'
            );
        }
        // verify the required parameter 'notification_type' is set
        if ($notification_type === null || (is_array($notification_type) && count($notification_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification_type when calling getSubscriptionById'
            );
        }

        $resourcePath = '/notifications/v1/subscriptions/{notificationType}/{subscriptionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($notification_type !== null) {
            $resourcePath = str_replace(
                '{' . 'notificationType' . '}',
                ObjectSerializer::toPathValue($notification_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'Successful Response'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
