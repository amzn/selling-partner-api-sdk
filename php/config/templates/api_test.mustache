<?php
/**
 * {{classname}}Test
 * PHP version 8.3
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

{{>partial_header}}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace {{invokerPackage}}\Test\Api;

use {{invokerPackage}}\ApiException;
use {{apiPackage}}\{{classname}};
use {{invokerPackage}}\ObjectSerializer;

/**
 * {{classname}}Test Class Doc Comment
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
{{#operations}}
class {{classname}}Test extends BaseTestCase
{
    private {{classname}} $apiInstance;
    public function setUp(): void
    {
        parent::setUp();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('{{classname}}', $this->getName());
        $this->apiInstance = new {{classname}}($this->config, null);
        // Change Time Format if it requires
        $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('{{classname}}');
        if ($specificTimeFormat) {
            ObjectSerializer::setDateTimeFormat($specificTimeFormat);
        }
    }

    {{#operation}}
    {{#responses}}
    /**
     * Test case for {{{operationId}}}_{{code}}
     */
    public function test{{operationIdCamelCase}}{{code}}()
    {
        {{^vendorExtensions.x-amzn-api-sandbox.static}}
        {{^vendorExtensions}}
        // Skip this test if no static sandbox extension is present
        $this->markTestSkipped('Static sandbox is not defined for this operation.');
        {{/vendorExtensions}}
        {{#vendorExtensions}}
        {{^is2xx}}
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
        {{/is2xx}}
        {{#is2xx}}
        // Dynamic sandbox case
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('test{{operationIdCamelCase}}{{code}}', '{{classname}}')) {
                $this->assertTrue(true);
                return;
            }
            // Skip entire class
            if ($this->testHelper->shouldSkipTest('{{classname}}')) {
                $this->assertTrue(true);
                return;
            }
            $result = $this->testHelper->buildRequestForDynamicSandBox(
                $this->apiInstance,
                '{{operationId}}'
            );
            $requestParams = $result;

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->{{operationId}}WithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode({{code}}, $statusCode);
        } catch (ApiException $e) {
            $this->handleApiException($e, {{code}});
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
        {{/is2xx}}
        {{/vendorExtensions}}
        {{/vendorExtensions.x-amzn-api-sandbox.static}}
        {{#vendorExtensions.x-amzn-api-sandbox.static.0}}
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('test{{operationIdCamelCase}}{{code}}', '{{classname}}')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{{jsonSchema}}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                '{{operationId}}'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('{{classname}}');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->{{operationId}}WithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode({{code}}, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, {{code}}, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, {{code}});
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
        {{/vendorExtensions.x-amzn-api-sandbox.static.0}}
    }
    {{/responses}}
    {{/operation}}
}
{{/operations}}
