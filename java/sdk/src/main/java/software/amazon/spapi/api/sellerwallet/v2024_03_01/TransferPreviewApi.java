/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.sellerwallet.v2024_03_01;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.TransferRatePreview;

public class TransferPreviewApi {
    private ApiClient apiClient;
    private Boolean disableRateLimiting;

    public TransferPreviewApi(ApiClient apiClient, Boolean disableRateLimiting) {
        this.apiClient = apiClient;
        this.disableRateLimiting = disableRateLimiting;
    }

    private final Configuration config = Configuration.get();

    public final Bucket getTransferPreviewBucket = Bucket.builder()
            .addLimit(config.getLimit("TransferPreviewApi-getTransferPreview"))
            .build();

    /**
     * Build call for getTransferPreview
     *
     * @param sourceCountryCode Country code of the source transaction account in ISO 3166 format. (required)
     * @param sourceCurrencyCode Currency code of the source transaction country in ISO 4217 format. (required)
     * @param destinationCountryCode Country code of the destination transaction account in ISO 3166 format. (required)
     * @param destinationCurrencyCode Currency code of the destination transaction country in ISO 4217 format.
     *     (required)
     * @param baseAmount The base transaction amount without any markup fees. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getTransferPreviewCall(
            String sourceCountryCode,
            String sourceCurrencyCode,
            String destinationCountryCode,
            String destinationCurrencyCode,
            BigDecimal baseAmount,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/transferPreview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceCountryCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("sourceCountryCode", sourceCountryCode));
        if (sourceCurrencyCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("sourceCurrencyCode", sourceCurrencyCode));
        if (destinationCountryCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("destinationCountryCode", destinationCountryCode));
        if (destinationCurrencyCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("destinationCurrencyCode", destinationCurrencyCode));
        if (baseAmount != null) localVarQueryParams.addAll(apiClient.parameterToPair("baseAmount", baseAmount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getTransferPreviewValidateBeforeCall(
            String sourceCountryCode,
            String sourceCurrencyCode,
            String destinationCountryCode,
            String destinationCurrencyCode,
            BigDecimal baseAmount,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'sourceCountryCode' is set
        if (sourceCountryCode == null) {
            throw new ApiException(
                    "Missing the required parameter 'sourceCountryCode' when calling getTransferPreview(Async)");
        }
        // verify the required parameter 'sourceCurrencyCode' is set
        if (sourceCurrencyCode == null) {
            throw new ApiException(
                    "Missing the required parameter 'sourceCurrencyCode' when calling getTransferPreview(Async)");
        }
        // verify the required parameter 'destinationCountryCode' is set
        if (destinationCountryCode == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationCountryCode' when calling getTransferPreview(Async)");
        }
        // verify the required parameter 'destinationCurrencyCode' is set
        if (destinationCurrencyCode == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationCurrencyCode' when calling getTransferPreview(Async)");
        }
        // verify the required parameter 'baseAmount' is set
        if (baseAmount == null) {
            throw new ApiException(
                    "Missing the required parameter 'baseAmount' when calling getTransferPreview(Async)");
        }

        return getTransferPreviewCall(
                sourceCountryCode,
                sourceCurrencyCode,
                destinationCountryCode,
                destinationCurrencyCode,
                baseAmount,
                progressRequestListener);
    }

    /**
     * Fetch potential fees that could be applied on a transaction on the basis of the source and destination country
     * currency code Retrieve a list of potential fees on a transaction.
     *
     * @param sourceCountryCode Country code of the source transaction account in ISO 3166 format. (required)
     * @param sourceCurrencyCode Currency code of the source transaction country in ISO 4217 format. (required)
     * @param destinationCountryCode Country code of the destination transaction account in ISO 3166 format. (required)
     * @param destinationCurrencyCode Currency code of the destination transaction country in ISO 4217 format.
     *     (required)
     * @param baseAmount The base transaction amount without any markup fees. (required)
     * @return TransferRatePreview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransferRatePreview getTransferPreview(
            String sourceCountryCode,
            String sourceCurrencyCode,
            String destinationCountryCode,
            String destinationCurrencyCode,
            BigDecimal baseAmount)
            throws ApiException, LWAException {
        ApiResponse<TransferRatePreview> resp = getTransferPreviewWithHttpInfo(
                sourceCountryCode, sourceCurrencyCode, destinationCountryCode, destinationCurrencyCode, baseAmount);
        return resp.getData();
    }

    /**
     * Fetch potential fees that could be applied on a transaction on the basis of the source and destination country
     * currency code Retrieve a list of potential fees on a transaction.
     *
     * @param sourceCountryCode Country code of the source transaction account in ISO 3166 format. (required)
     * @param sourceCurrencyCode Currency code of the source transaction country in ISO 4217 format. (required)
     * @param destinationCountryCode Country code of the destination transaction account in ISO 3166 format. (required)
     * @param destinationCurrencyCode Currency code of the destination transaction country in ISO 4217 format.
     *     (required)
     * @param baseAmount The base transaction amount without any markup fees. (required)
     * @return ApiResponse&lt;TransferRatePreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransferRatePreview> getTransferPreviewWithHttpInfo(
            String sourceCountryCode,
            String sourceCurrencyCode,
            String destinationCountryCode,
            String destinationCurrencyCode,
            BigDecimal baseAmount)
            throws ApiException, LWAException {
        okhttp3.Call call = getTransferPreviewValidateBeforeCall(
                sourceCountryCode,
                sourceCurrencyCode,
                destinationCountryCode,
                destinationCurrencyCode,
                baseAmount,
                null);
        if (disableRateLimiting || getTransferPreviewBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransferRatePreview>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getTransferPreview operation exceeds rate limit");
    }

    /**
     * Fetch potential fees that could be applied on a transaction on the basis of the source and destination country
     * currency code (asynchronously) Retrieve a list of potential fees on a transaction.
     *
     * @param sourceCountryCode Country code of the source transaction account in ISO 3166 format. (required)
     * @param sourceCurrencyCode Currency code of the source transaction country in ISO 4217 format. (required)
     * @param destinationCountryCode Country code of the destination transaction account in ISO 3166 format. (required)
     * @param destinationCurrencyCode Currency code of the destination transaction country in ISO 4217 format.
     *     (required)
     * @param baseAmount The base transaction amount without any markup fees. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getTransferPreviewAsync(
            String sourceCountryCode,
            String sourceCurrencyCode,
            String destinationCountryCode,
            String destinationCurrencyCode,
            BigDecimal baseAmount,
            final ApiCallback<TransferRatePreview> callback)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getTransferPreviewValidateBeforeCall(
                sourceCountryCode,
                sourceCurrencyCode,
                destinationCountryCode,
                destinationCurrencyCode,
                baseAmount,
                progressRequestListener);
        if (disableRateLimiting || getTransferPreviewBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransferRatePreview>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getTransferPreview operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private Boolean disableRateLimiting = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder disableRateLimiting() {
            this.disableRateLimiting = true;
            return this;
        }

        public TransferPreviewApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new TransferPreviewApi(
                    new ApiClient()
                            .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                            .setBasePath(endpoint),
                    disableRateLimiting);
        }
    }
}
