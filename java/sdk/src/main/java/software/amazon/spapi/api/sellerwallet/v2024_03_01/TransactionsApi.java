/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.sellerwallet.v2024_03_01;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RestrictedDataTokenSigner;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.CreateTransactionResponse;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.Transaction;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.TransactionInitiationRequest;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.TransactionListing;

public class TransactionsApi {
    private ApiClient apiClient;
    private Boolean disableRateLimiting;

    public TransactionsApi(ApiClient apiClient, Boolean disableRateLimiting) {
        this.apiClient = apiClient;
        this.disableRateLimiting = disableRateLimiting;
    }

    private final Configuration config = Configuration.get();

    public final Bucket createTransactionBucket = Bucket.builder()
            .addLimit(config.getLimit("TransactionsApi-createTransaction"))
            .build();

    public final Bucket getTransactionBucket = Bucket.builder()
            .addLimit(config.getLimit("TransactionsApi-getTransaction"))
            .build();

    public final Bucket listAccountTransactionsBucket = Bucket.builder()
            .addLimit(config.getLimit("TransactionsApi-listAccountTransactions"))
            .build();

    /**
     * Build call for createTransaction
     *
     * @param body Defines the actual payload of the request (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call createTransactionCall(
            TransactionInitiationRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (destAccountDigitalSignature != null)
            localVarHeaderParams.put(
                    "destAccountDigitalSignature", apiClient.parameterToString(destAccountDigitalSignature));
        if (amountDigitalSignature != null)
            localVarHeaderParams.put("amountDigitalSignature", apiClient.parameterToString(amountDigitalSignature));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call createTransactionValidateBeforeCall(
            TransactionInitiationRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTransaction(Async)");
        }
        // verify the required parameter 'destAccountDigitalSignature' is set
        if (destAccountDigitalSignature == null) {
            throw new ApiException(
                    "Missing the required parameter 'destAccountDigitalSignature' when calling createTransaction(Async)");
        }
        // verify the required parameter 'amountDigitalSignature' is set
        if (amountDigitalSignature == null) {
            throw new ApiException(
                    "Missing the required parameter 'amountDigitalSignature' when calling createTransaction(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling createTransaction(Async)");
        }

        return createTransactionCall(
                body, destAccountDigitalSignature, amountDigitalSignature, marketplaceId, progressRequestListener);
    }

    /**
     * Create a transaction request from Amazon SW account to another customer provided account Create a transaction
     * request from a Seller Wallet account to another customer-provided account.
     *
     * @param body Defines the actual payload of the request (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return CreateTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateTransactionResponse createTransaction(
            TransactionInitiationRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            String marketplaceId,
            String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<CreateTransactionResponse> resp = createTransactionWithHttpInfo(
                body, destAccountDigitalSignature, amountDigitalSignature, marketplaceId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Create a transaction request from Amazon SW account to another customer provided account Create a transaction
     * request from a Seller Wallet account to another customer-provided account.
     *
     * @param body Defines the actual payload of the request (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @return CreateTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateTransactionResponse createTransaction(
            TransactionInitiationRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<CreateTransactionResponse> resp = createTransactionWithHttpInfo(
                body, destAccountDigitalSignature, amountDigitalSignature, marketplaceId, null);
        return resp.getData();
    }

    /**
     * Create a transaction request from Amazon SW account to another customer provided account Create a transaction
     * request from a Seller Wallet account to another customer-provided account.
     *
     * @param body Defines the actual payload of the request (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;CreateTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateTransactionResponse> createTransactionWithHttpInfo(
            TransactionInitiationRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            String marketplaceId,
            String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = createTransactionValidateBeforeCall(
                body, destAccountDigitalSignature, amountDigitalSignature, marketplaceId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "TransactionsApi-createTransaction");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createTransactionBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateTransactionResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createTransaction operation exceeds rate limit");
    }

    /**
     * Create a transaction request from Amazon SW account to another customer provided account Create a transaction
     * request from a Seller Wallet account to another customer-provided account.
     *
     * @param body Defines the actual payload of the request (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @return ApiResponse&lt;CreateTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateTransactionResponse> createTransactionWithHttpInfo(
            TransactionInitiationRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            String marketplaceId)
            throws ApiException, LWAException {
        return createTransactionWithHttpInfo(
                body, destAccountDigitalSignature, amountDigitalSignature, marketplaceId, null);
    }

    /**
     * Create a transaction request from Amazon SW account to another customer provided account (asynchronously) Create
     * a transaction request from a Seller Wallet account to another customer-provided account.
     *
     * @param body Defines the actual payload of the request (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createTransactionAsync(
            TransactionInitiationRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            String marketplaceId,
            final ApiCallback<CreateTransactionResponse> callback)
            throws ApiException, LWAException {
        return createTransactionAsync(
                body, destAccountDigitalSignature, amountDigitalSignature, marketplaceId, callback, null);
    }
    /**
     * Create a transaction request from Amazon SW account to another customer provided account (asynchronously) Create
     * a transaction request from a Seller Wallet account to another customer-provided account.
     *
     * @param body Defines the actual payload of the request (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createTransactionAsync(
            TransactionInitiationRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            String marketplaceId,
            final ApiCallback<CreateTransactionResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = createTransactionValidateBeforeCall(
                body, destAccountDigitalSignature, amountDigitalSignature, marketplaceId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "TransactionsApi-createTransaction");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createTransactionBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateTransactionResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createTransaction operation exceeds rate limit");
    }
    /**
     * Build call for getTransaction
     *
     * @param transactionId ID of the Amazon SW transaction (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getTransactionCall(
            String transactionId,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/transactions/{transactionId}"
                .replaceAll("\\{" + "transactionId" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getTransactionValidateBeforeCall(
            String transactionId,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getTransaction(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException("Missing the required parameter 'marketplaceId' when calling getTransaction(Async)");
        }

        return getTransactionCall(transactionId, marketplaceId, progressRequestListener);
    }

    /**
     * Find particular Amazon SW account transaction by Amazon transaction identifier Returns a transaction
     *
     * @param transactionId ID of the Amazon SW transaction (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public Transaction getTransaction(String transactionId, String marketplaceId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<Transaction> resp = getTransactionWithHttpInfo(transactionId, marketplaceId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Find particular Amazon SW account transaction by Amazon transaction identifier Returns a transaction
     *
     * @param transactionId ID of the Amazon SW transaction (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public Transaction getTransaction(String transactionId, String marketplaceId) throws ApiException, LWAException {
        ApiResponse<Transaction> resp = getTransactionWithHttpInfo(transactionId, marketplaceId, null);
        return resp.getData();
    }

    /**
     * Find particular Amazon SW account transaction by Amazon transaction identifier Returns a transaction
     *
     * @param transactionId ID of the Amazon SW transaction (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Transaction> getTransactionWithHttpInfo(
            String transactionId, String marketplaceId, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = getTransactionValidateBeforeCall(transactionId, marketplaceId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "TransactionsApi-getTransaction");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getTransactionBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<Transaction>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getTransaction operation exceeds rate limit");
    }

    /**
     * Find particular Amazon SW account transaction by Amazon transaction identifier Returns a transaction
     *
     * @param transactionId ID of the Amazon SW transaction (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Transaction> getTransactionWithHttpInfo(String transactionId, String marketplaceId)
            throws ApiException, LWAException {
        return getTransactionWithHttpInfo(transactionId, marketplaceId, null);
    }

    /**
     * Find particular Amazon SW account transaction by Amazon transaction identifier (asynchronously) Returns a
     * transaction
     *
     * @param transactionId ID of the Amazon SW transaction (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getTransactionAsync(
            String transactionId, String marketplaceId, final ApiCallback<Transaction> callback)
            throws ApiException, LWAException {
        return getTransactionAsync(transactionId, marketplaceId, callback, null);
    }
    /**
     * Find particular Amazon SW account transaction by Amazon transaction identifier (asynchronously) Returns a
     * transaction
     *
     * @param transactionId ID of the Amazon SW transaction (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getTransactionAsync(
            String transactionId,
            String marketplaceId,
            final ApiCallback<Transaction> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getTransactionValidateBeforeCall(transactionId, marketplaceId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "TransactionsApi-getTransaction");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getTransactionBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<Transaction>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getTransaction operation exceeds rate limit");
    }
    /**
     * Build call for listAccountTransactions
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call listAccountTransactionsCall(
            String accountId,
            String marketplaceId,
            String nextPageToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountId != null) localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));
        if (nextPageToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("nextPageToken", nextPageToken));
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call listAccountTransactionsValidateBeforeCall(
            String accountId,
            String marketplaceId,
            String nextPageToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling listAccountTransactions(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling listAccountTransactions(Async)");
        }

        return listAccountTransactionsCall(accountId, marketplaceId, nextPageToken, progressRequestListener);
    }

    /**
     * The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * Retrieve a list of transactions for a given Seller Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return TransactionListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransactionListing listAccountTransactions(
            String accountId, String marketplaceId, String nextPageToken, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<TransactionListing> resp =
                listAccountTransactionsWithHttpInfo(accountId, marketplaceId, nextPageToken, restrictedDataToken);
        return resp.getData();
    }

    /**
     * The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * Retrieve a list of transactions for a given Seller Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @return TransactionListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransactionListing listAccountTransactions(String accountId, String marketplaceId, String nextPageToken)
            throws ApiException, LWAException {
        ApiResponse<TransactionListing> resp =
                listAccountTransactionsWithHttpInfo(accountId, marketplaceId, nextPageToken, null);
        return resp.getData();
    }

    /**
     * The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * Retrieve a list of transactions for a given Seller Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;TransactionListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransactionListing> listAccountTransactionsWithHttpInfo(
            String accountId, String marketplaceId, String nextPageToken, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listAccountTransactionsValidateBeforeCall(accountId, marketplaceId, nextPageToken, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "TransactionsApi-listAccountTransactions");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listAccountTransactionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransactionListing>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listAccountTransactions operation exceeds rate limit");
    }

    /**
     * The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * Retrieve a list of transactions for a given Seller Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @return ApiResponse&lt;TransactionListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransactionListing> listAccountTransactionsWithHttpInfo(
            String accountId, String marketplaceId, String nextPageToken) throws ApiException, LWAException {
        return listAccountTransactionsWithHttpInfo(accountId, marketplaceId, nextPageToken, null);
    }

    /**
     * The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * (asynchronously) Retrieve a list of transactions for a given Seller Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listAccountTransactionsAsync(
            String accountId,
            String marketplaceId,
            String nextPageToken,
            final ApiCallback<TransactionListing> callback)
            throws ApiException, LWAException {
        return listAccountTransactionsAsync(accountId, marketplaceId, nextPageToken, callback, null);
    }
    /**
     * The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * (asynchronously) Retrieve a list of transactions for a given Seller Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique
     *     identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listAccountTransactionsAsync(
            String accountId,
            String marketplaceId,
            String nextPageToken,
            final ApiCallback<TransactionListing> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listAccountTransactionsValidateBeforeCall(
                accountId, marketplaceId, nextPageToken, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "TransactionsApi-listAccountTransactions");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listAccountTransactionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransactionListing>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listAccountTransactions operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private Boolean disableRateLimiting = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder disableRateLimiting() {
            this.disableRateLimiting = true;
            return this;
        }

        public TransactionsApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new TransactionsApi(
                    new ApiClient()
                            .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                            .setBasePath(endpoint),
                    disableRateLimiting);
        }
    }
}
