/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.sellerwallet.v2024_03_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/** Details of the destination bank account in the transaction request. */
@Schema(description = "Details of the destination bank account in the transaction request.")
public class TransactionInstrumentDetails {
    @SerializedName("bankAccount")
    private BankAccount bankAccount = null;

    @SerializedName("bankAccountNumber")
    private String bankAccountNumber = null;

    public TransactionInstrumentDetails bankAccount(BankAccount bankAccount) {
        this.bankAccount = bankAccount;
        return this;
    }

    /**
     * Get bankAccount
     *
     * @return bankAccount
     */
    @Schema(required = true, description = "")
    public BankAccount getBankAccount() {
        return bankAccount;
    }

    public void setBankAccount(BankAccount bankAccount) {
        this.bankAccount = bankAccount;
    }

    public TransactionInstrumentDetails bankAccountNumber(String bankAccountNumber) {
        this.bankAccountNumber = bankAccountNumber;
        return this;
    }

    /**
     * The bank account number of the destination payment method. **Note:** This field is encrypted before Amazon
     * receives it, so should not be used to generate &#x60;destAccountDigitalSignature&#x60;, and should not be
     * included in the request signature.
     *
     * @return bankAccountNumber
     */
    @Schema(
            example = "GB29RBOS60161331926819",
            required = true,
            description =
                    "The bank account number of the destination payment method.  **Note:** This field is encrypted before Amazon receives it, so should not be used to generate `destAccountDigitalSignature`, and should not be included in the request signature.")
    public String getBankAccountNumber() {
        return bankAccountNumber;
    }

    public void setBankAccountNumber(String bankAccountNumber) {
        this.bankAccountNumber = bankAccountNumber;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionInstrumentDetails transactionInstrumentDetails = (TransactionInstrumentDetails) o;
        return Objects.equals(this.bankAccount, transactionInstrumentDetails.bankAccount)
                && Objects.equals(this.bankAccountNumber, transactionInstrumentDetails.bankAccountNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bankAccount, bankAccountNumber);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransactionInstrumentDetails {\n");

        sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
        sb.append("    bankAccountNumber: ")
                .append(toIndentedString(bankAccountNumber))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
