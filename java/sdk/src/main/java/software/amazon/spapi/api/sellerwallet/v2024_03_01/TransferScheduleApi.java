/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.sellerwallet.v2024_03_01;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.DeleteTransferSchedule;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.TransferSchedule;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.TransferScheduleListing;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.TransferScheduleRequest;

public class TransferScheduleApi {
    private ApiClient apiClient;
    private Boolean disableRateLimiting;

    public TransferScheduleApi(ApiClient apiClient, Boolean disableRateLimiting) {
        this.apiClient = apiClient;
        this.disableRateLimiting = disableRateLimiting;
    }

    private final Configuration config = Configuration.get();

    public final Bucket createTransferScheduleBucket = Bucket.builder()
            .addLimit(config.getLimit("TransferScheduleApi-createTransferSchedule"))
            .build();

    public final Bucket deleteScheduleTransactionBucket = Bucket.builder()
            .addLimit(config.getLimit("TransferScheduleApi-deleteScheduleTransaction"))
            .build();

    public final Bucket getTransferScheduleBucket = Bucket.builder()
            .addLimit(config.getLimit("TransferScheduleApi-getTransferSchedule"))
            .build();

    public final Bucket listTransferSchedulesBucket = Bucket.builder()
            .addLimit(config.getLimit("TransferScheduleApi-listTransferSchedules"))
            .build();

    public final Bucket updateTransferScheduleBucket = Bucket.builder()
            .addLimit(config.getLimit("TransferScheduleApi-updateTransferSchedule"))
            .build();

    /**
     * Build call for createTransferSchedule
     *
     * @param body The payload of the request. (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call createTransferScheduleCall(
            TransferScheduleRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (destAccountDigitalSignature != null)
            localVarHeaderParams.put(
                    "destAccountDigitalSignature", apiClient.parameterToString(destAccountDigitalSignature));
        if (amountDigitalSignature != null)
            localVarHeaderParams.put("amountDigitalSignature", apiClient.parameterToString(amountDigitalSignature));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call createTransferScheduleValidateBeforeCall(
            TransferScheduleRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTransferSchedule(Async)");
        }
        // verify the required parameter 'destAccountDigitalSignature' is set
        if (destAccountDigitalSignature == null) {
            throw new ApiException(
                    "Missing the required parameter 'destAccountDigitalSignature' when calling createTransferSchedule(Async)");
        }
        // verify the required parameter 'amountDigitalSignature' is set
        if (amountDigitalSignature == null) {
            throw new ApiException(
                    "Missing the required parameter 'amountDigitalSignature' when calling createTransferSchedule(Async)");
        }

        return createTransferScheduleCall(
                body, destAccountDigitalSignature, amountDigitalSignature, progressRequestListener);
    }

    /**
     * Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account Create
     * a transfer schedule request from an Amazon Seller Wallet account to another customer-provided account.
     *
     * @param body The payload of the request. (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @return TransferSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransferSchedule createTransferSchedule(
            TransferScheduleRequest body, String destAccountDigitalSignature, String amountDigitalSignature)
            throws ApiException, LWAException {
        ApiResponse<TransferSchedule> resp =
                createTransferScheduleWithHttpInfo(body, destAccountDigitalSignature, amountDigitalSignature);
        return resp.getData();
    }

    /**
     * Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account Create
     * a transfer schedule request from an Amazon Seller Wallet account to another customer-provided account.
     *
     * @param body The payload of the request. (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @return ApiResponse&lt;TransferSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransferSchedule> createTransferScheduleWithHttpInfo(
            TransferScheduleRequest body, String destAccountDigitalSignature, String amountDigitalSignature)
            throws ApiException, LWAException {
        okhttp3.Call call = createTransferScheduleValidateBeforeCall(
                body, destAccountDigitalSignature, amountDigitalSignature, null);
        if (disableRateLimiting || createTransferScheduleBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransferSchedule>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createTransferSchedule operation exceeds rate limit");
    }

    /**
     * Create a transfer schedule request from Amazon Seller Wallet account to another customer-provided account
     * (asynchronously) Create a transfer schedule request from an Amazon Seller Wallet account to another
     * customer-provided account.
     *
     * @param body The payload of the request. (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createTransferScheduleAsync(
            TransferScheduleRequest body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            final ApiCallback<TransferSchedule> callback)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = createTransferScheduleValidateBeforeCall(
                body, destAccountDigitalSignature, amountDigitalSignature, progressRequestListener);
        if (disableRateLimiting || createTransferScheduleBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransferSchedule>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createTransferSchedule operation exceeds rate limit");
    }
    /**
     * Build call for deleteScheduleTransaction
     *
     * @param transferScheduleId A unique reference ID for a scheduled transfer. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call deleteScheduleTransactionCall(
            String transferScheduleId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules/{transferScheduleId}"
                .replaceAll(
                        "\\{" + "transferScheduleId" + "\\}", apiClient.escapeString(transferScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call deleteScheduleTransactionValidateBeforeCall(
            String transferScheduleId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'transferScheduleId' is set
        if (transferScheduleId == null) {
            throw new ApiException(
                    "Missing the required parameter 'transferScheduleId' when calling deleteScheduleTransaction(Async)");
        }

        return deleteScheduleTransactionCall(transferScheduleId, progressRequestListener);
    }

    /**
     * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided
     * account Delete a transaction request that is scheduled from Amazon Seller Wallet account to another
     * customer-provided account.
     *
     * @param transferScheduleId A unique reference ID for a scheduled transfer. (required)
     * @return DeleteTransferSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public DeleteTransferSchedule deleteScheduleTransaction(String transferScheduleId)
            throws ApiException, LWAException {
        ApiResponse<DeleteTransferSchedule> resp = deleteScheduleTransactionWithHttpInfo(transferScheduleId);
        return resp.getData();
    }

    /**
     * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided
     * account Delete a transaction request that is scheduled from Amazon Seller Wallet account to another
     * customer-provided account.
     *
     * @param transferScheduleId A unique reference ID for a scheduled transfer. (required)
     * @return ApiResponse&lt;DeleteTransferSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<DeleteTransferSchedule> deleteScheduleTransactionWithHttpInfo(String transferScheduleId)
            throws ApiException, LWAException {
        okhttp3.Call call = deleteScheduleTransactionValidateBeforeCall(transferScheduleId, null);
        if (disableRateLimiting || deleteScheduleTransactionBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<DeleteTransferSchedule>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("deleteScheduleTransaction operation exceeds rate limit");
    }

    /**
     * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided
     * account (asynchronously) Delete a transaction request that is scheduled from Amazon Seller Wallet account to
     * another customer-provided account.
     *
     * @param transferScheduleId A unique reference ID for a scheduled transfer. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call deleteScheduleTransactionAsync(
            String transferScheduleId, final ApiCallback<DeleteTransferSchedule> callback)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = deleteScheduleTransactionValidateBeforeCall(transferScheduleId, progressRequestListener);
        if (disableRateLimiting || deleteScheduleTransactionBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<DeleteTransferSchedule>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("deleteScheduleTransaction operation exceeds rate limit");
    }
    /**
     * Build call for getTransferSchedule
     *
     * @param transferScheduleId The schedule ID of the Amazon Seller Wallet transfer. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getTransferScheduleCall(
            String transferScheduleId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules/{transferScheduleId}"
                .replaceAll(
                        "\\{" + "transferScheduleId" + "\\}", apiClient.escapeString(transferScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getTransferScheduleValidateBeforeCall(
            String transferScheduleId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'transferScheduleId' is set
        if (transferScheduleId == null) {
            throw new ApiException(
                    "Missing the required parameter 'transferScheduleId' when calling getTransferSchedule(Async)");
        }

        return getTransferScheduleCall(transferScheduleId, progressRequestListener);
    }

    /**
     * Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier Find a
     * particular Amazon Seller Wallet account transfer schedule.
     *
     * @param transferScheduleId The schedule ID of the Amazon Seller Wallet transfer. (required)
     * @return TransferSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransferSchedule getTransferSchedule(String transferScheduleId) throws ApiException, LWAException {
        ApiResponse<TransferSchedule> resp = getTransferScheduleWithHttpInfo(transferScheduleId);
        return resp.getData();
    }

    /**
     * Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier Find a
     * particular Amazon Seller Wallet account transfer schedule.
     *
     * @param transferScheduleId The schedule ID of the Amazon Seller Wallet transfer. (required)
     * @return ApiResponse&lt;TransferSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransferSchedule> getTransferScheduleWithHttpInfo(String transferScheduleId)
            throws ApiException, LWAException {
        okhttp3.Call call = getTransferScheduleValidateBeforeCall(transferScheduleId, null);
        if (disableRateLimiting || getTransferScheduleBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransferSchedule>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getTransferSchedule operation exceeds rate limit");
    }

    /**
     * Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
     * (asynchronously) Find a particular Amazon Seller Wallet account transfer schedule.
     *
     * @param transferScheduleId The schedule ID of the Amazon Seller Wallet transfer. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getTransferScheduleAsync(
            String transferScheduleId, final ApiCallback<TransferSchedule> callback) throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getTransferScheduleValidateBeforeCall(transferScheduleId, progressRequestListener);
        if (disableRateLimiting || getTransferScheduleBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransferSchedule>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getTransferSchedule operation exceeds rate limit");
    }
    /**
     * Build call for listTransferSchedules
     *
     * @param accountId The ID of the Amazon Seller Wallet account. (required)
     * @param nextPageToken A token that you use to retrieve the next page of results. The response includes
     *     &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call listTransferSchedulesCall(
            String accountId,
            String nextPageToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountId != null) localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));
        if (nextPageToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("nextPageToken", nextPageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call listTransferSchedulesValidateBeforeCall(
            String accountId,
            String nextPageToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling listTransferSchedules(Async)");
        }

        return listTransferSchedulesCall(accountId, nextPageToken, progressRequestListener);
    }

    /**
     * The API will return all the transfer schedules for a given Amazon Seller Wallet account Returns all transfer
     * schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
     *
     * @param accountId The ID of the Amazon Seller Wallet account. (required)
     * @param nextPageToken A token that you use to retrieve the next page of results. The response includes
     *     &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @return TransferScheduleListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransferScheduleListing listTransferSchedules(String accountId, String nextPageToken)
            throws ApiException, LWAException {
        ApiResponse<TransferScheduleListing> resp = listTransferSchedulesWithHttpInfo(accountId, nextPageToken);
        return resp.getData();
    }

    /**
     * The API will return all the transfer schedules for a given Amazon Seller Wallet account Returns all transfer
     * schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
     *
     * @param accountId The ID of the Amazon Seller Wallet account. (required)
     * @param nextPageToken A token that you use to retrieve the next page of results. The response includes
     *     &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @return ApiResponse&lt;TransferScheduleListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransferScheduleListing> listTransferSchedulesWithHttpInfo(
            String accountId, String nextPageToken) throws ApiException, LWAException {
        okhttp3.Call call = listTransferSchedulesValidateBeforeCall(accountId, nextPageToken, null);
        if (disableRateLimiting || listTransferSchedulesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransferScheduleListing>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listTransferSchedules operation exceeds rate limit");
    }

    /**
     * The API will return all the transfer schedules for a given Amazon Seller Wallet account (asynchronously) Returns
     * all transfer schedules of a given Amazon Seller Wallet bank account with the schedule ID in response if present.
     *
     * @param accountId The ID of the Amazon Seller Wallet account. (required)
     * @param nextPageToken A token that you use to retrieve the next page of results. The response includes
     *     &#x60;nextPageToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listTransferSchedulesAsync(
            String accountId, String nextPageToken, final ApiCallback<TransferScheduleListing> callback)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listTransferSchedulesValidateBeforeCall(accountId, nextPageToken, progressRequestListener);
        if (disableRateLimiting || listTransferSchedulesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransferScheduleListing>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listTransferSchedules operation exceeds rate limit");
    }
    /**
     * Build call for updateTransferSchedule
     *
     * @param body The payload of the scheduled transfer request that is to be updated. (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call updateTransferScheduleCall(
            TransferSchedule body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/transferSchedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (destAccountDigitalSignature != null)
            localVarHeaderParams.put(
                    "destAccountDigitalSignature", apiClient.parameterToString(destAccountDigitalSignature));
        if (amountDigitalSignature != null)
            localVarHeaderParams.put("amountDigitalSignature", apiClient.parameterToString(amountDigitalSignature));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call updateTransferScheduleValidateBeforeCall(
            TransferSchedule body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTransferSchedule(Async)");
        }
        // verify the required parameter 'destAccountDigitalSignature' is set
        if (destAccountDigitalSignature == null) {
            throw new ApiException(
                    "Missing the required parameter 'destAccountDigitalSignature' when calling updateTransferSchedule(Async)");
        }
        // verify the required parameter 'amountDigitalSignature' is set
        if (amountDigitalSignature == null) {
            throw new ApiException(
                    "Missing the required parameter 'amountDigitalSignature' when calling updateTransferSchedule(Async)");
        }

        return updateTransferScheduleCall(
                body, destAccountDigitalSignature, amountDigitalSignature, progressRequestListener);
    }

    /**
     * Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference,
     * transferScheduleStatus) in the request body can be updated. Update transfer schedule information. Returns a
     * transfer belonging to the updated scheduled transfer request.
     *
     * @param body The payload of the scheduled transfer request that is to be updated. (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @return TransferSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransferSchedule updateTransferSchedule(
            TransferSchedule body, String destAccountDigitalSignature, String amountDigitalSignature)
            throws ApiException, LWAException {
        ApiResponse<TransferSchedule> resp =
                updateTransferScheduleWithHttpInfo(body, destAccountDigitalSignature, amountDigitalSignature);
        return resp.getData();
    }

    /**
     * Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference,
     * transferScheduleStatus) in the request body can be updated. Update transfer schedule information. Returns a
     * transfer belonging to the updated scheduled transfer request.
     *
     * @param body The payload of the scheduled transfer request that is to be updated. (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @return ApiResponse&lt;TransferSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransferSchedule> updateTransferScheduleWithHttpInfo(
            TransferSchedule body, String destAccountDigitalSignature, String amountDigitalSignature)
            throws ApiException, LWAException {
        okhttp3.Call call = updateTransferScheduleValidateBeforeCall(
                body, destAccountDigitalSignature, amountDigitalSignature, null);
        if (disableRateLimiting || updateTransferScheduleBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransferSchedule>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("updateTransferSchedule operation exceeds rate limit");
    }

    /**
     * Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference,
     * transferScheduleStatus) in the request body can be updated. (asynchronously) Update transfer schedule
     * information. Returns a transfer belonging to the updated scheduled transfer request.
     *
     * @param body The payload of the scheduled transfer request that is to be updated. (required)
     * @param destAccountDigitalSignature Digital signature for the destination bank account details. (required)
     * @param amountDigitalSignature Digital signature for the source currency transaction amount. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateTransferScheduleAsync(
            TransferSchedule body,
            String destAccountDigitalSignature,
            String amountDigitalSignature,
            final ApiCallback<TransferSchedule> callback)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = updateTransferScheduleValidateBeforeCall(
                body, destAccountDigitalSignature, amountDigitalSignature, progressRequestListener);
        if (disableRateLimiting || updateTransferScheduleBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransferSchedule>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("updateTransferSchedule operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private Boolean disableRateLimiting = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder disableRateLimiting() {
            this.disableRateLimiting = true;
            return this;
        }

        public TransferScheduleApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new TransferScheduleApi(
                    new ApiClient()
                            .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                            .setBasePath(endpoint),
                    disableRateLimiting);
        }
    }
}
