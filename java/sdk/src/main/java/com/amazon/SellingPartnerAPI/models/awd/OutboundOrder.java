/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory. 
 *
 * OpenAPI spec version: 2024-05-09
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.models.awd;

import java.util.Objects;
import java.util.Arrays;
import com.amazon.SellingPartnerAPI.models.awd.DistributionPackageQuantity;
import com.amazon.SellingPartnerAPI.models.awd.OrderAttribute;
import com.amazon.SellingPartnerAPI.models.awd.OutboundExecutionError;
import com.amazon.SellingPartnerAPI.models.awd.OutboundShipment;
import com.amazon.SellingPartnerAPI.models.awd.OutboundStatus;
import com.amazon.SellingPartnerAPI.models.awd.ProductQuantity;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Represents an AWD outbound order.
 */
@Schema(description = "Represents an AWD outbound order.")


public class OutboundOrder {
  @SerializedName("confirmedOn")
  private OffsetDateTime confirmedOn = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("eligiblePackagesToOutbound")
  private List<DistributionPackageQuantity> eligiblePackagesToOutbound = null;

  @SerializedName("eligibleProductsToOutbound")
  private List<ProductQuantity> eligibleProductsToOutbound = null;

  @SerializedName("executionErrors")
  private List<OutboundExecutionError> executionErrors = null;

  @SerializedName("orderId")
  private String orderId = null;

  @SerializedName("orderPreferences")
  private List<OrderAttribute> orderPreferences = null;

  @SerializedName("orderStatus")
  private OutboundStatus orderStatus = null;

  @SerializedName("outboundShipments")
  private List<OutboundShipment> outboundShipments = new ArrayList<OutboundShipment>();

  @SerializedName("packagesToOutbound")
  private List<DistributionPackageQuantity> packagesToOutbound = null;

  @SerializedName("productsToOutbound")
  private List<ProductQuantity> productsToOutbound = null;

  @SerializedName("shippedOutboundPackages")
  private List<DistributionPackageQuantity> shippedOutboundPackages = null;

  @SerializedName("shippedOutboundProducts")
  private List<ProductQuantity> shippedOutboundProducts = null;

  @SerializedName("updatedAt")
  private OffsetDateTime updatedAt = null;

  public OutboundOrder confirmedOn(OffsetDateTime confirmedOn) {
    this.confirmedOn = confirmedOn;
    return this;
  }

   /**
   * Date on which this outbound order was confirmed.
   * @return confirmedOn
  **/
  @Schema(example = "2023-01-12T10:00Z", description = "Date on which this outbound order was confirmed.")
  public OffsetDateTime getConfirmedOn() {
    return confirmedOn;
  }

  public void setConfirmedOn(OffsetDateTime confirmedOn) {
    this.confirmedOn = confirmedOn;
  }

  public OutboundOrder createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Date on which this outbound order was created.
   * @return createdAt
  **/
  @Schema(example = "2023-01-12T10:00Z", description = "Date on which this outbound order was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public OutboundOrder eligiblePackagesToOutbound(List<DistributionPackageQuantity> eligiblePackagesToOutbound) {
    this.eligiblePackagesToOutbound = eligiblePackagesToOutbound;
    return this;
  }

  public OutboundOrder addEligiblePackagesToOutboundItem(DistributionPackageQuantity eligiblePackagesToOutboundItem) {
    if (this.eligiblePackagesToOutbound == null) {
      this.eligiblePackagesToOutbound = new ArrayList<DistributionPackageQuantity>();
    }
    this.eligiblePackagesToOutbound.add(eligiblePackagesToOutboundItem);
    return this;
  }

   /**
   * List of packages that are eligible for outbound.
   * @return eligiblePackagesToOutbound
  **/
  @Schema(description = "List of packages that are eligible for outbound.")
  public List<DistributionPackageQuantity> getEligiblePackagesToOutbound() {
    return eligiblePackagesToOutbound;
  }

  public void setEligiblePackagesToOutbound(List<DistributionPackageQuantity> eligiblePackagesToOutbound) {
    this.eligiblePackagesToOutbound = eligiblePackagesToOutbound;
  }

  public OutboundOrder eligibleProductsToOutbound(List<ProductQuantity> eligibleProductsToOutbound) {
    this.eligibleProductsToOutbound = eligibleProductsToOutbound;
    return this;
  }

  public OutboundOrder addEligibleProductsToOutboundItem(ProductQuantity eligibleProductsToOutboundItem) {
    if (this.eligibleProductsToOutbound == null) {
      this.eligibleProductsToOutbound = new ArrayList<ProductQuantity>();
    }
    this.eligibleProductsToOutbound.add(eligibleProductsToOutboundItem);
    return this;
  }

   /**
   * List of product units that are eligible for outbound.
   * @return eligibleProductsToOutbound
  **/
  @Schema(description = "List of product units that are eligible for outbound.")
  public List<ProductQuantity> getEligibleProductsToOutbound() {
    return eligibleProductsToOutbound;
  }

  public void setEligibleProductsToOutbound(List<ProductQuantity> eligibleProductsToOutbound) {
    this.eligibleProductsToOutbound = eligibleProductsToOutbound;
  }

  public OutboundOrder executionErrors(List<OutboundExecutionError> executionErrors) {
    this.executionErrors = executionErrors;
    return this;
  }

  public OutboundOrder addExecutionErrorsItem(OutboundExecutionError executionErrorsItem) {
    if (this.executionErrors == null) {
      this.executionErrors = new ArrayList<OutboundExecutionError>();
    }
    this.executionErrors.add(executionErrorsItem);
    return this;
  }

   /**
   * Execution errors associated with the outbound order. This field will be populated if the order failed validation.
   * @return executionErrors
  **/
  @Schema(description = "Execution errors associated with the outbound order. This field will be populated if the order failed validation.")
  public List<OutboundExecutionError> getExecutionErrors() {
    return executionErrors;
  }

  public void setExecutionErrors(List<OutboundExecutionError> executionErrors) {
    this.executionErrors = executionErrors;
  }

  public OutboundOrder orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Order ID for the outbound order.
   * @return orderId
  **/
  @Schema(required = true, description = "Order ID for the outbound order.")
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public OutboundOrder orderPreferences(List<OrderAttribute> orderPreferences) {
    this.orderPreferences = orderPreferences;
    return this;
  }

  public OutboundOrder addOrderPreferencesItem(OrderAttribute orderPreferencesItem) {
    if (this.orderPreferences == null) {
      this.orderPreferences = new ArrayList<OrderAttribute>();
    }
    this.orderPreferences.add(orderPreferencesItem);
    return this;
  }

   /**
   * Order preferences for this outbound order.
   * @return orderPreferences
  **/
  @Schema(description = "Order preferences for this outbound order.")
  public List<OrderAttribute> getOrderPreferences() {
    return orderPreferences;
  }

  public void setOrderPreferences(List<OrderAttribute> orderPreferences) {
    this.orderPreferences = orderPreferences;
  }

  public OutboundOrder orderStatus(OutboundStatus orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

   /**
   * Get orderStatus
   * @return orderStatus
  **/
  @Schema(required = true, description = "")
  public OutboundStatus getOrderStatus() {
    return orderStatus;
  }

  public void setOrderStatus(OutboundStatus orderStatus) {
    this.orderStatus = orderStatus;
  }

  public OutboundOrder outboundShipments(List<OutboundShipment> outboundShipments) {
    this.outboundShipments = outboundShipments;
    return this;
  }

  public OutboundOrder addOutboundShipmentsItem(OutboundShipment outboundShipmentsItem) {
    this.outboundShipments.add(outboundShipmentsItem);
    return this;
  }

   /**
   * List of outbound shipments that are part of this order.
   * @return outboundShipments
  **/
  @Schema(required = true, description = "List of outbound shipments that are part of this order.")
  public List<OutboundShipment> getOutboundShipments() {
    return outboundShipments;
  }

  public void setOutboundShipments(List<OutboundShipment> outboundShipments) {
    this.outboundShipments = outboundShipments;
  }

  public OutboundOrder packagesToOutbound(List<DistributionPackageQuantity> packagesToOutbound) {
    this.packagesToOutbound = packagesToOutbound;
    return this;
  }

  public OutboundOrder addPackagesToOutboundItem(DistributionPackageQuantity packagesToOutboundItem) {
    if (this.packagesToOutbound == null) {
      this.packagesToOutbound = new ArrayList<DistributionPackageQuantity>();
    }
    this.packagesToOutbound.add(packagesToOutboundItem);
    return this;
  }

   /**
   * List of packages to be outbound.
   * @return packagesToOutbound
  **/
  @Schema(description = "List of packages to be outbound.")
  public List<DistributionPackageQuantity> getPackagesToOutbound() {
    return packagesToOutbound;
  }

  public void setPackagesToOutbound(List<DistributionPackageQuantity> packagesToOutbound) {
    this.packagesToOutbound = packagesToOutbound;
  }

  public OutboundOrder productsToOutbound(List<ProductQuantity> productsToOutbound) {
    this.productsToOutbound = productsToOutbound;
    return this;
  }

  public OutboundOrder addProductsToOutboundItem(ProductQuantity productsToOutboundItem) {
    if (this.productsToOutbound == null) {
      this.productsToOutbound = new ArrayList<ProductQuantity>();
    }
    this.productsToOutbound.add(productsToOutboundItem);
    return this;
  }

   /**
   * List of product units to be outbound.
   * @return productsToOutbound
  **/
  @Schema(description = "List of product units to be outbound.")
  public List<ProductQuantity> getProductsToOutbound() {
    return productsToOutbound;
  }

  public void setProductsToOutbound(List<ProductQuantity> productsToOutbound) {
    this.productsToOutbound = productsToOutbound;
  }

  public OutboundOrder shippedOutboundPackages(List<DistributionPackageQuantity> shippedOutboundPackages) {
    this.shippedOutboundPackages = shippedOutboundPackages;
    return this;
  }

  public OutboundOrder addShippedOutboundPackagesItem(DistributionPackageQuantity shippedOutboundPackagesItem) {
    if (this.shippedOutboundPackages == null) {
      this.shippedOutboundPackages = new ArrayList<DistributionPackageQuantity>();
    }
    this.shippedOutboundPackages.add(shippedOutboundPackagesItem);
    return this;
  }

   /**
   * Outbound packages that are shipped after the execution has completed post confirmation.
   * @return shippedOutboundPackages
  **/
  @Schema(description = "Outbound packages that are shipped after the execution has completed post confirmation.")
  public List<DistributionPackageQuantity> getShippedOutboundPackages() {
    return shippedOutboundPackages;
  }

  public void setShippedOutboundPackages(List<DistributionPackageQuantity> shippedOutboundPackages) {
    this.shippedOutboundPackages = shippedOutboundPackages;
  }

  public OutboundOrder shippedOutboundProducts(List<ProductQuantity> shippedOutboundProducts) {
    this.shippedOutboundProducts = shippedOutboundProducts;
    return this;
  }

  public OutboundOrder addShippedOutboundProductsItem(ProductQuantity shippedOutboundProductsItem) {
    if (this.shippedOutboundProducts == null) {
      this.shippedOutboundProducts = new ArrayList<ProductQuantity>();
    }
    this.shippedOutboundProducts.add(shippedOutboundProductsItem);
    return this;
  }

   /**
   * Outbound product units that are shipped after the execution has completed post confirmation.
   * @return shippedOutboundProducts
  **/
  @Schema(description = "Outbound product units that are shipped after the execution has completed post confirmation.")
  public List<ProductQuantity> getShippedOutboundProducts() {
    return shippedOutboundProducts;
  }

  public void setShippedOutboundProducts(List<ProductQuantity> shippedOutboundProducts) {
    this.shippedOutboundProducts = shippedOutboundProducts;
  }

  public OutboundOrder updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Date on which this outbound order was last updated.
   * @return updatedAt
  **/
  @Schema(example = "2023-01-12T10:00Z", description = "Date on which this outbound order was last updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutboundOrder outboundOrder = (OutboundOrder) o;
    return Objects.equals(this.confirmedOn, outboundOrder.confirmedOn) &&
        Objects.equals(this.createdAt, outboundOrder.createdAt) &&
        Objects.equals(this.eligiblePackagesToOutbound, outboundOrder.eligiblePackagesToOutbound) &&
        Objects.equals(this.eligibleProductsToOutbound, outboundOrder.eligibleProductsToOutbound) &&
        Objects.equals(this.executionErrors, outboundOrder.executionErrors) &&
        Objects.equals(this.orderId, outboundOrder.orderId) &&
        Objects.equals(this.orderPreferences, outboundOrder.orderPreferences) &&
        Objects.equals(this.orderStatus, outboundOrder.orderStatus) &&
        Objects.equals(this.outboundShipments, outboundOrder.outboundShipments) &&
        Objects.equals(this.packagesToOutbound, outboundOrder.packagesToOutbound) &&
        Objects.equals(this.productsToOutbound, outboundOrder.productsToOutbound) &&
        Objects.equals(this.shippedOutboundPackages, outboundOrder.shippedOutboundPackages) &&
        Objects.equals(this.shippedOutboundProducts, outboundOrder.shippedOutboundProducts) &&
        Objects.equals(this.updatedAt, outboundOrder.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmedOn, createdAt, eligiblePackagesToOutbound, eligibleProductsToOutbound, executionErrors, orderId, orderPreferences, orderStatus, outboundShipments, packagesToOutbound, productsToOutbound, shippedOutboundPackages, shippedOutboundProducts, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutboundOrder {\n");
    
    sb.append("    confirmedOn: ").append(toIndentedString(confirmedOn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    eligiblePackagesToOutbound: ").append(toIndentedString(eligiblePackagesToOutbound)).append("\n");
    sb.append("    eligibleProductsToOutbound: ").append(toIndentedString(eligibleProductsToOutbound)).append("\n");
    sb.append("    executionErrors: ").append(toIndentedString(executionErrors)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderPreferences: ").append(toIndentedString(orderPreferences)).append("\n");
    sb.append("    orderStatus: ").append(toIndentedString(orderStatus)).append("\n");
    sb.append("    outboundShipments: ").append(toIndentedString(outboundShipments)).append("\n");
    sb.append("    packagesToOutbound: ").append(toIndentedString(packagesToOutbound)).append("\n");
    sb.append("    productsToOutbound: ").append(toIndentedString(productsToOutbound)).append("\n");
    sb.append("    shippedOutboundPackages: ").append(toIndentedString(shippedOutboundPackages)).append("\n");
    sb.append("    shippedOutboundProducts: ").append(toIndentedString(shippedOutboundProducts)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
