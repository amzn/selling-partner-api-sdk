/*
 * The Selling Partner API for Finances
 * The Selling Partner API for Finances provides financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.models.finances;

import java.util.Objects;
import java.util.Arrays;
import com.amazon.SellingPartnerAPI.models.finances.Breakdowns;
import com.amazon.SellingPartnerAPI.models.finances.Contexts;
import com.amazon.SellingPartnerAPI.models.finances.Currency;
import com.amazon.SellingPartnerAPI.models.finances.Items;
import com.amazon.SellingPartnerAPI.models.finances.MarketplaceDetails;
import com.amazon.SellingPartnerAPI.models.finances.RelatedIdentifiers;
import com.amazon.SellingPartnerAPI.models.finances.SellingPartnerMetadata;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * All the information related to a transaction.
 */
@Schema(description = "All the information related to a transaction.")


public class Transaction {
  @SerializedName("sellingPartnerMetadata")
  private SellingPartnerMetadata sellingPartnerMetadata = null;

  @SerializedName("relatedIdentifiers")
  private RelatedIdentifiers relatedIdentifiers = null;

  @SerializedName("transactionType")
  private String transactionType = null;

  @SerializedName("transactionId")
  private String transactionId = null;

  @SerializedName("transactionStatus")
  private String transactionStatus = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("postedDate")
  private OffsetDateTime postedDate = null;

  @SerializedName("totalAmount")
  private Currency totalAmount = null;

  @SerializedName("marketplaceDetails")
  private MarketplaceDetails marketplaceDetails = null;

  @SerializedName("items")
  private Items items = null;

  @SerializedName("contexts")
  private Contexts contexts = null;

  @SerializedName("breakdowns")
  private Breakdowns breakdowns = null;

  public Transaction sellingPartnerMetadata(SellingPartnerMetadata sellingPartnerMetadata) {
    this.sellingPartnerMetadata = sellingPartnerMetadata;
    return this;
  }

   /**
   * Get sellingPartnerMetadata
   * @return sellingPartnerMetadata
  **/
  @Schema(description = "")
  public SellingPartnerMetadata getSellingPartnerMetadata() {
    return sellingPartnerMetadata;
  }

  public void setSellingPartnerMetadata(SellingPartnerMetadata sellingPartnerMetadata) {
    this.sellingPartnerMetadata = sellingPartnerMetadata;
  }

  public Transaction relatedIdentifiers(RelatedIdentifiers relatedIdentifiers) {
    this.relatedIdentifiers = relatedIdentifiers;
    return this;
  }

   /**
   * Get relatedIdentifiers
   * @return relatedIdentifiers
  **/
  @Schema(description = "")
  public RelatedIdentifiers getRelatedIdentifiers() {
    return relatedIdentifiers;
  }

  public void setRelatedIdentifiers(RelatedIdentifiers relatedIdentifiers) {
    this.relatedIdentifiers = relatedIdentifiers;
  }

  public Transaction transactionType(String transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * The type of transaction.  **Possible value:** &#x60;Shipment&#x60;
   * @return transactionType
  **/
  @Schema(description = "The type of transaction.  **Possible value:** `Shipment`")
  public String getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }

  public Transaction transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The unique identifier of the transaction.
   * @return transactionId
  **/
  @Schema(description = "The unique identifier of the transaction.")
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }

  public Transaction transactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * The status of the transaction.   **Possible values:**  * &#x60;Deferred&#x60; * &#x60;Released&#x60;
   * @return transactionStatus
  **/
  @Schema(description = "The status of the transaction.   **Possible values:**  * `Deferred` * `Released`")
  public String getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }

  public Transaction description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Describes the reasons for the transaction.  **Example:** &#x27;Order Payment&#x27;, &#x27;Refund Order&#x27;
   * @return description
  **/
  @Schema(description = "Describes the reasons for the transaction.  **Example:** 'Order Payment', 'Refund Order'")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Transaction postedDate(OffsetDateTime postedDate) {
    this.postedDate = postedDate;
    return this;
  }

   /**
   * Get postedDate
   * @return postedDate
  **/
  @Schema(description = "")
  public OffsetDateTime getPostedDate() {
    return postedDate;
  }

  public void setPostedDate(OffsetDateTime postedDate) {
    this.postedDate = postedDate;
  }

  public Transaction totalAmount(Currency totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Get totalAmount
   * @return totalAmount
  **/
  @Schema(description = "")
  public Currency getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(Currency totalAmount) {
    this.totalAmount = totalAmount;
  }

  public Transaction marketplaceDetails(MarketplaceDetails marketplaceDetails) {
    this.marketplaceDetails = marketplaceDetails;
    return this;
  }

   /**
   * Get marketplaceDetails
   * @return marketplaceDetails
  **/
  @Schema(description = "")
  public MarketplaceDetails getMarketplaceDetails() {
    return marketplaceDetails;
  }

  public void setMarketplaceDetails(MarketplaceDetails marketplaceDetails) {
    this.marketplaceDetails = marketplaceDetails;
  }

  public Transaction items(Items items) {
    this.items = items;
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @Schema(description = "")
  public Items getItems() {
    return items;
  }

  public void setItems(Items items) {
    this.items = items;
  }

  public Transaction contexts(Contexts contexts) {
    this.contexts = contexts;
    return this;
  }

   /**
   * Get contexts
   * @return contexts
  **/
  @Schema(description = "")
  public Contexts getContexts() {
    return contexts;
  }

  public void setContexts(Contexts contexts) {
    this.contexts = contexts;
  }

  public Transaction breakdowns(Breakdowns breakdowns) {
    this.breakdowns = breakdowns;
    return this;
  }

   /**
   * Get breakdowns
   * @return breakdowns
  **/
  @Schema(description = "")
  public Breakdowns getBreakdowns() {
    return breakdowns;
  }

  public void setBreakdowns(Breakdowns breakdowns) {
    this.breakdowns = breakdowns;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.sellingPartnerMetadata, transaction.sellingPartnerMetadata) &&
        Objects.equals(this.relatedIdentifiers, transaction.relatedIdentifiers) &&
        Objects.equals(this.transactionType, transaction.transactionType) &&
        Objects.equals(this.transactionId, transaction.transactionId) &&
        Objects.equals(this.transactionStatus, transaction.transactionStatus) &&
        Objects.equals(this.description, transaction.description) &&
        Objects.equals(this.postedDate, transaction.postedDate) &&
        Objects.equals(this.totalAmount, transaction.totalAmount) &&
        Objects.equals(this.marketplaceDetails, transaction.marketplaceDetails) &&
        Objects.equals(this.items, transaction.items) &&
        Objects.equals(this.contexts, transaction.contexts) &&
        Objects.equals(this.breakdowns, transaction.breakdowns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sellingPartnerMetadata, relatedIdentifiers, transactionType, transactionId, transactionStatus, description, postedDate, totalAmount, marketplaceDetails, items, contexts, breakdowns);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    
    sb.append("    sellingPartnerMetadata: ").append(toIndentedString(sellingPartnerMetadata)).append("\n");
    sb.append("    relatedIdentifiers: ").append(toIndentedString(relatedIdentifiers)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    postedDate: ").append(toIndentedString(postedDate)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    marketplaceDetails: ").append(toIndentedString(marketplaceDetails)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    contexts: ").append(toIndentedString(contexts)).append("\n");
    sb.append("    breakdowns: ").append(toIndentedString(breakdowns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
