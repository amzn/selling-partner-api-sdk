/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.v3.oas.annotations.media.Schema;
import com.google.gson.annotations.SerializedName;
import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Indicates the status of the Amazon-partnered carrier shipment.
 */
@JsonAdapter(TransportStatus.Adapter.class)
public enum TransportStatus {
  @SerializedName("WORKING")
  WORKING("WORKING"),
  @SerializedName("ESTIMATING")
  ESTIMATING("ESTIMATING"),
  @SerializedName("ESTIMATED")
  ESTIMATED("ESTIMATED"),
  @SerializedName("ERROR_ON_ESTIMATING")
  ERROR_ON_ESTIMATING("ERROR_ON_ESTIMATING"),
  @SerializedName("CONFIRMING")
  CONFIRMING("CONFIRMING"),
  @SerializedName("CONFIRMED")
  CONFIRMED("CONFIRMED"),
  @SerializedName("ERROR_ON_CONFIRMING")
  ERROR_ON_CONFIRMING("ERROR_ON_CONFIRMING"),
  @SerializedName("VOIDING")
  VOIDING("VOIDING"),
  @SerializedName("VOIDED")
  VOIDED("VOIDED"),
  @SerializedName("ERROR_IN_VOIDING")
  ERROR_IN_VOIDING("ERROR_IN_VOIDING"),
  @SerializedName("ERROR")
  ERROR("ERROR");

  private String value;

  TransportStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TransportStatus fromValue(String input) {
    for (TransportStatus b : TransportStatus.values()) {
      if (b.value.equals(input)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<TransportStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final TransportStatus enumeration) throws IOException {
      jsonWriter.value(String.valueOf(enumeration.getValue()));
    }

    @Override
    public TransportStatus read(final JsonReader jsonReader) throws IOException {
      Object value = jsonReader.nextString();
      return TransportStatus.fromValue((String)(value));
    }
  }
}
