/*
 * Catalog Items v2022-04-01
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.models.catalogitems.v2022_04_01;

import java.util.Objects;
import java.util.Arrays;
import com.amazon.SellingPartnerAPI.models.catalogitems.v2022_04_01.ItemBrowseClassification;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Classification (browse node) associated with an Amazon catalog item.
 */
@Schema(description = "Classification (browse node) associated with an Amazon catalog item.")


public class ItemBrowseClassification {
  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("classificationId")
  private String classificationId = null;

  @SerializedName("parent")
  private ItemBrowseClassification parent = null;

  public ItemBrowseClassification displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Display name for the classification (browse node).
   * @return displayName
  **/
  @Schema(required = true, description = "Display name for the classification (browse node).")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public ItemBrowseClassification classificationId(String classificationId) {
    this.classificationId = classificationId;
    return this;
  }

   /**
   * Identifier of the classification (browse node identifier).
   * @return classificationId
  **/
  @Schema(required = true, description = "Identifier of the classification (browse node identifier).")
  public String getClassificationId() {
    return classificationId;
  }

  public void setClassificationId(String classificationId) {
    this.classificationId = classificationId;
  }

  public ItemBrowseClassification parent(ItemBrowseClassification parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @Schema(description = "")
  public ItemBrowseClassification getParent() {
    return parent;
  }

  public void setParent(ItemBrowseClassification parent) {
    this.parent = parent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemBrowseClassification itemBrowseClassification = (ItemBrowseClassification) o;
    return Objects.equals(this.displayName, itemBrowseClassification.displayName) &&
        Objects.equals(this.classificationId, itemBrowseClassification.classificationId) &&
        Objects.equals(this.parent, itemBrowseClassification.parent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, classificationId, parent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemBrowseClassification {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    classificationId: ").append(toIndentedString(classificationId)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
