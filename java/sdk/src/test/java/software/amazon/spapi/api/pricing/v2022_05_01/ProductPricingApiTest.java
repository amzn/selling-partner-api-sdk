/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.pricing.v2022_05_01;

import software.amazon.spapi.ApiResponse;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import software.amazon.spapi.models.pricing.v2022_05_01.CompetitiveSummaryBatchRequest;
import software.amazon.spapi.models.pricing.v2022_05_01.CompetitiveSummaryBatchResponse;
import software.amazon.spapi.models.pricing.v2022_05_01.Errors;
import software.amazon.spapi.models.pricing.v2022_05_01.GetFeaturedOfferExpectedPriceBatchRequest;
import software.amazon.spapi.models.pricing.v2022_05_01.GetFeaturedOfferExpectedPriceBatchResponse;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class ProductPricingApiTest {

   private static String endpoint = "http://localhost:3000";
   private static String authEndpoint = "http://localhost:3000/auth/o2/token";
   private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
        .clientId("clientId")
        .clientSecret("clientSecret")
        .refreshToken("refreshToken")
        .endpoint(authEndpoint)
        .build();

   private final ProductPricingApi api = new ProductPricingApi.Builder()
        .lwaAuthorizationCredentials(credentials)
        .endpoint(endpoint)
        .build();

    @Test
    public void getCompetitiveSummaryTest() throws Exception {
        instructBackendMock("getCompetitiveSummary", "200");
        CompetitiveSummaryBatchRequest body = new CompetitiveSummaryBatchRequest();

        ApiResponse<CompetitiveSummaryBatchResponse> response = api.getCompetitiveSummaryWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getFeaturedOfferExpectedPriceBatchTest() throws Exception {
        instructBackendMock("getFeaturedOfferExpectedPriceBatch", "200");
        GetFeaturedOfferExpectedPriceBatchRequest body = new GetFeaturedOfferExpectedPriceBatchRequest();

        ApiResponse<GetFeaturedOfferExpectedPriceBatchResponse> response = api.getFeaturedOfferExpectedPriceBatchWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }


    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
              .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
              .POST(HttpRequest.BodyPublishers.noBody())
              .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if(statusCode != 204) assertNotNull(body);
    }
}
