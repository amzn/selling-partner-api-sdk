/*
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.listings.items.v2021_08_01;

import software.amazon.spapi.ApiResponse;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import software.amazon.spapi.models.listings.items.v2021_08_01.ErrorList;
import software.amazon.spapi.models.listings.items.v2021_08_01.Item;
import software.amazon.spapi.models.listings.items.v2021_08_01.ItemSearchResults;
import software.amazon.spapi.models.listings.items.v2021_08_01.ListingsItemPatchRequest;
import software.amazon.spapi.models.listings.items.v2021_08_01.ListingsItemPutRequest;
import software.amazon.spapi.models.listings.items.v2021_08_01.ListingsItemSubmissionResponse;
import org.threeten.bp.OffsetDateTime;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class ListingsApiTest {

   private static String endpoint = "http://localhost:3000";
   private static String authEndpoint = "http://localhost:3000/auth/o2/token";
   private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
        .clientId("clientId")
        .clientSecret("clientSecret")
        .refreshToken("refreshToken")
        .endpoint(authEndpoint)
        .build();

   private final ListingsApi api = new ListingsApi.Builder()
        .lwaAuthorizationCredentials(credentials)
        .endpoint(endpoint)
        .build();

    @Test
    public void deleteListingsItemTest() throws Exception {
        instructBackendMock("deleteListingsItem", "200");
        String sellerId = "";
        String sku = "";
        List<String> marketplaceIds = new ArrayList<>();

        ApiResponse<ListingsItemSubmissionResponse> response = api.deleteListingsItemWithHttpInfo(sellerId, sku, marketplaceIds, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getListingsItemTest() throws Exception {
        instructBackendMock("getListingsItem", "200");
        String sellerId = "";
        String sku = "";
        List<String> marketplaceIds = new ArrayList<>();

        ApiResponse<Item> response = api.getListingsItemWithHttpInfo(sellerId, sku, marketplaceIds, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void patchListingsItemTest() throws Exception {
        instructBackendMock("patchListingsItem", "200");
        ListingsItemPatchRequest body = new ListingsItemPatchRequest();
        String sellerId = "";
        String sku = "";
        List<String> marketplaceIds = new ArrayList<>();

        ApiResponse<ListingsItemSubmissionResponse> response = api.patchListingsItemWithHttpInfo(body, sellerId, sku, marketplaceIds, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void putListingsItemTest() throws Exception {
        instructBackendMock("putListingsItem", "200");
        ListingsItemPutRequest body = new ListingsItemPutRequest();
        String sellerId = "";
        String sku = "";
        List<String> marketplaceIds = new ArrayList<>();

        ApiResponse<ListingsItemSubmissionResponse> response = api.putListingsItemWithHttpInfo(body, sellerId, sku, marketplaceIds, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void searchListingsItemsTest() throws Exception {
        instructBackendMock("searchListingsItems", "200");
        String sellerId = "";
        List<String> marketplaceIds = new ArrayList<>();

        ApiResponse<ItemSearchResults> response = api.searchListingsItemsWithHttpInfo(sellerId, marketplaceIds, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }


    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
              .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
              .POST(HttpRequest.BodyPublishers.noBody())
              .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if(statusCode != 204) assertNotNull(body);
    }
}
