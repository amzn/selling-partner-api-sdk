/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.fulfillment.inbound.v0;

import software.amazon.spapi.ApiResponse;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import software.amazon.spapi.models.fulfillment.inbound.v0.GetBillOfLadingResponse;
import software.amazon.spapi.models.fulfillment.inbound.v0.GetLabelsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v0.GetPrepInstructionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v0.GetShipmentItemsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v0.GetShipmentsResponse;
import org.threeten.bp.OffsetDateTime;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class FbaInboundApiTest {

   private static String endpoint = "http://localhost:3000";
   private static String authEndpoint = "http://localhost:3000/auth/o2/token";
   private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
        .clientId("clientId")
        .clientSecret("clientSecret")
        .refreshToken("refreshToken")
        .endpoint(authEndpoint)
        .build();

   private final FbaInboundApi api = new FbaInboundApi.Builder()
        .lwaAuthorizationCredentials(credentials)
        .endpoint(endpoint)
        .build();

    @Test
    public void getBillOfLadingTest() throws Exception {
        instructBackendMock("getBillOfLading", "200");
        String shipmentId = "";

        ApiResponse<GetBillOfLadingResponse> response = api.getBillOfLadingWithHttpInfo(shipmentId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getLabelsTest() throws Exception {
        instructBackendMock("getLabels", "200");
        String shipmentId = "";
        String pageType = "";
        String labelType = "";

        ApiResponse<GetLabelsResponse> response = api.getLabelsWithHttpInfo(shipmentId, pageType, labelType, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getPrepInstructionsTest() throws Exception {
        instructBackendMock("getPrepInstructions", "200");
        String shipToCountryCode = "";

        ApiResponse<GetPrepInstructionsResponse> response = api.getPrepInstructionsWithHttpInfo(shipToCountryCode, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getShipmentItemsTest() throws Exception {
        instructBackendMock("getShipmentItems", "200");
        String queryType = "";
        String marketplaceId = "";

        ApiResponse<GetShipmentItemsResponse> response = api.getShipmentItemsWithHttpInfo(queryType, marketplaceId, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getShipmentItemsByShipmentIdTest() throws Exception {
        instructBackendMock("getShipmentItemsByShipmentId", "200");
        String shipmentId = "";

        ApiResponse<GetShipmentItemsResponse> response = api.getShipmentItemsByShipmentIdWithHttpInfo(shipmentId, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getShipmentsTest() throws Exception {
        instructBackendMock("getShipments", "200");
        String queryType = "";
        String marketplaceId = "";

        ApiResponse<GetShipmentsResponse> response = api.getShipmentsWithHttpInfo(queryType, marketplaceId, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }


    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
              .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
              .POST(HttpRequest.BodyPublishers.noBody())
              .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if(statusCode != 204) assertNotNull(body);
    }
}
