/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.sellerwallet.v2024_03_01;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.BalanceListing;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.BankAccount;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.BankAccountListing;

public class AccountsApiTest {

    private static final String endpoint = "http://localhost:3000";
    private static final String authEndpoint = "http://localhost:3000/auth/o2/token";
    private static final LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
            .clientId("clientId")
            .clientSecret("clientSecret")
            .refreshToken("refreshToken")
            .endpoint(authEndpoint)
            .build();

    private final AccountsApi api = new AccountsApi.Builder()
            .lwaAuthorizationCredentials(credentials)
            .endpoint(endpoint)
            .build();

    private final EasyRandom easyRandom = new EasyRandom(new EasyRandomParameters()
            .randomize(OffsetDateTime.class, OffsetDateTime::now)
            .randomize(LocalDate.class, LocalDate::now)
            .collectionSizeRange(1, 2));

    @Test
    public void getAccountTest() throws Exception {
        instructBackendMock("Accounts", "getAccount", "200");
        String accountId = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<BankAccount> response = api.getAccountWithHttpInfo(accountId, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void listAccountBalancesTest() throws Exception {
        instructBackendMock("Accounts", "listAccountBalances", "200");
        String accountId = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<BalanceListing> response = api.listAccountBalancesWithHttpInfo(accountId, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void listAccountsTest() throws Exception {
        instructBackendMock("Accounts", "listAccounts", "200");
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<BankAccountListing> response = api.listAccountsWithHttpInfo(marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    private void instructBackendMock(String basename, String response, String code) throws Exception {
        basename = basename.replaceAll("/\"W| ", "").toLowerCase();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(endpoint + "/response/" + basename + "-" + response + "/code/" + code))
                .POST(HttpRequest.BodyPublishers.noBody())
                .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if (statusCode != 204) assertNotNull(body);
    }
}
