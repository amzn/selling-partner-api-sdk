/*
 * Selling Partner API for Supply Sources
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.supplysources.v2020_07_01;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.math.BigDecimal;
import com.amazon.SellingPartnerAPI.models.supplysources.v2020_07_01.CreateSupplySourceRequest;
import com.amazon.SellingPartnerAPI.models.supplysources.v2020_07_01.CreateSupplySourceResponse;
import com.amazon.SellingPartnerAPI.models.supplysources.v2020_07_01.ErrorList;
import com.amazon.SellingPartnerAPI.models.supplysources.v2020_07_01.GetSupplySourcesResponse;
import com.amazon.SellingPartnerAPI.models.supplysources.v2020_07_01.SupplySource;
import com.amazon.SellingPartnerAPI.models.supplysources.v2020_07_01.UpdateSupplySourceRequest;
import com.amazon.SellingPartnerAPI.models.supplysources.v2020_07_01.UpdateSupplySourceStatusRequest;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class SupplySourcesApiTest {

   private static String endpoint = "http://localhost:3000";
   private static String authEndpoint = "http://localhost:3000/auth/o2/token";
   private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
        .clientId("clientId")
        .clientSecret("clientSecret")
        .refreshToken("refreshToken")
        .endpoint(authEndpoint)
        .build();

   private final SupplySourcesApi api = new SupplySourcesApi.Builder()
        .lwaAuthorizationCredentials(credentials)
        .endpoint(endpoint)
        .build();

    @Test
    public void archiveSupplySourceTest() throws Exception {
        instructBackendMock("archiveSupplySource", "204");
        String supplySourceId = "";
        ApiResponse<ErrorList> response = api.archiveSupplySourceWithHttpInfo(supplySourceId);

        assertEquals(204, response.getStatusCode());
        if(204 != 204) assertNotNull(response.getData());
    }

    @Test
    public void createSupplySourceTest() throws Exception {
        instructBackendMock("createSupplySource", "200");
        CreateSupplySourceRequest body = new CreateSupplySourceRequest();

        ApiResponse<CreateSupplySourceResponse> response = api.createSupplySourceWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getSupplySourceTest() throws Exception {
        instructBackendMock("getSupplySource", "200");
        String supplySourceId = "";
        ApiResponse<SupplySource> response = api.getSupplySourceWithHttpInfo(supplySourceId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getSupplySourcesTest() throws Exception {
        instructBackendMock("getSupplySources", "200");
        
        ApiResponse<GetSupplySourcesResponse> response = api.getSupplySourcesWithHttpInfo(null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void updateSupplySourceTest() throws Exception {
        instructBackendMock("updateSupplySource", "204");
        String supplySourceId = "";
        ApiResponse<ErrorList> response = api.updateSupplySourceWithHttpInfo(supplySourceId, null);

        assertEquals(204, response.getStatusCode());
        if(204 != 204) assertNotNull(response.getData());
    }

    @Test
    public void updateSupplySourceStatusTest() throws Exception {
        instructBackendMock("updateSupplySourceStatus", "204");
        String supplySourceId = "";
        ApiResponse<ErrorList> response = api.updateSupplySourceStatusWithHttpInfo(supplySourceId, null);

        assertEquals(204, response.getStatusCode());
        if(204 != 204) assertNotNull(response.getData());
    }


    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
              .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
              .POST(HttpRequest.BodyPublishers.noBody())
              .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }
}