/*
 * Selling Partner API for A+ Content Management
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.apluscontent.v2020_11_01;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPI.api.commons.ApiTest;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.ErrorList;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.GetContentDocumentResponse;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.ListContentDocumentAsinRelationsResponse;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.PostContentDocumentApprovalSubmissionResponse;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.PostContentDocumentAsinRelationsRequest;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.PostContentDocumentAsinRelationsResponse;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.PostContentDocumentRequest;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.PostContentDocumentResponse;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.PostContentDocumentSuspendSubmissionResponse;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.SearchContentDocumentsResponse;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.SearchContentPublishRecordsResponse;
import com.amazon.SellingPartnerAPI.models.apluscontent.v2020_11_01.ValidateContentDocumentAsinRelationsResponse;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class AplusContentApiTest extends ApiTest {

private final AplusContentApi api = new AplusContentApi.Builder()
    .lwaAuthorizationCredentials(credentials)
    .endpoint(endpoint)
    .build();

    @Test
    public void createContentDocumentTest() throws Exception {
        instructBackendMock("createContentDocument", "200");
        PostContentDocumentRequest body = new PostContentDocumentRequest();String marketplaceId = "";

        ApiResponse<PostContentDocumentResponse> response = api.createContentDocumentWithHttpInfo(body, marketplaceId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getContentDocumentTest() throws Exception {
        instructBackendMock("getContentDocument", "200");
        String contentReferenceKey = "";String marketplaceId = "";List<String> includedDataSet = new ArrayList<>();

        ApiResponse<GetContentDocumentResponse> response = api.getContentDocumentWithHttpInfo(contentReferenceKey, marketplaceId, includedDataSet);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void listContentDocumentAsinRelationsTest() throws Exception {
        instructBackendMock("listContentDocumentAsinRelations", "200");
        String contentReferenceKey = "";String marketplaceId = "";

        ApiResponse<ListContentDocumentAsinRelationsResponse> response = api.listContentDocumentAsinRelationsWithHttpInfo(contentReferenceKey, marketplaceId, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void postContentDocumentApprovalSubmissionTest() throws Exception {
        instructBackendMock("postContentDocumentApprovalSubmission", "200");
        String contentReferenceKey = "";String marketplaceId = "";

        ApiResponse<PostContentDocumentApprovalSubmissionResponse> response = api.postContentDocumentApprovalSubmissionWithHttpInfo(contentReferenceKey, marketplaceId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void postContentDocumentAsinRelationsTest() throws Exception {
        instructBackendMock("postContentDocumentAsinRelations", "200");
        PostContentDocumentAsinRelationsRequest body = new PostContentDocumentAsinRelationsRequest();String contentReferenceKey = "";String marketplaceId = "";

        ApiResponse<PostContentDocumentAsinRelationsResponse> response = api.postContentDocumentAsinRelationsWithHttpInfo(body, contentReferenceKey, marketplaceId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void postContentDocumentSuspendSubmissionTest() throws Exception {
        instructBackendMock("postContentDocumentSuspendSubmission", "200");
        String contentReferenceKey = "";String marketplaceId = "";

        ApiResponse<PostContentDocumentSuspendSubmissionResponse> response = api.postContentDocumentSuspendSubmissionWithHttpInfo(contentReferenceKey, marketplaceId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void searchContentDocumentsTest() throws Exception {
        instructBackendMock("searchContentDocuments", "200");
        String marketplaceId = "";

        ApiResponse<SearchContentDocumentsResponse> response = api.searchContentDocumentsWithHttpInfo(marketplaceId, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void searchContentPublishRecordsTest() throws Exception {
        instructBackendMock("searchContentPublishRecords", "200");
        String marketplaceId = "";String asin = "";

        ApiResponse<SearchContentPublishRecordsResponse> response = api.searchContentPublishRecordsWithHttpInfo(marketplaceId, asin, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void updateContentDocumentTest() throws Exception {
        instructBackendMock("updateContentDocument", "200");
        PostContentDocumentRequest body = new PostContentDocumentRequest();String contentReferenceKey = "";String marketplaceId = "";

        ApiResponse<PostContentDocumentResponse> response = api.updateContentDocumentWithHttpInfo(body, contentReferenceKey, marketplaceId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void validateContentDocumentAsinRelationsTest() throws Exception {
        instructBackendMock("validateContentDocumentAsinRelations", "200");
        PostContentDocumentRequest body = new PostContentDocumentRequest();String marketplaceId = "";

        ApiResponse<ValidateContentDocumentAsinRelationsResponse> response = api.validateContentDocumentAsinRelationsWithHttpInfo(body, marketplaceId, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

}