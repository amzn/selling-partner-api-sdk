/*
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.shipping.v2;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.math.BigDecimal;
import com.amazon.SellingPartnerAPI.models.shipping.v2.CancelShipmentResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.DirectPurchaseRequest;
import com.amazon.SellingPartnerAPI.models.shipping.v2.DirectPurchaseResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.ErrorList;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GenerateCollectionFormRequest;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GenerateCollectionFormResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetAccessPointsResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetAdditionalInputsResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetCarrierAccountFormInputsResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetCarrierAccountsRequest;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetCarrierAccountsResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetCollectionFormHistoryRequest;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetCollectionFormHistoryResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetCollectionFormResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetRatesRequest;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetRatesResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetShipmentDocumentsResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetTrackingResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetUnmanifestedShipmentsRequest;
import com.amazon.SellingPartnerAPI.models.shipping.v2.GetUnmanifestedShipmentsResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.LinkCarrierAccountRequest;
import com.amazon.SellingPartnerAPI.models.shipping.v2.LinkCarrierAccountResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.OneClickShipmentRequest;
import com.amazon.SellingPartnerAPI.models.shipping.v2.OneClickShipmentResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.PurchaseShipmentRequest;
import com.amazon.SellingPartnerAPI.models.shipping.v2.PurchaseShipmentResponse;
import com.amazon.SellingPartnerAPI.models.shipping.v2.UnlinkCarrierAccountRequest;
import com.amazon.SellingPartnerAPI.models.shipping.v2.UnlinkCarrierAccountResponse;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class ShippingApiTest {

   private static String endpoint = "http://localhost:3000";
   private static String authEndpoint = "http://localhost:3000/auth/o2/token";
   private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
        .clientId("clientId")
        .clientSecret("clientSecret")
        .refreshToken("refreshToken")
        .endpoint(authEndpoint)
        .build();

   private final ShippingApi api = new ShippingApi.Builder()
        .lwaAuthorizationCredentials(credentials)
        .endpoint(endpoint)
        .build();

    @Test
    public void cancelShipmentTest() throws Exception {
        instructBackendMock("cancelShipment", "200");
        String shipmentId = "";
        ApiResponse<CancelShipmentResponse> response = api.cancelShipmentWithHttpInfo(shipmentId, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void directPurchaseShipmentTest() throws Exception {
        instructBackendMock("directPurchaseShipment", "200");
        DirectPurchaseRequest body = new DirectPurchaseRequest();

        ApiResponse<DirectPurchaseResponse> response = api.directPurchaseShipmentWithHttpInfo(body, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void generateCollectionFormTest() throws Exception {
        instructBackendMock("generateCollectionForm", "200");
        GenerateCollectionFormRequest body = new GenerateCollectionFormRequest();

        ApiResponse<GenerateCollectionFormResponse> response = api.generateCollectionFormWithHttpInfo(body, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getAccessPointsTest() throws Exception {
        instructBackendMock("getAccessPoints", "200");
        List<String> accessPointTypes = new ArrayList<>();
String countryCode = "";String postalCode = "";
        ApiResponse<GetAccessPointsResponse> response = api.getAccessPointsWithHttpInfo(accessPointTypes, countryCode, postalCode, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getAdditionalInputsTest() throws Exception {
        instructBackendMock("getAdditionalInputs", "200");
        String requestToken = "";String rateId = "";
        ApiResponse<GetAdditionalInputsResponse> response = api.getAdditionalInputsWithHttpInfo(requestToken, rateId, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getCarrierAccountFormInputsTest() throws Exception {
        instructBackendMock("getCarrierAccountFormInputs", "200");
        
        ApiResponse<GetCarrierAccountFormInputsResponse> response = api.getCarrierAccountFormInputsWithHttpInfo(null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getCarrierAccountsTest() throws Exception {
        instructBackendMock("getCarrierAccounts", "200");
        GetCarrierAccountsRequest body = new GetCarrierAccountsRequest();

        ApiResponse<GetCarrierAccountsResponse> response = api.getCarrierAccountsWithHttpInfo(body, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getCollectionFormTest() throws Exception {
        instructBackendMock("getCollectionForm", "200");
        String collectionFormId = "";
        ApiResponse<GetCollectionFormResponse> response = api.getCollectionFormWithHttpInfo(collectionFormId, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getCollectionFormHistoryTest() throws Exception {
        instructBackendMock("getCollectionFormHistory", "200");
        GetCollectionFormHistoryRequest body = new GetCollectionFormHistoryRequest();

        ApiResponse<GetCollectionFormHistoryResponse> response = api.getCollectionFormHistoryWithHttpInfo(body, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getRatesTest() throws Exception {
        instructBackendMock("getRates", "200");
        GetRatesRequest body = new GetRatesRequest();

        ApiResponse<GetRatesResponse> response = api.getRatesWithHttpInfo(body, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getShipmentDocumentsTest() throws Exception {
        instructBackendMock("getShipmentDocuments", "200");
        String shipmentId = "";String packageClientReferenceId = "";
        ApiResponse<GetShipmentDocumentsResponse> response = api.getShipmentDocumentsWithHttpInfo(shipmentId, packageClientReferenceId, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getTrackingTest() throws Exception {
        instructBackendMock("getTracking", "200");
        String trackingId = "";String carrierId = "";
        ApiResponse<GetTrackingResponse> response = api.getTrackingWithHttpInfo(trackingId, carrierId, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getUnmanifestedShipmentsTest() throws Exception {
        instructBackendMock("getUnmanifestedShipments", "200");
        GetUnmanifestedShipmentsRequest body = new GetUnmanifestedShipmentsRequest();

        ApiResponse<GetUnmanifestedShipmentsResponse> response = api.getUnmanifestedShipmentsWithHttpInfo(body, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void linkCarrierAccountTest() throws Exception {
        instructBackendMock("linkCarrierAccount", "200");
        LinkCarrierAccountRequest body = new LinkCarrierAccountRequest();
String carrierId = "";
        ApiResponse<LinkCarrierAccountResponse> response = api.linkCarrierAccountWithHttpInfo(body, carrierId, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void oneClickShipmentTest() throws Exception {
        instructBackendMock("oneClickShipment", "200");
        OneClickShipmentRequest body = new OneClickShipmentRequest();

        ApiResponse<OneClickShipmentResponse> response = api.oneClickShipmentWithHttpInfo(body, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void purchaseShipmentTest() throws Exception {
        instructBackendMock("purchaseShipment", "200");
        PurchaseShipmentRequest body = new PurchaseShipmentRequest();

        ApiResponse<PurchaseShipmentResponse> response = api.purchaseShipmentWithHttpInfo(body, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void unlinkCarrierAccountTest() throws Exception {
        instructBackendMock("unlinkCarrierAccount", "200");
        UnlinkCarrierAccountRequest body = new UnlinkCarrierAccountRequest();
String carrierId = "";
        ApiResponse<UnlinkCarrierAccountResponse> response = api.unlinkCarrierAccountWithHttpInfo(body, carrierId, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }


    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
              .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
              .POST(HttpRequest.BodyPublishers.noBody())
              .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }
}