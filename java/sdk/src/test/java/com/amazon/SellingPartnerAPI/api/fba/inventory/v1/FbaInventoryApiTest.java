/*
 * Selling Partner API for FBA Inventory
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.fba.inventory.v1;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPI.api.commons.ApiTest;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.AddInventoryRequest;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.AddInventoryResponse;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.CreateInventoryItemRequest;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.CreateInventoryItemResponse;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.DeleteInventoryItemResponse;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.GetInventorySummariesResponse;
import org.threeten.bp.OffsetDateTime;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class FbaInventoryApiTest extends ApiTest {

private final FbaInventoryApi api = new FbaInventoryApi.Builder()
    .lwaAuthorizationCredentials(credentials)
    .endpoint(endpoint)
    .build();

    @Test
    public void addInventoryTest() throws Exception {
        instructBackendMock("addInventory", "200");
        AddInventoryRequest body = new AddInventoryRequest();String xAmznIdempotencyToken = "";

        ApiResponse<AddInventoryResponse> response = api.addInventoryWithHttpInfo(body, xAmznIdempotencyToken);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void createInventoryItemTest() throws Exception {
        instructBackendMock("createInventoryItem", "200");
        CreateInventoryItemRequest body = new CreateInventoryItemRequest();

        ApiResponse<CreateInventoryItemResponse> response = api.createInventoryItemWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void deleteInventoryItemTest() throws Exception {
        instructBackendMock("deleteInventoryItem", "200");
        String sellerSku = "";String marketplaceId = "";

        ApiResponse<DeleteInventoryItemResponse> response = api.deleteInventoryItemWithHttpInfo(sellerSku, marketplaceId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getInventorySummariesTest() throws Exception {
        instructBackendMock("getInventorySummaries", "200");
        String granularityType = "";String granularityId = "";List<String> marketplaceIds = new ArrayList<>();

        ApiResponse<GetInventorySummariesResponse> response = api.getInventorySummariesWithHttpInfo(granularityType, granularityId, marketplaceIds, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

}