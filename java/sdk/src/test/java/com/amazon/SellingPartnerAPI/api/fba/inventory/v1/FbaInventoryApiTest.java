/*
 * Selling Partner API for FBA Inventory
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.fba.inventory.v1;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.AddInventoryRequest;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.AddInventoryResponse;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.CreateInventoryItemRequest;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.CreateInventoryItemResponse;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.DeleteInventoryItemResponse;
import com.amazon.SellingPartnerAPI.models.fba.inventory.v1.GetInventorySummariesResponse;
import org.threeten.bp.OffsetDateTime;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class FbaInventoryApiTest {

   private static String endpoint = "http://localhost:3000";
   private static String authEndpoint = "http://localhost:3000/auth/o2/token";
   private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
        .clientId("clientId")
        .clientSecret("clientSecret")
        .refreshToken("refreshToken")
        .endpoint(authEndpoint)
        .build();

   private final FbaInventoryApi api = new FbaInventoryApi.Builder()
        .lwaAuthorizationCredentials(credentials)
        .endpoint(endpoint)
        .build();

    @Test
    public void addInventoryTest() throws Exception {
        instructBackendMock("addInventory", "200");
        AddInventoryRequest body = new AddInventoryRequest();
        String xAmznIdempotencyToken = "";

        ApiResponse<AddInventoryResponse> response = api.addInventoryWithHttpInfo(body, xAmznIdempotencyToken);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void createInventoryItemTest() throws Exception {
        instructBackendMock("createInventoryItem", "200");
        CreateInventoryItemRequest body = new CreateInventoryItemRequest();

        ApiResponse<CreateInventoryItemResponse> response = api.createInventoryItemWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void deleteInventoryItemTest() throws Exception {
        instructBackendMock("deleteInventoryItem", "200");
        String sellerSku = "";
        String marketplaceId = "";

        ApiResponse<DeleteInventoryItemResponse> response = api.deleteInventoryItemWithHttpInfo(sellerSku, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getInventorySummariesTest() throws Exception {
        instructBackendMock("getInventorySummaries", "200");
        String granularityType = "";
        String granularityId = "";
        List<String> marketplaceIds = new ArrayList<>();

        ApiResponse<GetInventorySummariesResponse> response = api.getInventorySummariesWithHttpInfo(granularityType, granularityId, marketplaceIds, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }


    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
              .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
              .POST(HttpRequest.BodyPublishers.noBody())
              .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if(statusCode != 204) assertNotNull(body);
    }
}
