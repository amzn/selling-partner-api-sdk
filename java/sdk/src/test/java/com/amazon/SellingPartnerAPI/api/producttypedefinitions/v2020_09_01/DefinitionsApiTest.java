/*
 * Selling Partner API for Product Type Definitions
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).
 *
 * OpenAPI spec version: 2020-09-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.producttypedefinitions.v2020_09_01;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPI.api.commons.ApiTest;
import com.amazon.SellingPartnerAPI.models.producttypedefinitions.v2020_09_01.ErrorList;
import com.amazon.SellingPartnerAPI.models.producttypedefinitions.v2020_09_01.ProductTypeDefinition;
import com.amazon.SellingPartnerAPI.models.producttypedefinitions.v2020_09_01.ProductTypeList;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class DefinitionsApiTest extends ApiTest {

private final DefinitionsApi api = new DefinitionsApi.Builder()
    .lwaAuthorizationCredentials(credentials)
    .endpoint(endpoint)
    .build();

    @Test
    public void getDefinitionsProductTypeTest() throws Exception {
        instructBackendMock("getDefinitionsProductType", "200");
        String productType = "";List<String> marketplaceIds = new ArrayList<>();

        ApiResponse<ProductTypeDefinition> response = api.getDefinitionsProductTypeWithHttpInfo(productType, marketplaceIds, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void searchDefinitionsProductTypesTest() throws Exception {
        instructBackendMock("searchDefinitionsProductTypes", "200");
        List<String> marketplaceIds = new ArrayList<>();

        ApiResponse<ProductTypeList> response = api.searchDefinitionsProductTypesWithHttpInfo(marketplaceIds, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

}