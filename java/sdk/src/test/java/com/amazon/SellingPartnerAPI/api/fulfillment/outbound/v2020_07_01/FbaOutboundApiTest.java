/*
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.fulfillment.outbound.v2020_07_01;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPI.api.commons.ApiTest;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.CancelFulfillmentOrderResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentOrderRequest;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentOrderResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentReturnRequest;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentReturnResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.GetDeliveryOffersRequest;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.GetDeliveryOffersResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.GetFeatureInventoryResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.GetFeatureSkuResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.GetFeaturesResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.GetFulfillmentOrderResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.GetFulfillmentPreviewRequest;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.GetFulfillmentPreviewResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.GetPackageTrackingDetailsResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.ListAllFulfillmentOrdersResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.ListReturnReasonCodesResponse;
import org.threeten.bp.OffsetDateTime;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.SubmitFulfillmentOrderStatusUpdateRequest;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.SubmitFulfillmentOrderStatusUpdateResponse;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.UpdateFulfillmentOrderRequest;
import com.amazon.SellingPartnerAPI.models.fulfillment.outbound.v2020_07_01.UpdateFulfillmentOrderResponse;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class FbaOutboundApiTest extends ApiTest {

private final FbaOutboundApi api = new FbaOutboundApi.Builder()
    .lwaAuthorizationCredentials(credentials)
    .endpoint(endpoint)
    .build();

    @Test
    public void cancelFulfillmentOrderTest() throws Exception {
        instructBackendMock("cancelFulfillmentOrder", "200");
        String sellerFulfillmentOrderId = "";

        ApiResponse<CancelFulfillmentOrderResponse> response = api.cancelFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void createFulfillmentOrderTest() throws Exception {
        instructBackendMock("createFulfillmentOrder", "200");
        CreateFulfillmentOrderRequest body = new CreateFulfillmentOrderRequest();

        ApiResponse<CreateFulfillmentOrderResponse> response = api.createFulfillmentOrderWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void createFulfillmentReturnTest() throws Exception {
        instructBackendMock("createFulfillmentReturn", "200");
        CreateFulfillmentReturnRequest body = new CreateFulfillmentReturnRequest();String sellerFulfillmentOrderId = "";

        ApiResponse<CreateFulfillmentReturnResponse> response = api.createFulfillmentReturnWithHttpInfo(body, sellerFulfillmentOrderId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void deliveryOffersTest() throws Exception {
        instructBackendMock("deliveryOffers", "200");
        GetDeliveryOffersRequest body = new GetDeliveryOffersRequest();

        ApiResponse<GetDeliveryOffersResponse> response = api.deliveryOffersWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getFeatureInventoryTest() throws Exception {
        instructBackendMock("getFeatureInventory", "200");
        String marketplaceId = "";String featureName = "";

        ApiResponse<GetFeatureInventoryResponse> response = api.getFeatureInventoryWithHttpInfo(marketplaceId, featureName, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getFeatureSKUTest() throws Exception {
        instructBackendMock("getFeatureSKU", "200");
        String marketplaceId = "";String featureName = "";String sellerSku = "";

        ApiResponse<GetFeatureSkuResponse> response = api.getFeatureSKUWithHttpInfo(marketplaceId, featureName, sellerSku);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getFeaturesTest() throws Exception {
        instructBackendMock("getFeatures", "200");
        String marketplaceId = "";

        ApiResponse<GetFeaturesResponse> response = api.getFeaturesWithHttpInfo(marketplaceId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getFulfillmentOrderTest() throws Exception {
        instructBackendMock("getFulfillmentOrder", "200");
        String sellerFulfillmentOrderId = "";

        ApiResponse<GetFulfillmentOrderResponse> response = api.getFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getFulfillmentPreviewTest() throws Exception {
        instructBackendMock("getFulfillmentPreview", "200");
        GetFulfillmentPreviewRequest body = new GetFulfillmentPreviewRequest();

        ApiResponse<GetFulfillmentPreviewResponse> response = api.getFulfillmentPreviewWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getPackageTrackingDetailsTest() throws Exception {
        instructBackendMock("getPackageTrackingDetails", "200");
        int packageNumber = 1;

        ApiResponse<GetPackageTrackingDetailsResponse> response = api.getPackageTrackingDetailsWithHttpInfo(packageNumber);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void listAllFulfillmentOrdersTest() throws Exception {
        instructBackendMock("listAllFulfillmentOrders", "200");
        

        ApiResponse<ListAllFulfillmentOrdersResponse> response = api.listAllFulfillmentOrdersWithHttpInfo(null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void listReturnReasonCodesTest() throws Exception {
        instructBackendMock("listReturnReasonCodes", "200");
        String sellerSku = "";

        ApiResponse<ListReturnReasonCodesResponse> response = api.listReturnReasonCodesWithHttpInfo(sellerSku, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void submitFulfillmentOrderStatusUpdateTest() throws Exception {
        instructBackendMock("submitFulfillmentOrderStatusUpdate", "200");
        SubmitFulfillmentOrderStatusUpdateRequest body = new SubmitFulfillmentOrderStatusUpdateRequest();String sellerFulfillmentOrderId = "";

        ApiResponse<SubmitFulfillmentOrderStatusUpdateResponse> response = api.submitFulfillmentOrderStatusUpdateWithHttpInfo(body, sellerFulfillmentOrderId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void updateFulfillmentOrderTest() throws Exception {
        instructBackendMock("updateFulfillmentOrder", "200");
        UpdateFulfillmentOrderRequest body = new UpdateFulfillmentOrderRequest();String sellerFulfillmentOrderId = "";

        ApiResponse<UpdateFulfillmentOrderResponse> response = api.updateFulfillmentOrderWithHttpInfo(body, sellerFulfillmentOrderId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

}