/*
 * Selling Partner API for Tokens 
 * The Selling Partner API for Tokens provides a secure way to access a customer's PII (Personally Identifiable Information). You can call the Tokens API to get a Restricted Data Token (RDT) for one or more restricted resources that you specify. The RDT authorizes subsequent calls to restricted operations that correspond to the restricted resources that you specified.  For more information, see the [Tokens API Use Case Guide](doc:tokens-api-use-case-guide).
 *
 * OpenAPI spec version: 2021-03-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.tokens.v2021_03_01;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPI.api.commons.ApiTest;
import com.amazon.SellingPartnerAPI.models.tokens.v2021_03_01.CreateRestrictedDataTokenRequest;
import com.amazon.SellingPartnerAPI.models.tokens.v2021_03_01.CreateRestrictedDataTokenResponse;
import com.amazon.SellingPartnerAPI.models.tokens.v2021_03_01.ErrorList;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class TokensApiTest extends ApiTest {

private final TokensApi api = new TokensApi.Builder()
    .lwaAuthorizationCredentials(credentials)
    .endpoint(endpoint)
    .build();

    @Test
    public void createRestrictedDataTokenTest() throws Exception {
        instructBackendMock("createRestrictedDataToken", "200");
        CreateRestrictedDataTokenRequest body = new CreateRestrictedDataTokenRequest();

        ApiResponse<CreateRestrictedDataTokenResponse> response = api.createRestrictedDataTokenWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

}