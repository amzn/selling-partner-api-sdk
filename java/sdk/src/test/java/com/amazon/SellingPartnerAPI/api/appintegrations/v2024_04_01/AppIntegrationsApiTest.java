/*
 * The Selling Partner API for third party application integrations.
 * With the AppIntegrations API v2024-04-01, you can send notifications to Amazon Selling Partners and display the notifications in Seller Central.
 *
 * OpenAPI spec version: 2024-04-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.appintegrations.v2024_04_01;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPI.models.appintegrations.v2024_04_01.CreateNotificationRequest;
import com.amazon.SellingPartnerAPI.models.appintegrations.v2024_04_01.CreateNotificationResponse;
import com.amazon.SellingPartnerAPI.models.appintegrations.v2024_04_01.DeleteNotificationsRequest;
import com.amazon.SellingPartnerAPI.models.appintegrations.v2024_04_01.ErrorList;
import com.amazon.SellingPartnerAPI.models.appintegrations.v2024_04_01.RecordActionFeedbackRequest;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class AppIntegrationsApiTest {

   private static String endpoint = "http://localhost:3000";
   private static String authEndpoint = "http://localhost:3000/auth/o2/token";
   private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
        .clientId("clientId")
        .clientSecret("clientSecret")
        .refreshToken("refreshToken")
        .endpoint(authEndpoint)
        .build();

   private final AppIntegrationsApi api = new AppIntegrationsApi.Builder()
        .lwaAuthorizationCredentials(credentials)
        .endpoint(endpoint)
        .build();

    @Test
    public void createNotificationTest() throws Exception {
        instructBackendMock("createNotification", "200");
        CreateNotificationRequest body = new CreateNotificationRequest();

        ApiResponse<CreateNotificationResponse> response = api.createNotificationWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void deleteNotificationsTest() throws Exception {
        instructBackendMock("deleteNotifications", "204");
        DeleteNotificationsRequest body = new DeleteNotificationsRequest();

        api.deleteNotificationsWithHttpInfo(body);

    }

    @Test
    public void recordActionFeedbackTest() throws Exception {
        instructBackendMock("recordActionFeedback", "204");
        RecordActionFeedbackRequest body = new RecordActionFeedbackRequest();
String notificationId = "";
        api.recordActionFeedbackWithHttpInfo(body, notificationId);

    }


    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
              .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
              .POST(HttpRequest.BodyPublishers.noBody())
              .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }
}