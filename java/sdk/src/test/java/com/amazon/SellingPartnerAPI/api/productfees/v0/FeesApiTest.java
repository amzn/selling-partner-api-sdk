/*
 * Selling Partner API for Product Fees
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.productfees.v0;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPI.models.productfees.v0.FeesEstimateByIdRequest;
import com.amazon.SellingPartnerAPI.models.productfees.v0.GetMyFeesEstimateRequest;
import com.amazon.SellingPartnerAPI.models.productfees.v0.GetMyFeesEstimateResponse;
import com.amazon.SellingPartnerAPI.models.productfees.v0.GetMyFeesEstimatesErrorList;
import com.amazon.SellingPartnerAPI.models.productfees.v0.GetMyFeesEstimatesResponse;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class FeesApiTest {

   private static String endpoint = "http://localhost:3000";
   private static String authEndpoint = "http://localhost:3000/auth/o2/token";
   private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
        .clientId("clientId")
        .clientSecret("clientSecret")
        .refreshToken("refreshToken")
        .endpoint(authEndpoint)
        .build();

   private final FeesApi api = new FeesApi.Builder()
        .lwaAuthorizationCredentials(credentials)
        .endpoint(endpoint)
        .build();

    @Test
    public void getMyFeesEstimateForASINTest() throws Exception {
        instructBackendMock("getMyFeesEstimateForASIN", "200");
        GetMyFeesEstimateRequest body = new GetMyFeesEstimateRequest();
String asin = "";
        ApiResponse<GetMyFeesEstimateResponse> response = api.getMyFeesEstimateForASINWithHttpInfo(body, asin);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getMyFeesEstimateForSKUTest() throws Exception {
        instructBackendMock("getMyFeesEstimateForSKU", "200");
        GetMyFeesEstimateRequest body = new GetMyFeesEstimateRequest();
String sellerSKU = "";
        ApiResponse<GetMyFeesEstimateResponse> response = api.getMyFeesEstimateForSKUWithHttpInfo(body, sellerSKU);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getMyFeesEstimatesTest() throws Exception {
        instructBackendMock("getMyFeesEstimates", "200");
        List<FeesEstimateByIdRequest> body = new ArrayList<>();

        ApiResponse<GetMyFeesEstimatesResponse> response = api.getMyFeesEstimatesWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }


    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
              .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
              .POST(HttpRequest.BodyPublishers.noBody())
              .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }
}