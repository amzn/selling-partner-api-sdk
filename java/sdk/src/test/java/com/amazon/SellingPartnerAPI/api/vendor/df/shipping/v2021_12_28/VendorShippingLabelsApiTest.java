/*
 * Selling Partner API for Direct Fulfillment Shipping
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: 2021-12-28
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.vendor.df.shipping.v2021_12_28;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPI.models.vendor.df.shipping.v2021_12_28.CreateShippingLabelsRequest;
import com.amazon.SellingPartnerAPI.models.vendor.df.shipping.v2021_12_28.ErrorList;
import org.threeten.bp.OffsetDateTime;
import com.amazon.SellingPartnerAPI.models.vendor.df.shipping.v2021_12_28.ShippingLabel;
import com.amazon.SellingPartnerAPI.models.vendor.df.shipping.v2021_12_28.ShippingLabelList;
import com.amazon.SellingPartnerAPI.models.vendor.df.shipping.v2021_12_28.SubmitShippingLabelsRequest;
import com.amazon.SellingPartnerAPI.models.vendor.df.shipping.v2021_12_28.TransactionReference;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class VendorShippingLabelsApiTest {

   private static String endpoint = "http://localhost:3000";
   private static String authEndpoint = "http://localhost:3000/auth/o2/token";
   private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
        .clientId("clientId")
        .clientSecret("clientSecret")
        .refreshToken("refreshToken")
        .endpoint(authEndpoint)
        .build();

   private final VendorShippingLabelsApi api = new VendorShippingLabelsApi.Builder()
        .lwaAuthorizationCredentials(credentials)
        .endpoint(endpoint)
        .build();

    @Test
    public void createShippingLabelsTest() throws Exception {
        instructBackendMock("createShippingLabels", "200");
        CreateShippingLabelsRequest body = new CreateShippingLabelsRequest();
String purchaseOrderNumber = "";
        ApiResponse<ShippingLabel> response = api.createShippingLabelsWithHttpInfo(body, purchaseOrderNumber);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getShippingLabelTest() throws Exception {
        instructBackendMock("getShippingLabel", "200");
        String purchaseOrderNumber = "";
        ApiResponse<ShippingLabel> response = api.getShippingLabelWithHttpInfo(purchaseOrderNumber);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getShippingLabelsTest() throws Exception {
        instructBackendMock("getShippingLabels", "200");
        OffsetDateTime createdAfter = OffsetDateTime.now();OffsetDateTime createdBefore = OffsetDateTime.now();
        ApiResponse<ShippingLabelList> response = api.getShippingLabelsWithHttpInfo(createdAfter, createdBefore, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void submitShippingLabelRequestTest() throws Exception {
        instructBackendMock("submitShippingLabelRequest", "202");
        SubmitShippingLabelsRequest body = new SubmitShippingLabelsRequest();

        ApiResponse<TransactionReference> response = api.submitShippingLabelRequestWithHttpInfo(body);

        assertEquals(202, response.getStatusCode());
        if(202 != 204) assertNotNull(response.getData());
    }


    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
              .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
              .POST(HttpRequest.BodyPublishers.noBody())
              .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }
}