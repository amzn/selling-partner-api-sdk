/*
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.merchantfulfillment.v0;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPI.api.commons.ApiTest;
import com.amazon.SellingPartnerAPI.models.merchantfulfillment.v0.CancelShipmentResponse;
import com.amazon.SellingPartnerAPI.models.merchantfulfillment.v0.CreateShipmentRequest;
import com.amazon.SellingPartnerAPI.models.merchantfulfillment.v0.CreateShipmentResponse;
import com.amazon.SellingPartnerAPI.models.merchantfulfillment.v0.GetAdditionalSellerInputsRequest;
import com.amazon.SellingPartnerAPI.models.merchantfulfillment.v0.GetAdditionalSellerInputsResponse;
import com.amazon.SellingPartnerAPI.models.merchantfulfillment.v0.GetEligibleShipmentServicesRequest;
import com.amazon.SellingPartnerAPI.models.merchantfulfillment.v0.GetEligibleShipmentServicesResponse;
import com.amazon.SellingPartnerAPI.models.merchantfulfillment.v0.GetShipmentResponse;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class MerchantFulfillmentApiTest extends ApiTest {

private final MerchantFulfillmentApi api = new MerchantFulfillmentApi.Builder()
    .lwaAuthorizationCredentials(credentials)
    .endpoint(endpoint)
    .build();

    @Test
    public void cancelShipmentTest() throws Exception {
        instructBackendMock("cancelShipment", "200");
        String shipmentId = "";

        ApiResponse<CancelShipmentResponse> response = api.cancelShipmentWithHttpInfo(shipmentId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void createShipmentTest() throws Exception {
        instructBackendMock("createShipment", "200");
        CreateShipmentRequest body = new CreateShipmentRequest();

        ApiResponse<CreateShipmentResponse> response = api.createShipmentWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getAdditionalSellerInputsTest() throws Exception {
        instructBackendMock("getAdditionalSellerInputs", "200");
        GetAdditionalSellerInputsRequest body = new GetAdditionalSellerInputsRequest();

        ApiResponse<GetAdditionalSellerInputsResponse> response = api.getAdditionalSellerInputsWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getEligibleShipmentServicesTest() throws Exception {
        instructBackendMock("getEligibleShipmentServices", "200");
        GetEligibleShipmentServicesRequest body = new GetEligibleShipmentServicesRequest();

        ApiResponse<GetEligibleShipmentServicesResponse> response = api.getEligibleShipmentServicesWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getShipmentTest() throws Exception {
        instructBackendMock("getShipment", "200");
        String shipmentId = "";

        ApiResponse<GetShipmentResponse> response = api.getShipmentWithHttpInfo(shipmentId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

}