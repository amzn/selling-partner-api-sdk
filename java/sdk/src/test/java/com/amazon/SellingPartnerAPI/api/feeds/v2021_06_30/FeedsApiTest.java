/*
 * Feeds v2021-06-30
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.feeds.v2021_06_30;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPI.api.commons.ApiTest;
import com.amazon.SellingPartnerAPI.models.feeds.v2021_06_30.CreateFeedDocumentResponse;
import com.amazon.SellingPartnerAPI.models.feeds.v2021_06_30.CreateFeedDocumentSpecification;
import com.amazon.SellingPartnerAPI.models.feeds.v2021_06_30.CreateFeedResponse;
import com.amazon.SellingPartnerAPI.models.feeds.v2021_06_30.CreateFeedSpecification;
import com.amazon.SellingPartnerAPI.models.feeds.v2021_06_30.ErrorList;
import com.amazon.SellingPartnerAPI.models.feeds.v2021_06_30.Feed;
import com.amazon.SellingPartnerAPI.models.feeds.v2021_06_30.FeedDocument;
import com.amazon.SellingPartnerAPI.models.feeds.v2021_06_30.GetFeedsResponse;
import org.threeten.bp.OffsetDateTime;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class FeedsApiTest extends ApiTest {

private final FeedsApi api = new FeedsApi.Builder()
    .lwaAuthorizationCredentials(credentials)
    .endpoint(endpoint)
    .build();

    @Test
    public void cancelFeedTest() throws Exception {
        instructBackendMock("cancelFeed", "200");
        String feedId = "";

        api.cancelFeedWithHttpInfo(feedId);

    }

    @Test
    public void createFeedTest() throws Exception {
        instructBackendMock("createFeed", "202");
        CreateFeedSpecification body = new CreateFeedSpecification();

        ApiResponse<CreateFeedResponse> response = api.createFeedWithHttpInfo(body);

        assertEquals(202, response.getStatusCode());
        if(202 != 204) assertNotNull(response.getData());
    }

    @Test
    public void createFeedDocumentTest() throws Exception {
        instructBackendMock("createFeedDocument", "201");
        CreateFeedDocumentSpecification body = new CreateFeedDocumentSpecification();

        ApiResponse<CreateFeedDocumentResponse> response = api.createFeedDocumentWithHttpInfo(body);

        assertEquals(201, response.getStatusCode());
        if(201 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getFeedTest() throws Exception {
        instructBackendMock("getFeed", "200");
        String feedId = "";

        ApiResponse<Feed> response = api.getFeedWithHttpInfo(feedId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getFeedDocumentTest() throws Exception {
        instructBackendMock("getFeedDocument", "200");
        String feedDocumentId = "";

        ApiResponse<FeedDocument> response = api.getFeedDocumentWithHttpInfo(feedDocumentId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getFeedsTest() throws Exception {
        instructBackendMock("getFeeds", "200");
        

        ApiResponse<GetFeedsResponse> response = api.getFeedsWithHttpInfo(null, null, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

}