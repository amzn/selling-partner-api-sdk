/*
 * Selling Partner API for Easy Ship
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.
 *
 * OpenAPI spec version: 2022-03-23
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.easyship.v2022_03_23;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPI.api.commons.ApiTest;
import com.amazon.SellingPartnerAPI.models.easyship.v2022_03_23.CreateScheduledPackageRequest;
import com.amazon.SellingPartnerAPI.models.easyship.v2022_03_23.CreateScheduledPackagesRequest;
import com.amazon.SellingPartnerAPI.models.easyship.v2022_03_23.CreateScheduledPackagesResponse;
import com.amazon.SellingPartnerAPI.models.easyship.v2022_03_23.ErrorList;
import com.amazon.SellingPartnerAPI.models.easyship.v2022_03_23.ListHandoverSlotsRequest;
import com.amazon.SellingPartnerAPI.models.easyship.v2022_03_23.ListHandoverSlotsResponse;
import com.amazon.SellingPartnerAPI.models.easyship.v2022_03_23.ModelPackage;
import com.amazon.SellingPartnerAPI.models.easyship.v2022_03_23.Packages;
import com.amazon.SellingPartnerAPI.models.easyship.v2022_03_23.UpdateScheduledPackagesRequest;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class EasyShipApiTest extends ApiTest {

private final EasyShipApi api = new EasyShipApi.Builder()
    .lwaAuthorizationCredentials(credentials)
    .endpoint(endpoint)
    .build();

    @Test
    public void createScheduledPackageTest() throws Exception {
        instructBackendMock("createScheduledPackage", "200");
        CreateScheduledPackageRequest body = new CreateScheduledPackageRequest();

        ApiResponse<ModelPackage> response = api.createScheduledPackageWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void createScheduledPackageBulkTest() throws Exception {
        instructBackendMock("createScheduledPackageBulk", "200");
        CreateScheduledPackagesRequest body = new CreateScheduledPackagesRequest();

        ApiResponse<CreateScheduledPackagesResponse> response = api.createScheduledPackageBulkWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getScheduledPackageTest() throws Exception {
        instructBackendMock("getScheduledPackage", "200");
        String amazonOrderId = "";String marketplaceId = "";

        ApiResponse<ModelPackage> response = api.getScheduledPackageWithHttpInfo(amazonOrderId, marketplaceId);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void listHandoverSlotsTest() throws Exception {
        instructBackendMock("listHandoverSlots", "200");
        

        ApiResponse<ListHandoverSlotsResponse> response = api.listHandoverSlotsWithHttpInfo(null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void updateScheduledPackagesTest() throws Exception {
        instructBackendMock("updateScheduledPackages", "200");
        

        ApiResponse<Packages> response = api.updateScheduledPackagesWithHttpInfo(null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

}