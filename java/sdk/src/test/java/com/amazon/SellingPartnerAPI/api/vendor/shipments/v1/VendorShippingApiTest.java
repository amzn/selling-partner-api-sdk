/*
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amazon.SellingPartnerAPI.api.vendor.shipments.v1;

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPI.models.vendor.shipments.v1.GetShipmentDetailsResponse;
import com.amazon.SellingPartnerAPI.models.vendor.shipments.v1.GetShipmentLabels;
import org.threeten.bp.OffsetDateTime;
import com.amazon.SellingPartnerAPI.models.vendor.shipments.v1.SubmitShipmentConfirmationsRequest;
import com.amazon.SellingPartnerAPI.models.vendor.shipments.v1.SubmitShipmentConfirmationsResponse;
import com.amazon.SellingPartnerAPI.models.vendor.shipments.v1.SubmitShipments;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class VendorShippingApiTest {

   private static String endpoint = "http://localhost:3000";
   private static String authEndpoint = "http://localhost:3000/auth/o2/token";
   private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
        .clientId("clientId")
        .clientSecret("clientSecret")
        .refreshToken("refreshToken")
        .endpoint(authEndpoint)
        .build();

   private final VendorShippingApi api = new VendorShippingApi.Builder()
        .lwaAuthorizationCredentials(credentials)
        .endpoint(endpoint)
        .build();

    @Test
    public void getShipmentDetailsTest() throws Exception {
        instructBackendMock("getShipmentDetails", "200");
        
        ApiResponse<GetShipmentDetailsResponse> response = api.getShipmentDetailsWithHttpInfo(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void getShipmentLabelsTest() throws Exception {
        instructBackendMock("getShipmentLabels", "200");
        
        ApiResponse<GetShipmentLabels> response = api.getShipmentLabelsWithHttpInfo(null, null, null, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        if(200 != 204) assertNotNull(response.getData());
    }

    @Test
    public void submitShipmentConfirmationsTest() throws Exception {
        instructBackendMock("submitShipmentConfirmations", "202");
        SubmitShipmentConfirmationsRequest body = new SubmitShipmentConfirmationsRequest();

        ApiResponse<SubmitShipmentConfirmationsResponse> response = api.submitShipmentConfirmationsWithHttpInfo(body);

        assertEquals(202, response.getStatusCode());
        if(202 != 204) assertNotNull(response.getData());
    }

    @Test
    public void submitShipmentsTest() throws Exception {
        instructBackendMock("submitShipments", "202");
        SubmitShipments body = new SubmitShipments();

        ApiResponse<SubmitShipmentConfirmationsResponse> response = api.submitShipmentsWithHttpInfo(body);

        assertEquals(202, response.getStatusCode());
        if(202 != 204) assertNotNull(response.getData());
    }


    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
              .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
              .POST(HttpRequest.BodyPublishers.noBody())
              .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }
}