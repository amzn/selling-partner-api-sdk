{{>licenseInfo}}

package {{package}};

import com.amazon.SellingPartnerAPI.ApiResponse;
import com.amazon.SellingPartnerAPI.api.commons.ApiTest;
{{#imports}}import {{import}};
{{/imports}}
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class {{classname}}Test extends ApiTest {

private final {{classname}} api = new {{classname}}.Builder()
    .lwaAuthorizationCredentials(credentials)
    .endpoint(endpoint)
    .build();

{{#operations}}{{#operation}}
    @Test
    public void {{operationId}}Test() throws Exception {
        instructBackendMock("{{operationId}}", "{{responses.0.code}}");
        {{#allParams}}{{#required}}{{#isString}}{{{dataType}}} {{paramName}} = "";{{/isString}}{{#isInteger}}int {{paramName}} = 1;{{/isInteger}}{{#isDateTime}}{{dataType}} {{paramName}} = {{dataType}}.now();{{/isDateTime}}{{#isDate}}{{dataType}} {{paramName}} = {{dataType}}.now();{{/isDate}}{{^isString}}{{^isInteger}}{{^isDateTime}}{{^isDate}}{{{dataType}}} {{paramName}} = new {{#isListContainer}}ArrayList<>{{/isListContainer}}{{^isListContainer}}{{{dataType}}}{{/isListContainer}}();{{/isDate}}{{/isDateTime}}{{/isInteger}}{{/isString}}{{/required}}{{/allParams}}

        {{#returnType}}ApiResponse<{{{returnType}}}> response = {{/returnType}}api.{{operationId}}WithHttpInfo({{#allParams}}{{#required}}{{paramName}}{{/required}}{{^required}}null{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

        {{#returnType}}
        assertEquals({{responses.0.code}}, response.getStatusCode());
        if({{responses.0.code}} != 204) assertNotNull(response.getData());
        {{/returnType}}
    }

{{/operation}}{{/operations}}
}