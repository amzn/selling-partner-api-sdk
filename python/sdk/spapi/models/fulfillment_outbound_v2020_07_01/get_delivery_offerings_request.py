# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetDeliveryOfferingsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_address': 'VariablePrecisionAddress',
        'ship_from_country_code': 'str',
        'seller_sku': 'str',
        'quantity': 'DeliveryQuantity',
    }

    attribute_map = {
        'destination_address': 'destinationAddress',
        'ship_from_country_code': 'shipFromCountryCode',
        'seller_sku': 'sellerSku',
        'quantity': 'quantity',
    }

    def __init__(self, destination_address=None, ship_from_country_code=None, seller_sku=None, quantity=None, _configuration=None):  # noqa: E501
        """GetDeliveryOfferingsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._destination_address = None
        self._ship_from_country_code = None
        self._seller_sku = None
        self._quantity = None
        self.discriminator = None

        self.destination_address = destination_address
        self.ship_from_country_code = ship_from_country_code
        self.seller_sku = seller_sku
        if quantity is not None:
            self.quantity = quantity

    @property
    def destination_address(self):
        """Gets the destination_address of this GetDeliveryOfferingsRequest.  # noqa: E501


        :return: The destination_address of this GetDeliveryOfferingsRequest.  # noqa: E501
        :rtype: VariablePrecisionAddress
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this GetDeliveryOfferingsRequest.


        :param destination_address: The destination_address of this GetDeliveryOfferingsRequest.  # noqa: E501
        :type: VariablePrecisionAddress
        """
        if self._configuration.client_side_validation and destination_address is None:
            raise ValueError("Invalid value for `destination_address`, must not be `None`")  # noqa: E501

        self._destination_address = destination_address

    @property
    def ship_from_country_code(self):
        """Gets the ship_from_country_code of this GetDeliveryOfferingsRequest.  # noqa: E501

        The two digit country code the items should ship from. In ISO 3166-1 alpha-2 format.  # noqa: E501

        :return: The ship_from_country_code of this GetDeliveryOfferingsRequest.  # noqa: E501
        :rtype: str
        """
        return self._ship_from_country_code

    @ship_from_country_code.setter
    def ship_from_country_code(self, ship_from_country_code):
        """Sets the ship_from_country_code of this GetDeliveryOfferingsRequest.

        The two digit country code the items should ship from. In ISO 3166-1 alpha-2 format.  # noqa: E501

        :param ship_from_country_code: The ship_from_country_code of this GetDeliveryOfferingsRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ship_from_country_code is None:
            raise ValueError("Invalid value for `ship_from_country_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ship_from_country_code is not None and len(ship_from_country_code) > 2):
            raise ValueError("Invalid value for `ship_from_country_code`, length must be less than or equal to `2`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ship_from_country_code is not None and len(ship_from_country_code) < 2):
            raise ValueError("Invalid value for `ship_from_country_code`, length must be greater than or equal to `2`")  # noqa: E501

        self._ship_from_country_code = ship_from_country_code

    @property
    def seller_sku(self):
        """Gets the seller_sku of this GetDeliveryOfferingsRequest.  # noqa: E501

        The seller SKU of the item.  # noqa: E501

        :return: The seller_sku of this GetDeliveryOfferingsRequest.  # noqa: E501
        :rtype: str
        """
        return self._seller_sku

    @seller_sku.setter
    def seller_sku(self, seller_sku):
        """Sets the seller_sku of this GetDeliveryOfferingsRequest.

        The seller SKU of the item.  # noqa: E501

        :param seller_sku: The seller_sku of this GetDeliveryOfferingsRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and seller_sku is None:
            raise ValueError("Invalid value for `seller_sku`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                seller_sku is not None and len(seller_sku) > 50):
            raise ValueError("Invalid value for `seller_sku`, length must be less than or equal to `50`")  # noqa: E501

        self._seller_sku = seller_sku

    @property
    def quantity(self):
        """Gets the quantity of this GetDeliveryOfferingsRequest.  # noqa: E501


        :return: The quantity of this GetDeliveryOfferingsRequest.  # noqa: E501
        :rtype: DeliveryQuantity
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetDeliveryOfferingsRequest.


        :param quantity: The quantity of this GetDeliveryOfferingsRequest.  # noqa: E501
        :type: DeliveryQuantity
        """

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetDeliveryOfferingsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDeliveryOfferingsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetDeliveryOfferingsRequest):
            return True

        return self.to_dict() != other.to_dict()
