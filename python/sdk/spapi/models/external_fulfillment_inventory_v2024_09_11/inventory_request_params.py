# coding: utf-8

"""
    The Selling Partner API for External Fulfillment Inventory Management

    You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.

    The version of the OpenAPI document: 2024-09-11
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class InventoryRequestParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_sequence_number': 'int',
        'quantity': 'int',
        'marketplace_attributes': 'MarketplaceAttributes',
    }

    attribute_map = {
        'client_sequence_number': 'clientSequenceNumber',
        'quantity': 'quantity',
        'marketplace_attributes': 'marketplaceAttributes',
    }

    def __init__(self, client_sequence_number=None, quantity=None, marketplace_attributes=None, _configuration=None):  # noqa: E501
        """InventoryRequestParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_sequence_number = None
        self._quantity = None
        self._marketplace_attributes = None
        self.discriminator = None

        if client_sequence_number is not None:
            self.client_sequence_number = client_sequence_number
        if quantity is not None:
            self.quantity = quantity
        if marketplace_attributes is not None:
            self.marketplace_attributes = marketplace_attributes

    @property
    def client_sequence_number(self):
        """Gets the client_sequence_number of this InventoryRequestParams.  # noqa: E501

        The latest sequence number for the inventory update operation. You find this value in the `clientSequenceNumber` property in the response to the `batchInventory` operation.  # noqa: E501

        :return: The client_sequence_number of this InventoryRequestParams.  # noqa: E501
        :rtype: int
        """
        return self._client_sequence_number

    @client_sequence_number.setter
    def client_sequence_number(self, client_sequence_number):
        """Sets the client_sequence_number of this InventoryRequestParams.

        The latest sequence number for the inventory update operation. You find this value in the `clientSequenceNumber` property in the response to the `batchInventory` operation.  # noqa: E501

        :param client_sequence_number: The client_sequence_number of this InventoryRequestParams.  # noqa: E501
        :type: int
        """

        self._client_sequence_number = client_sequence_number

    @property
    def quantity(self):
        """Gets the quantity of this InventoryRequestParams.  # noqa: E501

        The absolute inventory quantity.  # noqa: E501

        :return: The quantity of this InventoryRequestParams.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InventoryRequestParams.

        The absolute inventory quantity.  # noqa: E501

        :param quantity: The quantity of this InventoryRequestParams.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def marketplace_attributes(self):
        """Gets the marketplace_attributes of this InventoryRequestParams.  # noqa: E501


        :return: The marketplace_attributes of this InventoryRequestParams.  # noqa: E501
        :rtype: MarketplaceAttributes
        """
        return self._marketplace_attributes

    @marketplace_attributes.setter
    def marketplace_attributes(self, marketplace_attributes):
        """Sets the marketplace_attributes of this InventoryRequestParams.


        :param marketplace_attributes: The marketplace_attributes of this InventoryRequestParams.  # noqa: E501
        :type: MarketplaceAttributes
        """

        self._marketplace_attributes = marketplace_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryRequestParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryRequestParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryRequestParams):
            return True

        return self.to_dict() != other.to_dict()
