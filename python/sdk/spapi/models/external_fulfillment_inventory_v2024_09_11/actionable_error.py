# coding: utf-8

"""
    The Selling Partner API for External Fulfillment Inventory Management

    You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.

    The version of the OpenAPI document: 2024-09-11
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ActionableError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_type': 'str',
        'error_sub_type': 'str',
    }

    attribute_map = {
        'error_type': 'errorType',
        'error_sub_type': 'errorSubType',
    }

    def __init__(self, error_type=None, error_sub_type=None, _configuration=None):  # noqa: E501
        """ActionableError - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._error_type = None
        self._error_sub_type = None
        self.discriminator = None

        if error_type is not None:
            self.error_type = error_type
        if error_sub_type is not None:
            self.error_sub_type = error_sub_type

    @property
    def error_type(self):
        """Gets the error_type of this ActionableError.  # noqa: E501

        The top level error type that may contain multiple error subtypes.  # noqa: E501

        :return: The error_type of this ActionableError.  # noqa: E501
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this ActionableError.

        The top level error type that may contain multiple error subtypes.  # noqa: E501

        :param error_type: The error_type of this ActionableError.  # noqa: E501
        :type: str
        """

        self._error_type = error_type

    @property
    def error_sub_type(self):
        """Gets the error_sub_type of this ActionableError.  # noqa: E501

        The secondary level error type.  # noqa: E501

        :return: The error_sub_type of this ActionableError.  # noqa: E501
        :rtype: str
        """
        return self._error_sub_type

    @error_sub_type.setter
    def error_sub_type(self, error_sub_type):
        """Sets the error_sub_type of this ActionableError.

        The secondary level error type.  # noqa: E501

        :param error_sub_type: The error_sub_type of this ActionableError.  # noqa: E501
        :type: str
        """

        self._error_sub_type = error_sub_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionableError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionableError):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActionableError):
            return True

        return self.to_dict() != other.to_dict()
