# coding: utf-8

"""
    The Selling Partner API for External Fulfillment Inventory Management

    You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.

    The version of the OpenAPI document: 2024-09-11
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class InventoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'method': 'HttpMethod',
        'body': 'InventoryRequestParams',
    }

    attribute_map = {
        'uri': 'uri',
        'method': 'method',
        'body': 'body',
    }

    def __init__(self, uri=None, method=None, body=None, _configuration=None):  # noqa: E501
        """InventoryRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uri = None
        self._method = None
        self._body = None
        self.discriminator = None

        self.uri = uri
        self.method = method
        if body is not None:
            self.body = body

    @property
    def uri(self):
        """Gets the uri of this InventoryRequest.  # noqa: E501

        The URI associated with the individual APIs from the batch request. The user must provide the resource identifier for the operation they want to use.   # noqa: E501

        :return: The uri of this InventoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InventoryRequest.

        The URI associated with the individual APIs from the batch request. The user must provide the resource identifier for the operation they want to use.   # noqa: E501

        :param uri: The uri of this InventoryRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def method(self):
        """Gets the method of this InventoryRequest.  # noqa: E501


        :return: The method of this InventoryRequest.  # noqa: E501
        :rtype: HttpMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this InventoryRequest.


        :param method: The method of this InventoryRequest.  # noqa: E501
        :type: HttpMethod
        """
        if self._configuration.client_side_validation and method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def body(self):
        """Gets the body of this InventoryRequest.  # noqa: E501


        :return: The body of this InventoryRequest.  # noqa: E501
        :rtype: InventoryRequestParams
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this InventoryRequest.


        :param body: The body of this InventoryRequest.  # noqa: E501
        :type: InventoryRequestParams
        """

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryRequest):
            return True

        return self.to_dict() != other.to_dict()
