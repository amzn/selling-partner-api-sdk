# coding: utf-8

"""
    The Selling Partner API for External Fulfillment Inventory Management

    You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.

    The version of the OpenAPI document: 2024-09-11
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class MarketplaceAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_name': 'str',
        'marketplace_id': 'str',
    }

    attribute_map = {
        'channel_name': 'channelName',
        'marketplace_id': 'marketplaceId',
    }

    def __init__(self, channel_name=None, marketplace_id=None, _configuration=None):  # noqa: E501
        """MarketplaceAttributes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._channel_name = None
        self._marketplace_id = None
        self.discriminator = None

        if channel_name is not None:
            self.channel_name = channel_name
        if marketplace_id is not None:
            self.marketplace_id = marketplace_id

    @property
    def channel_name(self):
        """Gets the channel_name of this MarketplaceAttributes.  # noqa: E501

        The name of the fulfillment channel in which to update inventory.  # noqa: E501

        :return: The channel_name of this MarketplaceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this MarketplaceAttributes.

        The name of the fulfillment channel in which to update inventory.  # noqa: E501

        :param channel_name: The channel_name of this MarketplaceAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["FBA", "MFN", "DF"]  # noqa: E501
        if (self._configuration.client_side_validation and
                channel_name not in allowed_values):
            raise ValueError(
                "Invalid value for `channel_name` ({0}), must be one of {1}"  # noqa: E501
                .format(channel_name, allowed_values)
            )

        self._channel_name = channel_name

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this MarketplaceAttributes.  # noqa: E501

        The marketplace ID of the marketplace where you want to update inventory.  # noqa: E501

        :return: The marketplace_id of this MarketplaceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this MarketplaceAttributes.

        The marketplace ID of the marketplace where you want to update inventory.  # noqa: E501

        :param marketplace_id: The marketplace_id of this MarketplaceAttributes.  # noqa: E501
        :type: str
        """

        self._marketplace_id = marketplace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketplaceAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketplaceAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarketplaceAttributes):
            return True

        return self.to_dict() != other.to_dict()
