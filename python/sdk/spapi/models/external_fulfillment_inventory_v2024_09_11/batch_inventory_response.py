# coding: utf-8

"""
    The Selling Partner API for External Fulfillment Inventory Management

    You can use the Amazon External Fulfillment Inventory API to manage inventory operations in Amazon's External Fulfillment network, including batch inventory updates and retrievals.

    The version of the OpenAPI document: 2024-09-11
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class BatchInventoryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'responses': 'List[InventoryResponse]',
    }

    attribute_map = {
        'responses': 'responses',
    }

    def __init__(self, responses=None, _configuration=None):  # noqa: E501
        """BatchInventoryResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._responses = None
        self.discriminator = None

        if responses is not None:
            self.responses = responses

    @property
    def responses(self):
        """Gets the responses of this BatchInventoryResponse.  # noqa: E501

        A list of inventory request responses.  # noqa: E501

        :return: The responses of this BatchInventoryResponse.  # noqa: E501
        :rtype: List[InventoryResponse]
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this BatchInventoryResponse.

        A list of inventory request responses.  # noqa: E501

        :param responses: The responses of this BatchInventoryResponse.  # noqa: E501
        :type: List[InventoryResponse]
        """
        if (self._configuration.client_side_validation and
                responses is not None and len(responses) > 25):
            raise ValueError("Invalid value for `responses`, number of items must be less than or equal to `25`")  # noqa: E501
        if (self._configuration.client_side_validation and
                responses is not None and len(responses) < 1):
            raise ValueError("Invalid value for `responses`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._responses = responses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchInventoryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchInventoryResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchInventoryResponse):
            return True

        return self.to_dict() != other.to_dict()
