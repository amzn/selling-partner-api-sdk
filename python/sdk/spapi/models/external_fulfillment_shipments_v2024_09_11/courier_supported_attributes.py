# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class CourierSupportedAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carrier_name': 'str',
        'tracking_id': 'str',
    }

    attribute_map = {
        'carrier_name': 'carrierName',
        'tracking_id': 'trackingId',
    }

    def __init__(self, carrier_name=None, tracking_id=None, _configuration=None):  # noqa: E501
        """CourierSupportedAttributes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._carrier_name = None
        self._tracking_id = None
        self.discriminator = None

        self.carrier_name = carrier_name
        self.tracking_id = tracking_id

    @property
    def carrier_name(self):
        """Gets the carrier_name of this CourierSupportedAttributes.  # noqa: E501

        The name of the courier service used to ship the package  # noqa: E501

        :return: The carrier_name of this CourierSupportedAttributes.  # noqa: E501
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this CourierSupportedAttributes.

        The name of the courier service used to ship the package  # noqa: E501

        :param carrier_name: The carrier_name of this CourierSupportedAttributes.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and carrier_name is None:
            raise ValueError("Invalid value for `carrier_name`, must not be `None`")  # noqa: E501

        self._carrier_name = carrier_name

    @property
    def tracking_id(self):
        """Gets the tracking_id of this CourierSupportedAttributes.  # noqa: E501

        The tracking number of the package.  # noqa: E501

        :return: The tracking_id of this CourierSupportedAttributes.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this CourierSupportedAttributes.

        The tracking number of the package.  # noqa: E501

        :param tracking_id: The tracking_id of this CourierSupportedAttributes.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tracking_id is None:
            raise ValueError("Invalid value for `tracking_id`, must not be `None`")  # noqa: E501

        self._tracking_id = tracking_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourierSupportedAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourierSupportedAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CourierSupportedAttributes):
            return True

        return self.to_dict() != other.to_dict()
