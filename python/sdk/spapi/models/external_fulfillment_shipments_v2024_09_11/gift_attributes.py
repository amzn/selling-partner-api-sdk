# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GiftAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gift_wrap_requirement': 'RequirementLevel',
        'gift_wrap_label': 'str',
        'gift_message_presence': 'PresenceStatus',
        'gift_message': 'Document',
    }

    attribute_map = {
        'gift_wrap_requirement': 'giftWrapRequirement',
        'gift_wrap_label': 'giftWrapLabel',
        'gift_message_presence': 'giftMessagePresence',
        'gift_message': 'giftMessage',
    }

    def __init__(self, gift_wrap_requirement=None, gift_wrap_label=None, gift_message_presence=None, gift_message=None, _configuration=None):  # noqa: E501
        """GiftAttributes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._gift_wrap_requirement = None
        self._gift_wrap_label = None
        self._gift_message_presence = None
        self._gift_message = None
        self.discriminator = None

        self.gift_wrap_requirement = gift_wrap_requirement
        if gift_wrap_label is not None:
            self.gift_wrap_label = gift_wrap_label
        self.gift_message_presence = gift_message_presence
        if gift_message is not None:
            self.gift_message = gift_message

    @property
    def gift_wrap_requirement(self):
        """Gets the gift_wrap_requirement of this GiftAttributes.  # noqa: E501


        :return: The gift_wrap_requirement of this GiftAttributes.  # noqa: E501
        :rtype: RequirementLevel
        """
        return self._gift_wrap_requirement

    @gift_wrap_requirement.setter
    def gift_wrap_requirement(self, gift_wrap_requirement):
        """Sets the gift_wrap_requirement of this GiftAttributes.


        :param gift_wrap_requirement: The gift_wrap_requirement of this GiftAttributes.  # noqa: E501
        :type: RequirementLevel
        """
        if self._configuration.client_side_validation and gift_wrap_requirement is None:
            raise ValueError("Invalid value for `gift_wrap_requirement`, must not be `None`")  # noqa: E501

        self._gift_wrap_requirement = gift_wrap_requirement

    @property
    def gift_wrap_label(self):
        """Gets the gift_wrap_label of this GiftAttributes.  # noqa: E501

        The label to be printed on the wrapped gift.  # noqa: E501

        :return: The gift_wrap_label of this GiftAttributes.  # noqa: E501
        :rtype: str
        """
        return self._gift_wrap_label

    @gift_wrap_label.setter
    def gift_wrap_label(self, gift_wrap_label):
        """Sets the gift_wrap_label of this GiftAttributes.

        The label to be printed on the wrapped gift.  # noqa: E501

        :param gift_wrap_label: The gift_wrap_label of this GiftAttributes.  # noqa: E501
        :type: str
        """

        self._gift_wrap_label = gift_wrap_label

    @property
    def gift_message_presence(self):
        """Gets the gift_message_presence of this GiftAttributes.  # noqa: E501


        :return: The gift_message_presence of this GiftAttributes.  # noqa: E501
        :rtype: PresenceStatus
        """
        return self._gift_message_presence

    @gift_message_presence.setter
    def gift_message_presence(self, gift_message_presence):
        """Sets the gift_message_presence of this GiftAttributes.


        :param gift_message_presence: The gift_message_presence of this GiftAttributes.  # noqa: E501
        :type: PresenceStatus
        """
        if self._configuration.client_side_validation and gift_message_presence is None:
            raise ValueError("Invalid value for `gift_message_presence`, must not be `None`")  # noqa: E501

        self._gift_message_presence = gift_message_presence

    @property
    def gift_message(self):
        """Gets the gift_message of this GiftAttributes.  # noqa: E501


        :return: The gift_message of this GiftAttributes.  # noqa: E501
        :rtype: Document
        """
        return self._gift_message

    @gift_message.setter
    def gift_message(self, gift_message):
        """Sets the gift_message of this GiftAttributes.


        :param gift_message: The gift_message of this GiftAttributes.  # noqa: E501
        :type: Document
        """

        self._gift_message = gift_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GiftAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GiftAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GiftAttributes):
            return True

        return self.to_dict() != other.to_dict()
