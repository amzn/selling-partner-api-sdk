# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ComplianceAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hazmat_labels_requirement': 'RequirementLevel',
        'serial_number_requirement': 'RequirementLevel',
        'country_of_origin_requirement': 'RequirementLevel',
        'item_value_requirement': 'RequirementLevel',
    }

    attribute_map = {
        'hazmat_labels_requirement': 'hazmatLabelsRequirement',
        'serial_number_requirement': 'serialNumberRequirement',
        'country_of_origin_requirement': 'countryOfOriginRequirement',
        'item_value_requirement': 'itemValueRequirement',
    }

    def __init__(self, hazmat_labels_requirement=None, serial_number_requirement=None, country_of_origin_requirement=None, item_value_requirement=None, _configuration=None):  # noqa: E501
        """ComplianceAttributes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._hazmat_labels_requirement = None
        self._serial_number_requirement = None
        self._country_of_origin_requirement = None
        self._item_value_requirement = None
        self.discriminator = None

        self.hazmat_labels_requirement = hazmat_labels_requirement
        self.serial_number_requirement = serial_number_requirement
        self.country_of_origin_requirement = country_of_origin_requirement
        self.item_value_requirement = item_value_requirement

    @property
    def hazmat_labels_requirement(self):
        """Gets the hazmat_labels_requirement of this ComplianceAttributes.  # noqa: E501


        :return: The hazmat_labels_requirement of this ComplianceAttributes.  # noqa: E501
        :rtype: RequirementLevel
        """
        return self._hazmat_labels_requirement

    @hazmat_labels_requirement.setter
    def hazmat_labels_requirement(self, hazmat_labels_requirement):
        """Sets the hazmat_labels_requirement of this ComplianceAttributes.


        :param hazmat_labels_requirement: The hazmat_labels_requirement of this ComplianceAttributes.  # noqa: E501
        :type: RequirementLevel
        """
        if self._configuration.client_side_validation and hazmat_labels_requirement is None:
            raise ValueError("Invalid value for `hazmat_labels_requirement`, must not be `None`")  # noqa: E501

        self._hazmat_labels_requirement = hazmat_labels_requirement

    @property
    def serial_number_requirement(self):
        """Gets the serial_number_requirement of this ComplianceAttributes.  # noqa: E501


        :return: The serial_number_requirement of this ComplianceAttributes.  # noqa: E501
        :rtype: RequirementLevel
        """
        return self._serial_number_requirement

    @serial_number_requirement.setter
    def serial_number_requirement(self, serial_number_requirement):
        """Sets the serial_number_requirement of this ComplianceAttributes.


        :param serial_number_requirement: The serial_number_requirement of this ComplianceAttributes.  # noqa: E501
        :type: RequirementLevel
        """
        if self._configuration.client_side_validation and serial_number_requirement is None:
            raise ValueError("Invalid value for `serial_number_requirement`, must not be `None`")  # noqa: E501

        self._serial_number_requirement = serial_number_requirement

    @property
    def country_of_origin_requirement(self):
        """Gets the country_of_origin_requirement of this ComplianceAttributes.  # noqa: E501


        :return: The country_of_origin_requirement of this ComplianceAttributes.  # noqa: E501
        :rtype: RequirementLevel
        """
        return self._country_of_origin_requirement

    @country_of_origin_requirement.setter
    def country_of_origin_requirement(self, country_of_origin_requirement):
        """Sets the country_of_origin_requirement of this ComplianceAttributes.


        :param country_of_origin_requirement: The country_of_origin_requirement of this ComplianceAttributes.  # noqa: E501
        :type: RequirementLevel
        """
        if self._configuration.client_side_validation and country_of_origin_requirement is None:
            raise ValueError("Invalid value for `country_of_origin_requirement`, must not be `None`")  # noqa: E501

        self._country_of_origin_requirement = country_of_origin_requirement

    @property
    def item_value_requirement(self):
        """Gets the item_value_requirement of this ComplianceAttributes.  # noqa: E501


        :return: The item_value_requirement of this ComplianceAttributes.  # noqa: E501
        :rtype: RequirementLevel
        """
        return self._item_value_requirement

    @item_value_requirement.setter
    def item_value_requirement(self, item_value_requirement):
        """Sets the item_value_requirement of this ComplianceAttributes.


        :param item_value_requirement: The item_value_requirement of this ComplianceAttributes.  # noqa: E501
        :type: RequirementLevel
        """
        if self._configuration.client_side_validation and item_value_requirement is None:
            raise ValueError("Invalid value for `item_value_requirement`, must not be `None`")  # noqa: E501

        self._item_value_requirement = item_value_requirement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComplianceAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplianceAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComplianceAttributes):
            return True

        return self.to_dict() != other.to_dict()
