# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShipLabelsInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_ids': 'List[str]',
        'courier_supported_attributes': 'CourierSupportedAttributes',
    }

    attribute_map = {
        'package_ids': 'packageIds',
        'courier_supported_attributes': 'courierSupportedAttributes',
    }

    def __init__(self, package_ids=None, courier_supported_attributes=None, _configuration=None):  # noqa: E501
        """ShipLabelsInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._package_ids = None
        self._courier_supported_attributes = None
        self.discriminator = None

        self.package_ids = package_ids
        if courier_supported_attributes is not None:
            self.courier_supported_attributes = courier_supported_attributes

    @property
    def package_ids(self):
        """Gets the package_ids of this ShipLabelsInput.  # noqa: E501

        The subset of package IDs used to generate a label.  # noqa: E501

        :return: The package_ids of this ShipLabelsInput.  # noqa: E501
        :rtype: List[str]
        """
        return self._package_ids

    @package_ids.setter
    def package_ids(self, package_ids):
        """Sets the package_ids of this ShipLabelsInput.

        The subset of package IDs used to generate a label.  # noqa: E501

        :param package_ids: The package_ids of this ShipLabelsInput.  # noqa: E501
        :type: List[str]
        """
        if self._configuration.client_side_validation and package_ids is None:
            raise ValueError("Invalid value for `package_ids`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                package_ids is not None and len(package_ids) > 50):
            raise ValueError("Invalid value for `package_ids`, number of items must be less than or equal to `50`")  # noqa: E501

        self._package_ids = package_ids

    @property
    def courier_supported_attributes(self):
        """Gets the courier_supported_attributes of this ShipLabelsInput.  # noqa: E501


        :return: The courier_supported_attributes of this ShipLabelsInput.  # noqa: E501
        :rtype: CourierSupportedAttributes
        """
        return self._courier_supported_attributes

    @courier_supported_attributes.setter
    def courier_supported_attributes(self, courier_supported_attributes):
        """Sets the courier_supported_attributes of this ShipLabelsInput.


        :param courier_supported_attributes: The courier_supported_attributes of this ShipLabelsInput.  # noqa: E501
        :type: CourierSupportedAttributes
        """

        self._courier_supported_attributes = courier_supported_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipLabelsInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipLabelsInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShipLabelsInput):
            return True

        return self.to_dict() != other.to_dict()
