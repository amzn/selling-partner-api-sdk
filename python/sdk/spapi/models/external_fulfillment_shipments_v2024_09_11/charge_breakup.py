# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ChargeBreakup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_amount': 'Amount',
        'discount_amount': 'Amount',
        'net_amount': 'Amount',
    }

    attribute_map = {
        'base_amount': 'baseAmount',
        'discount_amount': 'discountAmount',
        'net_amount': 'netAmount',
    }

    def __init__(self, base_amount=None, discount_amount=None, net_amount=None, _configuration=None):  # noqa: E501
        """ChargeBreakup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._base_amount = None
        self._discount_amount = None
        self._net_amount = None
        self.discriminator = None

        self.base_amount = base_amount
        self.discount_amount = discount_amount
        self.net_amount = net_amount

    @property
    def base_amount(self):
        """Gets the base_amount of this ChargeBreakup.  # noqa: E501


        :return: The base_amount of this ChargeBreakup.  # noqa: E501
        :rtype: Amount
        """
        return self._base_amount

    @base_amount.setter
    def base_amount(self, base_amount):
        """Sets the base_amount of this ChargeBreakup.


        :param base_amount: The base_amount of this ChargeBreakup.  # noqa: E501
        :type: Amount
        """
        if self._configuration.client_side_validation and base_amount is None:
            raise ValueError("Invalid value for `base_amount`, must not be `None`")  # noqa: E501

        self._base_amount = base_amount

    @property
    def discount_amount(self):
        """Gets the discount_amount of this ChargeBreakup.  # noqa: E501


        :return: The discount_amount of this ChargeBreakup.  # noqa: E501
        :rtype: Amount
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this ChargeBreakup.


        :param discount_amount: The discount_amount of this ChargeBreakup.  # noqa: E501
        :type: Amount
        """
        if self._configuration.client_side_validation and discount_amount is None:
            raise ValueError("Invalid value for `discount_amount`, must not be `None`")  # noqa: E501

        self._discount_amount = discount_amount

    @property
    def net_amount(self):
        """Gets the net_amount of this ChargeBreakup.  # noqa: E501


        :return: The net_amount of this ChargeBreakup.  # noqa: E501
        :rtype: Amount
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this ChargeBreakup.


        :param net_amount: The net_amount of this ChargeBreakup.  # noqa: E501
        :type: Amount
        """
        if self._configuration.client_side_validation and net_amount is None:
            raise ValueError("Invalid value for `net_amount`, must not be `None`")  # noqa: E501

        self._net_amount = net_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChargeBreakup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargeBreakup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChargeBreakup):
            return True

        return self.to_dict() != other.to_dict()
