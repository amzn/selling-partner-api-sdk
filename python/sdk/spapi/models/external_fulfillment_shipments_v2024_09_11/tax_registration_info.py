# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class TaxRegistrationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'number': 'str',
        'address': 'Address',
        'messages': 'str',
    }

    attribute_map = {
        'type': 'type',
        'number': 'number',
        'address': 'address',
        'messages': 'messages',
    }

    def __init__(self, type=None, number=None, address=None, messages=None, _configuration=None):  # noqa: E501
        """TaxRegistrationInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._number = None
        self._address = None
        self._messages = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if number is not None:
            self.number = number
        if address is not None:
            self.address = address
        if messages is not None:
            self.messages = messages

    @property
    def type(self):
        """Gets the type of this TaxRegistrationInfo.  # noqa: E501

        Tax registration type for the entity  # noqa: E501

        :return: The type of this TaxRegistrationInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaxRegistrationInfo.

        Tax registration type for the entity  # noqa: E501

        :param type: The type of this TaxRegistrationInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["VAT", "GST"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def number(self):
        """Gets the number of this TaxRegistrationInfo.  # noqa: E501

        The tax registration number for the party. For example, their VAT ID.  # noqa: E501

        :return: The number of this TaxRegistrationInfo.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TaxRegistrationInfo.

        The tax registration number for the party. For example, their VAT ID.  # noqa: E501

        :param number: The number of this TaxRegistrationInfo.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def address(self):
        """Gets the address of this TaxRegistrationInfo.  # noqa: E501


        :return: The address of this TaxRegistrationInfo.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TaxRegistrationInfo.


        :param address: The address of this TaxRegistrationInfo.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def messages(self):
        """Gets the messages of this TaxRegistrationInfo.  # noqa: E501

        Tax registration message that can be used for additional tax related details.  # noqa: E501

        :return: The messages of this TaxRegistrationInfo.  # noqa: E501
        :rtype: str
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this TaxRegistrationInfo.

        Tax registration message that can be used for additional tax related details.  # noqa: E501

        :param messages: The messages of this TaxRegistrationInfo.  # noqa: E501
        :type: str
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxRegistrationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxRegistrationInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxRegistrationInfo):
            return True

        return self.to_dict() != other.to_dict()
