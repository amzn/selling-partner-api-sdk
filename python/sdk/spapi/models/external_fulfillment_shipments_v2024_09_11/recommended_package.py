# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class RecommendedPackage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dimensions': 'PackageDimensions',
        'weight': 'Weight',
        'line_items': 'List[RecommendedPackageLineItem]',
    }

    attribute_map = {
        'dimensions': 'dimensions',
        'weight': 'weight',
        'line_items': 'lineItems',
    }

    def __init__(self, dimensions=None, weight=None, line_items=None, _configuration=None):  # noqa: E501
        """RecommendedPackage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dimensions = None
        self._weight = None
        self._line_items = None
        self.discriminator = None

        self.dimensions = dimensions
        self.weight = weight
        self.line_items = line_items

    @property
    def dimensions(self):
        """Gets the dimensions of this RecommendedPackage.  # noqa: E501


        :return: The dimensions of this RecommendedPackage.  # noqa: E501
        :rtype: PackageDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this RecommendedPackage.


        :param dimensions: The dimensions of this RecommendedPackage.  # noqa: E501
        :type: PackageDimensions
        """
        if self._configuration.client_side_validation and dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")  # noqa: E501

        self._dimensions = dimensions

    @property
    def weight(self):
        """Gets the weight of this RecommendedPackage.  # noqa: E501


        :return: The weight of this RecommendedPackage.  # noqa: E501
        :rtype: Weight
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this RecommendedPackage.


        :param weight: The weight of this RecommendedPackage.  # noqa: E501
        :type: Weight
        """
        if self._configuration.client_side_validation and weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def line_items(self):
        """Gets the line_items of this RecommendedPackage.  # noqa: E501

        A list of line items to be contained in a recommended package. This attribute is only for orders that come with specific recommendations for line-item distribution.  # noqa: E501

        :return: The line_items of this RecommendedPackage.  # noqa: E501
        :rtype: List[RecommendedPackageLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this RecommendedPackage.

        A list of line items to be contained in a recommended package. This attribute is only for orders that come with specific recommendations for line-item distribution.  # noqa: E501

        :param line_items: The line_items of this RecommendedPackage.  # noqa: E501
        :type: List[RecommendedPackageLineItem]
        """
        if self._configuration.client_side_validation and line_items is None:
            raise ValueError("Invalid value for `line_items`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                line_items is not None and len(line_items) > 50):
            raise ValueError("Invalid value for `line_items`, number of items must be less than or equal to `50`")  # noqa: E501

        self._line_items = line_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecommendedPackage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendedPackage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecommendedPackage):
            return True

        return self.to_dict() != other.to_dict()
