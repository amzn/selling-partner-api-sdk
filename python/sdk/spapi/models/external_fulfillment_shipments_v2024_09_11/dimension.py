# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Dimension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'dimension_unit': 'str',
    }

    attribute_map = {
        'value': 'value',
        'dimension_unit': 'dimensionUnit',
    }

    def __init__(self, value=None, dimension_unit=None, _configuration=None):  # noqa: E501
        """Dimension - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._value = None
        self._dimension_unit = None
        self.discriminator = None

        self.value = value
        self.dimension_unit = dimension_unit

    @property
    def value(self):
        """Gets the value of this Dimension.  # noqa: E501

        A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies.  # noqa: E501

        :return: The value of this Dimension.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Dimension.

        A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies.  # noqa: E501

        :param value: The value of this Dimension.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def dimension_unit(self):
        """Gets the dimension_unit of this Dimension.  # noqa: E501

        The unit of measurement of the dimension.  # noqa: E501

        :return: The dimension_unit of this Dimension.  # noqa: E501
        :rtype: str
        """
        return self._dimension_unit

    @dimension_unit.setter
    def dimension_unit(self, dimension_unit):
        """Sets the dimension_unit of this Dimension.

        The unit of measurement of the dimension.  # noqa: E501

        :param dimension_unit: The dimension_unit of this Dimension.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and dimension_unit is None:
            raise ValueError("Invalid value for `dimension_unit`, must not be `None`")  # noqa: E501
        allowed_values = ["CM", "M"]  # noqa: E501
        if (self._configuration.client_side_validation and
                dimension_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `dimension_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(dimension_unit, allowed_values)
            )

        self._dimension_unit = dimension_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dimension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dimension):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Dimension):
            return True

        return self.to_dict() != other.to_dict()
