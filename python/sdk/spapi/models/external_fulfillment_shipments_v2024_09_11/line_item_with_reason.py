# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class LineItemWithReason(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'line_item': 'LineItem',
        'reason': 'str',
    }

    attribute_map = {
        'line_item': 'lineItem',
        'reason': 'reason',
    }

    def __init__(self, line_item=None, reason=None, _configuration=None):  # noqa: E501
        """LineItemWithReason - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._line_item = None
        self._reason = None
        self.discriminator = None

        self.line_item = line_item
        if reason is not None:
            self.reason = reason

    @property
    def line_item(self):
        """Gets the line_item of this LineItemWithReason.  # noqa: E501


        :return: The line_item of this LineItemWithReason.  # noqa: E501
        :rtype: LineItem
        """
        return self._line_item

    @line_item.setter
    def line_item(self, line_item):
        """Sets the line_item of this LineItemWithReason.


        :param line_item: The line_item of this LineItemWithReason.  # noqa: E501
        :type: LineItem
        """
        if self._configuration.client_side_validation and line_item is None:
            raise ValueError("Invalid value for `line_item`, must not be `None`")  # noqa: E501

        self._line_item = line_item

    @property
    def reason(self):
        """Gets the reason of this LineItemWithReason.  # noqa: E501

        The reason for the rejection of the line item.  # noqa: E501

        :return: The reason of this LineItemWithReason.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this LineItemWithReason.

        The reason for the rejection of the line item.  # noqa: E501

        :param reason: The reason of this LineItemWithReason.  # noqa: E501
        :type: str
        """
        allowed_values = ["OUT_OF_STOCK", "CUSTOMER_REQUESTED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                reason not in allowed_values):
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"  # noqa: E501
                .format(reason, allowed_values)
            )

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LineItemWithReason, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineItemWithReason):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LineItemWithReason):
            return True

        return self.to_dict() != other.to_dict()
