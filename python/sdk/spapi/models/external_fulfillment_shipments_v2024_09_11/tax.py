# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Tax(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'rate': 'str',
        'charge': 'ChargeBreakup',
    }

    attribute_map = {
        'type': 'type',
        'rate': 'rate',
        'charge': 'charge',
    }

    def __init__(self, type=None, rate=None, charge=None, _configuration=None):  # noqa: E501
        """Tax - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._rate = None
        self._charge = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if rate is not None:
            self.rate = rate
        self.charge = charge

    @property
    def type(self):
        """Gets the type of this Tax.  # noqa: E501

        The type of tax.  # noqa: E501

        :return: The type of this Tax.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Tax.

        The type of tax.  # noqa: E501

        :param type: The type of this Tax.  # noqa: E501
        :type: str
        """
        allowed_values = ["VAT", "CST", "IGST", "SGST", "CGST", "UTGST", "CESS", "OTHER", "TOTAL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def rate(self):
        """Gets the rate of this Tax.  # noqa: E501

        A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies.  # noqa: E501

        :return: The rate of this Tax.  # noqa: E501
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Tax.

        A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies.  # noqa: E501

        :param rate: The rate of this Tax.  # noqa: E501
        :type: str
        """

        self._rate = rate

    @property
    def charge(self):
        """Gets the charge of this Tax.  # noqa: E501


        :return: The charge of this Tax.  # noqa: E501
        :rtype: ChargeBreakup
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this Tax.


        :param charge: The charge of this Tax.  # noqa: E501
        :type: ChargeBreakup
        """
        if self._configuration.client_side_validation and charge is None:
            raise ValueError("Invalid value for `charge`, must not be `None`")  # noqa: E501

        self._charge = charge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tax, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tax):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tax):
            return True

        return self.to_dict() != other.to_dict()
