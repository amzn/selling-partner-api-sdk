# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShipLabelsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_ship_label_list': 'List[PackageShipLabel]',
    }

    attribute_map = {
        'package_ship_label_list': 'packageShipLabelList',
    }

    def __init__(self, package_ship_label_list=None, _configuration=None):  # noqa: E501
        """ShipLabelsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._package_ship_label_list = None
        self.discriminator = None

        self.package_ship_label_list = package_ship_label_list

    @property
    def package_ship_label_list(self):
        """Gets the package_ship_label_list of this ShipLabelsResponse.  # noqa: E501

        A list of label documents for each package specified in the request. In case of partial failures when generating labels, the `isErrored` and `errorDetails` attributes detail the cause of failure.  # noqa: E501

        :return: The package_ship_label_list of this ShipLabelsResponse.  # noqa: E501
        :rtype: List[PackageShipLabel]
        """
        return self._package_ship_label_list

    @package_ship_label_list.setter
    def package_ship_label_list(self, package_ship_label_list):
        """Sets the package_ship_label_list of this ShipLabelsResponse.

        A list of label documents for each package specified in the request. In case of partial failures when generating labels, the `isErrored` and `errorDetails` attributes detail the cause of failure.  # noqa: E501

        :param package_ship_label_list: The package_ship_label_list of this ShipLabelsResponse.  # noqa: E501
        :type: List[PackageShipLabel]
        """
        if self._configuration.client_side_validation and package_ship_label_list is None:
            raise ValueError("Invalid value for `package_ship_label_list`, must not be `None`")  # noqa: E501

        self._package_ship_label_list = package_ship_label_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipLabelsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipLabelsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShipLabelsResponse):
            return True

        return self.to_dict() != other.to_dict()
