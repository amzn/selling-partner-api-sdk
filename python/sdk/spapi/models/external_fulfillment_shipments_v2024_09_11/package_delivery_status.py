# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PackageDeliveryStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'PackageStatus',
        'sub_status': 'PackageSubStatus',
        'reason': 'str',
    }

    attribute_map = {
        'status': 'status',
        'sub_status': 'subStatus',
        'reason': 'reason',
    }

    def __init__(self, status=None, sub_status=None, reason=None, _configuration=None):  # noqa: E501
        """PackageDeliveryStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._sub_status = None
        self._reason = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if sub_status is not None:
            self.sub_status = sub_status
        if reason is not None:
            self.reason = reason

    @property
    def status(self):
        """Gets the status of this PackageDeliveryStatus.  # noqa: E501


        :return: The status of this PackageDeliveryStatus.  # noqa: E501
        :rtype: PackageStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PackageDeliveryStatus.


        :param status: The status of this PackageDeliveryStatus.  # noqa: E501
        :type: PackageStatus
        """

        self._status = status

    @property
    def sub_status(self):
        """Gets the sub_status of this PackageDeliveryStatus.  # noqa: E501


        :return: The sub_status of this PackageDeliveryStatus.  # noqa: E501
        :rtype: PackageSubStatus
        """
        return self._sub_status

    @sub_status.setter
    def sub_status(self, sub_status):
        """Sets the sub_status of this PackageDeliveryStatus.


        :param sub_status: The sub_status of this PackageDeliveryStatus.  # noqa: E501
        :type: PackageSubStatus
        """

        self._sub_status = sub_status

    @property
    def reason(self):
        """Gets the reason of this PackageDeliveryStatus.  # noqa: E501

        The reason for the sub-status.  # noqa: E501

        :return: The reason of this PackageDeliveryStatus.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this PackageDeliveryStatus.

        The reason for the sub-status.  # noqa: E501

        :param reason: The reason of this PackageDeliveryStatus.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                reason is not None and len(reason) > 128):
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `128`")  # noqa: E501

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageDeliveryStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageDeliveryStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageDeliveryStatus):
            return True

        return self.to_dict() != other.to_dict()
