# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class TimeWindow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'int',
        'end_time': 'int',
        'handover_method': 'str',
    }

    attribute_map = {
        'start_time': 'startTime',
        'end_time': 'endTime',
        'handover_method': 'handoverMethod',
    }

    def __init__(self, start_time=None, end_time=None, handover_method=None, _configuration=None):  # noqa: E501
        """TimeWindow - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._start_time = None
        self._end_time = None
        self._handover_method = None
        self.discriminator = None

        self.start_time = start_time
        self.end_time = end_time
        if handover_method is not None:
            self.handover_method = handover_method

    @property
    def start_time(self):
        """Gets the start_time of this TimeWindow.  # noqa: E501

        The start time of the window.  # noqa: E501

        :return: The start_time of this TimeWindow.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TimeWindow.

        The start time of the window.  # noqa: E501

        :param start_time: The start_time of this TimeWindow.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TimeWindow.  # noqa: E501

        The end time of the window.  # noqa: E501

        :return: The end_time of this TimeWindow.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TimeWindow.

        The end time of the window.  # noqa: E501

        :param end_time: The end_time of this TimeWindow.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def handover_method(self):
        """Gets the handover_method of this TimeWindow.  # noqa: E501

        Whether the seller picks up from Amazon Logistics or drops off to Amazon Logistics.  # noqa: E501

        :return: The handover_method of this TimeWindow.  # noqa: E501
        :rtype: str
        """
        return self._handover_method

    @handover_method.setter
    def handover_method(self, handover_method):
        """Sets the handover_method of this TimeWindow.

        Whether the seller picks up from Amazon Logistics or drops off to Amazon Logistics.  # noqa: E501

        :param handover_method: The handover_method of this TimeWindow.  # noqa: E501
        :type: str
        """
        allowed_values = ["PICKUP", "DROPOFF"]  # noqa: E501
        if (self._configuration.client_side_validation and
                handover_method not in allowed_values):
            raise ValueError(
                "Invalid value for `handover_method` ({0}), must be one of {1}"  # noqa: E501
                .format(handover_method, allowed_values)
            )

        self._handover_method = handover_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeWindow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeWindow):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeWindow):
            return True

        return self.to_dict() != other.to_dict()
