# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PartyIdentificationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'party_id': 'str',
        'party_type': 'str',
        'address': 'Address',
        'tax_info': 'TaxRegistrationInfo',
    }

    attribute_map = {
        'party_id': 'partyId',
        'party_type': 'partyType',
        'address': 'address',
        'tax_info': 'taxInfo',
    }

    def __init__(self, party_id=None, party_type=None, address=None, tax_info=None, _configuration=None):  # noqa: E501
        """PartyIdentificationInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._party_id = None
        self._party_type = None
        self._address = None
        self._tax_info = None
        self.discriminator = None

        self.party_id = party_id
        self.party_type = party_type
        if address is not None:
            self.address = address
        if tax_info is not None:
            self.tax_info = tax_info

    @property
    def party_id(self):
        """Gets the party_id of this PartyIdentificationInfo.  # noqa: E501

        Assigned identification for the party. For example, a warehouse code or vendor code.  # noqa: E501

        :return: The party_id of this PartyIdentificationInfo.  # noqa: E501
        :rtype: str
        """
        return self._party_id

    @party_id.setter
    def party_id(self, party_id):
        """Sets the party_id of this PartyIdentificationInfo.

        Assigned identification for the party. For example, a warehouse code or vendor code.  # noqa: E501

        :param party_id: The party_id of this PartyIdentificationInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and party_id is None:
            raise ValueError("Invalid value for `party_id`, must not be `None`")  # noqa: E501

        self._party_id = party_id

    @property
    def party_type(self):
        """Gets the party_type of this PartyIdentificationInfo.  # noqa: E501

        Assigned identification for the party. For example, a warehouse code or vendor code.  # noqa: E501

        :return: The party_type of this PartyIdentificationInfo.  # noqa: E501
        :rtype: str
        """
        return self._party_type

    @party_type.setter
    def party_type(self, party_type):
        """Sets the party_type of this PartyIdentificationInfo.

        Assigned identification for the party. For example, a warehouse code or vendor code.  # noqa: E501

        :param party_type: The party_type of this PartyIdentificationInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and party_type is None:
            raise ValueError("Invalid value for `party_type`, must not be `None`")  # noqa: E501
        allowed_values = ["BILL_TO_PARTY", "SHIP_TO_PARTY", "SHIP_FROM_PARTY", "SELLING_PARTY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                party_type not in allowed_values):
            raise ValueError(
                "Invalid value for `party_type` ({0}), must be one of {1}"  # noqa: E501
                .format(party_type, allowed_values)
            )

        self._party_type = party_type

    @property
    def address(self):
        """Gets the address of this PartyIdentificationInfo.  # noqa: E501


        :return: The address of this PartyIdentificationInfo.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PartyIdentificationInfo.


        :param address: The address of this PartyIdentificationInfo.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def tax_info(self):
        """Gets the tax_info of this PartyIdentificationInfo.  # noqa: E501


        :return: The tax_info of this PartyIdentificationInfo.  # noqa: E501
        :rtype: TaxRegistrationInfo
        """
        return self._tax_info

    @tax_info.setter
    def tax_info(self, tax_info):
        """Sets the tax_info of this PartyIdentificationInfo.


        :param tax_info: The tax_info of this PartyIdentificationInfo.  # noqa: E501
        :type: TaxRegistrationInfo
        """

        self._tax_info = tax_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartyIdentificationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartyIdentificationInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PartyIdentificationInfo):
            return True

        return self.to_dict() != other.to_dict()
