# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Shipments Processing

    You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon's external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShipLabelMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipping_option_id': 'str',
        'carrier_name': 'str',
        'tracking_id': 'str',
        'pickup_window': 'TimeWindow',
        'time_slot': 'TimeWindow',
    }

    attribute_map = {
        'shipping_option_id': 'shippingOptionId',
        'carrier_name': 'carrierName',
        'tracking_id': 'trackingId',
        'pickup_window': 'pickupWindow',
        'time_slot': 'timeSlot',
    }

    def __init__(self, shipping_option_id=None, carrier_name=None, tracking_id=None, pickup_window=None, time_slot=None, _configuration=None):  # noqa: E501
        """ShipLabelMetadata - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._shipping_option_id = None
        self._carrier_name = None
        self._tracking_id = None
        self._pickup_window = None
        self._time_slot = None
        self.discriminator = None

        if shipping_option_id is not None:
            self.shipping_option_id = shipping_option_id
        self.carrier_name = carrier_name
        self.tracking_id = tracking_id
        if pickup_window is not None:
            self.pickup_window = pickup_window
        if time_slot is not None:
            self.time_slot = time_slot

    @property
    def shipping_option_id(self):
        """Gets the shipping_option_id of this ShipLabelMetadata.  # noqa: E501

        The selected slot for the ship label.  # noqa: E501

        :return: The shipping_option_id of this ShipLabelMetadata.  # noqa: E501
        :rtype: str
        """
        return self._shipping_option_id

    @shipping_option_id.setter
    def shipping_option_id(self, shipping_option_id):
        """Sets the shipping_option_id of this ShipLabelMetadata.

        The selected slot for the ship label.  # noqa: E501

        :param shipping_option_id: The shipping_option_id of this ShipLabelMetadata.  # noqa: E501
        :type: str
        """

        self._shipping_option_id = shipping_option_id

    @property
    def carrier_name(self):
        """Gets the carrier_name of this ShipLabelMetadata.  # noqa: E501

        The name of the carrier.  # noqa: E501

        :return: The carrier_name of this ShipLabelMetadata.  # noqa: E501
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this ShipLabelMetadata.

        The name of the carrier.  # noqa: E501

        :param carrier_name: The carrier_name of this ShipLabelMetadata.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and carrier_name is None:
            raise ValueError("Invalid value for `carrier_name`, must not be `None`")  # noqa: E501

        self._carrier_name = carrier_name

    @property
    def tracking_id(self):
        """Gets the tracking_id of this ShipLabelMetadata.  # noqa: E501

        The tracking number of the package.  # noqa: E501

        :return: The tracking_id of this ShipLabelMetadata.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this ShipLabelMetadata.

        The tracking number of the package.  # noqa: E501

        :param tracking_id: The tracking_id of this ShipLabelMetadata.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tracking_id is None:
            raise ValueError("Invalid value for `tracking_id`, must not be `None`")  # noqa: E501

        self._tracking_id = tracking_id

    @property
    def pickup_window(self):
        """Gets the pickup_window of this ShipLabelMetadata.  # noqa: E501


        :return: The pickup_window of this ShipLabelMetadata.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._pickup_window

    @pickup_window.setter
    def pickup_window(self, pickup_window):
        """Sets the pickup_window of this ShipLabelMetadata.


        :param pickup_window: The pickup_window of this ShipLabelMetadata.  # noqa: E501
        :type: TimeWindow
        """

        self._pickup_window = pickup_window

    @property
    def time_slot(self):
        """Gets the time_slot of this ShipLabelMetadata.  # noqa: E501


        :return: The time_slot of this ShipLabelMetadata.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._time_slot

    @time_slot.setter
    def time_slot(self, time_slot):
        """Sets the time_slot of this ShipLabelMetadata.


        :param time_slot: The time_slot of this ShipLabelMetadata.  # noqa: E501
        :type: TimeWindow
        """

        self._time_slot = time_slot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipLabelMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipLabelMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShipLabelMetadata):
            return True

        return self.to_dict() != other.to_dict()
