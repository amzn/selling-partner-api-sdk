# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Return Item Processing

    You can use the Amazon External Fulfillment Return Item Processing API to retrieve, track, and process return items through Amazon's External Fulfillment returns management system.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ReturnShippingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery_date_time': 'str',
        'pickup_date_time': 'str',
        'forward_tracking_info': 'TrackingInfo',
        'reverse_tracking_info': 'TrackingInfo',
    }

    attribute_map = {
        'delivery_date_time': 'deliveryDateTime',
        'pickup_date_time': 'pickupDateTime',
        'forward_tracking_info': 'forwardTrackingInfo',
        'reverse_tracking_info': 'reverseTrackingInfo',
    }

    def __init__(self, delivery_date_time=None, pickup_date_time=None, forward_tracking_info=None, reverse_tracking_info=None, _configuration=None):  # noqa: E501
        """ReturnShippingInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._delivery_date_time = None
        self._pickup_date_time = None
        self._forward_tracking_info = None
        self._reverse_tracking_info = None
        self.discriminator = None

        if delivery_date_time is not None:
            self.delivery_date_time = delivery_date_time
        if pickup_date_time is not None:
            self.pickup_date_time = pickup_date_time
        if forward_tracking_info is not None:
            self.forward_tracking_info = forward_tracking_info
        if reverse_tracking_info is not None:
            self.reverse_tracking_info = reverse_tracking_info

    @property
    def delivery_date_time(self):
        """Gets the delivery_date_time of this ReturnShippingInfo.  # noqa: E501

        A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  # noqa: E501

        :return: The delivery_date_time of this ReturnShippingInfo.  # noqa: E501
        :rtype: str
        """
        return self._delivery_date_time

    @delivery_date_time.setter
    def delivery_date_time(self, delivery_date_time):
        """Sets the delivery_date_time of this ReturnShippingInfo.

        A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  # noqa: E501

        :param delivery_date_time: The delivery_date_time of this ReturnShippingInfo.  # noqa: E501
        :type: str
        """

        self._delivery_date_time = delivery_date_time

    @property
    def pickup_date_time(self):
        """Gets the pickup_date_time of this ReturnShippingInfo.  # noqa: E501

        A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  # noqa: E501

        :return: The pickup_date_time of this ReturnShippingInfo.  # noqa: E501
        :rtype: str
        """
        return self._pickup_date_time

    @pickup_date_time.setter
    def pickup_date_time(self, pickup_date_time):
        """Sets the pickup_date_time of this ReturnShippingInfo.

        A date and time in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  # noqa: E501

        :param pickup_date_time: The pickup_date_time of this ReturnShippingInfo.  # noqa: E501
        :type: str
        """

        self._pickup_date_time = pickup_date_time

    @property
    def forward_tracking_info(self):
        """Gets the forward_tracking_info of this ReturnShippingInfo.  # noqa: E501


        :return: The forward_tracking_info of this ReturnShippingInfo.  # noqa: E501
        :rtype: TrackingInfo
        """
        return self._forward_tracking_info

    @forward_tracking_info.setter
    def forward_tracking_info(self, forward_tracking_info):
        """Sets the forward_tracking_info of this ReturnShippingInfo.


        :param forward_tracking_info: The forward_tracking_info of this ReturnShippingInfo.  # noqa: E501
        :type: TrackingInfo
        """

        self._forward_tracking_info = forward_tracking_info

    @property
    def reverse_tracking_info(self):
        """Gets the reverse_tracking_info of this ReturnShippingInfo.  # noqa: E501


        :return: The reverse_tracking_info of this ReturnShippingInfo.  # noqa: E501
        :rtype: TrackingInfo
        """
        return self._reverse_tracking_info

    @reverse_tracking_info.setter
    def reverse_tracking_info(self, reverse_tracking_info):
        """Sets the reverse_tracking_info of this ReturnShippingInfo.


        :param reverse_tracking_info: The reverse_tracking_info of this ReturnShippingInfo.  # noqa: E501
        :type: TrackingInfo
        """

        self._reverse_tracking_info = reverse_tracking_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReturnShippingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReturnShippingInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReturnShippingInfo):
            return True

        return self.to_dict() != other.to_dict()
