# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Return Item Processing

    You can use the Amazon External Fulfillment Return Item Processing API to retrieve, track, and process return items through Amazon's External Fulfillment returns management system.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ReplanningDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'previous_tracking_info': 'List[TrackingInfo]',
    }

    attribute_map = {
        'previous_tracking_info': 'previousTrackingInfo',
    }

    def __init__(self, previous_tracking_info=None, _configuration=None):  # noqa: E501
        """ReplanningDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._previous_tracking_info = None
        self.discriminator = None

        if previous_tracking_info is not None:
            self.previous_tracking_info = previous_tracking_info

    @property
    def previous_tracking_info(self):
        """Gets the previous_tracking_info of this ReplanningDetails.  # noqa: E501

        A list of all the previous tracking information for the return.  # noqa: E501

        :return: The previous_tracking_info of this ReplanningDetails.  # noqa: E501
        :rtype: List[TrackingInfo]
        """
        return self._previous_tracking_info

    @previous_tracking_info.setter
    def previous_tracking_info(self, previous_tracking_info):
        """Sets the previous_tracking_info of this ReplanningDetails.

        A list of all the previous tracking information for the return.  # noqa: E501

        :param previous_tracking_info: The previous_tracking_info of this ReplanningDetails.  # noqa: E501
        :type: List[TrackingInfo]
        """
        if (self._configuration.client_side_validation and
                previous_tracking_info is not None and len(previous_tracking_info) < 0):
            raise ValueError("Invalid value for `previous_tracking_info`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._previous_tracking_info = previous_tracking_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplanningDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplanningDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplanningDetails):
            return True

        return self.to_dict() != other.to_dict()
