# coding: utf-8

"""
    The Selling Partner API for Amazon External Fulfillment Return Item Processing

    You can use the Amazon External Fulfillment Return Item Processing API to retrieve, track, and process return items through Amazon's External Fulfillment returns management system.

    The version of the OpenAPI document: 2024-09-11
    Contact: marketplaceapitest@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class OtpDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'otp': 'str',
        'valid_till': 'int',
    }

    attribute_map = {
        'otp': 'otp',
        'valid_till': 'validTill',
    }

    def __init__(self, otp=None, valid_till=None, _configuration=None):  # noqa: E501
        """OtpDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._otp = None
        self._valid_till = None
        self.discriminator = None

        self.otp = otp
        self.valid_till = valid_till

    @property
    def otp(self):
        """Gets the otp of this OtpDetails.  # noqa: E501

        One-time password to validate the return delivered to the seller.  # noqa: E501

        :return: The otp of this OtpDetails.  # noqa: E501
        :rtype: str
        """
        return self._otp

    @otp.setter
    def otp(self, otp):
        """Sets the otp of this OtpDetails.

        One-time password to validate the return delivered to the seller.  # noqa: E501

        :param otp: The otp of this OtpDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and otp is None:
            raise ValueError("Invalid value for `otp`, must not be `None`")  # noqa: E501

        self._otp = otp

    @property
    def valid_till(self):
        """Gets the valid_till of this OtpDetails.  # noqa: E501

        The UNIX timestamp of when the verification code expires.  # noqa: E501

        :return: The valid_till of this OtpDetails.  # noqa: E501
        :rtype: int
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this OtpDetails.

        The UNIX timestamp of when the verification code expires.  # noqa: E501

        :param valid_till: The valid_till of this OtpDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and valid_till is None:
            raise ValueError("Invalid value for `valid_till`, must not be `None`")  # noqa: E501

        self._valid_till = valid_till

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OtpDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OtpDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OtpDetails):
            return True

        return self.to_dict() != other.to_dict()
