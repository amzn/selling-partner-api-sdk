# coding: utf-8

from __future__ import absolute_import

import unittest
import requests

from spapi.auth.credentials import SPAPIConfig
from spapi.client import SPAPIClient
from {{packageName}}.{{apiPackage}}.{{classVarName}} import {{classname}}

import {{packageName}}.{{modelPackage}} as models

class {{#operations}}Test{{classname}}(unittest.TestCase):
    """{{classname}} unit test stubs"""

    def setUp(self):
        # Tests Mock Server
        self.mock_server_endpoint = "http://localhost:3000"
        self.mock_server_endpoint_oauth = "http://localhost:3000/auth/o2/token"
        config = SPAPIConfig(
            client_id="clientId",
            client_secret="clientSecret",
            refresh_token="refreshToken",
            region="NA",
            scope = None
        )
        client = SPAPIClient(config, self.mock_server_endpoint_oauth, self.mock_server_endpoint)
        self.api = SellersApi(client.api_client)

    def tearDown(self):
        pass

   {{#operation}}
    def test_{{operationId}}(self):
        self.instruct_backend_mock("{{operationId}}", "{{responses.0.code}}")
        response = self.api.{{operationId}}_with_http_info({{#allParams}}{{#required}}{{paramName}}{{/required}}{{^required}}null{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        self.assertEqual({{responses.0.code}}, response[1])
        self.assert_valid_response_payload({{responses.0.code}}, response[0])
        pass
   {{/operation}}
{{/operations}}

    def instruct_backend_mock(self, response: str, code: str) -> None:
        url = f"{self.mock_server_endpoint}/response/{response}/code/{code}"
        requests.post(url)

    def assert_valid_response_payload(self, status_code: int, body: any) -> None:
        if status_code != 204:
            self.assertIsNotNone(body)

if __name__ == '__main__':
    unittest.main()